// Enum Engine.ETextGender
enum class ETextGender : uint8_t {
	Masculine = 0,
	Feminine = 1,
	Neuter = 2,
	ETextGender_MAX = 3,
};

// Enum Engine.EFormatArgumentType
enum class EFormatArgumentType : uint8_t {
	Int = 0,
	UInt = 1,
	Float = 2,
	Double = 3,
	Text = 4,
	Gender = 5,
	EFormatArgumentType_MAX = 6,
};

// Enum Engine.EEndPlayReason
enum class EEndPlayReason : uint8_t {
	Destroyed = 0,
	LevelTransition = 1,
	EndPlayInEditor = 2,
	RemovedFromWorld = 3,
	Quit = 4,
	EEndPlayReason_MAX = 5,
};

// Enum Engine.ETickingGroup
enum class ETickingGroup : uint8_t {
	TG_PrePhysics = 0,
	TG_StartPhysics = 1,
	TG_DuringPhysics = 2,
	TG_EndPhysics = 3,
	TG_PostPhysics = 4,
	TG_PostUpdateWork = 5,
	TG_LastDemotable = 6,
	TG_NewlySpawned = 7,
	TG_MAX = 8,
};

// Enum Engine.EComponentCreationMethod
enum class EComponentCreationMethod : uint8_t {
	Native = 0,
	SimpleConstructionScript = 1,
	UserConstructionScript = 2,
	Instance = 3,
	EComponentCreationMethod_MAX = 4,
};

// Enum Engine.ETemperatureSeverityType
enum class ETemperatureSeverityType : uint8_t {
	Unknown = 0,
	Good = 1,
	Bad = 2,
	Serious = 3,
	Critical = 4,
	NumSeverities = 5,
	ETemperatureSeverityType_MAX = 6,
};

// Enum Engine.EPlaneConstraintAxisSetting
enum class EPlaneConstraintAxisSetting : uint8_t {
	Custom = 0,
	X = 1,
	Y = 2,
	Z = 3,
	UseGlobalPhysicsSetting = 4,
	EPlaneConstraintAxisSetting_MAX = 5,
};

// Enum Engine.EInterpToBehaviourType
enum class EInterpToBehaviourType : uint8_t {
	OneShot = 0,
	OneShot_Reverse = 1,
	Loop_Reset = 2,
	PingPong = 3,
	EInterpToBehaviourType_MAX = 4,
};

// Enum Engine.ETeleportType
enum class ETeleportType : uint8_t {
	None = 0,
	TeleportPhysics = 1,
	ResetPhysics = 2,
	ETeleportType_MAX = 3,
};

// Enum Engine.EPlatformInterfaceDataType
enum class EPlatformInterfaceDataType : uint8_t {
	PIDT_None = 0,
	PIDT_Int = 1,
	PIDT_Float = 2,
	PIDT_String = 3,
	PIDT_Object = 4,
	PIDT_Custom = 5,
	PIDT_MAX = 6,
};

// Enum Engine.EMovementMode
enum class EMovementMode : uint8_t {
	MOVE_None = 0,
	MOVE_Walking = 1,
	MOVE_NavWalking = 2,
	MOVE_Falling = 3,
	MOVE_Swimming = 4,
	MOVE_Flying = 5,
	MOVE_Custom = 6,
	MOVE_MAX = 7,
};

// Enum Engine.ENetworkFailure
enum class ENetworkFailure : uint8_t {
	NetDriverAlreadyExists = 0,
	NetDriverCreateFailure = 1,
	NetDriverListenFailure = 2,
	ConnectionLost = 3,
	ConnectionTimeout = 4,
	FailureReceived = 5,
	OutdatedClient = 6,
	OutdatedServer = 7,
	PendingConnectionFailure = 8,
	NetGuidMismatch = 9,
	NetChecksumMismatch = 10,
	ENetworkFailure_MAX = 11,
};

// Enum Engine.ETravelFailure
enum class ETravelFailure : uint8_t {
	NoLevel = 0,
	LoadMapFailure = 1,
	InvalidURL = 2,
	PackageMissing = 3,
	PackageVersion = 4,
	NoDownload = 5,
	TravelFailure = 6,
	CheatCommands = 7,
	PendingNetGameCreateFailure = 8,
	CloudSaveFailure = 9,
	ServerTravelFailure = 10,
	ClientTravelFailure = 11,
	ETravelFailure_MAX = 12,
};

// Enum Engine.EScreenOrientation
enum class EScreenOrientation : uint8_t {
	Unknown = 0,
	Portrait = 1,
	PortraitUpsideDown = 2,
	LandscapeLeft = 3,
	LandscapeRight = 4,
	FaceUp = 5,
	FaceDown = 6,
	EScreenOrientation_MAX = 7,
};

// Enum Engine.EApplicationState
enum class EApplicationState : uint8_t {
	Unknown = 0,
	Inactive = 1,
	Background = 2,
	Active = 3,
	EApplicationState_MAX = 4,
};

// Enum Engine.EObjectTypeQuery
enum class EObjectTypeQuery : uint8_t {
	ObjectTypeQuery1 = 0,
	ObjectTypeQuery2 = 1,
	ObjectTypeQuery3 = 2,
	ObjectTypeQuery4 = 3,
	ObjectTypeQuery5 = 4,
	ObjectTypeQuery6 = 5,
	ObjectTypeQuery7 = 6,
	ObjectTypeQuery8 = 7,
	ObjectTypeQuery9 = 8,
	ObjectTypeQuery10 = 9,
	ObjectTypeQuery11 = 10,
	ObjectTypeQuery12 = 11,
	ObjectTypeQuery13 = 12,
	ObjectTypeQuery14 = 13,
	ObjectTypeQuery15 = 14,
	ObjectTypeQuery16 = 15,
	ObjectTypeQuery17 = 16,
	ObjectTypeQuery18 = 17,
	ObjectTypeQuery19 = 18,
	ObjectTypeQuery20 = 19,
	ObjectTypeQuery21 = 20,
	ObjectTypeQuery22 = 21,
	ObjectTypeQuery23 = 22,
	ObjectTypeQuery24 = 23,
	ObjectTypeQuery25 = 24,
	ObjectTypeQuery26 = 25,
	ObjectTypeQuery27 = 26,
	ObjectTypeQuery28 = 27,
	ObjectTypeQuery29 = 28,
	ObjectTypeQuery30 = 29,
	ObjectTypeQuery31 = 30,
	ObjectTypeQuery32 = 31,
	ObjectTypeQuery_MAX = 32,
	EObjectTypeQuery_MAX = 33,
};

// Enum Engine.EDrawDebugTrace
enum class EDrawDebugTrace : uint8_t {
	None = 0,
	ForOneFrame = 1,
	ForDuration = 2,
	Persistent = 3,
	EDrawDebugTrace_MAX = 4,
};

// Enum Engine.ETraceTypeQuery
enum class ETraceTypeQuery : uint8_t {
	TraceTypeQuery1 = 0,
	TraceTypeQuery2 = 1,
	TraceTypeQuery3 = 2,
	TraceTypeQuery4 = 3,
	TraceTypeQuery5 = 4,
	TraceTypeQuery6 = 5,
	TraceTypeQuery7 = 6,
	TraceTypeQuery8 = 7,
	TraceTypeQuery9 = 8,
	TraceTypeQuery10 = 9,
	TraceTypeQuery11 = 10,
	TraceTypeQuery12 = 11,
	TraceTypeQuery13 = 12,
	TraceTypeQuery14 = 13,
	TraceTypeQuery15 = 14,
	TraceTypeQuery16 = 15,
	TraceTypeQuery17 = 16,
	TraceTypeQuery18 = 17,
	TraceTypeQuery19 = 18,
	TraceTypeQuery20 = 19,
	TraceTypeQuery21 = 20,
	TraceTypeQuery22 = 21,
	TraceTypeQuery23 = 22,
	TraceTypeQuery24 = 23,
	TraceTypeQuery25 = 24,
	TraceTypeQuery26 = 25,
	TraceTypeQuery27 = 26,
	TraceTypeQuery28 = 27,
	TraceTypeQuery29 = 28,
	TraceTypeQuery30 = 29,
	TraceTypeQuery31 = 30,
	TraceTypeQuery32 = 31,
	TraceTypeQuery_MAX = 32,
	ETraceTypeQuery_MAX = 33,
};

// Enum Engine.EMoveComponentAction
enum class EMoveComponentAction : uint8_t {
	Move = 0,
	Stop = 1,
	Return = 2,
	EMoveComponentAction_MAX = 3,
};

// Enum Engine.EQuitPreference
enum class EQuitPreference : uint8_t {
	Quit = 0,
	Background = 1,
	EQuitPreference_MAX = 2,
};

// Enum Engine.ERelativeTransformSpace
enum class ERelativeTransformSpace : uint8_t {
	RTS_World = 0,
	RTS_Actor = 1,
	RTS_Component = 2,
	RTS_ParentBoneSpace = 3,
	RTS_MAX = 4,
};

// Enum Engine.EAttachLocation
enum class EAttachLocation : uint8_t {
	KeepRelativeOffset = 0,
	KeepWorldPosition = 1,
	SnapToTarget = 2,
	SnapToTargetIncludingScale = 3,
	EAttachLocation_MAX = 4,
};

// Enum Engine.EAttachmentRule
enum class EAttachmentRule : uint8_t {
	KeepRelative = 0,
	KeepWorld = 1,
	SnapToTarget = 2,
	EAttachmentRule_MAX = 3,
};

// Enum Engine.EDetachmentRule
enum class EDetachmentRule : uint8_t {
	KeepRelative = 0,
	KeepWorld = 1,
	EDetachmentRule_MAX = 2,
};

// Enum Engine.EComponentMobility
enum class EComponentMobility : uint8_t {
	Static = 0,
	Stationary = 1,
	Movable = 2,
	EComponentMobility_MAX = 3,
};

// Enum Engine.EDetailMode
enum class EDetailMode : uint8_t {
	DM_Low = 0,
	DM_Medium = 1,
	DM_High = 2,
	DM_MAX = 3,
};

// Enum Engine.EMouseLockMode
enum class EMouseLockMode : uint8_t {
	DoNotLock = 0,
	LockOnCapture = 1,
	LockAlways = 2,
	LockInFullscreen = 3,
	EMouseLockMode_MAX = 4,
};

// Enum Engine.EWindowTitleBarMode
enum class EWindowTitleBarMode : uint8_t {
	Overlay = 0,
	VerticalBox = 1,
	EWindowTitleBarMode_MAX = 2,
};

// Enum Engine.EActorUpdateOverlapsMethod
enum class EActorUpdateOverlapsMethod : uint8_t {
	UseConfigDefault = 0,
	AlwaysUpdate = 1,
	OnlyUpdateMovable = 2,
	NeverUpdate = 3,
	EActorUpdateOverlapsMethod_MAX = 4,
};

// Enum Engine.EAlphaBlendOption
enum class EAlphaBlendOption : uint8_t {
	Linear = 0,
	Cubic = 1,
	HermiteCubic = 2,
	Sinusoidal = 3,
	QuadraticInOut = 4,
	CubicInOut = 5,
	QuarticInOut = 6,
	QuinticInOut = 7,
	CircularIn = 8,
	CircularOut = 9,
	CircularInOut = 10,
	ExpIn = 11,
	ExpOut = 12,
	ExpInOut = 13,
	Custom = 14,
	EAlphaBlendOption_MAX = 15,
};

// Enum Engine.EAnimGroupRole
enum class EAnimGroupRole : uint8_t {
	CanBeLeader = 0,
	AlwaysFollower = 1,
	AlwaysLeader = 2,
	TransitionLeader = 3,
	TransitionFollower = 4,
	EAnimGroupRole_MAX = 5,
};

// Enum Engine.EPreviewAnimationBlueprintApplicationMethod
enum class EPreviewAnimationBlueprintApplicationMethod : uint8_t {
	LinkedLayers = 0,
	LinkedAnimGraph = 1,
	EPreviewAnimationBlueprintApplicationMethod_MAX = 2,
};

// Enum Engine.AnimationKeyFormat
enum class AnimationKeyFormat : uint8_t {
	AKF_ConstantKeyLerp = 0,
	AKF_VariableKeyLerp = 1,
	AKF_PerTrackCompression = 2,
	AKF_MAX = 3,
};

// Enum Engine.ERawCurveTrackTypes
enum class ERawCurveTrackTypes : uint8_t {
	RCT_Float = 0,
	RCT_Vector = 1,
	RCT_Transform = 2,
	RCT_MAX = 3,
};

// Enum Engine.EAnimAssetCurveFlags
enum class EAnimAssetCurveFlags : uint8_t {
	AACF_NONE = 0,
	AACF_DriveMorphTarget_DEPRECATED = 1,
	AACF_DriveAttribute_DEPRECATED = 2,
	AACF_Editable = 4,
	AACF_DriveMaterial_DEPRECATED = 8,
	AACF_Metadata = 16,
	AACF_DriveTrack = 32,
	AACF_Disabled = 64,
	AACF_MAX = 65,
};

// Enum Engine.AnimationCompressionFormat
enum class AnimationCompressionFormat : uint8_t {
	ACF_None = 0,
	ACF_Float96NoW = 1,
	ACF_Fixed48NoW = 2,
	ACF_IntervalFixed32NoW = 3,
	ACF_Fixed32NoW = 4,
	ACF_Float32NoW = 5,
	ACF_Identity = 6,
	ACF_MAX = 7,
};

// Enum Engine.EAdditiveBasePoseType
enum class EAdditiveBasePoseType : uint8_t {
	ABPT_None = 0,
	ABPT_RefPose = 1,
	ABPT_AnimScaled = 2,
	ABPT_AnimFrame = 3,
	ABPT_MAX = 4,
};

// Enum Engine.ERootMotionMode
enum class ERootMotionMode : uint8_t {
	NoRootMotionExtraction = 0,
	IgnoreRootMotion = 1,
	RootMotionFromEverything = 2,
	RootMotionFromMontagesOnly = 3,
	ERootMotionMode_MAX = 4,
};

// Enum Engine.ERootMotionRootLock
enum class ERootMotionRootLock : uint8_t {
	RefPose = 0,
	AnimFirstFrame = 1,
	Zero = 2,
	ERootMotionRootLock_MAX = 3,
};

// Enum Engine.EMontagePlayReturnType
enum class EMontagePlayReturnType : uint8_t {
	MontageLength = 0,
	Duration = 1,
	EMontagePlayReturnType_MAX = 2,
};

// Enum Engine.EDrawDebugItemType
enum class EDrawDebugItemType : uint8_t {
	DirectionalArrow = 0,
	Sphere = 1,
	Line = 2,
	OnScreenMessage = 3,
	CoordinateSystem = 4,
	EDrawDebugItemType_MAX = 5,
};

// Enum Engine.EAnimLinkMethod
enum class EAnimLinkMethod : uint8_t {
	Absolute = 0,
	Relative = 1,
	Proportional = 2,
	EAnimLinkMethod_MAX = 3,
};

// Enum Engine.EMontageSubStepResult
enum class EMontageSubStepResult : uint8_t {
	Moved = 0,
	NotMoved = 1,
	InvalidSection = 2,
	InvalidMontage = 3,
	EMontageSubStepResult_MAX = 4,
};

// Enum Engine.EAnimNotifyEventType
enum class EAnimNotifyEventType : uint8_t {
	Begin = 0,
	End = 1,
	EAnimNotifyEventType_MAX = 2,
};

// Enum Engine.EInertializationSpace
enum class EInertializationSpace : uint8_t {
	Default = 0,
	WorldSpace = 1,
	WorldRotation = 2,
	EInertializationSpace_MAX = 3,
};

// Enum Engine.EInertializationBoneState
enum class EInertializationBoneState : uint8_t {
	Invalid = 0,
	Valid = 1,
	Excluded = 2,
	EInertializationBoneState_MAX = 3,
};

// Enum Engine.EInertializationState
enum class EInertializationState : uint8_t {
	Inactive = 0,
	Pending = 1,
	Active = 2,
	EInertializationState_MAX = 3,
};

// Enum Engine.EEvaluatorMode
enum class EEvaluatorMode : uint8_t {
	EM_Standard = 0,
	EM_Freeze = 1,
	EM_DelayedFreeze = 2,
	EM_MAX = 3,
};

// Enum Engine.EEvaluatorDataSource
enum class EEvaluatorDataSource : uint8_t {
	EDS_SourcePose = 0,
	EDS_DestinationPose = 1,
	EDS_MAX = 2,
};

// Enum Engine.ECopyType
enum class ECopyType : uint8_t {
	PlainProperty = 0,
	BoolProperty = 1,
	StructProperty = 2,
	ObjectProperty = 3,
	NameProperty = 4,
	ECopyType_MAX = 5,
};

// Enum Engine.EPostCopyOperation
enum class EPostCopyOperation : uint8_t {
	None = 0,
	LogicalNegateBool = 1,
	EPostCopyOperation_MAX = 2,
};

// Enum Engine.EPinHidingMode
enum class EPinHidingMode : uint8_t {
	NeverAsPin = 0,
	PinHiddenByDefault = 1,
	PinShownByDefault = 2,
	AlwaysAsPin = 3,
	EPinHidingMode_MAX = 4,
};

// Enum Engine.AnimPhysCollisionType
enum class AnimPhysCollisionType : uint8_t {
	CoM = 0,
	CustomSphere = 1,
	InnerSphere = 2,
	OuterSphere = 3,
	AnimPhysCollisionType_MAX = 4,
};

// Enum Engine.AnimPhysTwistAxis
enum class AnimPhysTwistAxis : uint8_t {
	AxisX = 0,
	AxisY = 1,
	AxisZ = 2,
	AnimPhysTwistAxis_MAX = 3,
};

// Enum Engine.ETypeAdvanceAnim
enum class ETypeAdvanceAnim : uint8_t {
	ETAA_Default = 0,
	ETAA_Finished = 1,
	ETAA_Looped = 2,
	ETAA_MAX = 3,
};

// Enum Engine.ETransitionLogicType
enum class ETransitionLogicType : uint8_t {
	TLT_StandardBlend = 0,
	TLT_Inertialization = 1,
	TLT_Custom = 2,
	TLT_MAX = 3,
};

// Enum Engine.ETransitionBlendMode
enum class ETransitionBlendMode : uint8_t {
	TBM_Linear = 0,
	TBM_Cubic = 1,
	TBM_MAX = 2,
};

// Enum Engine.EComponentType
enum class EComponentType : uint8_t {
	None = 0,
	TranslationX = 1,
	TranslationY = 2,
	TranslationZ = 3,
	RotationX = 4,
	RotationY = 5,
	RotationZ = 6,
	Scale = 7,
	ScaleX = 8,
	ScaleY = 9,
	ScaleZ = 10,
	EComponentType_MAX = 11,
};

// Enum Engine.EAxisOption
enum class EAxisOption : uint8_t {
	X = 0,
	Y = 1,
	Z = 2,
	X_Neg = 3,
	Y_Neg = 4,
	Z_Neg = 5,
	Custom = 6,
	EAxisOption_MAX = 7,
};

// Enum Engine.EAnimInterpolationType
enum class EAnimInterpolationType : uint8_t {
	Linear = 0,
	Step = 1,
	EAnimInterpolationType_MAX = 2,
};

// Enum Engine.ECurveBlendOption
enum class ECurveBlendOption : uint8_t {
	Override = 0,
	DoNotOverride = 1,
	NormalizeByWeight = 2,
	BlendByWeight = 3,
	UseBasePose = 4,
	UseMaxValue = 5,
	UseMinValue = 6,
	ECurveBlendOption_MAX = 7,
};

// Enum Engine.EAdditiveAnimationType
enum class EAdditiveAnimationType : uint8_t {
	AAT_None = 0,
	AAT_LocalSpaceBase = 1,
	AAT_RotationOffsetMeshSpace = 2,
	AAT_MAX = 3,
};

// Enum Engine.ENotifyFilterType
enum class ENotifyFilterType : uint8_t {
	NoFiltering = 0,
	LOD = 1,
	ENotifyFilterType_MAX = 2,
};

// Enum Engine.EMontageNotifyTickType
enum class EMontageNotifyTickType : uint8_t {
	Queued = 0,
	BranchingPoint = 1,
	EMontageNotifyTickType_MAX = 2,
};

// Enum Engine.EBoneRotationSource
enum class EBoneRotationSource : uint8_t {
	BRS_KeepComponentSpaceRotation = 0,
	BRS_KeepLocalSpaceRotation = 1,
	BRS_CopyFromTarget = 2,
	BRS_MAX = 3,
};

// Enum Engine.EBoneControlSpace
enum class EBoneControlSpace : uint8_t {
	BCS_WorldSpace = 0,
	BCS_ComponentSpace = 1,
	BCS_ParentBoneSpace = 2,
	BCS_BoneSpace = 3,
	BCS_MAX = 4,
};

// Enum Engine.EBoneAxis
enum class EBoneAxis : uint8_t {
	BA_X = 0,
	BA_Y = 1,
	BA_Z = 2,
	BA_MAX = 3,
};

// Enum Engine.EPrimaryAssetCookRule
enum class EPrimaryAssetCookRule : uint8_t {
	Unknown = 0,
	NeverCook = 1,
	DevelopmentCook = 2,
	DevelopmentAlwaysCook = 3,
	AlwaysCook = 4,
	EPrimaryAssetCookRule_MAX = 5,
};

// Enum Engine.ENaturalSoundFalloffMode
enum class ENaturalSoundFalloffMode : uint8_t {
	Continues = 0,
	Silent = 1,
	Hold = 2,
	ENaturalSoundFalloffMode_MAX = 3,
};

// Enum Engine.EAttenuationShape
enum class EAttenuationShape : uint8_t {
	Sphere = 0,
	Capsule = 1,
	Box = 2,
	Cone = 3,
	EAttenuationShape_MAX = 4,
};

// Enum Engine.EAttenuationDistanceModel
enum class EAttenuationDistanceModel : uint8_t {
	Linear = 0,
	Logarithmic = 1,
	Inverse = 2,
	LogReverse = 3,
	NaturalSound = 4,
	Custom = 5,
	EAttenuationDistanceModel_MAX = 6,
};

// Enum Engine.EAudioFaderCurve
enum class EAudioFaderCurve : uint8_t {
	Linear = 0,
	Logarithmic = 1,
	SCurve = 2,
	Sin = 3,
	Count = 4,
	EAudioFaderCurve_MAX = 5,
};

// Enum Engine.EAudioComponentPlayState
enum class EAudioComponentPlayState : uint8_t {
	Playing = 0,
	Stopped = 1,
	Paused = 2,
	FadingIn = 3,
	FadingOut = 4,
	Count = 5,
	EAudioComponentPlayState_MAX = 6,
};

// Enum Engine.EAudioOutputTarget
enum class EAudioOutputTarget : uint8_t {
	Speaker = 0,
	Controller = 1,
	ControllerFallbackToSpeaker = 2,
	EAudioOutputTarget_MAX = 3,
};

// Enum Engine.EMonoChannelUpmixMethod
enum class EMonoChannelUpmixMethod : uint8_t {
	Linear = 0,
	EqualPower = 1,
	FullVolume = 2,
	EMonoChannelUpmixMethod_MAX = 3,
};

// Enum Engine.EPanningMethod
enum class EPanningMethod : uint8_t {
	Linear = 0,
	EqualPower = 1,
	EPanningMethod_MAX = 2,
};

// Enum Engine.EVoiceSampleRate
enum class EVoiceSampleRate : int32_t {
	Low16000Hz = 16000,
	Normal24000Hz = 24000,
	EVoiceSampleRate_MAX = 24001,
};

// Enum Engine.EBlendableLocation
enum class EBlendableLocation : uint8_t {
	BL_AfterTonemapping = 0,
	BL_BeforeTonemapping = 1,
	BL_BeforeTranslucency = 2,
	BL_ReplacingTonemapper = 3,
	BL_SSRInput = 4,
	BL_MAX = 5,
};

// Enum Engine.ENotifyTriggerMode
enum class ENotifyTriggerMode : uint8_t {
	AllAnimations = 0,
	HighestWeightedAnimation = 1,
	None = 2,
	ENotifyTriggerMode_MAX = 3,
};

// Enum Engine.EBlendSpaceAxis
enum class EBlendSpaceAxis : uint8_t {
	BSA_None = 0,
	BSA_X = 1,
	BSA_Y = 2,
	BSA_Max = 3,
};

// Enum Engine.EBlueprintNativizationFlag
enum class EBlueprintNativizationFlag : uint8_t {
	Disabled = 0,
	Dependency = 1,
	ExplicitlyEnabled = 2,
	EBlueprintNativizationFlag_MAX = 3,
};

// Enum Engine.EBlueprintCompileMode
enum class EBlueprintCompileMode : uint8_t {
	Default = 0,
	Development = 1,
	FinalRelease = 2,
	EBlueprintCompileMode_MAX = 3,
};

// Enum Engine.EBlueprintType
enum class EBlueprintType : uint8_t {
	BPTYPE_Normal = 0,
	BPTYPE_Const = 1,
	BPTYPE_MacroLibrary = 2,
	BPTYPE_Interface = 3,
	BPTYPE_LevelScript = 4,
	BPTYPE_FunctionLibrary = 5,
	BPTYPE_MAX = 6,
};

// Enum Engine.EBlueprintStatus
enum class EBlueprintStatus : uint8_t {
	BS_Unknown = 0,
	BS_Dirty = 1,
	BS_Error = 2,
	BS_UpToDate = 3,
	BS_BeingCreated = 4,
	BS_UpToDateWithWarnings = 5,
	BS_MAX = 6,
};

// Enum Engine.EDOFMode
enum class EDOFMode : uint8_t {
	Default = 0,
	SixDOF = 1,
	YZPlane = 2,
	XZPlane = 3,
	XYPlane = 4,
	CustomPlane = 5,
	None = 6,
	EDOFMode_MAX = 7,
};

// Enum Engine.EBodyCollisionResponse
enum class EBodyCollisionResponse : uint8_t {
	BodyCollision_Enabled = 0,
	BodyCollision_Disabled = 1,
	BodyCollision_MAX = 2,
};

// Enum Engine.EPhysicsType
enum class EPhysicsType : uint8_t {
	PhysType_Default = 0,
	PhysType_Kinematic = 1,
	PhysType_Simulated = 2,
	PhysType_MAX = 3,
};

// Enum Engine.ECollisionTraceFlag
enum class ECollisionTraceFlag : uint8_t {
	CTF_UseDefault = 0,
	CTF_UseSimpleAndComplex = 1,
	CTF_UseSimpleAsComplex = 2,
	CTF_UseComplexAsSimple = 3,
	CTF_MAX = 4,
};

// Enum Engine.EBrushType
enum class EBrushType : uint8_t {
	Brush_Default = 0,
	Brush_Add = 1,
	Brush_Subtract = 2,
	Brush_MAX = 3,
};

// Enum Engine.ECsgOper
enum class ECsgOper : uint8_t {
	CSG_Active = 0,
	CSG_Add = 1,
	CSG_Subtract = 2,
	CSG_Intersect = 3,
	CSG_Deintersect = 4,
	CSG_None = 5,
	CSG_MAX = 6,
};

// Enum Engine.EInitialOscillatorOffset
enum class EInitialOscillatorOffset : uint8_t {
	EOO_OffsetRandom = 0,
	EOO_OffsetZero = 1,
	EOO_MAX = 2,
};

// Enum Engine.EOscillatorWaveform
enum class EOscillatorWaveform : uint8_t {
	SineWave = 0,
	PerlinNoise = 1,
	EOscillatorWaveform_MAX = 2,
};

// Enum Engine.ECameraShakeAttenuation
enum class ECameraShakeAttenuation : uint8_t {
	Linear = 0,
	Quadratic = 1,
	ECameraShakeAttenuation_MAX = 2,
};

// Enum Engine.ECameraAlphaBlendMode
enum class ECameraAlphaBlendMode : uint8_t {
	CABM_Linear = 0,
	CABM_Cubic = 1,
	CABM_MAX = 2,
};

// Enum Engine.ECameraAnimPlaySpace
enum class ECameraAnimPlaySpace : uint8_t {
	CameraLocal = 0,
	World = 1,
	UserDefined = 2,
	ECameraAnimPlaySpace_MAX = 3,
};

// Enum Engine.ECameraProjectionMode
enum class ECameraProjectionMode : uint8_t {
	Perspective = 0,
	Orthographic = 1,
	ECameraProjectionMode_MAX = 2,
};

// Enum Engine.ECloudStorageDelegate
enum class ECloudStorageDelegate : uint8_t {
	CSD_KeyValueReadComplete = 0,
	CSD_KeyValueWriteComplete = 1,
	CSD_ValueChanged = 2,
	CSD_DocumentQueryComplete = 3,
	CSD_DocumentReadComplete = 4,
	CSD_DocumentWriteComplete = 5,
	CSD_DocumentConflictDetected = 6,
	CSD_MAX = 7,
};

// Enum Engine.EAngularDriveMode
enum class EAngularDriveMode : uint8_t {
	SLERP = 0,
	TwistAndSwing = 1,
	EAngularDriveMode_MAX = 2,
};

// Enum Engine.ELinearConstraintMotion
enum class ELinearConstraintMotion : uint8_t {
	LCM_Free = 0,
	LCM_Limited = 1,
	LCM_Locked = 2,
	LCM_MAX = 3,
};

// Enum Engine.ECurveTableMode
enum class ECurveTableMode : uint8_t {
	Empty = 0,
	SimpleCurves = 1,
	RichCurves = 2,
	ECurveTableMode_MAX = 3,
};

// Enum Engine.EEvaluateCurveTableResult
enum class EEvaluateCurveTableResult : uint8_t {
	RowFound = 0,
	RowNotFound = 1,
	EEvaluateCurveTableResult_MAX = 2,
};

// Enum Engine.EGrammaticalNumber
enum class EGrammaticalNumber : uint8_t {
	Singular = 0,
	Plural = 1,
	EGrammaticalNumber_MAX = 2,
};

// Enum Engine.EGrammaticalGender
enum class EGrammaticalGender : uint8_t {
	Neuter = 0,
	Masculine = 1,
	Feminine = 2,
	Mixed = 3,
	EGrammaticalGender_MAX = 4,
};

// Enum Engine.DistributionParamMode
enum class DistributionParamMode : uint8_t {
	DPM_Normal = 0,
	DPM_Abs = 1,
	DPM_Direct = 2,
	DPM_MAX = 3,
};

// Enum Engine.EDistributionVectorMirrorFlags
enum class EDistributionVectorMirrorFlags : uint8_t {
	EDVMF_Same = 0,
	EDVMF_Different = 1,
	EDVMF_Mirror = 2,
	EDVMF_MAX = 3,
};

// Enum Engine.EDistributionVectorLockFlags
enum class EDistributionVectorLockFlags : uint8_t {
	EDVLF_None = 0,
	EDVLF_XY = 1,
	EDVLF_XZ = 2,
	EDVLF_YZ = 3,
	EDVLF_XYZ = 4,
	EDVLF_MAX = 5,
};

// Enum Engine.ENodeEnabledState
enum class ENodeEnabledState : uint8_t {
	Enabled = 0,
	Disabled = 1,
	DevelopmentOnly = 2,
	ENodeEnabledState_MAX = 3,
};

// Enum Engine.ENodeAdvancedPins
enum class ENodeAdvancedPins : uint8_t {
	NoPins = 0,
	Shown = 1,
	Hidden = 2,
	ENodeAdvancedPins_MAX = 3,
};

// Enum Engine.ENodeTitleType
enum class ENodeTitleType : uint8_t {
	FullTitle = 0,
	ListView = 1,
	EditableTitle = 2,
	MenuTitle = 3,
	MAX_TitleTypes = 4,
	ENodeTitleType_MAX = 5,
};

// Enum Engine.EPinContainerType
enum class EPinContainerType : uint8_t {
	None = 0,
	Array = 1,
	Set = 2,
	Map = 3,
	EPinContainerType_MAX = 4,
};

// Enum Engine.EEdGraphPinDirection
enum class EEdGraphPinDirection : uint8_t {
	EGPD_Input = 0,
	EGPD_Output = 1,
	EGPD_MAX = 2,
};

// Enum Engine.EBlueprintPinStyleType
enum class EBlueprintPinStyleType : uint8_t {
	BPST_Original = 0,
	BPST_VariantA = 1,
	BPST_MAX = 2,
};

// Enum Engine.ECanCreateConnectionResponse
enum class ECanCreateConnectionResponse : uint8_t {
	CONNECT_RESPONSE_MAKE = 0,
	CONNECT_RESPONSE_DISALLOW = 1,
	CONNECT_RESPONSE_BREAK_OTHERS_A = 2,
	CONNECT_RESPONSE_BREAK_OTHERS_B = 3,
	CONNECT_RESPONSE_BREAK_OTHERS_AB = 4,
	CONNECT_RESPONSE_MAKE_WITH_CONVERSION_NODE = 5,
	CONNECT_RESPONSE_MAX = 6,
};

// Enum Engine.EGraphType
enum class EGraphType : uint8_t {
	GT_Function = 0,
	GT_Ubergraph = 1,
	GT_Macro = 2,
	GT_Animation = 3,
	GT_StateMachine = 4,
	GT_MAX = 5,
};

// Enum Engine.ETransitionType
enum class ETransitionType : uint8_t {
	None = 0,
	Paused = 1,
	Loading = 2,
	Saving = 3,
	Connecting = 4,
	Precaching = 5,
	WaitingToConnect = 6,
	MAX = 7,
};

// Enum Engine.EFullyLoadPackageType
enum class EFullyLoadPackageType : uint8_t {
	FULLYLOAD_Map = 0,
	FULLYLOAD_Game_PreLoadClass = 1,
	FULLYLOAD_Game_PostLoadClass = 2,
	FULLYLOAD_Always = 3,
	FULLYLOAD_Mutator = 4,
	FULLYLOAD_MAX = 5,
};

// Enum Engine.EViewModeIndex
enum class EViewModeIndex : uint8_t {
	VMI_BrushWireframe = 0,
	VMI_Wireframe = 1,
	VMI_Unlit = 2,
	VMI_Lit = 3,
	VMI_Lit_DetailLighting = 4,
	VMI_LightingOnly = 5,
	VMI_LightComplexity = 6,
	VMI_ShaderComplexity = 8,
	VMI_LightmapDensity = 9,
	VMI_LitLightmapDensity = 10,
	VMI_ReflectionOverride = 11,
	VMI_VisualizeBuffer = 12,
	VMI_StationaryLightOverlap = 14,
	VMI_CollisionPawn = 15,
	VMI_CollisionVisibility = 16,
	VMI_LODColoration = 18,
	VMI_QuadOverdraw = 19,
	VMI_PrimitiveDistanceAccuracy = 20,
	VMI_MeshUVDensityAccuracy = 21,
	VMI_ShaderComplexityWithQuadOverdraw = 22,
	VMI_HLODColoration = 23,
	VMI_GroupLODColoration = 24,
	VMI_MaterialTextureScaleAccuracy = 25,
	VMI_RequiredTextureResolution = 26,
	VMI_PathTracing = 27,
	VMI_RayTracingDebug = 28,
	VMI_Max = 29,
	VMI_Unknown = 255,
};

// Enum Engine.EDemoPlayFailure
enum class EDemoPlayFailure : uint8_t {
	Generic = 0,
	DemoNotFound = 1,
	Corrupt = 2,
	InvalidVersion = 3,
	InitBase = 4,
	GameSpecificHeader = 5,
	ReplayStreamerInternal = 6,
	LoadMap = 7,
	Serialization = 8,
	EDemoPlayFailure_MAX = 9,
};

// Enum Engine.ETravelType
enum class ETravelType : uint8_t {
	TRAVEL_Absolute = 0,
	TRAVEL_Partial = 1,
	TRAVEL_Relative = 2,
	TRAVEL_MAX = 3,
};

// Enum Engine.ENetworkLagState
enum class ENetworkLagState : uint8_t {
	NotLagging = 0,
	Lagging = 1,
	ENetworkLagState_MAX = 2,
};

// Enum Engine.EMouseCaptureMode
enum class EMouseCaptureMode : uint8_t {
	NoCapture = 0,
	CapturePermanently = 1,
	CapturePermanently_IncludingInitialMouseDown = 2,
	CaptureDuringMouseDown = 3,
	CaptureDuringRightMouseDown = 4,
	EMouseCaptureMode_MAX = 5,
};

// Enum Engine.EInputEvent
enum class EInputEvent : uint8_t {
	IE_Pressed = 0,
	IE_Released = 1,
	IE_Repeat = 2,
	IE_DoubleClick = 3,
	IE_Axis = 4,
	IE_MAX = 5,
};

// Enum Engine.ECustomTimeStepSynchronizationState
enum class ECustomTimeStepSynchronizationState : uint8_t {
	Closed = 0,
	Error = 1,
	Synchronized = 2,
	Synchronizing = 3,
	ECustomTimeStepSynchronizationState_MAX = 4,
};

// Enum Engine.EMeshBufferAccess
enum class EMeshBufferAccess : uint8_t {
	Default = 0,
	ForceCPUAndGPU = 1,
	EMeshBufferAccess_MAX = 2,
};

// Enum Engine.ESpawnActorCollisionHandlingMethod
enum class ESpawnActorCollisionHandlingMethod : uint8_t {
	Undefined = 0,
	AlwaysSpawn = 1,
	AdjustIfPossibleButAlwaysSpawn = 2,
	AdjustIfPossibleButDontSpawnIfColliding = 3,
	DontSpawnIfColliding = 4,
	ESpawnActorCollisionHandlingMethod_MAX = 5,
};

// Enum Engine.EConstraintFrame
enum class EConstraintFrame : uint8_t {
	Frame1 = 0,
	Frame2 = 1,
	EConstraintFrame_MAX = 2,
};

// Enum Engine.EAngularConstraintMotion
enum class EAngularConstraintMotion : uint8_t {
	ACM_Free = 0,
	ACM_Limited = 1,
	ACM_Locked = 2,
	ACM_MAX = 3,
};

// Enum Engine.EComponentSocketType
enum class EComponentSocketType : uint8_t {
	Invalid = 0,
	Bone = 1,
	Socket = 2,
	EComponentSocketType_MAX = 3,
};

// Enum Engine.EPhysicalMaterialMaskColor
enum class EPhysicalMaterialMaskColor : uint8_t {
	Red = 0,
	Green = 1,
	Blue = 2,
	Cyan = 3,
	Magenta = 4,
	Yellow = 5,
	White = 6,
	Black = 7,
	MAX = 8,
};

// Enum Engine.EPhysicalSurface
enum class EPhysicalSurface : uint8_t {
	SurfaceType_Default = 0,
	SurfaceType1 = 1,
	SurfaceType2 = 2,
	SurfaceType3 = 3,
	SurfaceType4 = 4,
	SurfaceType5 = 5,
	SurfaceType6 = 6,
	SurfaceType7 = 7,
	SurfaceType8 = 8,
	SurfaceType9 = 9,
	SurfaceType10 = 10,
	SurfaceType11 = 11,
	SurfaceType12 = 12,
	SurfaceType13 = 13,
	SurfaceType14 = 14,
	SurfaceType15 = 15,
	SurfaceType16 = 16,
	SurfaceType17 = 17,
	SurfaceType18 = 18,
	SurfaceType19 = 19,
	SurfaceType20 = 20,
	SurfaceType21 = 21,
	SurfaceType22 = 22,
	SurfaceType23 = 23,
	SurfaceType24 = 24,
	SurfaceType25 = 25,
	SurfaceType26 = 26,
	SurfaceType27 = 27,
	SurfaceType28 = 28,
	SurfaceType29 = 29,
	SurfaceType30 = 30,
	SurfaceType31 = 31,
	SurfaceType32 = 32,
	SurfaceType33 = 33,
	SurfaceType34 = 34,
	SurfaceType35 = 35,
	SurfaceType36 = 36,
	SurfaceType37 = 37,
	SurfaceType38 = 38,
	SurfaceType39 = 39,
	SurfaceType40 = 40,
	SurfaceType41 = 41,
	SurfaceType42 = 42,
	SurfaceType43 = 43,
	SurfaceType44 = 44,
	SurfaceType45 = 45,
	SurfaceType46 = 46,
	SurfaceType47 = 47,
	SurfaceType48 = 48,
	SurfaceType49 = 49,
	SurfaceType50 = 50,
	SurfaceType51 = 51,
	SurfaceType52 = 52,
	SurfaceType53 = 53,
	SurfaceType54 = 54,
	SurfaceType55 = 55,
	SurfaceType56 = 56,
	SurfaceType57 = 57,
	SurfaceType58 = 58,
	SurfaceType59 = 59,
	SurfaceType60 = 60,
	SurfaceType61 = 61,
	SurfaceType62 = 62,
	SurfaceType_Max = 63,
	EPhysicalSurface_MAX = 64,
};

// Enum Engine.EWalkableSlopeBehavior
enum class EWalkableSlopeBehavior : uint8_t {
	WalkableSlope_Default = 0,
	WalkableSlope_Increase = 1,
	WalkableSlope_Decrease = 2,
	WalkableSlope_Unwalkable = 3,
	WalkableSlope_Max = 4,
};

// Enum Engine.ERotatorQuantization
enum class ERotatorQuantization : uint8_t {
	ByteComponents = 0,
	ShortComponents = 1,
	ERotatorQuantization_MAX = 2,
};

// Enum Engine.EVectorQuantization
enum class EVectorQuantization : uint8_t {
	RoundWholeNumber = 0,
	RoundOneDecimal = 1,
	RoundTwoDecimals = 2,
	EVectorQuantization_MAX = 3,
};

// Enum Engine.EAutoPossessAI
enum class EAutoPossessAI : uint8_t {
	Disabled = 0,
	PlacedInWorld = 1,
	Spawned = 2,
	PlacedInWorldOrSpawned = 3,
	EAutoPossessAI_MAX = 4,
};

// Enum Engine.EAutoReceiveInput
enum class EAutoReceiveInput : uint8_t {
	Disabled = 0,
	Player0 = 1,
	Player1 = 2,
	Player2 = 3,
	Player3 = 4,
	Player4 = 5,
	Player5 = 6,
	Player6 = 7,
	Player7 = 8,
	EAutoReceiveInput_MAX = 9,
};

// Enum Engine.ENetDormancy
enum class ENetDormancy : uint8_t {
	DORM_Never = 0,
	DORM_Awake = 1,
	DORM_DormantAll = 2,
	DORM_DormantPartial = 3,
	DORM_Initial = 4,
	DORM_MAX = 5,
};

// Enum Engine.ENetRole
enum class ENetRole : uint8_t {
	ROLE_None = 0,
	ROLE_SimulatedProxy = 1,
	ROLE_AutonomousProxy = 2,
	ROLE_Authority = 3,
	ROLE_MAX = 4,
};

// Enum Engine.EUpdateRateShiftBucket
enum class EUpdateRateShiftBucket : uint8_t {
	ShiftBucket0 = 0,
	ShiftBucket1 = 1,
	ShiftBucket2 = 2,
	ShiftBucket3 = 3,
	ShiftBucket4 = 4,
	ShiftBucket5 = 5,
	ShiftBucketMax = 6,
	EUpdateRateShiftBucket_MAX = 7,
};

// Enum Engine.EShadowMapFlags
enum class EShadowMapFlags : uint8_t {
	SMF_None = 0,
	SMF_Streamed = 1,
	SMF_MAX = 2,
};

// Enum Engine.ELightMapPaddingType
enum class ELightMapPaddingType : uint8_t {
	LMPT_NormalPadding = 0,
	LMPT_PrePadding = 1,
	LMPT_NoPadding = 2,
	LMPT_MAX = 3,
};

// Enum Engine.ECollisionEnabled
enum class ECollisionEnabled : uint8_t {
	NoCollision = 0,
	QueryOnly = 1,
	PhysicsOnly = 2,
	QueryAndPhysics = 3,
	ECollisionEnabled_MAX = 4,
};

// Enum Engine.ETimelineSigType
enum class ETimelineSigType : uint8_t {
	ETS_EventSignature = 0,
	ETS_FloatSignature = 1,
	ETS_VectorSignature = 2,
	ETS_LinearColorSignature = 3,
	ETS_InvalidSignature = 4,
	ETS_MAX = 5,
};

// Enum Engine.ESleepFamily
enum class ESleepFamily : uint8_t {
	Normal = 0,
	Sensitive = 1,
	Custom = 2,
	ESleepFamily_MAX = 3,
};

// Enum Engine.ERadialImpulseFalloff
enum class ERadialImpulseFalloff : uint8_t {
	RIF_Constant = 0,
	RIF_Linear = 1,
	RIF_MAX = 2,
};

// Enum Engine.EFilterInterpolationType
enum class EFilterInterpolationType : uint8_t {
	BSIT_Average = 0,
	BSIT_Linear = 1,
	BSIT_Cubic = 2,
	BSIT_MAX = 3,
};

// Enum Engine.ECollisionResponse
enum class ECollisionResponse : uint8_t {
	ECR_Ignore = 0,
	ECR_Overlap = 1,
	ECR_Block = 2,
	ECR_MAX = 3,
};

// Enum Engine.EOverlapFilterOption
enum class EOverlapFilterOption : uint8_t {
	OverlapFilter_All = 0,
	OverlapFilter_DynamicOnly = 1,
	OverlapFilter_StaticOnly = 2,
	OverlapFilter_MAX = 3,
};

// Enum Engine.ECollisionChannel
enum class ECollisionChannel : uint8_t {
	ECC_WorldStatic = 0,
	ECC_WorldDynamic = 1,
	ECC_Pawn = 2,
	ECC_Visibility = 3,
	ECC_Camera = 4,
	ECC_PhysicsBody = 5,
	ECC_Vehicle = 6,
	ECC_Destructible = 7,
	ECC_EngineTraceChannel1 = 8,
	ECC_EngineTraceChannel2 = 9,
	ECC_EngineTraceChannel3 = 10,
	ECC_EngineTraceChannel4 = 11,
	ECC_EngineTraceChannel5 = 12,
	ECC_EngineTraceChannel6 = 13,
	ECC_GameTraceChannel1 = 14,
	ECC_GameTraceChannel2 = 15,
	ECC_GameTraceChannel3 = 16,
	ECC_GameTraceChannel4 = 17,
	ECC_GameTraceChannel5 = 18,
	ECC_GameTraceChannel6 = 19,
	ECC_GameTraceChannel7 = 20,
	ECC_GameTraceChannel8 = 21,
	ECC_GameTraceChannel9 = 22,
	ECC_GameTraceChannel10 = 23,
	ECC_GameTraceChannel11 = 24,
	ECC_GameTraceChannel12 = 25,
	ECC_GameTraceChannel13 = 26,
	ECC_GameTraceChannel14 = 27,
	ECC_GameTraceChannel15 = 28,
	ECC_GameTraceChannel16 = 29,
	ECC_GameTraceChannel17 = 30,
	ECC_GameTraceChannel18 = 31,
	ECC_OverlapAll_Deprecated = 32,
	ECC_MAX = 33,
};

// Enum Engine.ENetworkSmoothingMode
enum class ENetworkSmoothingMode : uint8_t {
	Disabled = 0,
	Linear = 1,
	Exponential = 2,
	Replay = 3,
	ENetworkSmoothingMode_MAX = 4,
};

// Enum Engine.ELightingBuildQuality
enum class ELightingBuildQuality : uint8_t {
	Quality_Preview = 0,
	Quality_Medium = 1,
	Quality_High = 2,
	Quality_Production = 3,
	Quality_MAX = 4,
};

// Enum Engine.EMaterialStencilCompare
enum class EMaterialStencilCompare : uint8_t {
	MSC_Less = 0,
	MSC_LessEqual = 1,
	MSC_Greater = 2,
	MSC_GreaterEqual = 3,
	MSC_Equal = 4,
	MSC_NotEqual = 5,
	MSC_Never = 6,
	MSC_Always = 7,
	MSC_Count = 8,
	MSC_MAX = 9,
};

// Enum Engine.EMaterialSamplerType
enum class EMaterialSamplerType : uint8_t {
	SAMPLERTYPE_Color = 0,
	SAMPLERTYPE_Grayscale = 1,
	SAMPLERTYPE_Alpha = 2,
	SAMPLERTYPE_Normal = 3,
	SAMPLERTYPE_Masks = 4,
	SAMPLERTYPE_DistanceFieldFont = 5,
	SAMPLERTYPE_LinearColor = 6,
	SAMPLERTYPE_LinearGrayscale = 7,
	SAMPLERTYPE_Data = 8,
	SAMPLERTYPE_External = 9,
	SAMPLERTYPE_VirtualColor = 10,
	SAMPLERTYPE_VirtualGrayscale = 11,
	SAMPLERTYPE_VirtualAlpha = 12,
	SAMPLERTYPE_VirtualNormal = 13,
	SAMPLERTYPE_VirtualMasks = 14,
	SAMPLERTYPE_VirtualLinearColor = 15,
	SAMPLERTYPE_VirtualLinearGrayscale = 16,
	SAMPLERTYPE_MAX = 17,
};

// Enum Engine.EMaterialTessellationMode
enum class EMaterialTessellationMode : uint8_t {
	MTM_NoTessellation = 0,
	MTM_FlatTessellation = 1,
	MTM_PNTriangles = 2,
	MTM_MAX = 3,
};

// Enum Engine.EMaterialShadingModel
enum class EMaterialShadingModel : uint8_t {
	MSM_Unlit = 0,
	MSM_DefaultLit = 1,
	MSM_Subsurface = 2,
	MSM_PreintegratedSkin = 3,
	MSM_ClearCoat = 4,
	MSM_SubsurfaceProfile = 5,
	MSM_TwoSidedFoliage = 6,
	MSM_Hair = 7,
	MSM_Cloth = 8,
	MSM_Eye = 9,
	MSM_SingleLayerWater = 10,
	MSM_ThinTranslucent = 11,
	MSM_NUM = 12,
	MSM_FromMaterialExpression = 13,
	MSM_MAX = 14,
};

// Enum Engine.EParticleCollisionMode
enum class EParticleCollisionMode : uint8_t {
	SceneDepth = 0,
	DistanceField = 1,
	EParticleCollisionMode_MAX = 2,
};

// Enum Engine.ETrailWidthMode
enum class ETrailWidthMode : uint8_t {
	ETrailWidthMode_FromCentre = 0,
	ETrailWidthMode_FromFirst = 1,
	ETrailWidthMode_FromSecond = 2,
	ETrailWidthMode_MAX = 3,
};

// Enum Engine.EGBufferFormat
enum class EGBufferFormat : uint8_t {
	Force8BitsPerChannel = 0,
	Default = 1,
	HighPrecisionNormals = 3,
	Force16BitsPerChannel = 5,
	EGBufferFormat_MAX = 6,
};

// Enum Engine.ESceneCaptureCompositeMode
enum class ESceneCaptureCompositeMode : uint8_t {
	SCCM_Overwrite = 0,
	SCCM_Additive = 1,
	SCCM_Composite = 2,
	SCCM_MAX = 3,
};

// Enum Engine.ESceneCaptureSource
enum class ESceneCaptureSource : uint8_t {
	SCS_SceneColorHDR = 0,
	SCS_SceneColorHDRNoAlpha = 1,
	SCS_FinalColorLDR = 2,
	SCS_SceneColorSceneDepth = 3,
	SCS_SceneDepth = 4,
	SCS_DeviceDepth = 5,
	SCS_Normal = 6,
	SCS_BaseColor = 7,
	SCS_FinalColorHDR = 8,
	SCS_FinalToneCurveHDR = 9,
	SCS_MAX = 10,
};

// Enum Engine.ETranslucentSortPolicy
enum class ETranslucentSortPolicy : uint8_t {
	SortByDistance = 0,
	SortByProjectedZ = 1,
	SortAlongAxis = 2,
	ETranslucentSortPolicy_MAX = 3,
};

// Enum Engine.ERefractionMode
enum class ERefractionMode : uint8_t {
	RM_IndexOfRefraction = 0,
	RM_PixelNormalOffset = 1,
	RM_MAX = 2,
};

// Enum Engine.ETranslucencyLightingMode
enum class ETranslucencyLightingMode : uint8_t {
	TLM_VolumetricNonDirectional = 0,
	TLM_VolumetricDirectional = 1,
	TLM_VolumetricPerVertexNonDirectional = 2,
	TLM_VolumetricPerVertexDirectional = 3,
	TLM_Surface = 4,
	TLM_SurfacePerPixelLighting = 5,
	TLM_MAX = 6,
};

// Enum Engine.ESamplerSourceMode
enum class ESamplerSourceMode : uint8_t {
	SSM_FromTextureAsset = 0,
	SSM_Wrap_WorldGroupSettings = 1,
	SSM_Clamp_WorldGroupSettings = 2,
	SSM_MAX = 3,
};

// Enum Engine.EBlendMode
enum class EBlendMode : uint8_t {
	BLEND_Opaque = 0,
	BLEND_Masked = 1,
	BLEND_Translucent = 2,
	BLEND_Additive = 3,
	BLEND_Modulate = 4,
	BLEND_AlphaComposite = 5,
	BLEND_AlphaHoldout = 6,
	BLEND_MAX = 7,
};

// Enum Engine.EOcclusionCombineMode
enum class EOcclusionCombineMode : uint8_t {
	OCM_Minimum = 0,
	OCM_Multiply = 1,
	OCM_MAX = 2,
};

// Enum Engine.ELightmapType
enum class ELightmapType : uint8_t {
	Default = 0,
	ForceSurface = 1,
	ForceVolumetric = 2,
	ELightmapType_MAX = 3,
};

// Enum Engine.EIndirectLightingCacheQuality
enum class EIndirectLightingCacheQuality : uint8_t {
	ILCQ_Off = 0,
	ILCQ_Point = 1,
	ILCQ_Volume = 2,
	ILCQ_MAX = 3,
};

// Enum Engine.ESceneDepthPriorityGroup
enum class ESceneDepthPriorityGroup : uint8_t {
	SDPG_World = 0,
	SDPG_Foreground = 1,
	SDPG_MAX = 2,
};

// Enum Engine.EAspectRatioAxisConstraint
enum class EAspectRatioAxisConstraint : uint8_t {
	AspectRatio_MaintainYFOV = 0,
	AspectRatio_MaintainXFOV = 1,
	AspectRatio_MajorAxisFOV = 2,
	AspectRatio_MAX = 3,
};

// Enum Engine.EFontCacheType
enum class EFontCacheType : uint8_t {
	Offline = 0,
	Runtime = 1,
	EFontCacheType_MAX = 2,
};

// Enum Engine.EFontImportCharacterSet
enum class EFontImportCharacterSet : uint8_t {
	FontICS_Default = 0,
	FontICS_Ansi = 1,
	FontICS_Symbol = 2,
	FontICS_MAX = 3,
};

// Enum Engine.EStandbyType
enum class EStandbyType : uint8_t {
	STDBY_Rx = 0,
	STDBY_Tx = 1,
	STDBY_BadPing = 2,
	STDBY_MAX = 3,
};

// Enum Engine.ESuggestProjVelocityTraceOption
enum class ESuggestProjVelocityTraceOption : uint8_t {
	DoNotTrace = 0,
	TraceFullPath = 1,
	OnlyTraceWhileAscending = 2,
	ESuggestProjVelocityTraceOption_MAX = 3,
};

// Enum Engine.EWindowMode
enum class EWindowMode : uint8_t {
	Fullscreen = 0,
	WindowedFullscreen = 1,
	Windowed = 2,
	EWindowMode_MAX = 3,
};

// Enum Engine.EHitProxyPriority
enum class EHitProxyPriority : uint8_t {
	HPP_World = 0,
	HPP_Wireframe = 1,
	HPP_Foreground = 2,
	HPP_UI = 3,
	HPP_MAX = 4,
};

// Enum Engine.EImportanceWeight
enum class EImportanceWeight : uint8_t {
	Luminance = 0,
	Red = 1,
	Green = 2,
	Blue = 3,
	Alpha = 4,
	EImportanceWeight_MAX = 5,
};

// Enum Engine.EAdManagerDelegate
enum class EAdManagerDelegate : uint8_t {
	AMD_ClickedBanner = 0,
	AMD_UserClosedAd = 1,
	AMD_MAX = 2,
};

// Enum Engine.EControllerAnalogStick
enum class EControllerAnalogStick : uint8_t {
	CAS_LeftStick = 0,
	CAS_RightStick = 1,
	CAS_MAX = 2,
};

// Enum Engine.EAnimAlphaInputType
enum class EAnimAlphaInputType : uint8_t {
	Float = 0,
	Bool = 1,
	Curve = 2,
	EAnimAlphaInputType_MAX = 3,
};

// Enum Engine.ETrackActiveCondition
enum class ETrackActiveCondition : uint8_t {
	ETAC_Always = 0,
	ETAC_GoreEnabled = 1,
	ETAC_GoreDisabled = 2,
	ETAC_MAX = 3,
};

// Enum Engine.EInterpTrackMoveRotMode
enum class EInterpTrackMoveRotMode : uint8_t {
	IMR_Keyframed = 0,
	IMR_LookAtGroup = 1,
	IMR_Ignore = 2,
	IMR_MAX = 3,
};

// Enum Engine.EInterpMoveAxis
enum class EInterpMoveAxis : uint8_t {
	AXIS_TranslationX = 0,
	AXIS_TranslationY = 1,
	AXIS_TranslationZ = 2,
	AXIS_RotationX = 3,
	AXIS_RotationY = 4,
	AXIS_RotationZ = 5,
	AXIS_MAX = 6,
};

// Enum Engine.ETrackToggleAction
enum class ETrackToggleAction : uint8_t {
	ETTA_Off = 0,
	ETTA_On = 1,
	ETTA_Toggle = 2,
	ETTA_Trigger = 3,
	ETTA_MAX = 4,
};

// Enum Engine.EVisibilityTrackCondition
enum class EVisibilityTrackCondition : uint8_t {
	EVTC_Always = 0,
	EVTC_GoreEnabled = 1,
	EVTC_GoreDisabled = 2,
	EVTC_MAX = 3,
};

// Enum Engine.EVisibilityTrackAction
enum class EVisibilityTrackAction : uint8_t {
	EVTA_Hide = 0,
	EVTA_Show = 1,
	EVTA_Toggle = 2,
	EVTA_MAX = 3,
};

// Enum Engine.ESlateGesture
enum class ESlateGesture : uint8_t {
	None = 0,
	Scroll = 1,
	Magnify = 2,
	Swipe = 3,
	Rotate = 4,
	LongPress = 5,
	ESlateGesture_MAX = 6,
};

// Enum Engine.EMatrixColumns
enum class EMatrixColumns : uint8_t {
	First = 0,
	Second = 1,
	Third = 2,
	Fourth = 3,
	EMatrixColumns_MAX = 4,
};

// Enum Engine.ELerpInterpolationMode
enum class ELerpInterpolationMode : uint8_t {
	QuatInterp = 0,
	EulerInterp = 1,
	DualQuatInterp = 2,
	ELerpInterpolationMode_MAX = 3,
};

// Enum Engine.EEasingFunc
enum class EEasingFunc : uint8_t {
	Linear = 0,
	Step = 1,
	SinusoidalIn = 2,
	SinusoidalOut = 3,
	SinusoidalInOut = 4,
	EaseIn = 5,
	EaseOut = 6,
	EaseInOut = 7,
	ExpoIn = 8,
	ExpoOut = 9,
	ExpoInOut = 10,
	CircularIn = 11,
	CircularOut = 12,
	CircularInOut = 13,
	EEasingFunc_MAX = 14,
};

// Enum Engine.ERoundingMode
enum class ERoundingMode : uint8_t {
	HalfToEven = 0,
	HalfFromZero = 1,
	HalfToZero = 2,
	FromZero = 3,
	ToZero = 4,
	ToNegativeInfinity = 5,
	ToPositiveInfinity = 6,
	ERoundingMode_MAX = 7,
};

// Enum Engine.EStreamingVolumeUsage
enum class EStreamingVolumeUsage : uint8_t {
	SVB_Loading = 0,
	SVB_LoadingAndVisibility = 1,
	SVB_VisibilityBlockingOnLoad = 2,
	SVB_BlockingOnLoad = 3,
	SVB_LoadingNotVisible = 4,
	SVB_MAX = 5,
};

// Enum Engine.EMaterialDecalResponse
enum class EMaterialDecalResponse : uint8_t {
	MDR_None = 0,
	MDR_ColorNormalRoughness = 1,
	MDR_Color = 2,
	MDR_ColorNormal = 3,
	MDR_ColorRoughness = 4,
	MDR_Normal = 5,
	MDR_NormalRoughness = 6,
	MDR_Roughness = 7,
	MDR_MAX = 8,
};

// Enum Engine.EDecalBlendMode
enum class EDecalBlendMode : uint8_t {
	DBM_Translucent = 0,
	DBM_Stain = 1,
	DBM_Normal = 2,
	DBM_Emissive = 3,
	DBM_DBuffer_ColorNormalRoughness = 4,
	DBM_DBuffer_Color = 5,
	DBM_DBuffer_ColorNormal = 6,
	DBM_DBuffer_ColorRoughness = 7,
	DBM_DBuffer_Normal = 8,
	DBM_DBuffer_NormalRoughness = 9,
	DBM_DBuffer_Roughness = 10,
	DBM_DBuffer_Emissive = 11,
	DBM_DBuffer_AlphaComposite = 12,
	DBM_DBuffer_EmissiveAlphaComposite = 13,
	DBM_Volumetric_DistanceFunction = 14,
	DBM_AlphaComposite = 15,
	DBM_AmbientOcclusion = 16,
	DBM_MAX = 17,
};

// Enum Engine.ETextureColorChannel
enum class ETextureColorChannel : uint8_t {
	TCC_Red = 0,
	TCC_Green = 1,
	TCC_Blue = 2,
	TCC_Alpha = 3,
	TCC_MAX = 4,
};

// Enum Engine.EMaterialAttributeBlend
enum class EMaterialAttributeBlend : uint8_t {
	Blend = 0,
	UseA = 1,
	UseB = 2,
	EMaterialAttributeBlend_MAX = 3,
};

// Enum Engine.EChannelMaskParameterColor
enum class EChannelMaskParameterColor : uint8_t {
	Red = 0,
	Green = 1,
	Blue = 2,
	Alpha = 3,
	EChannelMaskParameterColor_MAX = 4,
};

// Enum Engine.EClampMode
enum class EClampMode : uint8_t {
	CMODE_Clamp = 0,
	CMODE_ClampMin = 1,
	CMODE_ClampMax = 2,
	CMODE_MAX = 3,
};

// Enum Engine.ECustomMaterialOutputType
enum class ECustomMaterialOutputType : uint8_t {
	CMOT_Float1 = 0,
	CMOT_Float2 = 1,
	CMOT_Float3 = 2,
	CMOT_Float4 = 3,
	CMOT_MAX = 4,
};

// Enum Engine.EDepthOfFieldFunctionValue
enum class EDepthOfFieldFunctionValue : uint8_t {
	TDOF_NearAndFarMask = 0,
	TDOF_NearMask = 1,
	TDOF_FarMask = 2,
	TDOF_CircleOfConfusionRadius = 3,
	TDOF_MAX = 4,
};

// Enum Engine.EFunctionInputType
enum class EFunctionInputType : uint8_t {
	FunctionInput_Scalar = 0,
	FunctionInput_Vector2 = 1,
	FunctionInput_Vector3 = 2,
	FunctionInput_Vector4 = 3,
	FunctionInput_Texture2D = 4,
	FunctionInput_TextureCube = 5,
	FunctionInput_Texture2DArray = 6,
	FunctionInput_VolumeTexture = 7,
	FunctionInput_StaticBool = 8,
	FunctionInput_MaterialAttributes = 9,
	FunctionInput_TextureExternal = 10,
	FunctionInput_MAX = 11,
};

// Enum Engine.ENoiseFunction
enum class ENoiseFunction : uint8_t {
	NOISEFUNCTION_SimplexTex = 0,
	NOISEFUNCTION_GradientTex = 1,
	NOISEFUNCTION_GradientTex3D = 2,
	NOISEFUNCTION_GradientALU = 3,
	NOISEFUNCTION_ValueALU = 4,
	NOISEFUNCTION_VoronoiALU = 5,
	NOISEFUNCTION_MAX = 6,
};

// Enum Engine.ERuntimeVirtualTextureMipValueMode
enum class ERuntimeVirtualTextureMipValueMode : uint8_t {
	RVTMVM_None = 0,
	RVTMVM_MipLevel = 1,
	RVTMVM_MipBias = 2,
	RVTMVM_MAX = 3,
};

// Enum Engine.EMaterialSceneAttributeInputMode
enum class EMaterialSceneAttributeInputMode : uint8_t {
	Coordinates = 0,
	OffsetFraction = 1,
	EMaterialSceneAttributeInputMode_MAX = 2,
};

// Enum Engine.ESpeedTreeLODType
enum class ESpeedTreeLODType : uint8_t {
	STLOD_Pop = 0,
	STLOD_Smooth = 1,
	STLOD_MAX = 2,
};

// Enum Engine.ESpeedTreeWindType
enum class ESpeedTreeWindType : uint8_t {
	STW_None = 0,
	STW_Fastest = 1,
	STW_Fast = 2,
	STW_Better = 3,
	STW_Best = 4,
	STW_Palm = 5,
	STW_BestPlus = 6,
	STW_MAX = 7,
};

// Enum Engine.ESpeedTreeGeometryType
enum class ESpeedTreeGeometryType : uint8_t {
	STG_Branch = 0,
	STG_Frond = 1,
	STG_Leaf = 2,
	STG_FacingLeaf = 3,
	STG_Billboard = 4,
	STG_MAX = 5,
};

// Enum Engine.EMaterialExposedTextureProperty
enum class EMaterialExposedTextureProperty : uint8_t {
	TMTM_TextureSize = 0,
	TMTM_TexelSize = 1,
	TMTM_MAX = 2,
};

// Enum Engine.ETextureMipValueMode
enum class ETextureMipValueMode : uint8_t {
	TMVM_None = 0,
	TMVM_MipLevel = 1,
	TMVM_MipBias = 2,
	TMVM_Derivative = 3,
	TMVM_MAX = 4,
};

// Enum Engine.EMaterialVectorCoordTransform
enum class EMaterialVectorCoordTransform : uint8_t {
	TRANSFORM_Tangent = 0,
	TRANSFORM_Local = 1,
	TRANSFORM_World = 2,
	TRANSFORM_View = 3,
	TRANSFORM_Camera = 4,
	TRANSFORM_ParticleWorld = 5,
	TRANSFORM_MAX = 6,
};

// Enum Engine.EMaterialVectorCoordTransformSource
enum class EMaterialVectorCoordTransformSource : uint8_t {
	TRANSFORMSOURCE_Tangent = 0,
	TRANSFORMSOURCE_Local = 1,
	TRANSFORMSOURCE_World = 2,
	TRANSFORMSOURCE_View = 3,
	TRANSFORMSOURCE_Camera = 4,
	TRANSFORMSOURCE_ParticleWorld = 5,
	TRANSFORMSOURCE_MAX = 6,
};

// Enum Engine.EMaterialPositionTransformSource
enum class EMaterialPositionTransformSource : uint8_t {
	TRANSFORMPOSSOURCE_Local = 0,
	TRANSFORMPOSSOURCE_World = 1,
	TRANSFORMPOSSOURCE_TranslatedWorld = 2,
	TRANSFORMPOSSOURCE_View = 3,
	TRANSFORMPOSSOURCE_Camera = 4,
	TRANSFORMPOSSOURCE_Particle = 5,
	TRANSFORMPOSSOURCE_MAX = 6,
};

// Enum Engine.EVectorNoiseFunction
enum class EVectorNoiseFunction : uint8_t {
	VNF_CellnoiseALU = 0,
	VNF_VectorALU = 1,
	VNF_GradientALU = 2,
	VNF_CurlALU = 3,
	VNF_VoronoiALU = 4,
	VNF_MAX = 5,
};

// Enum Engine.EMaterialExposedViewProperty
enum class EMaterialExposedViewProperty : uint8_t {
	MEVP_BufferSize = 0,
	MEVP_FieldOfView = 1,
	MEVP_TanHalfFieldOfView = 2,
	MEVP_ViewSize = 3,
	MEVP_WorldSpaceViewPosition = 4,
	MEVP_WorldSpaceCameraPosition = 5,
	MEVP_ViewportOffset = 6,
	MEVP_TemporalSampleCount = 7,
	MEVP_TemporalSampleIndex = 8,
	MEVP_TemporalSampleOffset = 9,
	MEVP_RuntimeVirtualTextureOutputLevel = 10,
	MEVP_RuntimeVirtualTextureOutputDerivative = 11,
	MEVP_PreExposure = 12,
	MEVP_MAX = 13,
};

// Enum Engine.EWorldPositionIncludedOffsets
enum class EWorldPositionIncludedOffsets : uint8_t {
	WPT_Default = 0,
	WPT_ExcludeAllShaderOffsets = 1,
	WPT_CameraRelative = 2,
	WPT_CameraRelativeNoOffsets = 3,
	WPT_MAX = 4,
};

// Enum Engine.EMaterialFunctionUsage
enum class EMaterialFunctionUsage : uint8_t {
	Default = 0,
	MaterialLayer = 1,
	MaterialLayerBlend = 2,
	EMaterialFunctionUsage_MAX = 3,
};

// Enum Engine.EMaterialUsage
enum class EMaterialUsage : uint8_t {
	MATUSAGE_SkeletalMesh = 0,
	MATUSAGE_ParticleSprites = 1,
	MATUSAGE_BeamTrails = 2,
	MATUSAGE_MeshParticles = 3,
	MATUSAGE_StaticLighting = 4,
	MATUSAGE_MorphTargets = 5,
	MATUSAGE_SplineMesh = 6,
	MATUSAGE_InstancedStaticMeshes = 7,
	MATUSAGE_GeometryCollections = 8,
	MATUSAGE_Clothing = 9,
	MATUSAGE_NiagaraSprites = 10,
	MATUSAGE_NiagaraRibbons = 11,
	MATUSAGE_NiagaraMeshParticles = 12,
	MATUSAGE_GeometryCache = 13,
	MATUSAGE_Water = 14,
	MATUSAGE_HairStrands = 15,
	MATUSAGE_LidarPointCloud = 16,
	MATUSAGE_MAX = 17,
};

// Enum Engine.EMaterialParameterAssociation
enum class EMaterialParameterAssociation : uint8_t {
	LayerParameter = 0,
	BlendParameter = 1,
	GlobalParameter = 2,
	EMaterialParameterAssociation_MAX = 3,
};

// Enum Engine.EMaterialMergeType
enum class EMaterialMergeType : uint8_t {
	MaterialMergeType_Default = 0,
	MaterialMergeType_Simplygon = 1,
	MaterialMergeType_MAX = 2,
};

// Enum Engine.ETextureSizingType
enum class ETextureSizingType : uint8_t {
	TextureSizingType_UseSingleTextureSize = 0,
	TextureSizingType_UseAutomaticBiasedSizes = 1,
	TextureSizingType_UseManualOverrideTextureSize = 2,
	TextureSizingType_UseSimplygonAutomaticSizing = 3,
	TextureSizingType_MAX = 4,
};

// Enum Engine.ESceneTextureId
enum class ESceneTextureId : uint8_t {
	PPI_SceneColor = 0,
	PPI_SceneDepth = 1,
	PPI_DiffuseColor = 2,
	PPI_SpecularColor = 3,
	PPI_SubsurfaceColor = 4,
	PPI_BaseColor = 5,
	PPI_Specular = 6,
	PPI_Metallic = 7,
	PPI_WorldNormal = 8,
	PPI_SeparateTranslucency = 9,
	PPI_Opacity = 10,
	PPI_Roughness = 11,
	PPI_MaterialAO = 12,
	PPI_CustomDepth = 13,
	PPI_PostProcessInput0 = 14,
	PPI_PostProcessInput1 = 15,
	PPI_PostProcessInput2 = 16,
	PPI_PostProcessInput3 = 17,
	PPI_PostProcessInput4 = 18,
	PPI_PostProcessInput5 = 19,
	PPI_PostProcessInput6 = 20,
	PPI_DecalMask = 21,
	PPI_ShadingModelColor = 22,
	PPI_ShadingModelID = 23,
	PPI_AmbientOcclusion = 24,
	PPI_CustomStencil = 25,
	PPI_StoredBaseColor = 26,
	PPI_StoredSpecular = 27,
	PPI_Velocity = 28,
	PPI_WorldTangent = 29,
	PPI_Anisotropy = 30,
	PPI_MAX = 31,
};

// Enum Engine.EMaterialDomain
enum class EMaterialDomain : uint8_t {
	MD_Surface = 0,
	MD_DeferredDecal = 1,
	MD_LightFunction = 2,
	MD_Volume = 3,
	MD_PostProcess = 4,
	MD_UI = 5,
	MD_RuntimeVirtualTexture = 6,
	MD_MAX = 7,
};

// Enum Engine.EMeshInstancingReplacementMethod
enum class EMeshInstancingReplacementMethod : uint8_t {
	RemoveOriginalActors = 0,
	KeepOriginalActorsAsEditorOnly = 1,
	EMeshInstancingReplacementMethod_MAX = 2,
};

// Enum Engine.EUVOutput
enum class EUVOutput : uint8_t {
	DoNotOutputChannel = 0,
	OutputChannel = 1,
	EUVOutput_MAX = 2,
};

// Enum Engine.EMeshMergeType
enum class EMeshMergeType : uint8_t {
	MeshMergeType_Default = 0,
	MeshMergeType_MergeActor = 1,
	MeshMergeType_MAX = 2,
};

// Enum Engine.EMeshLODSelectionType
enum class EMeshLODSelectionType : uint8_t {
	AllLODs = 0,
	SpecificLOD = 1,
	CalculateLOD = 2,
	LowestDetailLOD = 3,
	EMeshLODSelectionType_MAX = 4,
};

// Enum Engine.EProxyNormalComputationMethod
enum class EProxyNormalComputationMethod : uint8_t {
	AngleWeighted = 0,
	AreaWeighted = 1,
	EqualWeighted = 2,
	EProxyNormalComputationMethod_MAX = 3,
};

// Enum Engine.ELandscapeCullingPrecision
enum class ELandscapeCullingPrecision : uint8_t {
	High = 0,
	Medium = 1,
	Low = 2,
	ELandscapeCullingPrecision_MAX = 3,
};

// Enum Engine.EStaticMeshReductionTerimationCriterion
enum class EStaticMeshReductionTerimationCriterion : uint8_t {
	Triangles = 0,
	Vertices = 1,
	Any = 2,
	EStaticMeshReductionTerimationCriterion_MAX = 3,
};

// Enum Engine.EMeshFeatureImportance
enum class EMeshFeatureImportance : uint8_t {
	Off = 0,
	Lowest = 1,
	Low = 2,
	Normal = 3,
	High = 4,
	Highest = 5,
	EMeshFeatureImportance_MAX = 6,
};

// Enum Engine.EVertexPaintAxis
enum class EVertexPaintAxis : uint8_t {
	X = 0,
	Y = 1,
	Z = 2,
	EVertexPaintAxis_MAX = 3,
};

// Enum Engine.EMicroTransactionResult
enum class EMicroTransactionResult : uint8_t {
	MTR_Succeeded = 0,
	MTR_Failed = 1,
	MTR_Canceled = 2,
	MTR_RestoredFromServer = 3,
	MTR_MAX = 4,
};

// Enum Engine.EMicroTransactionDelegate
enum class EMicroTransactionDelegate : uint8_t {
	MTD_PurchaseQueryComplete = 0,
	MTD_PurchaseComplete = 1,
	MTD_MAX = 2,
};

// Enum Engine.FNavigationSystemRunMode
enum class FNavigationSystemRunMode : uint8_t {
	InvalidMode = 0,
	GameMode = 1,
	EditorMode = 2,
	SimulationMode = 3,
	PIEMode = 4,
	FNavigationSystemRunMode_MAX = 5,
};

// Enum Engine.ENavigationQueryResult
enum class ENavigationQueryResult : uint8_t {
	Invalid = 0,
	Error = 1,
	Fail = 2,
	Success = 3,
	ENavigationQueryResult_MAX = 4,
};

// Enum Engine.ENavPathEvent
enum class ENavPathEvent : uint8_t {
	Cleared = 0,
	NewPath = 1,
	UpdatedDueToGoalMoved = 2,
	UpdatedDueToNavigationChanged = 3,
	Invalidated = 4,
	RePathFailed = 5,
	MetaPathUpdate = 6,
	Custom = 7,
	ENavPathEvent_MAX = 8,
};

// Enum Engine.ENavDataGatheringModeConfig
enum class ENavDataGatheringModeConfig : uint8_t {
	Invalid = 0,
	Instant = 1,
	Lazy = 2,
	ENavDataGatheringModeConfig_MAX = 3,
};

// Enum Engine.ENavDataGatheringMode
enum class ENavDataGatheringMode : uint8_t {
	Default = 0,
	Instant = 1,
	Lazy = 2,
	ENavDataGatheringMode_MAX = 3,
};

// Enum Engine.ENavigationOptionFlag
enum class ENavigationOptionFlag : uint8_t {
	Default = 0,
	Enable = 1,
	Disable = 2,
	MAX = 3,
};

// Enum Engine.ENavLinkDirection
enum class ENavLinkDirection : uint8_t {
	BothWays = 0,
	LeftToRight = 1,
	RightToLeft = 2,
	ENavLinkDirection_MAX = 3,
};

// Enum Engine.EFastArraySerializerDeltaFlags
enum class EFastArraySerializerDeltaFlags : uint8_t {
	None = 0,
	HasBeenSerialized = 1,
	HasDeltaBeenRequested = 2,
	IsUsingDeltaSerialization = 4,
	EFastArraySerializerDeltaFlags_MAX = 5,
};

// Enum Engine.EEmitterRenderMode
enum class EEmitterRenderMode : uint8_t {
	ERM_Normal = 0,
	ERM_Point = 1,
	ERM_Cross = 2,
	ERM_LightsOnly = 3,
	ERM_None = 4,
	ERM_MAX = 5,
};

// Enum Engine.EParticleSubUVInterpMethod
enum class EParticleSubUVInterpMethod : uint8_t {
	PSUVIM_None = 0,
	PSUVIM_Linear = 1,
	PSUVIM_Linear_Blend = 2,
	PSUVIM_Random = 3,
	PSUVIM_Random_Blend = 4,
	PSUVIM_MAX = 5,
};

// Enum Engine.EParticleBurstMethod
enum class EParticleBurstMethod : uint8_t {
	EPBM_Instant = 0,
	EPBM_Interpolated = 1,
	EPBM_MAX = 2,
};

// Enum Engine.EParticleSystemInsignificanceReaction
enum class EParticleSystemInsignificanceReaction : uint8_t {
	Auto = 0,
	Complete = 1,
	DisableTick = 2,
	DisableTickAndKill = 3,
	Num = 4,
	EParticleSystemInsignificanceReaction_MAX = 5,
};

// Enum Engine.EParticleSignificanceLevel
enum class EParticleSignificanceLevel : uint8_t {
	Low = 0,
	Medium = 1,
	High = 2,
	Critical = 3,
	Num = 4,
	EParticleSignificanceLevel_MAX = 5,
};

// Enum Engine.EParticleDetailMode
enum class EParticleDetailMode : uint8_t {
	PDM_Low = 0,
	PDM_Medium = 1,
	PDM_High = 2,
	PDM_MAX = 3,
};

// Enum Engine.EParticleSourceSelectionMethod
enum class EParticleSourceSelectionMethod : uint8_t {
	EPSSM_Random = 0,
	EPSSM_Sequential = 1,
	EPSSM_MAX = 2,
};

// Enum Engine.EModuleType
enum class EModuleType : uint8_t {
	EPMT_General = 0,
	EPMT_TypeData = 1,
	EPMT_Beam = 2,
	EPMT_Trail = 3,
	EPMT_Spawn = 4,
	EPMT_Required = 5,
	EPMT_Event = 6,
	EPMT_Light = 7,
	EPMT_SubUV = 8,
	EPMT_MAX = 9,
};

// Enum Engine.EAttractorParticleSelectionMethod
enum class EAttractorParticleSelectionMethod : uint8_t {
	EAPSM_Random = 0,
	EAPSM_Sequential = 1,
	EAPSM_MAX = 2,
};

// Enum Engine.Beam2SourceTargetTangentMethod
enum class Beam2SourceTargetTangentMethod : uint8_t {
	PEB2STTM_Direct = 0,
	PEB2STTM_UserSet = 1,
	PEB2STTM_Distribution = 2,
	PEB2STTM_Emitter = 3,
	PEB2STTM_MAX = 4,
};

// Enum Engine.Beam2SourceTargetMethod
enum class Beam2SourceTargetMethod : uint8_t {
	PEB2STM_Default = 0,
	PEB2STM_UserSet = 1,
	PEB2STM_Emitter = 2,
	PEB2STM_Particle = 3,
	PEB2STM_Actor = 4,
	PEB2STM_MAX = 5,
};

// Enum Engine.BeamModifierType
enum class BeamModifierType : uint8_t {
	PEB2MT_Source = 0,
	PEB2MT_Target = 1,
	PEB2MT_MAX = 2,
};

// Enum Engine.EParticleCameraOffsetUpdateMethod
enum class EParticleCameraOffsetUpdateMethod : uint8_t {
	EPCOUM_DirectSet = 0,
	EPCOUM_Additive = 1,
	EPCOUM_Scalar = 2,
	EPCOUM_MAX = 3,
};

// Enum Engine.EParticleCollisionComplete
enum class EParticleCollisionComplete : uint8_t {
	EPCC_Kill = 0,
	EPCC_Freeze = 1,
	EPCC_HaltCollisions = 2,
	EPCC_FreezeTranslation = 3,
	EPCC_FreezeRotation = 4,
	EPCC_FreezeMovement = 5,
	EPCC_MAX = 6,
};

// Enum Engine.EParticleCollisionResponse
enum class EParticleCollisionResponse : uint8_t {
	Bounce = 0,
	Stop = 1,
	Kill = 2,
	EParticleCollisionResponse_MAX = 3,
};

// Enum Engine.ELocationBoneSocketSelectionMethod
enum class ELocationBoneSocketSelectionMethod : uint8_t {
	BONESOCKETSEL_Sequential = 0,
	BONESOCKETSEL_Random = 1,
	BONESOCKETSEL_MAX = 2,
};

// Enum Engine.ELocationBoneSocketSource
enum class ELocationBoneSocketSource : uint8_t {
	BONESOCKETSOURCE_Bones = 0,
	BONESOCKETSOURCE_Sockets = 1,
	BONESOCKETSOURCE_MAX = 2,
};

// Enum Engine.ELocationEmitterSelectionMethod
enum class ELocationEmitterSelectionMethod : uint8_t {
	ELESM_Random = 0,
	ELESM_Sequential = 1,
	ELESM_MAX = 2,
};

// Enum Engine.CylinderHeightAxis
enum class CylinderHeightAxis : uint8_t {
	PMLPC_HEIGHTAXIS_X = 0,
	PMLPC_HEIGHTAXIS_Y = 1,
	PMLPC_HEIGHTAXIS_Z = 2,
	PMLPC_HEIGHTAXIS_MAX = 3,
};

// Enum Engine.ELocationSkelVertSurfaceSource
enum class ELocationSkelVertSurfaceSource : uint8_t {
	VERTSURFACESOURCE_Vert = 0,
	VERTSURFACESOURCE_Surface = 1,
	VERTSURFACESOURCE_MAX = 2,
};

// Enum Engine.EOrbitChainMode
enum class EOrbitChainMode : uint8_t {
	EOChainMode_Add = 0,
	EOChainMode_Scale = 1,
	EOChainMode_Link = 2,
	EOChainMode_MAX = 3,
};

// Enum Engine.EParticleAxisLock
enum class EParticleAxisLock : uint8_t {
	EPAL_NONE = 0,
	EPAL_X = 1,
	EPAL_Y = 2,
	EPAL_Z = 3,
	EPAL_NEGATIVE_X = 4,
	EPAL_NEGATIVE_Y = 5,
	EPAL_NEGATIVE_Z = 6,
	EPAL_ROTATE_X = 7,
	EPAL_ROTATE_Y = 8,
	EPAL_ROTATE_Z = 9,
	EPAL_MAX = 10,
};

// Enum Engine.EEmitterDynamicParameterValue
enum class EEmitterDynamicParameterValue : uint8_t {
	EDPV_UserSet = 0,
	EDPV_AutoSet = 1,
	EDPV_VelocityX = 2,
	EDPV_VelocityY = 3,
	EDPV_VelocityZ = 4,
	EDPV_VelocityMag = 5,
	EDPV_MAX = 6,
};

// Enum Engine.EEmitterNormalsMode
enum class EEmitterNormalsMode : uint8_t {
	ENM_CameraFacing = 0,
	ENM_Spherical = 1,
	ENM_Cylindrical = 2,
	ENM_MAX = 3,
};

// Enum Engine.EParticleSortMode
enum class EParticleSortMode : uint8_t {
	PSORTMODE_None = 0,
	PSORTMODE_ViewProjDepth = 1,
	PSORTMODE_DistanceToView = 2,
	PSORTMODE_Age_OldestFirst = 3,
	PSORTMODE_Age_NewestFirst = 4,
	PSORTMODE_MAX = 5,
};

// Enum Engine.EParticleUVFlipMode
enum class EParticleUVFlipMode : uint8_t {
	None = 0,
	FlipUV = 1,
	FlipUOnly = 2,
	FlipVOnly = 3,
	RandomFlipUV = 4,
	RandomFlipUOnly = 5,
	RandomFlipVOnly = 6,
	RandomFlipUVIndependent = 7,
	EParticleUVFlipMode_MAX = 8,
};

// Enum Engine.ETrail2SourceMethod
enum class ETrail2SourceMethod : uint8_t {
	PET2SRCM_Default = 0,
	PET2SRCM_Particle = 1,
	PET2SRCM_Actor = 2,
	PET2SRCM_MAX = 3,
};

// Enum Engine.EBeamTaperMethod
enum class EBeamTaperMethod : uint8_t {
	PEBTM_None = 0,
	PEBTM_Full = 1,
	PEBTM_Partial = 2,
	PEBTM_MAX = 3,
};

// Enum Engine.EBeam2Method
enum class EBeam2Method : uint8_t {
	PEB2M_Distance = 0,
	PEB2M_Target = 1,
	PEB2M_Branch = 2,
	PEB2M_MAX = 3,
};

// Enum Engine.EMeshCameraFacingOptions
enum class EMeshCameraFacingOptions : uint8_t {
	XAxisFacing_NoUp = 0,
	XAxisFacing_ZUp = 1,
	XAxisFacing_NegativeZUp = 2,
	XAxisFacing_YUp = 3,
	XAxisFacing_NegativeYUp = 4,
	LockedAxis_ZAxisFacing = 5,
	LockedAxis_NegativeZAxisFacing = 6,
	LockedAxis_YAxisFacing = 7,
	LockedAxis_NegativeYAxisFacing = 8,
	VelocityAligned_ZAxisFacing = 9,
	VelocityAligned_NegativeZAxisFacing = 10,
	VelocityAligned_YAxisFacing = 11,
	VelocityAligned_NegativeYAxisFacing = 12,
	EMeshCameraFacingOptions_MAX = 13,
};

// Enum Engine.EMeshCameraFacingUpAxis
enum class EMeshCameraFacingUpAxis : uint8_t {
	CameraFacing_NoneUP = 0,
	CameraFacing_ZUp = 1,
	CameraFacing_NegativeZUp = 2,
	CameraFacing_YUp = 3,
	CameraFacing_NegativeYUp = 4,
	CameraFacing_MAX = 5,
};

// Enum Engine.EMeshScreenAlignment
enum class EMeshScreenAlignment : uint8_t {
	PSMA_MeshFaceCameraWithRoll = 0,
	PSMA_MeshFaceCameraWithSpin = 1,
	PSMA_MeshFaceCameraWithLockedAxis = 2,
	PSMA_MAX = 3,
};

// Enum Engine.ETrailsRenderAxisOption
enum class ETrailsRenderAxisOption : uint8_t {
	Trails_CameraUp = 0,
	Trails_SourceUp = 1,
	Trails_WorldUp = 2,
	Trails_MAX = 3,
};

// Enum Engine.EParticleScreenAlignment
enum class EParticleScreenAlignment : uint8_t {
	PSA_FacingCameraPosition = 0,
	PSA_Square = 1,
	PSA_Rectangle = 2,
	PSA_Velocity = 3,
	PSA_AwayFromCenter = 4,
	PSA_TypeSpecific = 5,
	PSA_FacingCameraDistanceBlend = 6,
	PSA_MAX = 7,
};

// Enum Engine.EParticleSystemOcclusionBoundsMethod
enum class EParticleSystemOcclusionBoundsMethod : uint8_t {
	EPSOBM_None = 0,
	EPSOBM_ParticleBounds = 1,
	EPSOBM_CustomBounds = 2,
	EPSOBM_MAX = 3,
};

// Enum Engine.ParticleSystemLODMethod
enum class ParticleSystemLODMethod : uint8_t {
	PARTICLESYSTEMLODMETHOD_Automatic = 0,
	PARTICLESYSTEMLODMETHOD_DirectSet = 1,
	PARTICLESYSTEMLODMETHOD_ActivateAutomatic = 2,
	PARTICLESYSTEMLODMETHOD_MAX = 3,
};

// Enum Engine.EParticleSystemUpdateMode
enum class EParticleSystemUpdateMode : uint8_t {
	EPSUM_RealTime = 0,
	EPSUM_FixedTime = 1,
	EPSUM_MAX = 2,
};

// Enum Engine.EParticleEventType
enum class EParticleEventType : uint8_t {
	EPET_Any = 0,
	EPET_Spawn = 1,
	EPET_Death = 2,
	EPET_Collision = 3,
	EPET_Burst = 4,
	EPET_Blueprint = 5,
	EPET_MAX = 6,
};

// Enum Engine.ParticleReplayState
enum class ParticleReplayState : uint8_t {
	PRS_Disabled = 0,
	PRS_Capturing = 1,
	PRS_Replaying = 2,
	PRS_MAX = 3,
};

// Enum Engine.EParticleSysParamType
enum class EParticleSysParamType : uint8_t {
	PSPT_None = 0,
	PSPT_Scalar = 1,
	PSPT_ScalarRand = 2,
	PSPT_Vector = 3,
	PSPT_VectorRand = 4,
	PSPT_Color = 5,
	PSPT_Actor = 6,
	PSPT_Material = 7,
	PSPT_VectorUnitRand = 8,
	PSPT_MAX = 9,
};

// Enum Engine.ESettingsLockedAxis
enum class ESettingsLockedAxis : uint8_t {
	None = 0,
	X = 1,
	Y = 2,
	Z = 3,
	Invalid = 4,
	ESettingsLockedAxis_MAX = 5,
};

// Enum Engine.ESettingsDOF
enum class ESettingsDOF : uint8_t {
	Full3D = 0,
	YZPlane = 1,
	XZPlane = 2,
	XYPlane = 3,
	ESettingsDOF_MAX = 4,
};

// Enum Engine.EFrictionCombineMode
enum class EFrictionCombineMode : uint8_t {
	Average = 0,
	Min = 1,
	Multiply = 2,
	Max = 3,
};

// Enum Engine.EViewTargetBlendFunction
enum class EViewTargetBlendFunction : uint8_t {
	VTBlend_Linear = 0,
	VTBlend_Cubic = 1,
	VTBlend_EaseIn = 2,
	VTBlend_EaseOut = 3,
	VTBlend_EaseInOut = 4,
	VTBlend_MAX = 5,
};

// Enum Engine.EDynamicForceFeedbackAction
enum class EDynamicForceFeedbackAction : uint8_t {
	Start = 0,
	Update = 1,
	Stop = 2,
	EDynamicForceFeedbackAction_MAX = 3,
};

// Enum Engine.ERendererStencilMask
enum class ERendererStencilMask : uint8_t {
	ERSM_Default = 0,
	ERSM_256 = 1,
	ERSM_2 = 2,
	ERSM_3 = 3,
	ERSM_5 = 4,
	ERSM_9 = 5,
	ERSM_17 = 6,
	ERSM_33 = 7,
	ERSM_65 = 8,
	ERSM_129 = 9,
	ERSM_MAX = 10,
};

// Enum Engine.EHasCustomNavigableGeometry
enum class EHasCustomNavigableGeometry : uint8_t {
	No = 0,
	Yes = 1,
	EvenIfNotCollidable = 2,
	DontExport = 3,
	EHasCustomNavigableGeometry_MAX = 4,
};

// Enum Engine.ECanBeCharacterBase
enum class ECanBeCharacterBase : uint8_t {
	ECB_No = 0,
	ECB_Yes = 1,
	ECB_Owner = 2,
	ECB_MAX = 3,
};

// Enum Engine.ERichCurveExtrapolation
enum class ERichCurveExtrapolation : uint8_t {
	RCCE_Cycle = 0,
	RCCE_CycleWithOffset = 1,
	RCCE_Oscillate = 2,
	RCCE_Linear = 3,
	RCCE_Constant = 4,
	RCCE_None = 5,
	RCCE_MAX = 6,
};

// Enum Engine.ERichCurveInterpMode
enum class ERichCurveInterpMode : uint8_t {
	RCIM_Linear = 0,
	RCIM_Constant = 1,
	RCIM_Cubic = 2,
	RCIM_None = 3,
	RCIM_MAX = 4,
};

// Enum Engine.EReflectionSourceType
enum class EReflectionSourceType : uint8_t {
	CapturedScene = 0,
	SpecifiedCubemap = 1,
	EReflectionSourceType_MAX = 2,
};

// Enum Engine.EDefaultBackBufferPixelFormat
enum class EDefaultBackBufferPixelFormat : uint8_t {
	DBBPF_B8G8R8A8 = 0,
	DBBPF_A16B16G16R16_DEPRECATED = 1,
	DBBPF_FloatRGB_DEPRECATED = 2,
	DBBPF_FloatRGBA = 3,
	DBBPF_A2B10G10R10 = 4,
	DBBPF_MAX = 5,
};

// Enum Engine.EAutoExposureMethodUI
enum class EAutoExposureMethodUI : uint8_t {
	AEM_Histogram = 0,
	AEM_Basic = 1,
	AEM_Manual = 2,
	AEM_MAX = 3,
};

// Enum Engine.EAlphaChannelMode
enum class EAlphaChannelMode : uint8_t {
	Disabled = 0,
	LinearColorSpaceOnly = 1,
	AllowThroughTonemapper = 2,
	EAlphaChannelMode_MAX = 3,
};

// Enum Engine.EEarlyZPass
enum class EEarlyZPass : uint8_t {
	None = 0,
	OpaqueOnly = 1,
	OpaqueAndMasked = 2,
	Auto = 3,
	EEarlyZPass_MAX = 4,
};

// Enum Engine.ECustomDepthStencil
enum class ECustomDepthStencil : uint8_t {
	Disabled = 0,
	Enabled = 1,
	EnabledOnDemand = 2,
	EnabledWithStencil = 3,
	ECustomDepthStencil_MAX = 4,
};

// Enum Engine.EMobileMSAASampleCount
enum class EMobileMSAASampleCount : uint8_t {
	One = 1,
	Two = 2,
	Four = 4,
	Eight = 8,
	EMobileMSAASampleCount_MAX = 9,
};

// Enum Engine.ECompositingSampleCount
enum class ECompositingSampleCount : uint8_t {
	One = 1,
	Two = 2,
	Four = 4,
	Eight = 8,
	ECompositingSampleCount_MAX = 9,
};

// Enum Engine.EClearSceneOptions
enum class EClearSceneOptions : uint8_t {
	NoClear = 0,
	HardwareClear = 1,
	QuadAtMaxZ = 2,
	EClearSceneOptions_MAX = 3,
};

// Enum Engine.EReporterLineStyle
enum class EReporterLineStyle : uint8_t {
	Line = 0,
	Dash = 1,
	EReporterLineStyle_MAX = 2,
};

// Enum Engine.ELegendPosition
enum class ELegendPosition : uint8_t {
	Outside = 0,
	Inside = 1,
	ELegendPosition_MAX = 2,
};

// Enum Engine.EGraphDataStyle
enum class EGraphDataStyle : uint8_t {
	Lines = 0,
	Filled = 1,
	EGraphDataStyle_MAX = 2,
};

// Enum Engine.EGraphAxisStyle
enum class EGraphAxisStyle : uint8_t {
	Lines = 0,
	Notches = 1,
	Grid = 2,
	EGraphAxisStyle_MAX = 3,
};

// Enum Engine.ReverbPreset
enum class ReverbPreset : uint8_t {
	REVERB_Default = 0,
	REVERB_Bathroom = 1,
	REVERB_StoneRoom = 2,
	REVERB_Auditorium = 3,
	REVERB_ConcertHall = 4,
	REVERB_Cave = 5,
	REVERB_Hallway = 6,
	REVERB_StoneCorridor = 7,
	REVERB_Alley = 8,
	REVERB_Forest = 9,
	REVERB_City = 10,
	REVERB_Mountains = 11,
	REVERB_Quarry = 12,
	REVERB_Plain = 13,
	REVERB_ParkingLot = 14,
	REVERB_SewerPipe = 15,
	REVERB_Underwater = 16,
	REVERB_SmallRoom = 17,
	REVERB_MediumRoom = 18,
	REVERB_LargeRoom = 19,
	REVERB_MediumHall = 20,
	REVERB_LargeHall = 21,
	REVERB_Plate = 22,
	REVERB_MAX = 23,
};

// Enum Engine.ERichCurveKeyTimeCompressionFormat
enum class ERichCurveKeyTimeCompressionFormat : uint8_t {
	RCKTCF_uint16 = 0,
	RCKTCF_float32 = 1,
	RCKTCF_MAX = 2,
};

// Enum Engine.ERichCurveCompressionFormat
enum class ERichCurveCompressionFormat : uint8_t {
	RCCF_Empty = 0,
	RCCF_Constant = 1,
	RCCF_Linear = 2,
	RCCF_Cubic = 3,
	RCCF_Mixed = 4,
	RCCF_MAX = 5,
};

// Enum Engine.ERichCurveTangentWeightMode
enum class ERichCurveTangentWeightMode : uint8_t {
	RCTWM_WeightedNone = 0,
	RCTWM_WeightedArrive = 1,
	RCTWM_WeightedLeave = 2,
	RCTWM_WeightedBoth = 3,
	RCTWM_MAX = 4,
};

// Enum Engine.ERichCurveTangentMode
enum class ERichCurveTangentMode : uint8_t {
	RCTM_Auto = 0,
	RCTM_User = 1,
	RCTM_Break = 2,
	RCTM_None = 3,
	RCTM_MAX = 4,
};

// Enum Engine.EConstraintTransform
enum class EConstraintTransform : uint8_t {
	Absolute = 0,
	Relative = 1,
	EConstraintTransform_MAX = 2,
};

// Enum Engine.EControlConstraint
enum class EControlConstraint : uint8_t {
	Orientation = 0,
	Translation = 1,
	MAX = 2,
};

// Enum Engine.ERootMotionFinishVelocityMode
enum class ERootMotionFinishVelocityMode : uint8_t {
	MaintainLastRootMotionVelocity = 0,
	SetVelocity = 1,
	ClampVelocity = 2,
	ERootMotionFinishVelocityMode_MAX = 3,
};

// Enum Engine.ERootMotionSourceSettingsFlags
enum class ERootMotionSourceSettingsFlags : uint8_t {
	UseSensitiveLiftoffCheck = 1,
	DisablePartialEndTick = 2,
	IgnoreZAccumulate = 4,
	ERootMotionSourceSettingsFlags_MAX = 5,
};

// Enum Engine.ERootMotionSourceStatusFlags
enum class ERootMotionSourceStatusFlags : uint8_t {
	Prepared = 1,
	Finished = 2,
	MarkedForRemoval = 4,
	ERootMotionSourceStatusFlags_MAX = 5,
};

// Enum Engine.ERootMotionAccumulateMode
enum class ERootMotionAccumulateMode : uint8_t {
	Override = 0,
	Additive = 1,
	ERootMotionAccumulateMode_MAX = 2,
};

// Enum Engine.ERuntimeVirtualTextureMainPassType
enum class ERuntimeVirtualTextureMainPassType : uint8_t {
	Never = 0,
	Exclusive = 1,
	Always = 2,
	ERuntimeVirtualTextureMainPassType_MAX = 3,
};

// Enum Engine.ERuntimeVirtualTextureMaterialType
enum class ERuntimeVirtualTextureMaterialType : uint8_t {
	BaseColor = 0,
	BaseColor_Normal_DEPRECATED = 1,
	BaseColor_Normal_Specular = 2,
	BaseColor_Normal_Specular_YCoCg = 3,
	BaseColor_Normal_Specular_Mask_YCoCg = 4,
	WorldHeight = 5,
	Count = 6,
	ERuntimeVirtualTextureMaterialType_MAX = 7,
};

// Enum Engine.EReflectedAndRefractedRayTracedShadows
enum class EReflectedAndRefractedRayTracedShadows : uint8_t {
	Disabled = 0,
	Hard_shadows = 1,
	Area_shadows = 2,
	EReflectedAndRefractedRayTracedShadows_MAX = 3,
};

// Enum Engine.ERayTracingGlobalIlluminationType
enum class ERayTracingGlobalIlluminationType : uint8_t {
	Disabled = 0,
	BruteForce = 1,
	FinalGather = 2,
	ERayTracingGlobalIlluminationType_MAX = 3,
};

// Enum Engine.ETranslucencyType
enum class ETranslucencyType : uint8_t {
	Raster = 0,
	RayTracing = 1,
	ETranslucencyType_MAX = 2,
};

// Enum Engine.EReflectionsType
enum class EReflectionsType : uint8_t {
	ScreenSpace = 0,
	RayTracing = 1,
	EReflectionsType_MAX = 2,
};

// Enum Engine.ELightUnits
enum class ELightUnits : uint8_t {
	Unitless = 0,
	Candelas = 1,
	Lumens = 2,
	ELightUnits_MAX = 3,
};

// Enum Engine.EBloomMethod
enum class EBloomMethod : uint8_t {
	BM_SOG = 0,
	BM_FFT = 1,
	BM_MAX = 2,
};

// Enum Engine.EAutoExposureMethod
enum class EAutoExposureMethod : uint8_t {
	AEM_Histogram = 0,
	AEM_Basic = 1,
	AEM_Manual = 2,
	AEM_MAX = 3,
};

// Enum Engine.EAntiAliasingMethod
enum class EAntiAliasingMethod : uint8_t {
	AAM_None = 0,
	AAM_FXAA = 1,
	AAM_TemporalAA = 2,
	AAM_MSAA = 3,
	AAM_MAX = 4,
};

// Enum Engine.EDepthOfFieldMethod
enum class EDepthOfFieldMethod : uint8_t {
	DOFM_BokehDOF = 0,
	DOFM_Gaussian = 1,
	DOFM_CircleDOF = 2,
	DOFM_MAX = 3,
};

// Enum Engine.ESceneCapturePrimitiveRenderMode
enum class ESceneCapturePrimitiveRenderMode : uint8_t {
	PRM_LegacySceneCapture = 0,
	PRM_RenderScenePrimitives = 1,
	PRM_UseShowOnlyList = 2,
	PRM_MAX = 3,
};

// Enum Engine.EMaterialProperty
enum class EMaterialProperty : uint8_t {
	MP_EmissiveColor = 0,
	MP_Opacity = 1,
	MP_OpacityMask = 2,
	MP_DiffuseColor = 3,
	MP_SpecularColor = 4,
	MP_BaseColor = 5,
	MP_Metallic = 6,
	MP_Specular = 7,
	MP_Roughness = 8,
	MP_Anisotropy = 9,
	MP_Normal = 10,
	MP_Tangent = 11,
	MP_WorldPositionOffset = 12,
	MP_WorldDisplacement = 13,
	MP_TessellationMultiplier = 14,
	MP_SubsurfaceColor = 15,
	MP_CustomData0 = 16,
	MP_CustomData1 = 17,
	MP_AmbientOcclusion = 18,
	MP_Refraction = 19,
	MP_CustomizedUVs0 = 20,
	MP_CustomizedUVs1 = 21,
	MP_CustomizedUVs2 = 22,
	MP_CustomizedUVs3 = 23,
	MP_CustomizedUVs4 = 24,
	MP_CustomizedUVs5 = 25,
	MP_CustomizedUVs6 = 26,
	MP_CustomizedUVs7 = 27,
	MP_PixelDepthOffset = 28,
	MP_ShadingModel = 29,
	MP_MaterialAttributes = 30,
	MP_CustomOutput = 31,
	MP_MAX = 32,
};

// Enum Engine.ESkinCacheDefaultBehavior
enum class ESkinCacheDefaultBehavior : uint8_t {
	Exclusive = 0,
	Inclusive = 1,
	ESkinCacheDefaultBehavior_MAX = 2,
};

// Enum Engine.ESkinCacheUsage
enum class ESkinCacheUsage : uint8_t {
	Auto = 0,
	Disabled = 255,
	Enabled = 1,
	ESkinCacheUsage_MAX = 256,
};

// Enum Engine.EPhysicsTransformUpdateMode
enum class EPhysicsTransformUpdateMode : uint8_t {
	SimulationUpatesComponentTransform = 0,
	ComponentTransformIsKinematic = 1,
	EPhysicsTransformUpdateMode_MAX = 2,
};

// Enum Engine.EAnimationMode
enum class EAnimationMode : uint8_t {
	AnimationBlueprint = 0,
	AnimationSingleNode = 1,
	AnimationCustomMode = 2,
	EAnimationMode_MAX = 3,
};

// Enum Engine.EKinematicBonesUpdateToPhysics
enum class EKinematicBonesUpdateToPhysics : uint8_t {
	SkipSimulatingBones = 0,
	SkipAllBones = 1,
	EKinematicBonesUpdateToPhysics_MAX = 2,
};

// Enum Engine.EClothMassMode
enum class EClothMassMode : uint8_t {
	UniformMass = 0,
	TotalMass = 1,
	Density = 2,
	MaxClothMassMode = 3,
	EClothMassMode_MAX = 4,
};

// Enum Engine.EAnimCurveType
enum class EAnimCurveType : uint8_t {
	AttributeCurve = 0,
	MaterialCurve = 1,
	MorphTargetCurve = 2,
	MaxAnimCurveType = 3,
	EAnimCurveType_MAX = 4,
};

// Enum Engine.ESkeletalMeshSkinningImportVersions
enum class ESkeletalMeshSkinningImportVersions : uint8_t {
	Before_Versionning = 0,
	SkeletalMeshBuildRefactor = 1,
	VersionPlusOne = 2,
	LatestVersion = 1,
	ESkeletalMeshSkinningImportVersions_MAX = 3,
};

// Enum Engine.ESkeletalMeshGeoImportVersions
enum class ESkeletalMeshGeoImportVersions : uint8_t {
	Before_Versionning = 0,
	SkeletalMeshBuildRefactor = 1,
	VersionPlusOne = 2,
	LatestVersion = 1,
	ESkeletalMeshGeoImportVersions_MAX = 3,
};

// Enum Engine.EBoneFilterActionOption
enum class EBoneFilterActionOption : uint8_t {
	Remove = 0,
	Keep = 1,
	Invalid = 2,
	EBoneFilterActionOption_MAX = 3,
};

// Enum Engine.SkeletalMeshOptimizationImportance
enum class SkeletalMeshOptimizationImportance : uint8_t {
	SMOI_Off = 0,
	SMOI_Lowest = 1,
	SMOI_Low = 2,
	SMOI_Normal = 3,
	SMOI_High = 4,
	SMOI_Highest = 5,
	SMOI_MAX = 6,
};

// Enum Engine.SkeletalMeshOptimizationType
enum class SkeletalMeshOptimizationType : uint8_t {
	SMOT_NumOfTriangles = 0,
	SMOT_MaxDeviation = 1,
	SMOT_TriangleOrDeviation = 2,
	SMOT_MAX = 3,
};

// Enum Engine.SkeletalMeshTerminationCriterion
enum class SkeletalMeshTerminationCriterion : uint8_t {
	SMTC_NumOfTriangles = 0,
	SMTC_NumOfVerts = 1,
	SMTC_TriangleOrVert = 2,
	SMTC_AbsNumOfTriangles = 3,
	SMTC_AbsNumOfVerts = 4,
	SMTC_AbsTriangleOrVert = 5,
	SMTC_MAX = 6,
};

// Enum Engine.EBoneTranslationRetargetingMode
enum class EBoneTranslationRetargetingMode : uint8_t {
	Animation = 0,
	Skeleton = 1,
	AnimationScaled = 2,
	AnimationRelative = 3,
	OrientAndScale = 4,
	EBoneTranslationRetargetingMode_MAX = 5,
};

// Enum Engine.EBoneSpaces
enum class EBoneSpaces : uint8_t {
	WorldSpace = 0,
	ComponentSpace = 1,
	EBoneSpaces_MAX = 2,
};

// Enum Engine.EVisibilityBasedAnimTickOption
enum class EVisibilityBasedAnimTickOption : uint8_t {
	AlwaysTickPoseAndRefreshBones = 0,
	AlwaysTickPose = 1,
	OnlyTickMontagesWhenNotRendered = 2,
	OnlyTickPoseWhenRendered = 3,
	EVisibilityBasedAnimTickOption_MAX = 4,
};

// Enum Engine.EPhysBodyOp
enum class EPhysBodyOp : uint8_t {
	PBO_None = 0,
	PBO_Term = 1,
	PBO_MAX = 2,
};

// Enum Engine.EBoneVisibilityStatus
enum class EBoneVisibilityStatus : uint8_t {
	BVS_HiddenByParent = 0,
	BVS_Visible = 1,
	BVS_ExplicitlyHidden = 2,
	BVS_MAX = 3,
};

// Enum Engine.ESkyAtmosphereTransformMode
enum class ESkyAtmosphereTransformMode : uint8_t {
	PlanetTopAtAbsoluteWorldOrigin = 0,
	PlanetTopAtComponentTransform = 1,
	PlanetCenterAtComponentTransform = 2,
	ESkyAtmosphereTransformMode_MAX = 3,
};

// Enum Engine.ESkyLightSourceType
enum class ESkyLightSourceType : uint8_t {
	SLS_CapturedScene = 0,
	SLS_SpecifiedCubemap = 1,
	SLS_MAX = 2,
};

// Enum Engine.EPriorityAttenuationMethod
enum class EPriorityAttenuationMethod : uint8_t {
	Linear = 0,
	CustomCurve = 1,
	Manual = 2,
	EPriorityAttenuationMethod_MAX = 3,
};

// Enum Engine.ESubmixSendMethod
enum class ESubmixSendMethod : uint8_t {
	Linear = 0,
	CustomCurve = 1,
	Manual = 2,
	ESubmixSendMethod_MAX = 3,
};

// Enum Engine.EReverbSendMethod
enum class EReverbSendMethod : uint8_t {
	Linear = 0,
	CustomCurve = 1,
	Manual = 2,
	EReverbSendMethod_MAX = 3,
};

// Enum Engine.EAirAbsorptionMethod
enum class EAirAbsorptionMethod : uint8_t {
	Linear = 0,
	CustomCurve = 1,
	EAirAbsorptionMethod_MAX = 2,
};

// Enum Engine.ESoundSpatializationAlgorithm
enum class ESoundSpatializationAlgorithm : uint8_t {
	SPATIALIZATION_Default = 0,
	SPATIALIZATION_HRTF = 1,
	SPATIALIZATION_MAX = 2,
};

// Enum Engine.ESoundDistanceCalc
enum class ESoundDistanceCalc : uint8_t {
	SOUNDDISTANCE_Normal = 0,
	SOUNDDISTANCE_InfiniteXYPlane = 1,
	SOUNDDISTANCE_InfiniteXZPlane = 2,
	SOUNDDISTANCE_InfiniteYZPlane = 3,
	SOUNDDISTANCE_MAX = 4,
};

// Enum Engine.EVirtualizationMode
enum class EVirtualizationMode : uint8_t {
	Disabled = 0,
	PlayWhenSilent = 1,
	Restart = 2,
	EVirtualizationMode_MAX = 3,
};

// Enum Engine.EMaxConcurrentResolutionRule
enum class EMaxConcurrentResolutionRule : uint8_t {
	PreventNew = 0,
	StopOldest = 1,
	StopFarthestThenPreventNew = 2,
	StopFarthestThenOldest = 3,
	StopLowestPriority = 4,
	StopQuietest = 5,
	StopLowestPriorityThenPreventNew = 6,
	Count = 7,
	EMaxConcurrentResolutionRule_MAX = 8,
};

// Enum Engine.ESoundGroup
enum class ESoundGroup : uint8_t {
	SOUNDGROUP_Default = 0,
	SOUNDGROUP_Effects = 1,
	SOUNDGROUP_UI = 2,
	SOUNDGROUP_Music = 3,
	SOUNDGROUP_Voice = 4,
	SOUNDGROUP_GameSoundGroup1 = 5,
	SOUNDGROUP_GameSoundGroup2 = 6,
	SOUNDGROUP_GameSoundGroup3 = 7,
	SOUNDGROUP_GameSoundGroup4 = 8,
	SOUNDGROUP_GameSoundGroup5 = 9,
	SOUNDGROUP_GameSoundGroup6 = 10,
	SOUNDGROUP_GameSoundGroup7 = 11,
	SOUNDGROUP_GameSoundGroup8 = 12,
	SOUNDGROUP_GameSoundGroup9 = 13,
	SOUNDGROUP_GameSoundGroup10 = 14,
	SOUNDGROUP_GameSoundGroup11 = 15,
	SOUNDGROUP_GameSoundGroup12 = 16,
	SOUNDGROUP_GameSoundGroup13 = 17,
	SOUNDGROUP_GameSoundGroup14 = 18,
	SOUNDGROUP_GameSoundGroup15 = 19,
	SOUNDGROUP_GameSoundGroup16 = 20,
	SOUNDGROUP_GameSoundGroup17 = 21,
	SOUNDGROUP_GameSoundGroup18 = 22,
	SOUNDGROUP_GameSoundGroup19 = 23,
	SOUNDGROUP_GameSoundGroup20 = 24,
	SOUNDGROUP_MAX = 25,
};

// Enum Engine.ModulationParamMode
enum class ModulationParamMode : uint8_t {
	MPM_Normal = 0,
	MPM_Abs = 1,
	MPM_Direct = 2,
	MPM_MAX = 3,
};

// Enum Engine.ESourceBusChannels
enum class ESourceBusChannels : uint8_t {
	Mono = 0,
	Stereo = 1,
	ESourceBusChannels_MAX = 2,
};

// Enum Engine.ESourceBusSendLevelControlMethod
enum class ESourceBusSendLevelControlMethod : uint8_t {
	Linear = 0,
	CustomCurve = 1,
	Manual = 2,
	ESourceBusSendLevelControlMethod_MAX = 3,
};

// Enum Engine.ESendLevelControlMethod
enum class ESendLevelControlMethod : uint8_t {
	Linear = 0,
	CustomCurve = 1,
	Manual = 2,
	ESendLevelControlMethod_MAX = 3,
};

// Enum Engine.EAudioRecordingExportType
enum class EAudioRecordingExportType : uint8_t {
	SoundWave = 0,
	WavFile = 1,
	EAudioRecordingExportType_MAX = 2,
};

// Enum Engine.ESoundWaveFFTSize
enum class ESoundWaveFFTSize : uint8_t {
	VerySmall_65 = 0,
	Small_257 = 1,
	Medium_513 = 2,
	Large_1025 = 3,
	VeryLarge_2049 = 4,
	ESoundWaveFFTSize_MAX = 5,
};

// Enum Engine.EDecompressionType
enum class EDecompressionType : uint8_t {
	DTYPE_Setup = 0,
	DTYPE_Invalid = 1,
	DTYPE_Preview = 2,
	DTYPE_Native = 3,
	DTYPE_RealTime = 4,
	DTYPE_Procedural = 5,
	DTYPE_Xenon = 6,
	DTYPE_Streaming = 7,
	DTYPE_MAX = 8,
};

// Enum Engine.ESoundWaveLoadingBehavior
enum class ESoundWaveLoadingBehavior : uint8_t {
	Inherited = 0,
	RetainOnLoad = 1,
	PrimeOnLoad = 2,
	LoadOnDemand = 3,
	ForceInline = 4,
	Uninitialized = 255,
	ESoundWaveLoadingBehavior_MAX = 256,
};

// Enum Engine.ESplineCoordinateSpace
enum class ESplineCoordinateSpace : uint8_t {
	Local = 0,
	World = 1,
	ESplineCoordinateSpace_MAX = 2,
};

// Enum Engine.ESplinePointType
enum class ESplinePointType : uint8_t {
	Linear = 0,
	Curve = 1,
	Constant = 2,
	CurveClamped = 3,
	CurveCustomTangent = 4,
	ESplinePointType_MAX = 5,
};

// Enum Engine.ESplineMeshAxis
enum class ESplineMeshAxis : uint8_t {
	X = 0,
	Y = 1,
	Z = 2,
	ESplineMeshAxis_MAX = 3,
};

// Enum Engine.EOptimizationType
enum class EOptimizationType : uint8_t {
	OT_NumOfTriangles = 0,
	OT_MaxDeviation = 1,
	OT_MAX = 2,
};

// Enum Engine.EImportanceLevel
enum class EImportanceLevel : uint8_t {
	IL_Off = 0,
	IL_Lowest = 1,
	IL_Low = 2,
	IL_Normal = 3,
	IL_High = 4,
	IL_Highest = 5,
	TEMP_BROKEN2 = 6,
	EImportanceLevel_MAX = 7,
};

// Enum Engine.ENormalMode
enum class ENormalMode : uint8_t {
	NM_PreserveSmoothingGroups = 0,
	NM_RecalculateNormals = 1,
	NM_RecalculateNormalsSmooth = 2,
	NM_RecalculateNormalsHard = 3,
	TEMP_BROKEN = 4,
	ENormalMode_MAX = 5,
};

// Enum Engine.EStereoLayerShape
enum class EStereoLayerShape : uint8_t {
	SLSH_QuadLayer = 0,
	SLSH_CylinderLayer = 1,
	SLSH_CubemapLayer = 2,
	SLSH_EquirectLayer = 3,
	SLSH_MAX = 4,
};

// Enum Engine.EStereoLayerType
enum class EStereoLayerType : uint8_t {
	SLT_WorldLocked = 0,
	SLT_TrackerLocked = 1,
	SLT_FaceLocked = 2,
	SLT_MAX = 3,
};

// Enum Engine.EOpacitySourceMode
enum class EOpacitySourceMode : uint8_t {
	OSM_Alpha = 0,
	OSM_ColorBrightness = 1,
	OSM_RedChannel = 2,
	OSM_GreenChannel = 3,
	OSM_BlueChannel = 4,
	OSM_MAX = 5,
};

// Enum Engine.ESubUVBoundingVertexCount
enum class ESubUVBoundingVertexCount : uint8_t {
	BVC_FourVertices = 0,
	BVC_EightVertices = 1,
	BVC_MAX = 2,
};

// Enum Engine.EVerticalTextAligment
enum class EVerticalTextAligment : uint8_t {
	EVRTA_TextTop = 0,
	EVRTA_TextCenter = 1,
	EVRTA_TextBottom = 2,
	EVRTA_QuadTop = 3,
	EVRTA_MAX = 4,
};

// Enum Engine.EHorizTextAligment
enum class EHorizTextAligment : uint8_t {
	EHTA_Left = 0,
	EHTA_Center = 1,
	EHTA_Right = 2,
	EHTA_MAX = 3,
};

// Enum Engine.ETextureLossyCompressionAmount
enum class ETextureLossyCompressionAmount : uint8_t {
	TLCA_Default = 0,
	TLCA_None = 1,
	TLCA_Lowest = 2,
	TLCA_Low = 3,
	TLCA_Medium = 4,
	TLCA_High = 5,
	TLCA_Highest = 6,
	TLCA_MAX = 7,
};

// Enum Engine.ETextureCompressionQuality
enum class ETextureCompressionQuality : uint8_t {
	TCQ_Default = 0,
	TCQ_Lowest = 1,
	TCQ_Low = 2,
	TCQ_Medium = 3,
	TCQ_High = 4,
	TCQ_Highest = 5,
	TCQ_MAX = 6,
};

// Enum Engine.ETextureSourceFormat
enum class ETextureSourceFormat : uint8_t {
	TSF_Invalid = 0,
	TSF_G8 = 1,
	TSF_BGRA8 = 2,
	TSF_BGRE8 = 3,
	TSF_RGBA16 = 4,
	TSF_RGBA16F = 5,
	TSF_RGBA8 = 6,
	TSF_RGBE8 = 7,
	TSF_G16 = 8,
	TSF_MAX = 9,
};

// Enum Engine.ETextureSourceArtType
enum class ETextureSourceArtType : uint8_t {
	TSAT_Uncompressed = 0,
	TSAT_PNGCompressed = 1,
	TSAT_DDSFile = 2,
	TSAT_MAX = 3,
};

// Enum Engine.ETextureMipCount
enum class ETextureMipCount : uint8_t {
	TMC_ResidentMips = 0,
	TMC_AllMips = 1,
	TMC_AllMipsBiased = 2,
	TMC_MAX = 3,
};

// Enum Engine.ECompositeTextureMode
enum class ECompositeTextureMode : uint8_t {
	CTM_Disabled = 0,
	CTM_NormalRoughnessToRed = 1,
	CTM_NormalRoughnessToGreen = 2,
	CTM_NormalRoughnessToBlue = 3,
	CTM_NormalRoughnessToAlpha = 4,
	CTM_MAX = 5,
};

// Enum Engine.TextureAddress
enum class TextureAddress : uint8_t {
	TA_Wrap = 0,
	TA_Clamp = 1,
	TA_Mirror = 2,
	TA_MAX = 3,
};

// Enum Engine.TextureFilter
enum class TextureFilter : uint8_t {
	TF_Nearest = 0,
	TF_Bilinear = 1,
	TF_Trilinear = 2,
	TF_Default = 3,
	TF_MAX = 4,
};

// Enum Engine.TextureCompressionSettings
enum class TextureCompressionSettings : uint8_t {
	TC_Default = 0,
	TC_Normalmap = 1,
	TC_Masks = 2,
	TC_Grayscale = 3,
	TC_Displacementmap = 4,
	TC_VectorDisplacementmap = 5,
	TC_HDR = 6,
	TC_EditorIcon = 7,
	TC_Alpha = 8,
	TC_DistanceFieldFont = 9,
	TC_HDR_Compressed = 10,
	TC_BC7 = 11,
	TC_MAX = 12,
};

// Enum Engine.ETextureMipLoadOptions
enum class ETextureMipLoadOptions : uint8_t {
	Default = 0,
	AllMips = 1,
	OnlyFirstMip = 2,
	ETextureMipLoadOptions_MAX = 3,
};

// Enum Engine.ETextureSamplerFilter
enum class ETextureSamplerFilter : uint8_t {
	Point = 0,
	Bilinear = 1,
	Trilinear = 2,
	AnisotropicPoint = 3,
	AnisotropicLinear = 4,
	ETextureSamplerFilter_MAX = 5,
};

// Enum Engine.ETexturePowerOfTwoSetting
enum class ETexturePowerOfTwoSetting : uint8_t {
	None = 0,
	PadToPowerOfTwo = 1,
	PadToSquarePowerOfTwo = 2,
	ETexturePowerOfTwoSetting_MAX = 3,
};

// Enum Engine.TextureMipGenSettings
enum class TextureMipGenSettings : uint8_t {
	TMGS_FromTextureGroup = 0,
	TMGS_SimpleAverage = 1,
	TMGS_Sharpen0 = 2,
	TMGS_Sharpen1 = 3,
	TMGS_Sharpen2 = 4,
	TMGS_Sharpen3 = 5,
	TMGS_Sharpen4 = 6,
	TMGS_Sharpen5 = 7,
	TMGS_Sharpen6 = 8,
	TMGS_Sharpen7 = 9,
	TMGS_Sharpen8 = 10,
	TMGS_Sharpen9 = 11,
	TMGS_Sharpen10 = 12,
	TMGS_NoMipmaps = 13,
	TMGS_LeaveExistingMips = 14,
	TMGS_Blur1 = 15,
	TMGS_Blur2 = 16,
	TMGS_Blur3 = 17,
	TMGS_Blur4 = 18,
	TMGS_Blur5 = 19,
	TMGS_Unfiltered = 20,
	TMGS_MAX = 21,
};

// Enum Engine.TextureGroup
enum class TextureGroup : uint8_t {
	TEXTUREGROUP_World = 0,
	TEXTUREGROUP_WorldNormalMap = 1,
	TEXTUREGROUP_WorldSpecular = 2,
	TEXTUREGROUP_Character = 3,
	TEXTUREGROUP_CharacterNormalMap = 4,
	TEXTUREGROUP_CharacterSpecular = 5,
	TEXTUREGROUP_Weapon = 6,
	TEXTUREGROUP_WeaponNormalMap = 7,
	TEXTUREGROUP_WeaponSpecular = 8,
	TEXTUREGROUP_Vehicle = 9,
	TEXTUREGROUP_VehicleNormalMap = 10,
	TEXTUREGROUP_VehicleSpecular = 11,
	TEXTUREGROUP_Cinematic = 12,
	TEXTUREGROUP_Effects = 13,
	TEXTUREGROUP_EffectsNotFiltered = 14,
	TEXTUREGROUP_Skybox = 15,
	TEXTUREGROUP_UI = 16,
	TEXTUREGROUP_Lightmap = 17,
	TEXTUREGROUP_RenderTarget = 18,
	TEXTUREGROUP_MobileFlattened = 19,
	TEXTUREGROUP_ProcBuilding_Face = 20,
	TEXTUREGROUP_ProcBuilding_LightMap = 21,
	TEXTUREGROUP_Shadowmap = 22,
	TEXTUREGROUP_ColorLookupTable = 23,
	TEXTUREGROUP_Terrain_Heightmap = 24,
	TEXTUREGROUP_Terrain_Weightmap = 25,
	TEXTUREGROUP_Bokeh = 26,
	TEXTUREGROUP_IESLightProfile = 27,
	TEXTUREGROUP_Pixels2D = 28,
	TEXTUREGROUP_HierarchicalLOD = 29,
	TEXTUREGROUP_Impostor = 30,
	TEXTUREGROUP_ImpostorNormalDepth = 31,
	TEXTUREGROUP_8BitData = 32,
	TEXTUREGROUP_16BitData = 33,
	TEXTUREGROUP_Project01 = 34,
	TEXTUREGROUP_Project02 = 35,
	TEXTUREGROUP_Project03 = 36,
	TEXTUREGROUP_Project04 = 37,
	TEXTUREGROUP_Project05 = 38,
	TEXTUREGROUP_Project06 = 39,
	TEXTUREGROUP_Project07 = 40,
	TEXTUREGROUP_Project08 = 41,
	TEXTUREGROUP_Project09 = 42,
	TEXTUREGROUP_Project10 = 43,
	TEXTUREGROUP_Project11 = 44,
	TEXTUREGROUP_Project12 = 45,
	TEXTUREGROUP_Project13 = 46,
	TEXTUREGROUP_Project14 = 47,
	TEXTUREGROUP_Project15 = 48,
	TEXTUREGROUP_MAX = 49,
};

// Enum Engine.ETextureRenderTargetFormat
enum class ETextureRenderTargetFormat : uint8_t {
	RTF_R8 = 0,
	RTF_RG8 = 1,
	RTF_RGBA8 = 2,
	RTF_RGBA8_SRGB = 3,
	RTF_R16f = 4,
	RTF_RG16f = 5,
	RTF_RGBA16f = 6,
	RTF_R32f = 7,
	RTF_RG32f = 8,
	RTF_RGBA32f = 9,
	RTF_RGB10A2 = 10,
	RTF_MAX = 11,
};

// Enum Engine.ETimecodeProviderSynchronizationState
enum class ETimecodeProviderSynchronizationState : uint8_t {
	Closed = 0,
	Error = 1,
	Synchronized = 2,
	Synchronizing = 3,
	ETimecodeProviderSynchronizationState_MAX = 4,
};

// Enum Engine.ETimelineDirection
enum class ETimelineDirection : uint8_t {
	Forward = 0,
	Backward = 1,
	ETimelineDirection_MAX = 2,
};

// Enum Engine.ETimelineLengthMode
enum class ETimelineLengthMode : uint8_t {
	TL_TimelineLength = 0,
	TL_LastKeyFrame = 1,
	TL_MAX = 2,
};

// Enum Engine.ETimeStretchCurveMapping
enum class ETimeStretchCurveMapping : uint8_t {
	T_Original = 0,
	T_TargetMin = 1,
	T_TargetMax = 2,
	MAX = 3,
};

// Enum Engine.ETwitterIntegrationDelegate
enum class ETwitterIntegrationDelegate : uint8_t {
	TID_AuthorizeComplete = 0,
	TID_TweetUIComplete = 1,
	TID_RequestComplete = 2,
	TID_MAX = 3,
};

// Enum Engine.ETwitterRequestMethod
enum class ETwitterRequestMethod : uint8_t {
	TRM_Get = 0,
	TRM_Post = 1,
	TRM_Delete = 2,
	TRM_MAX = 3,
};

// Enum Engine.EUserDefinedStructureStatus
enum class EUserDefinedStructureStatus : uint8_t {
	UDSS_UpToDate = 0,
	UDSS_Dirty = 1,
	UDSS_Error = 2,
	UDSS_Duplicate = 3,
	UDSS_MAX = 4,
};

// Enum Engine.EUIScalingRule
enum class EUIScalingRule : uint8_t {
	ShortestSide = 0,
	LongestSide = 1,
	Horizontal = 2,
	Vertical = 3,
	Custom = 4,
	EUIScalingRule_MAX = 5,
};

// Enum Engine.ERenderFocusRule
enum class ERenderFocusRule : uint8_t {
	Always = 0,
	NonPointer = 1,
	NavigationOnly = 2,
	Never = 3,
	ERenderFocusRule_MAX = 4,
};

// Enum Engine.EVectorFieldConstructionOp
enum class EVectorFieldConstructionOp : uint8_t {
	VFCO_Extrude = 0,
	VFCO_Revolve = 1,
	VFCO_MAX = 2,
};

// Enum Engine.EWindSourceType
enum class EWindSourceType : uint8_t {
	Directional = 0,
	Point = 1,
	EWindSourceType_MAX = 2,
};

// Enum Engine.EPSCPoolMethod
enum class EPSCPoolMethod : uint8_t {
	None = 0,
	AutoRelease = 1,
	ManualRelease = 2,
	ManualRelease_OnComplete = 3,
	FreeInPool = 4,
	EPSCPoolMethod_MAX = 5,
};

// Enum Engine.EVolumeLightingMethod
enum class EVolumeLightingMethod : uint8_t {
	VLM_VolumetricLightmap = 0,
	VLM_SparseVolumeLightingSamples = 1,
	VLM_MAX = 2,
};

// Enum Engine.EVisibilityAggressiveness
enum class EVisibilityAggressiveness : uint8_t {
	VIS_LeastAggressive = 0,
	VIS_ModeratelyAggressive = 1,
	VIS_MostAggressive = 2,
	VIS_Max = 3,
};

// Class Engine.StreamableRenderAsset
class UStreamableRenderAsset : public Object {

public:

	double ForceMipLevelsToBeResidentTimestamp; // 0x28 (8)
	int32_t NumCinematicMipLevels; // 0x30 (4)
	int32_t StreamingIndex; // 0x34 (4)
	int32_t CachedCombinedLODBias; // 0x38 (4)
	char CachedNumResidentLODs; // 0x3C (1)
	char bCachedReadyForStreaming : 1; // 0x3D (1)
	char NeverStream : 1; // 0x3D (1)
	char bGlobalForceMipLevelsToBeResident : 1; // 0x3D (1)
	char bIsStreamable : 1; // 0x3D (1)
	char bHasStreamingUpdatePending : 1; // 0x3D (1)
	char bForceMiplevelsToBeResident : 1; // 0x3D (1)
	char bIgnoreStreamingMipBias : 1; // 0x3D (1)
	char bUseCinematicMipLevels : 1; // 0x3D (1)
};

// Class Engine.Texture
class UTexture : public UStreamableRenderAsset {

public:

	struct FGuid LightingGuid; // 0x48 (16)
	int32_t LODBias; // 0x58 (4)
	enum class TextureCompressionSettings CompressionSettings; // 0x5C (1)
	enum class TextureFilter Filter; // 0x5D (1)
	enum class ETextureMipLoadOptions MipLoadOptions; // 0x5E (1)
	enum class TextureGroup LODGroup; // 0x5F (1)
	char SRGB : 1; // 0x60 (1)
	char pad_58_1 : 7; // 0x58 (1)
	char pad_59_0 : 1; // 0x59 (1)
	char bNoTiling : 1; // 0x60 (1)
	char pad_59_2 : 6; // 0x59 (1)
	char pad_5A_0 : 2; // 0x5A (1)
	char VirtualTextureStreaming : 1; // 0x60 (1)
	char pad_5A_3 : 5; // 0x5A (1)
	char pad_5B_0 : 3; // 0x5B (1)
	char CompressionYCoCg : 1; // 0x60 (1)
	char pad_5B_4 : 4; // 0x5B (1)
	char pad_5C_0 : 4; // 0x5C (1)
	char bAsyncResourceReleaseHasBeenStarted : 1; // 0x60 (1)
	char pad_5C_5 : 3; // 0x5C (1)
	struct TArray<struct UAssetUserData> AssetUserData; // 0x68 (16)
};

// Class Engine.Texture2DDynamic
class UTexture2DDynamic : public UTexture {

public:

	enum class EPixelFormat Format; // 0xC0 (1)
};

// Class Engine.Actor
class UActor : public Object {

public:

	struct FActorTickFunction PrimaryActorTick; // 0x28 (48)
	char bNetTemporary : 1; // 0x58 (1)
	char bNetStartup : 1; // 0x58 (1)
	char bOnlyRelevantToOwner : 1; // 0x58 (1)
	char bAlwaysRelevant : 1; // 0x58 (1)
	char bReplicateMovement : 1; // 0x58 (1)
	char bHidden : 1; // 0x58 (1)
	char bTearOff : 1; // 0x58 (1)
	char bExchangedRoles : 1; // 0x58 (1)
	char bNetLoadOnClient : 1; // 0x59 (1)
	char bNetUseOwnerRelevancy : 1; // 0x59 (1)
	char bRelevantForNetworkReplays : 1; // 0x59 (1)
	char bRelevantForLevelBounds : 1; // 0x59 (1)
	char bReplayRewindable : 1; // 0x59 (1)
	char bAllowTickBeforeBeginPlay : 1; // 0x59 (1)
	char bAutoDestroyWhenFinished : 1; // 0x59 (1)
	char bCanBeDamaged : 1; // 0x59 (1)
	char bBlockInput : 1; // 0x5A (1)
	char bCollideWhenPlacing : 1; // 0x5A (1)
	char bFindCameraComponentWhenViewTarget : 1; // 0x5A (1)
	char bGenerateOverlapEventsDuringLevelStreaming : 1; // 0x5A (1)
	char bIgnoresOriginShifting : 1; // 0x5A (1)
	char bEnableAutoLODGeneration : 1; // 0x5A (1)
	char bIsEditorOnlyActor : 1; // 0x5A (1)
	char bActorSeamlessTraveled : 1; // 0x5A (1)
	char bReplicates : 1; // 0x5B (1)
	char bCanBeInCluster : 1; // 0x5B (1)
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x5B (1)
	char pad_5B_3 : 5; // 0x5B (1)
	char pad_5C_0 : 2; // 0x5C (1)
	char bActorEnableCollision : 1; // 0x5C (1)
	char bActorIsBeingDestroyed : 1; // 0x5C (1)
	char pad_5C_4 : 4; // 0x5C (1)
	enum class EActorUpdateOverlapsMethod UpdateOverlapsMethodDuringLevelStreaming; // 0x5D (1)
	enum class EActorUpdateOverlapsMethod DefaultUpdateOverlapsMethodDuringLevelStreaming; // 0x5E (1)
	enum class ENetRole RemoteRole; // 0x5F (1)
	struct FRepMovement ReplicatedMovement; // 0x60 (52)
	float InitialLifeSpan; // 0x94 (4)
	float CustomTimeDilation; // 0x98 (4)
	struct FRepAttachment AttachmentReplication; // 0xA0 (64)
	struct UActor Owner; // 0xE0 (8)
	struct FName NetDriverName; // 0xE8 (8)
	enum class ENetRole Role; // 0xF0 (1)
	enum class ENetDormancy NetDormancy; // 0xF1 (1)
	enum class ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0xF2 (1)
	enum class EAutoReceiveInput AutoReceiveInput; // 0xF3 (1)
	int32_t InputPriority; // 0xF4 (4)
	struct UInputComponent InputComponent; // 0xF8 (8)
	float NetCullDistanceSquared; // 0x100 (4)
	int32_t NetTag; // 0x104 (4)
	float NetUpdateFrequency; // 0x108 (4)
	float MinNetUpdateFrequency; // 0x10C (4)
	float NetPriority; // 0x110 (4)
	struct APawn Instigator; // 0x118 (8)
	struct TArray<struct UActor> Children; // 0x120 (16)
	struct USceneComponent RootComponent; // 0x130 (8)
	struct TArray<struct AMatineeActor> ControllingMatineeActors; // 0x138 (16)
	struct TArray<struct FName> Layers; // 0x150 (16)
	struct TWeakObjectPtr<struct UChildActorComponent> ParentComponent; // 0x160 (8)
	struct TArray<struct FName> Tags; // 0x170 (16)
	struct FMulticastSparseDelegate OnTakeAnyDamage; // 0x180 (1)
	struct FMulticastSparseDelegate OnTakePointDamage; // 0x181 (1)
	struct FMulticastSparseDelegate OnTakeRadialDamage; // 0x182 (1)
	struct FMulticastSparseDelegate OnActorBeginOverlap; // 0x183 (1)
	struct FMulticastSparseDelegate OnActorEndOverlap; // 0x184 (1)
	struct FMulticastSparseDelegate OnBeginCursorOver; // 0x185 (1)
	struct FMulticastSparseDelegate OnEndCursorOver; // 0x186 (1)
	struct FMulticastSparseDelegate OnClicked; // 0x187 (1)
	struct FMulticastSparseDelegate OnReleased; // 0x188 (1)
	struct FMulticastSparseDelegate OnInputTouchBegin; // 0x189 (1)
	struct FMulticastSparseDelegate OnInputTouchEnd; // 0x18A (1)
	struct FMulticastSparseDelegate OnInputTouchEnter; // 0x18B (1)
	struct FMulticastSparseDelegate OnInputTouchLeave; // 0x18C (1)
	struct FMulticastSparseDelegate OnActorHit; // 0x18D (1)
	struct FMulticastSparseDelegate OnDestroyed; // 0x18E (1)
	struct FMulticastSparseDelegate OnEndPlay; // 0x18F (1)
	struct TArray<struct UActorComponent> InstanceComponents; // 0x1F0 (16)
	struct TArray<struct UActorComponent> BlueprintCreatedComponents; // 0x200 (16)

	bool WasRecentlyRendered(float Tolerance); // Function Engine.Actor.WasRecentlyRendered(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32671F0>
	void UserConstructionScript(); // Function Engine.Actor.UserConstructionScript(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void TearOff(); // Function Engine.Actor.TearOff(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x25D7430>
	void SnapRootComponentTo(struct UActor InParentActor, struct FName InSocketName); // Function Engine.Actor.SnapRootComponentTo(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3267130>
	void SetTickGroup(enum class ETickingGroup NewTickGroup); // Function Engine.Actor.SetTickGroup(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3267020>
	void SetTickableWhenPaused(bool bTickableWhenPaused); // Function Engine.Actor.SetTickableWhenPaused(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32670A0>
	void SetReplicates(bool bInReplicates); // Function Engine.Actor.SetReplicates(Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3266F90>
	void SetReplicateMovement(bool bInReplicateMovement); // Function Engine.Actor.SetReplicateMovement(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3266F00>
	void SetOwner(struct UActor NewOwner); // Function Engine.Actor.SetOwner(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3266E70>
	void SetNetDormancy(enum class ENetDormancy NewDormancy); // Function Engine.Actor.SetNetDormancy(Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3266DF0>
	void SetLifeSpan(float InLifespan); // Function Engine.Actor.SetLifeSpan(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3266D70>
	void SetAutoDestroyWhenFinished(bool bVal); // Function Engine.Actor.SetAutoDestroyWhenFinished(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3266CE0>
	void SetActorTickInterval(float TickInterval); // Function Engine.Actor.SetActorTickInterval(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3266C60>
	void SetActorTickEnabled(bool bEnabled); // Function Engine.Actor.SetActorTickEnabled(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3266BD0>
	void SetActorScale3D(struct FVector NewScale3D); // Function Engine.Actor.SetActorScale3D(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3266B40>
	void SetActorRelativeScale3D(struct FVector NewRelativeScale); // Function Engine.Actor.SetActorRelativeScale3D(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3266AB0>
	void SetActorHiddenInGame(bool bNewHidden); // Function Engine.Actor.SetActorHiddenInGame(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3266A20>
	void SetActorEnableCollision(bool bNewActorEnableCollision); // Function Engine.Actor.SetActorEnableCollision(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3266990>
	void RemoveTickPrerequisiteComponent(struct UActorComponent PrerequisiteComponent); // Function Engine.Actor.RemoveTickPrerequisiteComponent(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3266900>
	void RemoveTickPrerequisiteActor(struct UActor PrerequisiteActor); // Function Engine.Actor.RemoveTickPrerequisiteActor(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3266870>
	void ReceiveTick(float DeltaSeconds); // Function Engine.Actor.ReceiveTick(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void ReceiveRadialDamage(float DamageReceived, struct UDamageType DamageType, struct FVector Origin, struct FHitResult& HitInfo, struct AController InstigatedBy, struct UActor DamageCauser); // Function Engine.Actor.ReceiveRadialDamage(BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void ReceivePointDamage(float Damage, struct UDamageType DamageType, struct FVector HitLocation, struct FVector HitNormal, struct UPrimitiveComponent HitComponent, struct FName BoneName, struct FVector ShotFromDirection, struct AController InstigatedBy, struct UActor DamageCauser, struct FHitResult& HitInfo); // Function Engine.Actor.ReceivePointDamage(BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void ReceiveHit(struct UPrimitiveComponent MyComp, struct UActor Other, struct UPrimitiveComponent OtherComp, bool bSelfMoved, struct FVector HitLocation, struct FVector HitNormal, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Engine.Actor.ReceiveHit(Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void ReceiveEndPlay(enum class EEndPlayReason EndPlayReason); // Function Engine.Actor.ReceiveEndPlay(Event|Protected|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void ReceiveDestroyed(); // Function Engine.Actor.ReceiveDestroyed(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void ReceiveBeginPlay(); // Function Engine.Actor.ReceiveBeginPlay(Event|Protected|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void ReceiveAnyDamage(float Damage, struct UDamageType DamageType, struct AController InstigatedBy, struct UActor DamageCauser); // Function Engine.Actor.ReceiveAnyDamage(BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void ReceiveActorOnReleased(struct FKey ButtonReleased); // Function Engine.Actor.ReceiveActorOnReleased(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void ReceiveActorOnInputTouchLeave(enum class ETouchIndex FingerIndex); // Function Engine.Actor.ReceiveActorOnInputTouchLeave(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void ReceiveActorOnInputTouchEnter(enum class ETouchIndex FingerIndex); // Function Engine.Actor.ReceiveActorOnInputTouchEnter(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void ReceiveActorOnInputTouchEnd(enum class ETouchIndex FingerIndex); // Function Engine.Actor.ReceiveActorOnInputTouchEnd(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void ReceiveActorOnInputTouchBegin(enum class ETouchIndex FingerIndex); // Function Engine.Actor.ReceiveActorOnInputTouchBegin(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void ReceiveActorOnClicked(struct FKey ButtonPressed); // Function Engine.Actor.ReceiveActorOnClicked(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void ReceiveActorEndOverlap(struct UActor OtherActor); // Function Engine.Actor.ReceiveActorEndOverlap(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void ReceiveActorEndCursorOver(); // Function Engine.Actor.ReceiveActorEndCursorOver(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void ReceiveActorBeginOverlap(struct UActor OtherActor); // Function Engine.Actor.ReceiveActorBeginOverlap(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void ReceiveActorBeginCursorOver(); // Function Engine.Actor.ReceiveActorBeginCursorOver(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int32_t CinematicTextureGroups); // Function Engine.Actor.PrestreamTextures(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3266760>
	void OnRep_ReplicateMovement(); // Function Engine.Actor.OnRep_ReplicateMovement(Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x25D7410>
	void OnRep_ReplicatedMovement(); // Function Engine.Actor.OnRep_ReplicatedMovement(Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x3266740>
	void OnRep_Owner(); // Function Engine.Actor.OnRep_Owner(Native|Protected) // <VeiledExperts-Win64-Shipping.exe+0x2A13280>
	void OnRep_Instigator(); // Function Engine.Actor.OnRep_Instigator(Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x3266720>
	void OnRep_AttachmentReplication(); // Function Engine.Actor.OnRep_AttachmentReplication(Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x25D7290>
	void MakeNoise(float Loudness, struct APawn NoiseInstigator, struct FVector NoiseLocation, float MaxRange, struct FName Tag); // Function Engine.Actor.MakeNoise(Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3266590>
	struct UMaterialInstanceDynamic MakeMIDForMaterial(struct UMaterialInterface Parent); // Function Engine.Actor.MakeMIDForMaterial(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3266500>
	bool K2_TeleportTo(struct FVector DestLocation, struct FRotator DestRotation); // Function Engine.Actor.K2_TeleportTo(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3266410>
	bool K2_SetActorTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorTransform(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3266220>
	bool K2_SetActorRotation(struct FRotator NewRotation, bool bTeleportPhysics); // Function Engine.Actor.K2_SetActorRotation(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3266140>
	void K2_SetActorRelativeTransform(struct FTransform& NewRelativeTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorRelativeTransform(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3265F50>
	void K2_SetActorRelativeRotation(struct FRotator NewRelativeRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorRelativeRotation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3265DA0>
	void K2_SetActorRelativeLocation(struct FVector NewRelativeLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorRelativeLocation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3265BF0>
	bool K2_SetActorLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorLocationAndRotation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3265A00>
	bool K2_SetActorLocation(struct FVector NewLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorLocation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3265850>
	void K2_OnReset(); // Function Engine.Actor.K2_OnReset(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void K2_OnEndViewTarget(struct APlayerController PC); // Function Engine.Actor.K2_OnEndViewTarget(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void K2_OnBecomeViewTarget(struct APlayerController PC); // Function Engine.Actor.K2_OnBecomeViewTarget(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	struct USceneComponent K2_GetRootComponent(); // Function Engine.Actor.K2_GetRootComponent(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3265830>
	struct TArray<struct UActorComponent> K2_GetComponentsByClass(struct UClass* ComponentClass); // Function Engine.Actor.K2_GetComponentsByClass(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3265750>
	struct FRotator K2_GetActorRotation(); // Function Engine.Actor.K2_GetActorRotation(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3265690>
	struct FVector K2_GetActorLocation(); // Function Engine.Actor.K2_GetActorLocation(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3265610>
	void K2_DetachFromActor(enum class EDetachmentRule LocationRule, enum class EDetachmentRule RotationRule, enum class EDetachmentRule ScaleRule); // Function Engine.Actor.K2_DetachFromActor(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3265510>
	void K2_DestroyComponent(struct UActorComponent Component); // Function Engine.Actor.K2_DestroyComponent(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3265490>
	void K2_DestroyActor(); // Function Engine.Actor.K2_DestroyActor(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3265470>
	void K2_AttachToComponent(struct USceneComponent Parent, struct FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // Function Engine.Actor.K2_AttachToComponent(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32652B0>
	void K2_AttachToActor(struct UActor ParentActor, struct FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // Function Engine.Actor.K2_AttachToActor(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32650F0>
	void K2_AttachRootComponentToActor(struct UActor InParentActor, struct FName InSocketName, enum class EAttachLocation AttachLocationType, bool bWeldSimulatedBodies); // Function Engine.Actor.K2_AttachRootComponentToActor(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3264FA0>
	void K2_AttachRootComponentTo(struct USceneComponent InParent, struct FName InSocketName, enum class EAttachLocation AttachLocationType, bool bWeldSimulatedBodies); // Function Engine.Actor.K2_AttachRootComponentTo(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3264E50>
	void K2_AddActorWorldTransform(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorWorldTransform(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3264C60>
	void K2_AddActorWorldRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorWorldRotation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3264AB0>
	void K2_AddActorWorldOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorWorldOffset(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3264900>
	void K2_AddActorLocalTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorLocalTransform(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3264710>
	void K2_AddActorLocalRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorLocalRotation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3264560>
	void K2_AddActorLocalOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorLocalOffset(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32643B0>
	bool IsOverlappingActor(struct UActor Other); // Function Engine.Actor.IsOverlappingActor(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3264320>
	bool IsChildActor(); // Function Engine.Actor.IsChildActor(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32642F0>
	bool IsActorTickEnabled(); // Function Engine.Actor.IsActorTickEnabled(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32642C0>
	bool IsActorBeingDestroyed(); // Function Engine.Actor.IsActorBeingDestroyed(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3264290>
	bool HasAuthority(); // Function Engine.Actor.HasAuthority(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3264260>
	float GetVerticalDistanceTo(struct UActor OtherActor); // Function Engine.Actor.GetVerticalDistanceTo(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32641C0>
	struct FVector GetVelocity(); // Function Engine.Actor.GetVelocity(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3264180>
	struct FTransform GetTransform(); // Function Engine.Actor.GetTransform(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3264130>
	bool GetTickableWhenPaused(); // Function Engine.Actor.GetTickableWhenPaused(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3264100>
	float GetSquaredDistanceTo(struct UActor OtherActor); // Function Engine.Actor.GetSquaredDistanceTo(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3264060>
	enum class ENetRole GetRemoteRole(); // Function Engine.Actor.GetRemoteRole(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3264040>
	struct UChildActorComponent GetParentComponent(); // Function Engine.Actor.GetParentComponent(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3264010>
	struct UActor GetParentActor(); // Function Engine.Actor.GetParentActor(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3263FE0>
	struct UActor GetOwner(); // Function Engine.Actor.GetOwner(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x2935BB0>
	void GetOverlappingComponents(struct TArray<struct UPrimitiveComponent>& OverlappingComponents); // Function Engine.Actor.GetOverlappingComponents(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3263F30>
	void GetOverlappingActors(struct TArray<struct UActor>& OverlappingActors, struct UClass* ClassFilter); // Function Engine.Actor.GetOverlappingActors(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3263E40>
	enum class ENetRole GetLocalRole(); // Function Engine.Actor.GetLocalRole(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0xCF3A60>
	float GetLifeSpan(); // Function Engine.Actor.GetLifeSpan(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3263E00>
	struct AController GetInstigatorController(); // Function Engine.Actor.GetInstigatorController(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3263DD0>
	struct APawn GetInstigator(); // Function Engine.Actor.GetInstigator(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3263DA0>
	struct FVector GetInputVectorAxisValue(struct FKey InputAxisKey); // Function Engine.Actor.GetInputVectorAxisValue(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3263CA0>
	float GetInputAxisValue(struct FName InputAxisName); // Function Engine.Actor.GetInputAxisValue(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3263C00>
	float GetInputAxisKeyValue(struct FKey InputAxisKey); // Function Engine.Actor.GetInputAxisKeyValue(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3263B10>
	float GetHorizontalDotProductTo(struct UActor OtherActor); // Function Engine.Actor.GetHorizontalDotProductTo(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3263A70>
	float GetHorizontalDistanceTo(struct UActor OtherActor); // Function Engine.Actor.GetHorizontalDistanceTo(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32639D0>
	float GetGameTimeSinceCreation(); // Function Engine.Actor.GetGameTimeSinceCreation(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32639A0>
	float GetDotProductTo(struct UActor OtherActor); // Function Engine.Actor.GetDotProductTo(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3263900>
	float GetDistanceTo(struct UActor OtherActor); // Function Engine.Actor.GetDistanceTo(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3263860>
	struct TArray<struct UActorComponent> GetComponentsByTag(struct UClass* ComponentClass, struct FName Tag); // Function Engine.Actor.GetComponentsByTag(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3263760>
	struct TArray<struct UActorComponent> GetComponentsByInterface(struct UClass* Interface); // Function Engine.Actor.GetComponentsByInterface(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3263680>
	struct UActorComponent GetComponentByClass(struct UClass* ComponentClass); // Function Engine.Actor.GetComponentByClass(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32635F0>
	struct FName GetAttachParentSocketName(); // Function Engine.Actor.GetAttachParentSocketName(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32634B0>
	struct UActor GetAttachParentActor(); // Function Engine.Actor.GetAttachParentActor(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3263480>
	void GetAttachedActors(struct TArray<struct UActor>& OutActors, bool bResetArray); // Function Engine.Actor.GetAttachedActors(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32634F0>
	void GetAllChildActors(struct TArray<struct UActor>& ChildActors, bool bIncludeDescendants); // Function Engine.Actor.GetAllChildActors(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3263380>
	struct FVector GetActorUpVector(); // Function Engine.Actor.GetActorUpVector(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3263310>
	float GetActorTimeDilation(); // Function Engine.Actor.GetActorTimeDilation(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32632E0>
	float GetActorTickInterval(); // Function Engine.Actor.GetActorTickInterval(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32632B0>
	struct FVector GetActorScale3D(); // Function Engine.Actor.GetActorScale3D(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3263270>
	struct FVector GetActorRightVector(); // Function Engine.Actor.GetActorRightVector(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3263200>
	struct FVector GetActorRelativeScale3D(); // Function Engine.Actor.GetActorRelativeScale3D(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32631C0>
	struct FVector GetActorForwardVector(); // Function Engine.Actor.GetActorForwardVector(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3263150>
	void GetActorEyesViewPoint(struct FVector& OutLocation, struct FRotator& OutRotation); // Function Engine.Actor.GetActorEyesViewPoint(Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3263060>
	bool GetActorEnableCollision(); // Function Engine.Actor.GetActorEnableCollision(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3263030>
	void GetActorBounds(bool bOnlyCollidingComponents, struct FVector& Origin, struct FVector& BoxExtent, bool bIncludeFromChildActors); // Function Engine.Actor.GetActorBounds(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3262EB0>
	void ForceNetUpdate(); // Function Engine.Actor.ForceNetUpdate(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3262E90>
	void FlushNetDormancy(); // Function Engine.Actor.FlushNetDormancy(Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3262E70>
	void EnableInput(struct APlayerController PlayerController); // Function Engine.Actor.EnableInput(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x2A0F370>
	void DisableInput(struct APlayerController PlayerController); // Function Engine.Actor.DisableInput(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x29FC3B0>
	void DetachRootComponentFromParent(bool bMaintainWorldPosition); // Function Engine.Actor.DetachRootComponentFromParent(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3262DE0>
	void AddTickPrerequisiteComponent(struct UActorComponent PrerequisiteComponent); // Function Engine.Actor.AddTickPrerequisiteComponent(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3262D50>
	void AddTickPrerequisiteActor(struct UActor PrerequisiteActor); // Function Engine.Actor.AddTickPrerequisiteActor(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3262CC0>
	struct UActorComponent AddComponent(struct FName TemplateName, bool bManualAttachment, struct FTransform& RelativeTransform, struct Object ComponentTemplateContext); // Function Engine.Actor.AddComponent(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3262B00>
	bool ActorHasTag(struct FName Tag); // Function Engine.Actor.ActorHasTag(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3262A70>
};

// Class Engine.ActorComponent
class UActorComponent : public Object {

public:

	struct FActorComponentTickFunction PrimaryComponentTick; // 0x30 (48)
	struct TArray<struct FName> ComponentTags; // 0x60 (16)
	struct TArray<struct UAssetUserData> AssetUserData; // 0x70 (16)
	int32_t UCSSerializationIndex; // 0x84 (4)
	char pad_7C_0 : 3; // 0x7C (1)
	char bNetAddressable : 1; // 0x88 (1)
	char pad_7C_4 : 4; // 0x7C (1)
	char pad_7D_0 : 4; // 0x7D (1)
	char bReplicates : 1; // 0x88 (1)
	char pad_7D_5 : 3; // 0x7D (1)
	char pad_7E_0 : 7; // 0x7E (1)
	char bAutoActivate : 1; // 0x89 (1)
	char bIsActive : 1; // 0x8A (1)
	char pad_7F_1 : 7; // 0x7F (1)
	char pad_80_0 : 1; // 0x80 (1)
	char bEditableWhenInherited : 1; // 0x8A (1)
	char pad_80_2 : 6; // 0x80 (1)
	char pad_81_0 : 3; // 0x81 (1)
	char bCanEverAffectNavigation : 1; // 0x8A (1)
	char pad_81_4 : 4; // 0x81 (1)
	char pad_82_0 : 5; // 0x82 (1)
	char bIsEditorOnly : 1; // 0x8A (1)
	char pad_82_6 : 2; // 0x82 (1)
	enum class EComponentCreationMethod CreationMethod; // 0x8C (1)
	struct FMulticastSparseDelegate OnComponentActivated; // 0x8D (1)
	struct FMulticastSparseDelegate OnComponentDeactivated; // 0x8E (1)
	struct TArray<struct FSimpleMemberReference> UCSModifiedProperties; // 0x90 (16)

	void ToggleActive(); // Function Engine.ActorComponent.ToggleActive(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x2A13280>
	void SetTickGroup(enum class ETickingGroup NewTickGroup); // Function Engine.ActorComponent.SetTickGroup(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x326AB40>
	void SetTickableWhenPaused(bool bTickableWhenPaused); // Function Engine.ActorComponent.SetTickableWhenPaused(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x326ABC0>
	void SetIsReplicated(bool ShouldReplicate); // Function Engine.ActorComponent.SetIsReplicated(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x326AAB0>
	void SetComponentTickInterval(float TickInterval); // Function Engine.ActorComponent.SetComponentTickInterval(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x326AA30>
	void SetComponentTickEnabled(bool bEnabled); // Function Engine.ActorComponent.SetComponentTickEnabled(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x326A9A0>
	void SetAutoActivate(bool bNewAutoActivate); // Function Engine.ActorComponent.SetAutoActivate(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3266F00>
	void SetActive(bool bNewActive, bool bReset); // Function Engine.ActorComponent.SetActive(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x326A8D0>
	void RemoveTickPrerequisiteComponent(struct UActorComponent PrerequisiteComponent); // Function Engine.ActorComponent.RemoveTickPrerequisiteComponent(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x326A840>
	void RemoveTickPrerequisiteActor(struct UActor PrerequisiteActor); // Function Engine.ActorComponent.RemoveTickPrerequisiteActor(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x326A7B0>
	void ReceiveTick(float DeltaSeconds); // Function Engine.ActorComponent.ReceiveTick(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void ReceiveEndPlay(enum class EEndPlayReason EndPlayReason); // Function Engine.ActorComponent.ReceiveEndPlay(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void ReceiveBeginPlay(); // Function Engine.ActorComponent.ReceiveBeginPlay(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void OnRep_IsActive(); // Function Engine.ActorComponent.OnRep_IsActive(Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x25D7410>
	void K2_DestroyComponent(struct Object Object); // Function Engine.ActorComponent.K2_DestroyComponent(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x326A6B0>
	bool IsComponentTickEnabled(); // Function Engine.ActorComponent.IsComponentTickEnabled(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x326A680>
	bool IsBeingDestroyed(); // Function Engine.ActorComponent.IsBeingDestroyed(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x326A650>
	bool IsActive(); // Function Engine.ActorComponent.IsActive(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x326A620>
	struct UActor GetOwner(); // Function Engine.ActorComponent.GetOwner(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x326A600>
	float GetComponentTickInterval(); // Function Engine.ActorComponent.GetComponentTickInterval(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x326A5D0>
	void Deactivate(); // Function Engine.ActorComponent.Deactivate(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x25D73F0>
	bool ComponentHasTag(struct FName Tag); // Function Engine.ActorComponent.ComponentHasTag(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x326A3C0>
	void AddTickPrerequisiteComponent(struct UActorComponent PrerequisiteComponent); // Function Engine.ActorComponent.AddTickPrerequisiteComponent(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x326A270>
	void AddTickPrerequisiteActor(struct UActor PrerequisiteActor); // Function Engine.ActorComponent.AddTickPrerequisiteActor(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x326A1E0>
	void Activate(bool bReset); // Function Engine.ActorComponent.Activate(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x2A13520>
};

// Class Engine.SceneComponent
class USceneComponent : public UActorComponent {

public:

	struct TWeakObjectPtr<struct APhysicsVolume> PhysicsVolume; // 0xB8 (8)
	struct USceneComponent AttachParent; // 0xC0 (8)
	struct FName AttachSocketName; // 0xC8 (8)
	struct TArray<struct USceneComponent> AttachChildren; // 0xD0 (16)
	struct TArray<struct USceneComponent> ClientAttachedChildren; // 0xE0 (16)
	struct FVector RelativeLocation; // 0x11C (12)
	struct FRotator RelativeRotation; // 0x128 (12)
	struct FVector RelativeScale3D; // 0x134 (12)
	struct FVector ComponentVelocity; // 0x140 (12)
	char bComponentToWorldUpdated : 1; // 0x14C (1)
	char pad_118_1 : 7; // 0x118 (1)
	char pad_119_0 : 2; // 0x119 (1)
	char bAbsoluteLocation : 1; // 0x14C (1)
	char pad_119_3 : 5; // 0x119 (1)
	char pad_11A_0 : 3; // 0x11A (1)
	char bAbsoluteRotation : 1; // 0x14C (1)
	char pad_11A_4 : 4; // 0x11A (1)
	char pad_11B_0 : 4; // 0x11B (1)
	char bAbsoluteScale : 1; // 0x14C (1)
	char pad_11B_5 : 3; // 0x11B (1)
	char pad_11C_0 : 5; // 0x11C (1)
	char bVisible : 1; // 0x14C (1)
	char pad_11C_6 : 2; // 0x11C (1)
	char pad_11D_0 : 6; // 0x11D (1)
	char bShouldBeAttached : 1; // 0x14C (1)
	char pad_11D_7 : 1; // 0x11D (1)
	char pad_11E_0 : 7; // 0x11E (1)
	char bShouldSnapLocationWhenAttached : 1; // 0x14C (1)
	char bShouldSnapRotationWhenAttached : 1; // 0x14D (1)
	char pad_11F_1 : 7; // 0x11F (1)
	char pad_120_0 : 1; // 0x120 (1)
	char bShouldUpdatePhysicsVolume : 1; // 0x14D (1)
	char pad_120_2 : 6; // 0x120 (1)
	char pad_121_0 : 2; // 0x121 (1)
	char bHiddenInGame : 1; // 0x14D (1)
	char pad_121_3 : 5; // 0x121 (1)
	char pad_122_0 : 3; // 0x122 (1)
	char bBoundsChangeTriggersStreamingDataRebuild : 1; // 0x14D (1)
	char pad_122_4 : 4; // 0x122 (1)
	char pad_123_0 : 4; // 0x123 (1)
	char bUseAttachParentBound : 1; // 0x14D (1)
	char pad_123_5 : 3; // 0x123 (1)
	enum class EComponentMobility Mobility; // 0x14F (1)
	enum class EDetailMode DetailMode; // 0x150 (1)
	struct FMulticastSparseDelegate PhysicsVolumeChangedDelegate; // 0x151 (1)

	void ToggleVisibility(bool bPropagateToChildren); // Function Engine.SceneComponent.ToggleVisibility(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x339ACD0>
	bool SnapTo(struct USceneComponent InParent, struct FName InSocketName); // Function Engine.SceneComponent.SnapTo(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x339AC10>
	void SetWorldScale3D(struct FVector NewScale); // Function Engine.SceneComponent.SetWorldScale3D(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x339AA30>
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren); // Function Engine.SceneComponent.SetVisibility(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x339A960>
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume); // Function Engine.SceneComponent.SetShouldUpdatePhysicsVolume(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x339A8D0>
	void SetRelativeScale3D(struct FVector NewScale3D); // Function Engine.SceneComponent.SetRelativeScale3D(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x339A840>
	void SetMobility(enum class EComponentMobility NewMobility); // Function Engine.SceneComponent.SetMobility(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x339A7C0>
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren); // Function Engine.SceneComponent.SetHiddenInGame(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x339A6F0>
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale); // Function Engine.SceneComponent.SetAbsolute(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x339A550>
	void ResetRelativeTransform(); // Function Engine.SceneComponent.ResetRelativeTransform(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x339A530>
	void OnRep_Visibility(bool OldValue); // Function Engine.SceneComponent.OnRep_Visibility(Final|Native|Private) // <VeiledExperts-Win64-Shipping.exe+0x339A350>
	void OnRep_Transform(); // Function Engine.SceneComponent.OnRep_Transform(Final|Native|Private) // <VeiledExperts-Win64-Shipping.exe+0x339A330>
	void OnRep_AttachSocketName(); // Function Engine.SceneComponent.OnRep_AttachSocketName(Final|Native|Private) // <VeiledExperts-Win64-Shipping.exe+0x339A310>
	void OnRep_AttachParent(); // Function Engine.SceneComponent.OnRep_AttachParent(Final|Native|Private) // <VeiledExperts-Win64-Shipping.exe+0x339A310>
	void OnRep_AttachChildren(); // Function Engine.SceneComponent.OnRep_AttachChildren(Final|Native|Private) // <VeiledExperts-Win64-Shipping.exe+0x339A2F0>
	void K2_SetWorldTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetWorldTransform(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x339A100>
	void K2_SetWorldRotation(struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetWorldRotation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3399F50>
	void K2_SetWorldLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetWorldLocationAndRotation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3399D70>
	void K2_SetWorldLocation(struct FVector NewLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetWorldLocation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3399BC0>
	void K2_SetRelativeTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetRelativeTransform(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33999D0>
	void K2_SetRelativeRotation(struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetRelativeRotation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3399820>
	void K2_SetRelativeLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetRelativeLocationAndRotation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3399640>
	void K2_SetRelativeLocation(struct FVector NewLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetRelativeLocation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3399490>
	struct FTransform K2_GetComponentToWorld(); // Function Engine.SceneComponent.K2_GetComponentToWorld(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3399430>
	struct FVector K2_GetComponentScale(); // Function Engine.SceneComponent.K2_GetComponentScale(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33993F0>
	struct FRotator K2_GetComponentRotation(); // Function Engine.SceneComponent.K2_GetComponentRotation(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33993B0>
	struct FVector K2_GetComponentLocation(); // Function Engine.SceneComponent.K2_GetComponentLocation(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3399370>
	void K2_DetachFromComponent(enum class EDetachmentRule LocationRule, enum class EDetachmentRule RotationRule, enum class EDetachmentRule ScaleRule, bool bCallModify); // Function Engine.SceneComponent.K2_DetachFromComponent(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3399220>
	bool K2_AttachToComponent(struct USceneComponent Parent, struct FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // Function Engine.SceneComponent.K2_AttachToComponent(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3399070>
	bool K2_AttachTo(struct USceneComponent InParent, struct FName InSocketName, enum class EAttachLocation AttachType, bool bWeldSimulatedBodies); // Function Engine.SceneComponent.K2_AttachTo(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3398F20>
	void K2_AddWorldTransform(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddWorldTransform(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3398D30>
	void K2_AddWorldRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddWorldRotation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3398B80>
	void K2_AddWorldOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddWorldOffset(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33989D0>
	void K2_AddRelativeRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddRelativeRotation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3398820>
	void K2_AddRelativeLocation(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddRelativeLocation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3398670>
	void K2_AddLocalTransform(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddLocalTransform(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3398480>
	void K2_AddLocalRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddLocalRotation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33982D0>
	void K2_AddLocalOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddLocalOffset(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3398120>
	bool IsVisible(); // Function Engine.SceneComponent.IsVisible(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33980F0>
	bool IsSimulatingPhysics(struct FName BoneName); // Function Engine.SceneComponent.IsSimulatingPhysics(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3398050>
	bool IsAnySimulatingPhysics(); // Function Engine.SceneComponent.IsAnySimulatingPhysics(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3398020>
	struct FVector GetUpVector(); // Function Engine.SceneComponent.GetUpVector(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3397E90>
	struct FTransform GetSocketTransform(struct FName InSocketName, enum class ERelativeTransformSpace TransformSpace); // Function Engine.SceneComponent.GetSocketTransform(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3397D90>
	struct FRotator GetSocketRotation(struct FName InSocketName); // Function Engine.SceneComponent.GetSocketRotation(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3397CE0>
	struct FQuat GetSocketQuaternion(struct FName InSocketName); // Function Engine.SceneComponent.GetSocketQuaternion(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3397C40>
	struct FVector GetSocketLocation(struct FName InSocketName); // Function Engine.SceneComponent.GetSocketLocation(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3397B90>
	bool GetShouldUpdatePhysicsVolume(); // Function Engine.SceneComponent.GetShouldUpdatePhysicsVolume(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3397B60>
	struct FVector GetRightVector(); // Function Engine.SceneComponent.GetRightVector(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3397B20>
	struct FTransform GetRelativeTransform(); // Function Engine.SceneComponent.GetRelativeTransform(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3397AC0>
	struct APhysicsVolume GetPhysicsVolume(); // Function Engine.SceneComponent.GetPhysicsVolume(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3397A90>
	void GetParentComponents(struct TArray<struct USceneComponent>& Parents); // Function Engine.SceneComponent.GetParentComponents(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33979E0>
	int32_t GetNumChildrenComponents(); // Function Engine.SceneComponent.GetNumChildrenComponents(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33979B0>
	struct FVector GetForwardVector(); // Function Engine.SceneComponent.GetForwardVector(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33745A0>
	struct FVector GetComponentVelocity(); // Function Engine.SceneComponent.GetComponentVelocity(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3397970>
	void GetChildrenComponents(bool bIncludeAllDescendants, struct TArray<struct USceneComponent>& Children); // Function Engine.SceneComponent.GetChildrenComponents(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3397870>
	struct USceneComponent GetChildComponent(int32_t ChildIndex); // Function Engine.SceneComponent.GetChildComponent(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33977E0>
	struct FName GetAttachSocketName(); // Function Engine.SceneComponent.GetAttachSocketName(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x2B61C20>
	struct USceneComponent GetAttachParent(); // Function Engine.SceneComponent.GetAttachParent(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33977C0>
	struct TArray<struct FName> GetAllSocketNames(); // Function Engine.SceneComponent.GetAllSocketNames(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3397740>
	bool DoesSocketExist(struct FName InSocketName); // Function Engine.SceneComponent.DoesSocketExist(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33976A0>
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify); // Function Engine.SceneComponent.DetachFromParent(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33975D0>
};

// Class Engine.PrimitiveComponent
class UPrimitiveComponent : public USceneComponent {

public:

	float MinDrawDistance; // 0x1F8 (4)
	float LDMaxDrawDistance; // 0x1FC (4)
	float CachedMaxDrawDistance; // 0x200 (4)
	enum class ESceneDepthPriorityGroup DepthPriorityGroup; // 0x204 (1)
	enum class ESceneDepthPriorityGroup ViewOwnerDepthPriorityGroup; // 0x205 (1)
	enum class EIndirectLightingCacheQuality IndirectLightingCacheQuality; // 0x206 (1)
	enum class ELightmapType LightmapType; // 0x207 (1)
	char bUseMaxLODAsImposter : 1; // 0x208 (1)
	char pad_200_1 : 7; // 0x200 (1)
	char pad_201_0 : 1; // 0x201 (1)
	char bBatchImpostersAsInstances : 1; // 0x208 (1)
	char pad_201_2 : 6; // 0x201 (1)
	char pad_202_0 : 2; // 0x202 (1)
	char bNeverDistanceCull : 1; // 0x208 (1)
	char pad_202_3 : 5; // 0x202 (1)
	char pad_203_0 : 7; // 0x203 (1)
	char bAlwaysCreatePhysicsState : 1; // 0x208 (1)
	char bGenerateOverlapEvents : 1; // 0x209 (1)
	char pad_204_1 : 7; // 0x204 (1)
	char pad_205_0 : 1; // 0x205 (1)
	char bMultiBodyOverlap : 1; // 0x209 (1)
	char pad_205_2 : 6; // 0x205 (1)
	char pad_206_0 : 2; // 0x206 (1)
	char bTraceComplexOnMove : 1; // 0x209 (1)
	char pad_206_3 : 5; // 0x206 (1)
	char pad_207_0 : 3; // 0x207 (1)
	char bReturnMaterialOnMove : 1; // 0x209 (1)
	char pad_207_4 : 4; // 0x207 (1)
	char pad_208_0 : 4; // 0x208 (1)
	char bUseViewOwnerDepthPriorityGroup : 1; // 0x209 (1)
	char pad_208_5 : 3; // 0x208 (1)
	char pad_209_0 : 5; // 0x209 (1)
	char bAllowCullDistanceVolume : 1; // 0x209 (1)
	char bHasMotionBlurVelocityMeshes : 1; // 0x209 (1)
	char bVisibleInReflectionCaptures : 1; // 0x209 (1)
	char bVisibleInRayTracing : 1; // 0x20A (1)
	char bRenderInMainPass : 1; // 0x20A (1)
	char bRenderInDepthPass : 1; // 0x20A (1)
	char bReceivesDecals : 1; // 0x20A (1)
	char bOwnerNoSee : 1; // 0x20A (1)
	char bOnlyOwnerSee : 1; // 0x20A (1)
	char bTreatAsBackgroundForOcclusion : 1; // 0x20A (1)
	char bUseAsOccluder : 1; // 0x20A (1)
	char bSelectable : 1; // 0x20B (1)
	char bForceMipStreaming : 1; // 0x20B (1)
	char bHasPerInstanceHitProxies : 1; // 0x20B (1)
	char CastShadow : 1; // 0x20B (1)
	char bAffectDynamicIndirectLighting : 1; // 0x20B (1)
	char bAffectDistanceFieldLighting : 1; // 0x20B (1)
	char bCastDynamicShadow : 1; // 0x20B (1)
	char bCastStaticShadow : 1; // 0x20B (1)
	char bCastVolumetricTranslucentShadow : 1; // 0x20C (1)
	char bSelfShadowOnly : 1; // 0x20C (1)
	char bCastFarShadow : 1; // 0x20C (1)
	char bCastInsetShadow : 1; // 0x20C (1)
	char bCastCinematicShadow : 1; // 0x20C (1)
	char bCastHiddenShadow : 1; // 0x20C (1)
	char bCastShadowAsTwoSided : 1; // 0x20C (1)
	char bLightAsIfStatic : 1; // 0x20C (1)
	char bLightAttachmentsAsGroup : 1; // 0x20D (1)
	char bExcludeFromLightAttachmentGroup : 1; // 0x20D (1)
	char bReceiveMobileCSMShadows : 1; // 0x20D (1)
	char bSingleSampleShadowFromStationaryLights : 1; // 0x20D (1)
	char bIgnoreRadialImpulse : 1; // 0x20D (1)
	char bIgnoreRadialForce : 1; // 0x20D (1)
	char bApplyImpulseOnDamage : 1; // 0x20D (1)
	char bReplicatePhysicsToAutonomousProxy : 1; // 0x20D (1)
	char bFillCollisionUnderneathForNavmesh : 1; // 0x20E (1)
	char AlwaysLoadOnClient : 1; // 0x20E (1)
	char AlwaysLoadOnServer : 1; // 0x20E (1)
	char bUseEditorCompositing : 1; // 0x20E (1)
	char bRenderCustomDepth : 1; // 0x20E (1)
	char bRenderOnTop : 1; // 0x20E (1)
	char pad_20E_6 : 2; // 0x20E (1)
	enum class EHasCustomNavigableGeometry bHasCustomNavigableGeometry; // 0x20F (1)
	enum class ECanBeCharacterBase CanCharacterStepUpOn; // 0x211 (1)
	struct FLightingChannels LightingChannels; // 0x212 (1)
	enum class ERendererStencilMask CustomDepthStencilWriteMask; // 0x213 (1)
	int32_t CustomDepthStencilValue; // 0x214 (4)
	struct FCustomPrimitiveData CustomPrimitiveData; // 0x218 (16)
	struct FCustomPrimitiveData CustomPrimitiveDataInternal; // 0x228 (16)
	int32_t TranslucencySortPriority; // 0x238 (4)
	int32_t VisibilityId; // 0x23C (4)
	struct TArray<struct URuntimeVirtualTexture> RuntimeVirtualTextures; // 0x240 (16)
	int8_t VirtualTextureLodBias; // 0x250 (1)
	int8_t VirtualTextureCullMips; // 0x251 (1)
	int8_t VirtualTextureMinCoverage; // 0x252 (1)
	enum class ERuntimeVirtualTextureMainPassType VirtualTextureRenderPassType; // 0x253 (1)
	float LpvBiasMultiplier; // 0x258 (4)
	float BoundsScale; // 0x264 (4)
	struct TArray<struct UActor> MoveIgnoreActors; // 0x278 (16)
	struct TArray<struct UPrimitiveComponent> MoveIgnoreComponents; // 0x288 (16)
	struct FBodyInstance BodyInstance; // 0x2A8 (304)
	struct FMulticastSparseDelegate OnComponentHit; // 0x3D8 (1)
	struct FMulticastSparseDelegate OnComponentBeginOverlap; // 0x3D9 (1)
	struct FMulticastSparseDelegate OnComponentEndOverlap; // 0x3DA (1)
	struct FMulticastSparseDelegate OnComponentWake; // 0x3DB (1)
	struct FMulticastSparseDelegate OnComponentSleep; // 0x3DC (1)
	struct FMulticastSparseDelegate OnBeginCursorOver; // 0x3DE (1)
	struct FMulticastSparseDelegate OnEndCursorOver; // 0x3DF (1)
	struct FMulticastSparseDelegate OnClicked; // 0x3E0 (1)
	struct FMulticastSparseDelegate OnReleased; // 0x3E1 (1)
	struct FMulticastSparseDelegate OnInputTouchBegin; // 0x3E2 (1)
	struct FMulticastSparseDelegate OnInputTouchEnd; // 0x3E3 (1)
	struct FMulticastSparseDelegate OnInputTouchEnter; // 0x3E4 (1)
	struct FMulticastSparseDelegate OnInputTouchLeave; // 0x3E5 (1)
	struct UPrimitiveComponent LODParentPrimitive; // 0x400 (8)

	bool WasRecentlyRendered(float Tolerance); // Function Engine.PrimitiveComponent.WasRecentlyRendered(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x338D760>
	void WakeRigidBody(struct FName BoneName); // Function Engine.PrimitiveComponent.WakeRigidBody(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338D6D0>
	void WakeAllRigidBodies(); // Function Engine.PrimitiveComponent.WakeAllRigidBodies(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329D430>
	void SetWalkableSlopeOverride(struct FWalkableSlopeOverride& NewOverride); // Function Engine.PrimitiveComponent.SetWalkableSlopeOverride(Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338D620>
	void SetUseCCD(bool InUseCCD, struct FName BoneName); // Function Engine.PrimitiveComponent.SetUseCCD(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338D550>
	void SetTranslucentSortPriority(int32_t NewTranslucentSortPriority); // Function Engine.PrimitiveComponent.SetTranslucentSortPriority(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338D4D0>
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights); // Function Engine.PrimitiveComponent.SetSingleSampleShadowFromStationaryLights(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338D2C0>
	void SetSimulatePhysics(bool bSimulate); // Function Engine.PrimitiveComponent.SetSimulatePhysics(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338D230>
	void SetRenderOnTop(bool bValue); // Function Engine.PrimitiveComponent.SetRenderOnTop(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338D1A0>
	void SetRenderInMainPass(bool bValue); // Function Engine.PrimitiveComponent.SetRenderInMainPass(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338D110>
	void SetRenderCustomDepth(bool bValue); // Function Engine.PrimitiveComponent.SetRenderCustomDepth(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338D080>
	void SetReceivesDecals(bool bNewReceivesDecals); // Function Engine.PrimitiveComponent.SetReceivesDecals(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338CFF0>
	void SetPhysMaterialOverride(struct UPhysicalMaterial NewPhysMaterial); // Function Engine.PrimitiveComponent.SetPhysMaterialOverride(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338C930>
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInRadians(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338CE60>
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInDegrees(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338CD50>
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocity(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338CD50>
	void SetPhysicsLinearVelocity(struct FVector NewVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsLinearVelocity(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338CC30>
	void SetPhysicsAngularVelocityInRadians(struct FVector NewAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsAngularVelocityInRadians(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338CB10>
	void SetPhysicsAngularVelocityInDegrees(struct FVector NewAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsAngularVelocityInDegrees(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338C9C0>
	void SetPhysicsAngularVelocity(struct FVector NewAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsAngularVelocity(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338C9C0>
	void SetOwnerNoSee(bool bNewOwnerNoSee); // Function Engine.PrimitiveComponent.SetOwnerNoSee(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338C8A0>
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee); // Function Engine.PrimitiveComponent.SetOnlyOwnerSee(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338C810>
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision); // Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338C780>
	void SetMaterialByName(struct FName MaterialSlotName, struct UMaterialInterface Material); // Function Engine.PrimitiveComponent.SetMaterialByName(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338C630>
	void SetMaterial(int32_t ElementIndex, struct UMaterialInterface Material); // Function Engine.PrimitiveComponent.SetMaterial(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338C560>
	void SetMassScale(struct FName BoneName, float InMassScale); // Function Engine.PrimitiveComponent.SetMassScale(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338C490>
	void SetMassOverrideInKg(struct FName BoneName, float MassInKg, bool bOverrideMass); // Function Engine.PrimitiveComponent.SetMassOverrideInKg(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338C390>
	void SetLinearDamping(float InDamping); // Function Engine.PrimitiveComponent.SetLinearDamping(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338C310>
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2); // Function Engine.PrimitiveComponent.SetLightingChannels(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338C1F0>
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup); // Function Engine.PrimitiveComponent.SetLightAttachmentsAsGroup(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338C060>
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents); // Function Engine.PrimitiveComponent.SetGenerateOverlapEvents(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338BFD0>
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup); // Function Engine.PrimitiveComponent.SetExcludeFromLightAttachmentGroup(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338BF40>
	void SetEnableGravity(bool bGravityEnabled); // Function Engine.PrimitiveComponent.SetEnableGravity(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x337DEE0>
	void SetCustomPrimitiveDataVector4(int32_t DataIndex, struct FVector4 Value); // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector4(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338BE70>
	void SetCustomPrimitiveDataVector3(int32_t DataIndex, struct FVector Value); // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector3(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338BDA0>
	void SetCustomPrimitiveDataVector2(int32_t DataIndex, struct FVector2D Value); // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector2(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338BCE0>
	void SetCustomPrimitiveDataFloat(int32_t DataIndex, float Value); // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataFloat(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338BC10>
	void SetCustomDepthStencilWriteMask(enum class ERendererStencilMask WriteMaskBit); // Function Engine.PrimitiveComponent.SetCustomDepthStencilWriteMask(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338BB90>
	void SetCustomDepthStencilValue(int32_t Value); // Function Engine.PrimitiveComponent.SetCustomDepthStencilValue(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338BB10>
	void SetCullDistance(float NewCullDistance); // Function Engine.PrimitiveComponent.SetCullDistance(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338BA90>
	void SetConstraintMode(enum class EDOFMode ConstraintMode); // Function Engine.PrimitiveComponent.SetConstraintMode(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338BA10>
	void SetCollisionResponseToChannel(enum class ECollisionChannel Channel, enum class ECollisionResponse NewResponse); // Function Engine.PrimitiveComponent.SetCollisionResponseToChannel(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338B950>
	void SetCollisionResponseToAllChannels(enum class ECollisionResponse NewResponse); // Function Engine.PrimitiveComponent.SetCollisionResponseToAllChannels(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338B8D0>
	void SetCollisionProfileName(struct FName InCollisionProfileName, bool bUpdateOverlaps); // Function Engine.PrimitiveComponent.SetCollisionProfileName(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338B800>
	void SetCollisionObjectType(enum class ECollisionChannel Channel); // Function Engine.PrimitiveComponent.SetCollisionObjectType(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338B780>
	void SetCollisionEnabled(enum class ECollisionEnabled NewType); // Function Engine.PrimitiveComponent.SetCollisionEnabled(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338B700>
	void SetCenterOfMass(struct FVector CenterOfMassOffset, struct FName BoneName); // Function Engine.PrimitiveComponent.SetCenterOfMass(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338B630>
	void SetCastShadow(bool NewCastShadow); // Function Engine.PrimitiveComponent.SetCastShadow(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338B5A0>
	void SetCastInsetShadow(bool bInCastInsetShadow); // Function Engine.PrimitiveComponent.SetCastInsetShadow(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338B510>
	void SetBoundsScale(float NewBoundsScale); // Function Engine.PrimitiveComponent.SetBoundsScale(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338B490>
	void SetAngularDamping(float InDamping); // Function Engine.PrimitiveComponent.SetAngularDamping(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338AEA0>
	void SetAllUseCCD(bool InUseCCD); // Function Engine.PrimitiveComponent.SetAllUseCCD(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3380980>
	void SetAllPhysicsLinearVelocity(struct FVector NewVel, bool bAddToCurrent); // Function Engine.PrimitiveComponent.SetAllPhysicsLinearVelocity(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338ADC0>
	void SetAllPhysicsAngularVelocityInRadians(struct FVector& NewAngVel, bool bAddToCurrent); // Function Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInRadians(Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338ACE0>
	void SetAllPhysicsAngularVelocityInDegrees(struct FVector& NewAngVel, bool bAddToCurrent); // Function Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInDegrees(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338ABC0>
	void SetAllMassScale(float InMassScale); // Function Engine.PrimitiveComponent.SetAllMassScale(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338AB40>
	struct FVector ScaleByMomentOfInertia(struct FVector InputVector, struct FName BoneName); // Function Engine.PrimitiveComponent.ScaleByMomentOfInertia(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x338AA40>
	void PutRigidBodyToSleep(struct FName BoneName); // Function Engine.PrimitiveComponent.PutRigidBodyToSleep(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338A940>
	bool K2_SphereTraceComponent(struct FVector TraceStart, struct FVector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector& HitLocation, struct FVector& HitNormal, struct FName& BoneName, struct FHitResult& OutHit); // Function Engine.PrimitiveComponent.K2_SphereTraceComponent(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338A5D0>
	bool K2_SphereOverlapComponent(struct FVector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector& HitLocation, struct FVector& HitNormal, struct FName& BoneName, struct FHitResult& OutHit); // Function Engine.PrimitiveComponent.K2_SphereOverlapComponent(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338A2A0>
	bool K2_LineTraceComponent(struct FVector TraceStart, struct FVector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector& HitLocation, struct FVector& HitNormal, struct FName& BoneName, struct FHitResult& OutHit); // Function Engine.PrimitiveComponent.K2_LineTraceComponent(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3389F70>
	bool K2_IsQueryCollisionEnabled(); // Function Engine.PrimitiveComponent.K2_IsQueryCollisionEnabled(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3389F30>
	bool K2_IsPhysicsCollisionEnabled(); // Function Engine.PrimitiveComponent.K2_IsPhysicsCollisionEnabled(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3389EF0>
	bool K2_IsCollisionEnabled(); // Function Engine.PrimitiveComponent.K2_IsCollisionEnabled(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3389EB0>
	bool K2_BoxOverlapComponent(struct FVector InBoxCentre, struct FBox InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector& HitLocation, struct FVector& HitNormal, struct FName& BoneName, struct FHitResult& OutHit); // Function Engine.PrimitiveComponent.K2_BoxOverlapComponent(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3389B70>
	bool IsOverlappingComponent(struct UPrimitiveComponent OtherComp); // Function Engine.PrimitiveComponent.IsOverlappingComponent(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3389AE0>
	bool IsOverlappingActor(struct UActor Other); // Function Engine.PrimitiveComponent.IsOverlappingActor(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3389A50>
	bool IsGravityEnabled(); // Function Engine.PrimitiveComponent.IsGravityEnabled(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3389A20>
	bool IsAnyRigidBodyAwake(); // Function Engine.PrimitiveComponent.IsAnyRigidBodyAwake(Native|Public|BlueprintCallable|BlueprintPure) // <VeiledExperts-Win64-Shipping.exe+0x33899F0>
	void IgnoreComponentWhenMoving(struct UPrimitiveComponent Component, bool bShouldIgnore); // Function Engine.PrimitiveComponent.IgnoreComponentWhenMoving(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33897C0>
	void IgnoreActorWhenMoving(struct UActor Actor, bool bShouldIgnore); // Function Engine.PrimitiveComponent.IgnoreActorWhenMoving(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33896F0>
	struct FWalkableSlopeOverride GetWalkableSlopeOverride(); // Function Engine.PrimitiveComponent.GetWalkableSlopeOverride(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33896C0>
	struct FVector GetPhysicsLinearVelocityAtPoint(struct FVector Point, struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsLinearVelocityAtPoint(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3389550>
	struct FVector GetPhysicsLinearVelocity(struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsLinearVelocity(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33894B0>
	struct FVector GetPhysicsAngularVelocityInRadians(struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsAngularVelocityInRadians(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3389410>
	struct FVector GetPhysicsAngularVelocityInDegrees(struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsAngularVelocityInDegrees(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3389340>
	struct FVector GetPhysicsAngularVelocity(struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsAngularVelocity(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3389340>
	void GetOverlappingComponents(struct TArray<struct UPrimitiveComponent>& OutOverlappingComponents); // Function Engine.PrimitiveComponent.GetOverlappingComponents(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3389290>
	void GetOverlappingActors(struct TArray<struct UActor>& OverlappingActors, struct UClass* ClassFilter); // Function Engine.PrimitiveComponent.GetOverlappingActors(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33891A0>
	int32_t GetNumMaterials(); // Function Engine.PrimitiveComponent.GetNumMaterials(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32C6280>
	struct UMaterialInterface GetMaterialFromCollisionFaceIndex(int32_t FaceIndex, int32_t& SectionIndex); // Function Engine.PrimitiveComponent.GetMaterialFromCollisionFaceIndex(Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33890C0>
	struct UMaterialInterface GetMaterial(int32_t ElementIndex); // Function Engine.PrimitiveComponent.GetMaterial(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3389020>
	float GetMassScale(struct FName BoneName); // Function Engine.PrimitiveComponent.GetMassScale(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3388F80>
	float GetMass(); // Function Engine.PrimitiveComponent.GetMass(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3388F40>
	float GetLinearDamping(); // Function Engine.PrimitiveComponent.GetLinearDamping(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3388F00>
	struct FVector GetInertiaTensor(struct FName BoneName); // Function Engine.PrimitiveComponent.GetInertiaTensor(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3388E50>
	bool GetGenerateOverlapEvents(); // Function Engine.PrimitiveComponent.GetGenerateOverlapEvents(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3388E20>
	enum class ECollisionResponse GetCollisionResponseToChannel(enum class ECollisionChannel Channel); // Function Engine.PrimitiveComponent.GetCollisionResponseToChannel(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3388D90>
	struct FName GetCollisionProfileName(); // Function Engine.PrimitiveComponent.GetCollisionProfileName(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3388D50>
	enum class ECollisionChannel GetCollisionObjectType(); // Function Engine.PrimitiveComponent.GetCollisionObjectType(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3388D20>
	enum class ECollisionEnabled GetCollisionEnabled(); // Function Engine.PrimitiveComponent.GetCollisionEnabled(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3388CF0>
	float GetClosestPointOnCollision(struct FVector& Point, struct FVector& OutPointOnBody, struct FName BoneName); // Function Engine.PrimitiveComponent.GetClosestPointOnCollision(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3388BB0>
	struct FVector GetCenterOfMass(struct FName BoneName); // Function Engine.PrimitiveComponent.GetCenterOfMass(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3388B10>
	float GetAngularDamping(); // Function Engine.PrimitiveComponent.GetAngularDamping(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3388760>
	struct UMaterialInstanceDynamic CreateDynamicMaterialInstance(int32_t ElementIndex, struct UMaterialInterface SourceMaterial, struct FName OptionalName); // Function Engine.PrimitiveComponent.CreateDynamicMaterialInstance(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3388650>
	struct UMaterialInstanceDynamic CreateAndSetMaterialInstanceDynamicFromMaterial(int32_t ElementIndex, struct UMaterialInterface Parent); // Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamicFromMaterial(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3388580>
	struct UMaterialInstanceDynamic CreateAndSetMaterialInstanceDynamic(int32_t ElementIndex); // Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamic(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33884E0>
	struct TArray<struct UPrimitiveComponent> CopyArrayOfMoveIgnoreComponents(); // Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreComponents(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33883E0>
	struct TArray<struct UActor> CopyArrayOfMoveIgnoreActors(); // Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreActors(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3388360>
	void ClearMoveIgnoreComponents(); // Function Engine.PrimitiveComponent.ClearMoveIgnoreComponents(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3388310>
	void ClearMoveIgnoreActors(); // Function Engine.PrimitiveComponent.ClearMoveIgnoreActors(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33882F0>
	bool CanCharacterStepUp(struct APawn Pawn); // Function Engine.PrimitiveComponent.CanCharacterStepUp(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3388250>
	void AddTorqueInRadians(struct FVector Torque, struct FName BoneName, bool bAccelChange); // Function Engine.PrimitiveComponent.AddTorqueInRadians(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3387FE0>
	void AddTorqueInDegrees(struct FVector Torque, struct FName BoneName, bool bAccelChange); // Function Engine.PrimitiveComponent.AddTorqueInDegrees(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3388100>
	void AddTorque(struct FVector Torque, struct FName BoneName, bool bAccelChange); // Function Engine.PrimitiveComponent.AddTorque(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3387FE0>
	void AddRadialImpulse(struct FVector Origin, float Radius, float Strength, enum class ERadialImpulseFalloff Falloff, bool bVelChange); // Function Engine.PrimitiveComponent.AddRadialImpulse(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3387E20>
	void AddRadialForce(struct FVector Origin, float Radius, float Strength, enum class ERadialImpulseFalloff Falloff, bool bAccelChange); // Function Engine.PrimitiveComponent.AddRadialForce(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3387C60>
	void AddImpulseAtLocation(struct FVector Impulse, struct FVector Location, struct FName BoneName); // Function Engine.PrimitiveComponent.AddImpulseAtLocation(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3387950>
	void AddImpulse(struct FVector Impulse, struct FName BoneName, bool bVelChange); // Function Engine.PrimitiveComponent.AddImpulse(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3387830>
	void AddForceAtLocationLocal(struct FVector Force, struct FVector Location, struct FName BoneName); // Function Engine.PrimitiveComponent.AddForceAtLocationLocal(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3387700>
	void AddForceAtLocation(struct FVector Force, struct FVector Location, struct FName BoneName); // Function Engine.PrimitiveComponent.AddForceAtLocation(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33875D0>
	void AddForce(struct FVector Force, struct FName BoneName, bool bAccelChange); // Function Engine.PrimitiveComponent.AddForce(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33874B0>
	void AddAngularImpulseInRadians(struct FVector Impulse, struct FName BoneName, bool bVelChange); // Function Engine.PrimitiveComponent.AddAngularImpulseInRadians(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3387390>
	void AddAngularImpulseInDegrees(struct FVector Impulse, struct FName BoneName, bool bVelChange); // Function Engine.PrimitiveComponent.AddAngularImpulseInDegrees(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3387240>
	void AddAngularImpulse(struct FVector Impulse, struct FName BoneName, bool bVelChange); // Function Engine.PrimitiveComponent.AddAngularImpulse(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3387120>
};

// Class Engine.ShapeComponent
class UShapeComponent : public UPrimitiveComponent {

public:

	struct UBodySetup ShapeBodySetup; // 0x408 (8)
	struct UClass* AreaClass; // 0x410 (8)
	struct FColor ShapeColor; // 0x418 (4)
	char bDrawOnlyIfSelected : 1; // 0x41C (1)
	char bShouldCollideWhenPlacing : 1; // 0x41C (1)
	char bDynamicObstacle : 1; // 0x41C (1)
};

// Class Engine.BoxComponent
class UBoxComponent : public UShapeComponent {

public:

	struct FVector BoxExtent; // 0x420 (12)
	float LineThickness; // 0x42C (4)

	void SetBoxExtent(struct FVector InBoxExtent, bool bUpdateOverlaps); // Function Engine.BoxComponent.SetBoxExtent(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3292490>
	struct FVector GetUnscaledBoxExtent(); // Function Engine.BoxComponent.GetUnscaledBoxExtent(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3291CF0>
	struct FVector GetScaledBoxExtent(); // Function Engine.BoxComponent.GetScaledBoxExtent(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3291C80>
};

// Class Engine.DataAsset
class UDataAsset : public Object {

public:

	struct UClass* NativeClass; // 0x28 (8)
};

// Class Engine.MeshComponent
class UMeshComponent : public UPrimitiveComponent {

public:

	struct TArray<struct UMaterialInterface> OverrideMaterials; // 0x408 (16)
	char bEnableMaterialParameterCaching : 1; // 0x428 (1)

	void SetVectorParameterValueOnMaterials(struct FName ParameterName, struct FVector ParameterValue); // Function Engine.MeshComponent.SetVectorParameterValueOnMaterials(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33570F0>
	void SetScalarParameterValueOnMaterials(struct FName ParameterName, float ParameterValue); // Function Engine.MeshComponent.SetScalarParameterValueOnMaterials(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3357020>
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int32_t CinematicTextureGroups); // Function Engine.MeshComponent.PrestreamTextures(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3356D90>
	bool IsMaterialSlotNameValid(struct FName MaterialSlotName); // Function Engine.MeshComponent.IsMaterialSlotNameValid(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3356CF0>
	struct TArray<struct FName> GetMaterialSlotNames(); // Function Engine.MeshComponent.GetMaterialSlotNames(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3356BF0>
	struct TArray<struct UMaterialInterface> GetMaterials(); // Function Engine.MeshComponent.GetMaterials(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3356C70>
	int32_t GetMaterialIndex(struct FName MaterialSlotName); // Function Engine.MeshComponent.GetMaterialIndex(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3356B50>
};

// Class Engine.SkinnedMeshComponent
class USkinnedMeshComponent : public UMeshComponent {

public:

	struct USkeletalMesh SkeletalMesh; // 0x430 (8)
	struct TWeakObjectPtr<struct USkinnedMeshComponent> MasterPoseComponent; // 0x438 (8)
	struct TArray<enum class ESkinCacheUsage> SkinCacheUsage; // 0x440 (16)
	struct UPhysicsAsset PhysicsAssetOverride; // 0x548 (8)
	int32_t ForcedLodModel; // 0x550 (4)
	int32_t MinLodModel; // 0x554 (4)
	float StreamingDistanceMultiplier; // 0x560 (4)
	struct TArray<struct FSkelMeshComponentLODInfo> LODInfo; // 0x570 (16)
	enum class EVisibilityBasedAnimTickOption VisibilityBasedAnimTickOption; // 0x5A4 (1)
	char pad_475_0 : 2; // 0x475 (1)
	char bOverrideMinLod : 1; // 0x5A6 (1)
	char pad_475_3 : 5; // 0x475 (1)
	char pad_476_0 : 3; // 0x476 (1)
	char bUseBoundsFromMasterPoseComponent : 1; // 0x5A6 (1)
	char pad_476_4 : 4; // 0x476 (1)
	char pad_477_0 : 4; // 0x477 (1)
	char bForceWireframe : 1; // 0x5A6 (1)
	char pad_477_5 : 3; // 0x477 (1)
	char pad_478_0 : 5; // 0x478 (1)
	char bDisplayBones : 1; // 0x5A6 (1)
	char pad_478_6 : 2; // 0x478 (1)
	char pad_479_0 : 6; // 0x479 (1)
	char bDisableMorphTarget : 1; // 0x5A6 (1)
	char pad_479_7 : 1; // 0x479 (1)
	char pad_47A_0 : 7; // 0x47A (1)
	char bHideSkin : 1; // 0x5A6 (1)
	char bPerBoneMotionBlur : 1; // 0x5A7 (1)
	char pad_47B_1 : 7; // 0x47B (1)
	char pad_47C_0 : 1; // 0x47C (1)
	char bComponentUseFixedSkelBounds : 1; // 0x5A7 (1)
	char pad_47C_2 : 6; // 0x47C (1)
	char pad_47D_0 : 2; // 0x47D (1)
	char bConsiderAllBodiesForBounds : 1; // 0x5A7 (1)
	char pad_47D_3 : 5; // 0x47D (1)
	char pad_47E_0 : 3; // 0x47E (1)
	char bSyncAttachParentLOD : 1; // 0x5A7 (1)
	char pad_47E_4 : 4; // 0x47E (1)
	char pad_47F_0 : 4; // 0x47F (1)
	char bCanHighlightSelectedSections : 1; // 0x5A7 (1)
	char pad_47F_5 : 3; // 0x47F (1)
	char pad_480_0 : 5; // 0x480 (1)
	char bRecentlyRendered : 1; // 0x5A7 (1)
	char pad_480_6 : 2; // 0x480 (1)
	char pad_481_0 : 6; // 0x481 (1)
	char bCastCapsuleDirectShadow : 1; // 0x5A7 (1)
	char pad_481_7 : 1; // 0x481 (1)
	char pad_482_0 : 7; // 0x482 (1)
	char bCastCapsuleIndirectShadow : 1; // 0x5A7 (1)
	char bCPUSkinning : 1; // 0x5A8 (1)
	char pad_483_1 : 7; // 0x483 (1)
	char pad_484_0 : 1; // 0x484 (1)
	char bEnableUpdateRateOptimizations : 1; // 0x5A8 (1)
	char pad_484_2 : 6; // 0x484 (1)
	char pad_485_0 : 2; // 0x485 (1)
	char bDisplayDebugUpdateRateOptimizations : 1; // 0x5A8 (1)
	char pad_485_3 : 5; // 0x485 (1)
	char pad_486_0 : 3; // 0x486 (1)
	char bRenderStatic : 1; // 0x5A8 (1)
	char pad_486_4 : 4; // 0x486 (1)
	char pad_487_0 : 4; // 0x487 (1)
	char bIgnoreMasterPoseComponentLOD : 1; // 0x5A8 (1)
	char pad_487_5 : 3; // 0x487 (1)
	char pad_488_0 : 7; // 0x488 (1)
	char bCachedLocalBoundsUpToDate : 1; // 0x5A8 (1)
	char pad_489_0 : 1; // 0x489 (1)
	char bForceMeshObjectUpdate : 1; // 0x5A9 (1)
	char pad_489_2 : 6; // 0x489 (1)
	float CapsuleIndirectShadowMinVisibility; // 0x5AC (4)
	struct FBoxSphereBounds CachedWorldSpaceBounds; // 0x5C0 (28)
	struct FMatrix CachedWorldToLocalTransform; // 0x5E0 (64)

	void UnloadSkinWeightProfile(struct FName InProfileName); // Function Engine.SkinnedMeshComponent.UnloadSkinWeightProfile(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A8900>
	void UnHideBoneByName(struct FName BoneName); // Function Engine.SkinnedMeshComponent.UnHideBoneByName(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A8880>
	void TransformToBoneSpace(struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector& OutPosition, struct FRotator& OutRotation); // Function Engine.SkinnedMeshComponent.TransformToBoneSpace(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A86C0>
	void TransformFromBoneSpace(struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector& OutPosition, struct FRotator& OutRotation); // Function Engine.SkinnedMeshComponent.TransformFromBoneSpace(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A8500>
	void ShowMaterialSection(int32_t MaterialID, int32_t SectionIndex, bool bShow, int32_t LODIndex); // Function Engine.SkinnedMeshComponent.ShowMaterialSection(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A83C0>
	void ShowAllMaterialSections(int32_t LODIndex); // Function Engine.SkinnedMeshComponent.ShowAllMaterialSections(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A8340>
	void SetVertexColorOverride_LinearColor(int32_t LODIndex, struct TArray<struct FLinearColor>& VertexColors); // Function Engine.SkinnedMeshComponent.SetVertexColorOverride_LinearColor(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A8260>
	bool SetSkinWeightProfile(struct FName InProfileName); // Function Engine.SkinnedMeshComponent.SetSkinWeightProfile(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A81D0>
	void SetSkinWeightOverride(int32_t LODIndex, struct TArray<struct FSkelMeshSkinWeightInfo>& SkinWeights); // Function Engine.SkinnedMeshComponent.SetSkinWeightOverride(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A80F0>
	void SetSkeletalMesh(struct USkeletalMesh NewMesh, bool bReinitPose); // Function Engine.SkinnedMeshComponent.SetSkeletalMesh(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A8020>
	void SetRenderStatic(bool bNewValue); // Function Engine.SkinnedMeshComponent.SetRenderStatic(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A7F90>
	void SetPhysicsAsset(struct UPhysicsAsset NewPhysicsAsset, bool bForceReInit); // Function Engine.SkinnedMeshComponent.SetPhysicsAsset(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A7EC0>
	void SetMinLOD(int32_t InNewMinLOD); // Function Engine.SkinnedMeshComponent.SetMinLOD(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A7E40>
	void SetMasterPoseComponent(struct USkinnedMeshComponent NewMasterBoneComponent, bool bForceUpdate); // Function Engine.SkinnedMeshComponent.SetMasterPoseComponent(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A7D70>
	void SetForcedLOD(int32_t InNewForcedLOD); // Function Engine.SkinnedMeshComponent.SetForcedLOD(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A7CF0>
	void SetCastCapsuleIndirectShadow(bool bNewValue); // Function Engine.SkinnedMeshComponent.SetCastCapsuleIndirectShadow(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A7C60>
	void SetCastCapsuleDirectShadow(bool bNewValue); // Function Engine.SkinnedMeshComponent.SetCastCapsuleDirectShadow(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A7BD0>
	void SetCapsuleIndirectShadowMinVisibility(float NewValue); // Function Engine.SkinnedMeshComponent.SetCapsuleIndirectShadowMinVisibility(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A7B50>
	bool IsUsingSkinWeightProfile(); // Function Engine.SkinnedMeshComponent.IsUsingSkinWeightProfile(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A7B20>
	bool IsMaterialSectionShown(int32_t MaterialID, int32_t LODIndex); // Function Engine.SkinnedMeshComponent.IsMaterialSectionShown(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A7A60>
	bool IsBoneHiddenByName(struct FName BoneName); // Function Engine.SkinnedMeshComponent.IsBoneHiddenByName(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A79D0>
	void HideBoneByName(struct FName BoneName, enum class EPhysBodyOp PhysBodyOption); // Function Engine.SkinnedMeshComponent.HideBoneByName(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A77F0>
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(struct FName BoneName, float& OutTwistAngle, float& OutSwingAngle); // Function Engine.SkinnedMeshComponent.GetTwistAndSwingAngleOfDeltaRotationFromRefPose(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A76D0>
	struct FName GetSocketBoneName(struct FName InSocketName); // Function Engine.SkinnedMeshComponent.GetSocketBoneName(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A75A0>
	struct FVector GetRefPosePosition(int32_t BoneIndex); // Function Engine.SkinnedMeshComponent.GetRefPosePosition(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A7500>
	struct FName GetParentBone(struct FName BoneName); // Function Engine.SkinnedMeshComponent.GetParentBone(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A7470>
	int32_t GetNumLODs(); // Function Engine.SkinnedMeshComponent.GetNumLODs(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A7440>
	int32_t GetNumBones(); // Function Engine.SkinnedMeshComponent.GetNumBones(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A7410>
	int32_t GetForcedLOD(); // Function Engine.SkinnedMeshComponent.GetForcedLOD(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A73E0>
	struct FTransform GetDeltaTransformFromRefPose(struct FName BoneName, struct FName BaseName); // Function Engine.SkinnedMeshComponent.GetDeltaTransformFromRefPose(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A72E0>
	struct FName GetCurrentSkinWeightProfileName(); // Function Engine.SkinnedMeshComponent.GetCurrentSkinWeightProfileName(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A72C0>
	struct FName GetBoneName(int32_t BoneIndex); // Function Engine.SkinnedMeshComponent.GetBoneName(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A7230>
	int32_t GetBoneIndex(struct FName BoneName); // Function Engine.SkinnedMeshComponent.GetBoneIndex(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A71A0>
	struct FName FindClosestBone_K2(struct FVector TestLocation, struct FVector& BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset); // Function Engine.SkinnedMeshComponent.FindClosestBone_K2(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A7010>
	void ClearVertexColorOverride(int32_t LODIndex); // Function Engine.SkinnedMeshComponent.ClearVertexColorOverride(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A6F90>
	void ClearSkinWeightProfile(); // Function Engine.SkinnedMeshComponent.ClearSkinWeightProfile(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A6F70>
	void ClearSkinWeightOverride(int32_t LODIndex); // Function Engine.SkinnedMeshComponent.ClearSkinWeightOverride(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A6EF0>
	bool BoneIsChildOf(struct FName BoneName, struct FName ParentBoneName); // Function Engine.SkinnedMeshComponent.BoneIsChildOf(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A6E30>
};

// Class Engine.SkeletalMesh
class USkeletalMesh : public UStreamableRenderAsset {

public:

	struct USkeleton Skeleton; // 0x60 (8)
	struct FBoxSphereBounds ImportedBounds; // 0x68 (28)
	struct FBoxSphereBounds ExtendedBounds; // 0x84 (28)
	struct FVector PositiveBoundsExtension; // 0xA0 (12)
	struct FVector NegativeBoundsExtension; // 0xAC (12)
	struct TArray<struct FSkeletalMaterial> Materials; // 0xB8 (16)
	struct TArray<struct FBoneMirrorInfo> SkelMirrorTable; // 0xC8 (16)
	struct TArray<struct FSkeletalMeshLODInfo> LODInfo; // 0xD8 (16)
	struct FPerPlatformInt MinLOD; // 0x138 (4)
	struct FPerPlatformBool DisableBelowMinLodStripping; // 0x13C (1)
	enum class EAxis SkelMirrorAxis; // 0x13D (1)
	enum class EAxis SkelMirrorFlipAxis; // 0x13E (1)
	char bUseFullPrecisionUVs : 1; // 0x13F (1)
	char pad_CF_1 : 7; // 0xCF (1)
	char pad_D0_0 : 1; // 0xD0 (1)
	char bUseHighPrecisionTangentBasis : 1; // 0x13F (1)
	char pad_D0_2 : 6; // 0xD0 (1)
	char pad_D1_0 : 2; // 0xD1 (1)
	char bHasBeenSimplified : 1; // 0x13F (1)
	char pad_D1_3 : 5; // 0xD1 (1)
	char pad_D2_0 : 3; // 0xD2 (1)
	char bHasVertexColors : 1; // 0x13F (1)
	char pad_D2_4 : 4; // 0xD2 (1)
	char pad_D3_0 : 5; // 0xD3 (1)
	char bEnablePerPolyCollision : 1; // 0x13F (1)
	char pad_D3_6 : 2; // 0xD3 (1)
	struct UBodySetup BodySetup; // 0x140 (8)
	struct UPhysicsAsset PhysicsAsset; // 0x148 (8)
	struct UPhysicsAsset ShadowPhysicsAsset; // 0x150 (8)
	struct TArray<struct UNodeMappingContainer> NodeMappingData; // 0x158 (16)
	struct TArray<struct UMorphTarget> MorphTargets; // 0x168 (16)
	struct UClass* PostProcessAnimBlueprint; // 0x2F0 (8)
	struct TArray<struct UClothingAssetBase> MeshClothingAssets; // 0x2F8 (16)
	struct FSkeletalMeshSamplingInfo SamplingInfo; // 0x308 (48)
	struct TArray<struct UAssetUserData> AssetUserData; // 0x338 (16)
	struct TArray<struct USkeletalMeshSocket> Sockets; // 0x350 (16)
	struct TArray<struct FSkinWeightProfileInfo> SkinWeightProfiles; // 0x370 (16)

	void SetLODSettings(struct USkeletalMeshLODSettings InLODSettings); // Function Engine.SkeletalMesh.SetLODSettings(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0xF06690>
	int32_t NumSockets(); // Function Engine.SkeletalMesh.NumSockets(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x339E7A0>
	struct TArray<struct FString> K2_GetAllMorphTargetNames(); // Function Engine.SkeletalMesh.K2_GetAllMorphTargetNames(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x339E6C0>
	bool IsSectionUsingCloth(int32_t InSectionIndex, bool bCheckCorrespondingSections); // Function Engine.SkeletalMesh.IsSectionUsingCloth(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x339E600>
	struct USkeletalMeshSocket GetSocketByIndex(int32_t Index); // Function Engine.SkeletalMesh.GetSocketByIndex(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x339E570>
	struct UNodeMappingContainer GetNodeMappingContainer(struct UBlueprint SourceAsset); // Function Engine.SkeletalMesh.GetNodeMappingContainer(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x339E4E0>
	struct FBoxSphereBounds GetImportedBounds(); // Function Engine.SkeletalMesh.GetImportedBounds(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x339E490>
	struct FBoxSphereBounds GetBounds(); // Function Engine.SkeletalMesh.GetBounds(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x339E440>
	struct USkeletalMeshSocket FindSocketInfo(struct FName InSocketName, struct FTransform& OutTransform, int32_t& OutBoneIndex, int32_t& OutIndex); // Function Engine.SkeletalMesh.FindSocketInfo(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x339E270>
	struct USkeletalMeshSocket FindSocketAndIndex(struct FName InSocketName, int32_t& OutIndex); // Function Engine.SkeletalMesh.FindSocketAndIndex(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x339E1A0>
	struct USkeletalMeshSocket FindSocket(struct FName InSocketName); // Function Engine.SkeletalMesh.FindSocket(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x339E110>
};

// Class Engine.Pawn
class APawn : public UActor {

public:

	char bUseControllerRotationPitch : 1; // 0x228 (1)
	char pad_220_1 : 7; // 0x220 (1)
	char pad_221_0 : 1; // 0x221 (1)
	char bUseControllerRotationYaw : 1; // 0x228 (1)
	char pad_221_2 : 6; // 0x221 (1)
	char pad_222_0 : 2; // 0x222 (1)
	char bUseControllerRotationRoll : 1; // 0x228 (1)
	char pad_222_3 : 5; // 0x222 (1)
	char pad_223_0 : 3; // 0x223 (1)
	char bCanAffectNavigationGeneration : 1; // 0x228 (1)
	char pad_223_4 : 4; // 0x223 (1)
	float BaseEyeHeight; // 0x22C (4)
	enum class EAutoReceiveInput AutoPossessPlayer; // 0x230 (1)
	enum class EAutoPossessAI AutoPossessAI; // 0x231 (1)
	char RemoteViewPitch; // 0x232 (1)
	struct UClass* AIControllerClass; // 0x238 (8)
	struct APlayerState PlayerState; // 0x240 (8)
	struct AController LastHitBy; // 0x250 (8)
	struct AController Controller; // 0x258 (8)
	struct FVector ControlInputVector; // 0x264 (12)
	struct FVector LastControlInputVector; // 0x270 (12)

	void SpawnDefaultController(); // Function Engine.Pawn.SpawnDefaultController(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x336E480>
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate); // Function Engine.Pawn.SetCanAffectNavigationGeneration(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x336DD40>
	void ReceiveUnpossessed(struct AController OldController); // Function Engine.Pawn.ReceiveUnpossessed(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void ReceivePossessed(struct AController NewController); // Function Engine.Pawn.ReceivePossessed(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void PawnMakeNoise(float Loudness, struct FVector NoiseLocation, bool bUseNoiseMakerLocation, struct UActor NoiseMaker); // Function Engine.Pawn.PawnMakeNoise(Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x336D060>
	void OnRep_PlayerState(); // Function Engine.Pawn.OnRep_PlayerState(Native|Public) // <VeiledExperts-Win64-Shipping.exe+0xDD0E10>
	void OnRep_Controller(); // Function Engine.Pawn.OnRep_Controller(Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x336D040>
	void LaunchPawn(struct FVector LaunchVelocity, bool bXYOverride, bool bZOverride); // Function Engine.Pawn.LaunchPawn(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x336CF20>
	struct FVector K2_GetMovementInputVector(); // Function Engine.Pawn.K2_GetMovementInputVector(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x336CDF0>
	bool IsPlayerControlled(); // Function Engine.Pawn.IsPlayerControlled(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32C72C0>
	bool IsPawnControlled(); // Function Engine.Pawn.IsPawnControlled(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x336CEF0>
	bool IsMoveInputIgnored(); // Function Engine.Pawn.IsMoveInputIgnored(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x336CEC0>
	bool IsLocallyControlled(); // Function Engine.Pawn.IsLocallyControlled(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x336CE90>
	bool IsControlled(); // Function Engine.Pawn.IsControlled(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x336CE60>
	bool IsBotControlled(); // Function Engine.Pawn.IsBotControlled(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x336CE30>
	struct FVector GetPendingMovementInputVector(); // Function Engine.Pawn.GetPendingMovementInputVector(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x336CDF0>
	struct FVector GetNavAgentLocation(); // Function Engine.Pawn.GetNavAgentLocation(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x336CD70>
	struct UPawnMovementComponent GetMovementComponent(); // Function Engine.Pawn.GetMovementComponent(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32AC6C0>
	struct UActor GetMovementBaseActor(struct APawn Pawn); // Function Engine.Pawn.GetMovementBaseActor(Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <VeiledExperts-Win64-Shipping.exe+0x336CC50>
	struct FVector GetLastMovementInputVector(); // Function Engine.Pawn.GetLastMovementInputVector(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x336CC10>
	struct FRotator GetControlRotation(); // Function Engine.Pawn.GetControlRotation(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x336CB80>
	struct AController GetController(); // Function Engine.Pawn.GetController(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x336CBC0>
	struct FRotator GetBaseAimRotation(); // Function Engine.Pawn.GetBaseAimRotation(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x336C3E0>
	void DetachFromControllerPendingDestroy(); // Function Engine.Pawn.DetachFromControllerPendingDestroy(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x336C1F0>
	struct FVector ConsumeMovementInputVector(); // Function Engine.Pawn.ConsumeMovementInputVector(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x336C0E0>
	void AddMovementInput(struct FVector WorldDirection, float ScaleValue, bool bForce); // Function Engine.Pawn.AddMovementInput(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x336BE70>
	void AddControllerYawInput(float Val); // Function Engine.Pawn.AddControllerYawInput(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x336BDF0>
	void AddControllerRollInput(float Val); // Function Engine.Pawn.AddControllerRollInput(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x336BD70>
	void AddControllerPitchInput(float Val); // Function Engine.Pawn.AddControllerPitchInput(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x336BCF0>
};

// Class Engine.Character
class ACharacter : public APawn {

public:

	struct USkeletalMeshComponent Mesh; // 0x280 (8)
	struct UCharacterMovementComponent CharacterMovement; // 0x288 (8)
	struct UCapsuleComponent CapsuleComponent; // 0x290 (8)
	struct FBasedMovementInfo BasedMovement; // 0x298 (48)
	struct FBasedMovementInfo ReplicatedBasedMovement; // 0x2C8 (48)
	float AnimRootMotionTranslationScale; // 0x2F8 (4)
	struct FVector BaseTranslationOffset; // 0x2FC (12)
	struct FQuat BaseRotationOffset; // 0x310 (16)
	float ReplicatedServerLastTransformUpdateTimeStamp; // 0x320 (4)
	float ReplayLastTransformUpdateTimeStamp; // 0x324 (4)
	char ReplicatedMovementMode; // 0x328 (1)
	bool bInBaseReplication; // 0x329 (1)
	float CrouchedEyeHeight; // 0x32C (4)
	char bIsCrouched : 1; // 0x330 (1)
	char pad_326_1 : 7; // 0x326 (1)
	char pad_327_0 : 1; // 0x327 (1)
	char bProxyIsJumpForceApplied : 1; // 0x330 (1)
	char pad_327_2 : 6; // 0x327 (1)
	char pad_328_0 : 2; // 0x328 (1)
	char bPressedJump : 1; // 0x330 (1)
	char pad_328_3 : 5; // 0x328 (1)
	char pad_329_0 : 3; // 0x329 (1)
	char bClientUpdating : 1; // 0x330 (1)
	char pad_329_4 : 4; // 0x329 (1)
	char pad_32A_0 : 4; // 0x32A (1)
	char bClientWasFalling : 1; // 0x330 (1)
	char pad_32A_5 : 3; // 0x32A (1)
	char pad_32B_0 : 5; // 0x32B (1)
	char bClientResimulateRootMotion : 1; // 0x330 (1)
	char pad_32B_6 : 2; // 0x32B (1)
	char pad_32C_0 : 6; // 0x32C (1)
	char bClientResimulateRootMotionSources : 1; // 0x330 (1)
	char pad_32C_7 : 1; // 0x32C (1)
	char pad_32D_0 : 7; // 0x32D (1)
	char bSimGravityDisabled : 1; // 0x330 (1)
	char bClientCheckEncroachmentOnNetUpdate : 1; // 0x331 (1)
	char pad_32E_1 : 7; // 0x32E (1)
	char pad_32F_0 : 1; // 0x32F (1)
	char bServerMoveIgnoreRootMotion : 1; // 0x331 (1)
	char pad_32F_2 : 6; // 0x32F (1)
	char pad_330_0 : 2; // 0x330 (1)
	char bWasJumping : 1; // 0x331 (1)
	char pad_330_3 : 5; // 0x330 (1)
	float JumpKeyHoldTime; // 0x334 (4)
	float JumpForceTimeRemaining; // 0x338 (4)
	float ProxyJumpForceStartedTime; // 0x33C (4)
	float JumpMaxHoldTime; // 0x340 (4)
	int32_t JumpMaxCount; // 0x344 (4)
	int32_t JumpCurrentCount; // 0x348 (4)
	struct FMulticastInlineDelegate OnReachedJumpApex; // 0x350 (16)
	struct FMulticastInlineDelegate MovementModeChangedDelegate; // 0x370 (16)
	struct FMulticastInlineDelegate OnCharacterMovementUpdated; // 0x380 (16)
	struct FRootMotionSourceGroup SavedRootMotion; // 0x390 (56)
	struct FRootMotionMovementParams ClientRootMotionParams; // 0x3D0 (64)
	struct TArray<struct FSimulatedRootMotionReplicatedMove> RootMotionRepMoves; // 0x410 (16)
	struct FRepRootMotionMontage RepRootMotion; // 0x420 (152)

	void UnCrouch(bool bClientSimulation); // Function Engine.Character.UnCrouch(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329EFA0>
	void StopJumping(); // Function Engine.Character.StopJumping(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329EF80>
	void StopAnimMontage(struct UAnimMontage AnimMontage); // Function Engine.Character.StopAnimMontage(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329EEF0>
	void ServerMoveOld(float OldTimeStamp, struct FVector_NetQuantize10 OldAccel, char OldMoveFlags); // Function Engine.Character.ServerMoveOld(Net|Native|Event|Public|NetServer|NetValidate) // <VeiledExperts-Win64-Shipping.exe+0x329EA50>
	void ServerMoveNoBase(float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, char ClientMovementMode); // Function Engine.Character.ServerMoveNoBase(Net|Native|Event|Public|NetServer|NetValidate) // <VeiledExperts-Win64-Shipping.exe+0x329E7D0>
	void ServerMoveDualNoBase(float TimeStamp0, struct FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, char ClientMovementMode); // Function Engine.Character.ServerMoveDualNoBase(Net|Native|Event|Public|NetServer|NetValidate) // <VeiledExperts-Win64-Shipping.exe+0x329E410>
	void ServerMoveDualHybridRootMotion(float TimeStamp0, struct FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, struct UPrimitiveComponent ClientMovementBase, struct FName ClientBaseBoneName, char ClientMovementMode); // Function Engine.Character.ServerMoveDualHybridRootMotion(Net|Native|Event|Public|NetServer|NetValidate) // <VeiledExperts-Win64-Shipping.exe+0x329DFC0>
	void ServerMoveDual(float TimeStamp0, struct FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, struct UPrimitiveComponent ClientMovementBase, struct FName ClientBaseBoneName, char ClientMovementMode); // Function Engine.Character.ServerMoveDual(Net|Native|Event|Public|NetServer|NetValidate) // <VeiledExperts-Win64-Shipping.exe+0x329DB70>
	void ServerMove(float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, struct UPrimitiveComponent ClientMovementBase, struct FName ClientBaseBoneName, char ClientMovementMode); // Function Engine.Character.ServerMove(Net|Native|Event|Public|NetServer|NetValidate) // <VeiledExperts-Win64-Shipping.exe+0x329D860>
	void RootMotionDebugClientPrintOnScreen(struct FString inString); // Function Engine.Character.RootMotionDebugClientPrintOnScreen(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x329D7C0>
	float PlayAnimMontage(struct UAnimMontage AnimMontage, float InPlayRate, struct FName StartSectionName); // Function Engine.Character.PlayAnimMontage(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329D630>
	void OnWalkingOffLedge(struct FVector& PreviousFloorImpactNormal, struct FVector& PreviousFloorContactNormal, struct FVector& PreviousLocation, float TimeDelta); // Function Engine.Character.OnWalkingOffLedge(Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x329D470>
	void OnRep_RootMotion(); // Function Engine.Character.OnRep_RootMotion(Final|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x329D450>
	void OnRep_ReplicatedBasedMovement(); // Function Engine.Character.OnRep_ReplicatedBasedMovement(Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x329D430>
	void OnRep_ReplayLastTransformUpdateTimeStamp(); // Function Engine.Character.OnRep_ReplayLastTransformUpdateTimeStamp(Final|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x329D410>
	void OnRep_IsCrouched(); // Function Engine.Character.OnRep_IsCrouched(Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x329D3F0>
	void OnLaunched(struct FVector LaunchVelocity, bool bXYOverride, bool bZOverride); // Function Engine.Character.OnLaunched(Event|Public|HasDefaults|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void OnLanded(struct FHitResult& Hit); // Function Engine.Character.OnLanded(Event|Public|HasOutParms|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void OnJumped(); // Function Engine.Character.OnJumped(Native|Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x329D3D0>
	void LaunchCharacter(struct FVector LaunchVelocity, bool bXYOverride, bool bZOverride); // Function Engine.Character.LaunchCharacter(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329D2B0>
	void K2_UpdateCustomMovement(float DeltaTime); // Function Engine.Character.K2_UpdateCustomMovement(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust); // Function Engine.Character.K2_OnStartCrouch(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void K2_OnMovementModeChanged(enum class EMovementMode PrevMovementMode, enum class EMovementMode NewMovementMode, char PrevCustomMode, char NewCustomMode); // Function Engine.Character.K2_OnMovementModeChanged(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust); // Function Engine.Character.K2_OnEndCrouch(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void Jump(); // Function Engine.Character.Jump(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329BBF0>
	bool IsPlayingRootMotion(); // Function Engine.Character.IsPlayingRootMotion(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x329BBC0>
	bool IsPlayingNetworkedRootMotionMontage(); // Function Engine.Character.IsPlayingNetworkedRootMotionMontage(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x329BB90>
	bool IsJumpProvidingForce(); // Function Engine.Character.IsJumpProvidingForce(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x329BB60>
	bool HasAnyRootMotion(); // Function Engine.Character.HasAnyRootMotion(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x329BB30>
	struct UAnimMontage GetCurrentMontage(); // Function Engine.Character.GetCurrentMontage(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329B4A0>
	struct FVector GetBaseTranslationOffset(); // Function Engine.Character.GetBaseTranslationOffset(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x329B470>
	struct FRotator GetBaseRotationOffsetRotator(); // Function Engine.Character.GetBaseRotationOffsetRotator(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x329B420>
	float GetAnimRootMotionTranslationScale(); // Function Engine.Character.GetAnimRootMotionTranslationScale(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x329B350>
	void Crouch(bool bClientSimulation); // Function Engine.Character.Crouch(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329B2C0>
	void ClientVeryShortAdjustPosition(float Timestamp, struct FVector NewLoc, struct UPrimitiveComponent NewBase, struct FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // Function Engine.Character.ClientVeryShortAdjustPosition(Net|Native|Event|Public|HasDefaults|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x329AF70>
	void ClientCheatWalk(); // Function Engine.Character.ClientCheatWalk(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x329AF50>
	void ClientCheatGhost(); // Function Engine.Character.ClientCheatGhost(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x329AF30>
	void ClientCheatFly(); // Function Engine.Character.ClientCheatFly(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x329AF10>
	void ClientAdjustRootMotionSourcePosition(float Timestamp, struct FRootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, struct FVector ServerLoc, struct FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, struct UPrimitiveComponent ServerBase, struct FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // Function Engine.Character.ClientAdjustRootMotionSourcePosition(Net|Native|Event|Public|HasDefaults|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x329AA70>
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, struct FVector ServerLoc, struct FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, struct UPrimitiveComponent ServerBase, struct FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // Function Engine.Character.ClientAdjustRootMotionPosition(Net|Native|Event|Public|HasDefaults|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x329A780>
	void ClientAdjustPosition(float Timestamp, struct FVector NewLoc, struct FVector NewVel, struct UPrimitiveComponent NewBase, struct FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // Function Engine.Character.ClientAdjustPosition(Net|Native|Event|Public|HasDefaults|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x329A510>
	void ClientAckGoodMove(float Timestamp); // Function Engine.Character.ClientAckGoodMove(Net|Native|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x329A490>
	bool CanJumpInternal(); // Function Engine.Character.CanJumpInternal(Native|Event|Protected|BlueprintEvent|Const) // <VeiledExperts-Win64-Shipping.exe+0x329A460>
	bool CanJump(); // Function Engine.Character.CanJump(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x329A430>
	bool CanCrouch(); // Function Engine.Character.CanCrouch(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x329A400>
	void CacheInitialMeshOffset(struct FVector MeshRelativeLocation, struct FRotator MeshRelativeRotation); // Function Engine.Character.CacheInitialMeshOffset(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329A320>
};

// Class Engine.MovementComponent
class UMovementComponent : public UActorComponent {

public:

	struct USceneComponent UpdatedComponent; // 0xB0 (8)
	struct UPrimitiveComponent UpdatedPrimitive; // 0xB8 (8)
	struct FVector Velocity; // 0xC4 (12)
	struct FVector PlaneConstraintNormal; // 0xD0 (12)
	struct FVector PlaneConstraintOrigin; // 0xDC (12)
	char bUpdateOnlyIfRendered : 1; // 0xE8 (1)
	char pad_E4_1 : 7; // 0xE4 (1)
	char pad_E5_0 : 1; // 0xE5 (1)
	char bAutoUpdateTickRegistration : 1; // 0xE8 (1)
	char pad_E5_2 : 6; // 0xE5 (1)
	char pad_E6_0 : 2; // 0xE6 (1)
	char bTickBeforeOwner : 1; // 0xE8 (1)
	char pad_E6_3 : 5; // 0xE6 (1)
	char pad_E7_0 : 3; // 0xE7 (1)
	char bAutoRegisterUpdatedComponent : 1; // 0xE8 (1)
	char pad_E7_4 : 4; // 0xE7 (1)
	char pad_E8_0 : 4; // 0xE8 (1)
	char bConstrainToPlane : 1; // 0xE8 (1)
	char bSnapToPlaneAtStart : 1; // 0xE8 (1)
	char bAutoRegisterPhysicsVolumeUpdates : 1; // 0xE8 (1)
	char bComponentShouldUpdatePhysicsVolume : 1; // 0xE8 (1)
	enum class EPlaneConstraintAxisSetting PlaneConstraintAxisSetting; // 0xEB (1)

	void StopMovementImmediately(); // Function Engine.MovementComponent.StopMovementImmediately(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3266740>
	void SnapUpdatedComponentToPlane(); // Function Engine.MovementComponent.SnapUpdatedComponentToPlane(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x335ADB0>
	void SetUpdatedComponent(struct USceneComponent NewUpdatedComponent); // Function Engine.MovementComponent.SetUpdatedComponent(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3266E70>
	void SetPlaneConstraintOrigin(struct FVector PlaneOrigin); // Function Engine.MovementComponent.SetPlaneConstraintOrigin(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x335AD20>
	void SetPlaneConstraintNormal(struct FVector PlaneNormal); // Function Engine.MovementComponent.SetPlaneConstraintNormal(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x335AC90>
	void SetPlaneConstraintFromVectors(struct FVector Forward, struct FVector Up); // Function Engine.MovementComponent.SetPlaneConstraintFromVectors(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x335ABB0>
	void SetPlaneConstraintEnabled(bool bEnabled); // Function Engine.MovementComponent.SetPlaneConstraintEnabled(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x335AB20>
	void SetPlaneConstraintAxisSetting(enum class EPlaneConstraintAxisSetting NewAxisSetting); // Function Engine.MovementComponent.SetPlaneConstraintAxisSetting(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x335AAA0>
	void PhysicsVolumeChanged(struct APhysicsVolume NewVolume); // Function Engine.MovementComponent.PhysicsVolumeChanged(Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x335A9A0>
	bool K2_MoveUpdatedComponent(struct FVector Delta, struct FRotator NewRotation, struct FHitResult& OutHit, bool bSweep, bool bTeleport); // Function Engine.MovementComponent.K2_MoveUpdatedComponent(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x335A4F0>
	float K2_GetModifiedMaxSpeed(); // Function Engine.MovementComponent.K2_GetModifiedMaxSpeed(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x335A4B0>
	float K2_GetMaxSpeedModifier(); // Function Engine.MovementComponent.K2_GetMaxSpeedModifier(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x335A470>
	bool IsExceedingMaxSpeed(float MaxSpeed); // Function Engine.MovementComponent.IsExceedingMaxSpeed(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x335A3E0>
	struct FVector GetPlaneConstraintOrigin(); // Function Engine.MovementComponent.GetPlaneConstraintOrigin(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x335A3A0>
	struct FVector GetPlaneConstraintNormal(); // Function Engine.MovementComponent.GetPlaneConstraintNormal(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x335A360>
	enum class EPlaneConstraintAxisSetting GetPlaneConstraintAxisSetting(); // Function Engine.MovementComponent.GetPlaneConstraintAxisSetting(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x335A340>
	struct APhysicsVolume GetPhysicsVolume(); // Function Engine.MovementComponent.GetPhysicsVolume(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x335A310>
	float GetMaxSpeed(); // Function Engine.MovementComponent.GetMaxSpeed(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x335A2D0>
	float GetGravityZ(); // Function Engine.MovementComponent.GetGravityZ(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x335A290>
	struct FVector ConstrainNormalToPlane(struct FVector Normal); // Function Engine.MovementComponent.ConstrainNormalToPlane(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x335A1E0>
	struct FVector ConstrainLocationToPlane(struct FVector Location); // Function Engine.MovementComponent.ConstrainLocationToPlane(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x335A130>
	struct FVector ConstrainDirectionToPlane(struct FVector Direction); // Function Engine.MovementComponent.ConstrainDirectionToPlane(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x335A080>
};

// Class Engine.NavMovementComponent
class UNavMovementComponent : public UMovementComponent {

public:

	struct FNavAgentProperties NavAgentProps; // 0xF0 (48)
	float FixedPathBrakingDistance; // 0x120 (4)
	char bUpdateNavAgentWithOwnersCollision : 1; // 0x124 (1)
	char bUseAccelerationForPaths : 1; // 0x124 (1)
	char bUseFixedBrakingDistanceForPaths : 1; // 0x124 (1)
	char pad_124_3 : 5; // 0x124 (1)
	struct FMovementProperties MovementState; // 0x125 (1)
	struct Object PathFollowingComp; // 0x128 (8)

	void StopMovementKeepPathing(); // Function Engine.NavMovementComponent.StopMovementKeepPathing(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x335F0B0>
	void StopActiveMovement(); // Function Engine.NavMovementComponent.StopActiveMovement(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x335F090>
	bool IsSwimming(); // Function Engine.NavMovementComponent.IsSwimming(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x335EEC0>
	bool IsMovingOnGround(); // Function Engine.NavMovementComponent.IsMovingOnGround(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A07E0>
	bool IsFlying(); // Function Engine.NavMovementComponent.IsFlying(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x335EE90>
	bool IsFalling(); // Function Engine.NavMovementComponent.IsFalling(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x335EE60>
	bool IsCrouching(); // Function Engine.NavMovementComponent.IsCrouching(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3282DF0>
};

// Class Engine.PawnMovementComponent
class UPawnMovementComponent : public UNavMovementComponent {

public:

	struct APawn PawnOwner; // 0x130 (8)

	struct FVector K2_GetInputVector(); // Function Engine.PawnMovementComponent.K2_GetInputVector(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3370D80>
	bool IsMoveInputIgnored(); // Function Engine.PawnMovementComponent.IsMoveInputIgnored(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3370DF0>
	struct FVector GetPendingInputVector(); // Function Engine.PawnMovementComponent.GetPendingInputVector(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3370D80>
	struct APawn GetPawnOwner(); // Function Engine.PawnMovementComponent.GetPawnOwner(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3370D50>
	struct FVector GetLastInputVector(); // Function Engine.PawnMovementComponent.GetLastInputVector(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3370D10>
	struct FVector ConsumeInputVector(); // Function Engine.PawnMovementComponent.ConsumeInputVector(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3370AA0>
	void AddInputVector(struct FVector WorldVector, bool bForce); // Function Engine.PawnMovementComponent.AddInputVector(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3370640>
};

// Class Engine.CharacterMovementComponent
class UCharacterMovementComponent : public UPawnMovementComponent {

public:

	struct ACharacter CharacterOwner; // 0x148 (8)
	float GravityScale; // 0x150 (4)
	float MaxStepHeight; // 0x154 (4)
	float JumpZVelocity; // 0x158 (4)
	float JumpOffJumpZFactor; // 0x15C (4)
	float WalkableFloorAngle; // 0x160 (4)
	float WalkableFloorZ; // 0x164 (4)
	enum class EMovementMode MovementMode; // 0x168 (1)
	char CustomMovementMode; // 0x169 (1)
	enum class ENetworkSmoothingMode NetworkSmoothingMode; // 0x16A (1)
	float GroundFriction; // 0x16C (4)
	float MaxWalkSpeed; // 0x18C (4)
	float MaxWalkSpeedCrouched; // 0x190 (4)
	float MaxSwimSpeed; // 0x194 (4)
	float MaxFlySpeed; // 0x198 (4)
	float MaxCustomMovementSpeed; // 0x19C (4)
	float MaxAcceleration; // 0x1A0 (4)
	float MinAnalogWalkSpeed; // 0x1A4 (4)
	float BrakingFrictionFactor; // 0x1A8 (4)
	float BrakingFriction; // 0x1AC (4)
	float BrakingSubStepTime; // 0x1B0 (4)
	float BrakingDecelerationWalking; // 0x1B4 (4)
	float BrakingDecelerationFalling; // 0x1B8 (4)
	float BrakingDecelerationSwimming; // 0x1BC (4)
	float BrakingDecelerationFlying; // 0x1C0 (4)
	float AirControl; // 0x1C4 (4)
	float AirControlBoostMultiplier; // 0x1C8 (4)
	float AirControlBoostVelocityThreshold; // 0x1CC (4)
	float FallingLateralFriction; // 0x1D0 (4)
	float CrouchedHalfHeight; // 0x1D4 (4)
	float Buoyancy; // 0x1D8 (4)
	float PerchRadiusThreshold; // 0x1DC (4)
	float PerchAdditionalHeight; // 0x1E0 (4)
	struct FRotator RotationRate; // 0x1E4 (12)
	char bUseSeparateBrakingFriction : 1; // 0x1F0 (1)
	char pad_1C3_1 : 7; // 0x1C3 (1)
	char pad_1C4_0 : 1; // 0x1C4 (1)
	char bApplyGravityWhileJumping : 1; // 0x1F0 (1)
	char pad_1C4_2 : 6; // 0x1C4 (1)
	char pad_1C5_0 : 2; // 0x1C5 (1)
	char bUseControllerDesiredRotation : 1; // 0x1F0 (1)
	char pad_1C5_3 : 5; // 0x1C5 (1)
	char pad_1C6_0 : 3; // 0x1C6 (1)
	char bOrientRotationToMovement : 1; // 0x1F0 (1)
	char pad_1C6_4 : 4; // 0x1C6 (1)
	char pad_1C7_0 : 4; // 0x1C7 (1)
	char bSweepWhileNavWalking : 1; // 0x1F0 (1)
	char pad_1C7_5 : 3; // 0x1C7 (1)
	char pad_1C8_0 : 6; // 0x1C8 (1)
	char bMovementInProgress : 1; // 0x1F0 (1)
	char pad_1C8_7 : 1; // 0x1C8 (1)
	char pad_1C9_0 : 7; // 0x1C9 (1)
	char bEnableScopedMovementUpdates : 1; // 0x1F0 (1)
	char bEnableServerDualMoveScopedMovementUpdates : 1; // 0x1F1 (1)
	char pad_1CA_1 : 7; // 0x1CA (1)
	char pad_1CB_0 : 1; // 0x1CB (1)
	char bForceMaxAccel : 1; // 0x1F1 (1)
	char pad_1CB_2 : 6; // 0x1CB (1)
	char pad_1CC_0 : 2; // 0x1CC (1)
	char bRunPhysicsWithNoController : 1; // 0x1F1 (1)
	char pad_1CC_3 : 5; // 0x1CC (1)
	char pad_1CD_0 : 3; // 0x1CD (1)
	char bForceNextFloorCheck : 1; // 0x1F1 (1)
	char pad_1CD_4 : 4; // 0x1CD (1)
	char pad_1CE_0 : 4; // 0x1CE (1)
	char bShrinkProxyCapsule : 1; // 0x1F1 (1)
	char pad_1CE_5 : 3; // 0x1CE (1)
	char pad_1CF_0 : 5; // 0x1CF (1)
	char bCanWalkOffLedges : 1; // 0x1F1 (1)
	char pad_1CF_6 : 2; // 0x1CF (1)
	char pad_1D0_0 : 6; // 0x1D0 (1)
	char bCanWalkOffLedgesWhenCrouching : 1; // 0x1F1 (1)
	char pad_1D0_7 : 1; // 0x1D0 (1)
	char pad_1D1_0 : 1; // 0x1D1 (1)
	char bNetworkSkipProxyPredictionOnNetUpdate : 1; // 0x1F2 (1)
	char pad_1D1_2 : 6; // 0x1D1 (1)
	char pad_1D2_0 : 2; // 0x1D2 (1)
	char bNetworkAlwaysReplicateTransformUpdateTimestamp : 1; // 0x1F2 (1)
	char pad_1D2_3 : 5; // 0x1D2 (1)
	char pad_1D3_0 : 3; // 0x1D3 (1)
	char bDeferUpdateMoveComponent : 1; // 0x1F2 (1)
	char pad_1D3_4 : 4; // 0x1D3 (1)
	char pad_1D4_0 : 4; // 0x1D4 (1)
	char bEnablePhysicsInteraction : 1; // 0x1F2 (1)
	char pad_1D4_5 : 3; // 0x1D4 (1)
	char pad_1D5_0 : 5; // 0x1D5 (1)
	char bTouchForceScaledToMass : 1; // 0x1F2 (1)
	char pad_1D5_6 : 2; // 0x1D5 (1)
	char pad_1D6_0 : 6; // 0x1D6 (1)
	char bPushForceScaledToMass : 1; // 0x1F2 (1)
	char pad_1D6_7 : 1; // 0x1D6 (1)
	char pad_1D7_0 : 7; // 0x1D7 (1)
	char bPushForceUsingZOffset : 1; // 0x1F2 (1)
	char bScalePushForceToVelocity : 1; // 0x1F3 (1)
	char pad_1D8_1 : 7; // 0x1D8 (1)
	struct USceneComponent DeferredUpdatedMoveComponent; // 0x1F8 (8)
	float MaxOutOfWaterStepHeight; // 0x200 (4)
	float OutofWaterZ; // 0x204 (4)
	float Mass; // 0x208 (4)
	float StandingDownwardForceScale; // 0x20C (4)
	float InitialPushForceFactor; // 0x210 (4)
	float PushForceFactor; // 0x214 (4)
	float PushForcePointZOffsetFactor; // 0x218 (4)
	float TouchForceFactor; // 0x21C (4)
	float MinTouchForce; // 0x220 (4)
	float MaxTouchForce; // 0x224 (4)
	float RepulsionForce; // 0x228 (4)
	struct FVector Acceleration; // 0x22C (12)
	struct FQuat LastUpdateRotation; // 0x240 (16)
	struct FVector LastUpdateLocation; // 0x250 (12)
	struct FVector LastUpdateVelocity; // 0x25C (12)
	float ServerLastTransformUpdateTimeStamp; // 0x268 (4)
	float ServerLastClientGoodMoveAckTime; // 0x26C (4)
	float ServerLastClientAdjustmentTime; // 0x270 (4)
	struct FVector PendingImpulseToApply; // 0x274 (12)
	struct FVector PendingForceToApply; // 0x280 (12)
	float AnalogInputModifier; // 0x28C (4)
	float MaxSimulationTimeStep; // 0x29C (4)
	int32_t MaxSimulationIterations; // 0x2A0 (4)
	int32_t MaxJumpApexAttemptsPerSimulation; // 0x2A4 (4)
	float MaxDepenetrationWithGeometry; // 0x2A8 (4)
	float MaxDepenetrationWithGeometryAsProxy; // 0x2AC (4)
	float MaxDepenetrationWithPawn; // 0x2B0 (4)
	float MaxDepenetrationWithPawnAsProxy; // 0x2B4 (4)
	float NetworkSimulatedSmoothLocationTime; // 0x2B8 (4)
	float NetworkSimulatedSmoothRotationTime; // 0x2BC (4)
	float ListenServerNetworkSimulatedSmoothLocationTime; // 0x2C0 (4)
	float ListenServerNetworkSimulatedSmoothRotationTime; // 0x2C4 (4)
	float NetProxyShrinkRadius; // 0x2C8 (4)
	float NetProxyShrinkHalfHeight; // 0x2CC (4)
	float NetworkMaxSmoothUpdateDistance; // 0x2D0 (4)
	float NetworkNoSmoothUpdateDistance; // 0x2D4 (4)
	float NetworkMinTimeBetweenClientAckGoodMoves; // 0x2D8 (4)
	float NetworkMinTimeBetweenClientAdjustments; // 0x2DC (4)
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection; // 0x2E0 (4)
	float NetworkLargeClientCorrectionDistance; // 0x2E4 (4)
	float LedgeCheckThreshold; // 0x2E8 (4)
	float JumpOutOfWaterPitch; // 0x2EC (4)
	struct FFindFloorResult CurrentFloor; // 0x2F0 (148)
	enum class EMovementMode DefaultLandMovementMode; // 0x384 (1)
	enum class EMovementMode DefaultWaterMovementMode; // 0x385 (1)
	enum class EMovementMode GroundMovementMode; // 0x386 (1)
	char bMaintainHorizontalGroundVelocity : 1; // 0x387 (1)
	char pad_354_1 : 7; // 0x354 (1)
	char pad_355_0 : 1; // 0x355 (1)
	char bImpartBaseVelocityX : 1; // 0x387 (1)
	char pad_355_2 : 6; // 0x355 (1)
	char pad_356_0 : 2; // 0x356 (1)
	char bImpartBaseVelocityY : 1; // 0x387 (1)
	char pad_356_3 : 5; // 0x356 (1)
	char pad_357_0 : 3; // 0x357 (1)
	char bImpartBaseVelocityZ : 1; // 0x387 (1)
	char pad_357_4 : 4; // 0x357 (1)
	char pad_358_0 : 4; // 0x358 (1)
	char bImpartBaseAngularVelocity : 1; // 0x387 (1)
	char pad_358_5 : 3; // 0x358 (1)
	char pad_359_0 : 5; // 0x359 (1)
	char bJustTeleported : 1; // 0x387 (1)
	char pad_359_6 : 2; // 0x359 (1)
	char pad_35A_0 : 6; // 0x35A (1)
	char bNetworkUpdateReceived : 1; // 0x387 (1)
	char pad_35A_7 : 1; // 0x35A (1)
	char pad_35B_0 : 7; // 0x35B (1)
	char bNetworkMovementModeChanged : 1; // 0x387 (1)
	char bIgnoreClientMovementErrorChecksAndCorrection : 1; // 0x388 (1)
	char pad_35C_1 : 7; // 0x35C (1)
	char pad_35D_0 : 1; // 0x35D (1)
	char bServerAcceptClientAuthoritativePosition : 1; // 0x388 (1)
	char pad_35D_2 : 6; // 0x35D (1)
	char pad_35E_0 : 2; // 0x35E (1)
	char bNotifyApex : 1; // 0x388 (1)
	char pad_35E_3 : 5; // 0x35E (1)
	char pad_35F_0 : 3; // 0x35F (1)
	char bCheatFlying : 1; // 0x388 (1)
	char pad_35F_4 : 4; // 0x35F (1)
	char pad_360_0 : 4; // 0x360 (1)
	char bWantsToCrouch : 1; // 0x388 (1)
	char pad_360_5 : 3; // 0x360 (1)
	char pad_361_0 : 5; // 0x361 (1)
	char bCrouchMaintainsBaseLocation : 1; // 0x388 (1)
	char pad_361_6 : 2; // 0x361 (1)
	char pad_362_0 : 6; // 0x362 (1)
	char bIgnoreBaseRotation : 1; // 0x388 (1)
	char pad_362_7 : 1; // 0x362 (1)
	char pad_363_0 : 7; // 0x363 (1)
	char bFastAttachedMove : 1; // 0x388 (1)
	char bAlwaysCheckFloor : 1; // 0x389 (1)
	char pad_364_1 : 7; // 0x364 (1)
	char pad_365_0 : 1; // 0x365 (1)
	char bUseFlatBaseForFloorChecks : 1; // 0x389 (1)
	char pad_365_2 : 6; // 0x365 (1)
	char pad_366_0 : 2; // 0x366 (1)
	char bPerformingJumpOff : 1; // 0x389 (1)
	char pad_366_3 : 5; // 0x366 (1)
	char pad_367_0 : 3; // 0x367 (1)
	char bWantsToLeaveNavWalking : 1; // 0x389 (1)
	char pad_367_4 : 4; // 0x367 (1)
	char pad_368_0 : 4; // 0x368 (1)
	char bUseRVOAvoidance : 1; // 0x389 (1)
	char pad_368_5 : 3; // 0x368 (1)
	char pad_369_0 : 5; // 0x369 (1)
	char bRequestedMoveUseAcceleration : 1; // 0x389 (1)
	char pad_369_6 : 2; // 0x369 (1)
	char pad_36A_0 : 7; // 0x36A (1)
	char bWasSimulatingRootMotion : 1; // 0x389 (1)
	char bAllowPhysicsRotationDuringAnimRootMotion : 1; // 0x38A (1)
	char pad_36B_1 : 7; // 0x36B (1)
	char pad_36C_0 : 1; // 0x36C (1)
	char bHasRequestedVelocity : 1; // 0x38A (1)
	char pad_36C_2 : 6; // 0x36C (1)
	char pad_36D_0 : 2; // 0x36D (1)
	char bRequestedMoveWithMaxSpeed : 1; // 0x38A (1)
	char pad_36D_3 : 5; // 0x36D (1)
	char pad_36E_0 : 3; // 0x36E (1)
	char bWasAvoidanceUpdated : 1; // 0x38A (1)
	char pad_36E_4 : 4; // 0x36E (1)
	char pad_36F_0 : 6; // 0x36F (1)
	char bProjectNavMeshWalking : 1; // 0x38A (1)
	char pad_36F_7 : 1; // 0x36F (1)
	char pad_370_0 : 7; // 0x370 (1)
	char bProjectNavMeshOnBothWorldChannels : 1; // 0x38A (1)
	float AvoidanceConsiderationRadius; // 0x39C (4)
	struct FVector RequestedVelocity; // 0x3A0 (12)
	int32_t AvoidanceUID; // 0x3AC (4)
	struct FNavAvoidanceMask AvoidanceGroup; // 0x3B0 (4)
	struct FNavAvoidanceMask GroupsToAvoid; // 0x3B4 (4)
	struct FNavAvoidanceMask GroupsToIgnore; // 0x3B8 (4)
	float AvoidanceWeight; // 0x3BC (4)
	struct FVector PendingLaunchVelocity; // 0x3C0 (12)
	float NavMeshProjectionInterval; // 0x470 (4)
	float NavMeshProjectionTimer; // 0x474 (4)
	float NavMeshProjectionInterpSpeed; // 0x478 (4)
	float NavMeshProjectionHeightScaleUp; // 0x47C (4)
	float NavMeshProjectionHeightScaleDown; // 0x480 (4)
	float NavWalkingFloorDistTolerance; // 0x484 (4)
	struct FCharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction; // 0x488 (48)
	float MinTimeBetweenTimeStampResets; // 0x4D0 (4)
	struct FRootMotionSourceGroup CurrentRootMotion; // 0x4D8 (56)
	struct FRootMotionMovementParams RootMotionParams; // 0x5A0 (64)
	struct FVector AnimRootMotionVelocity; // 0x5E0 (12)

	void SetWalkableFloorZ(float InWalkableFloorZ); // Function Engine.CharacterMovementComponent.SetWalkableFloorZ(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A10E0>
	void SetWalkableFloorAngle(float InWalkableFloorAngle); // Function Engine.CharacterMovementComponent.SetWalkableFloorAngle(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A1060>
	void SetMovementMode(enum class EMovementMode NewMovementMode, char NewCustomMode); // Function Engine.CharacterMovementComponent.SetMovementMode(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A0FA0>
	void SetGroupsToIgnoreMask(struct FNavAvoidanceMask& GroupMask); // Function Engine.CharacterMovementComponent.SetGroupsToIgnoreMask(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A0F10>
	void SetGroupsToIgnore(int32_t GroupFlags); // Function Engine.CharacterMovementComponent.SetGroupsToIgnore(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A0E90>
	void SetGroupsToAvoidMask(struct FNavAvoidanceMask& GroupMask); // Function Engine.CharacterMovementComponent.SetGroupsToAvoidMask(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A0E00>
	void SetGroupsToAvoid(int32_t GroupFlags); // Function Engine.CharacterMovementComponent.SetGroupsToAvoid(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A0D80>
	void SetAvoidanceGroupMask(struct FNavAvoidanceMask& GroupMask); // Function Engine.CharacterMovementComponent.SetAvoidanceGroupMask(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A0CF0>
	void SetAvoidanceGroup(int32_t GroupFlags); // Function Engine.CharacterMovementComponent.SetAvoidanceGroup(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A0C70>
	void SetAvoidanceEnabled(bool bEnable); // Function Engine.CharacterMovementComponent.SetAvoidanceEnabled(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A0BE0>
	float K2_GetWalkableFloorZ(); // Function Engine.CharacterMovementComponent.K2_GetWalkableFloorZ(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A0BB0>
	float K2_GetWalkableFloorAngle(); // Function Engine.CharacterMovementComponent.K2_GetWalkableFloorAngle(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A0B80>
	float K2_GetModifiedMaxAcceleration(); // Function Engine.CharacterMovementComponent.K2_GetModifiedMaxAcceleration(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A0B40>
	void K2_FindFloor(struct FVector CapsuleLocation, struct FFindFloorResult& FloorResult); // Function Engine.CharacterMovementComponent.K2_FindFloor(Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A0A00>
	void K2_ComputeFloorDist(struct FVector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, struct FFindFloorResult& FloorResult); // Function Engine.CharacterMovementComponent.K2_ComputeFloorDist(Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A0810>
	bool IsWalking(); // Function Engine.CharacterMovementComponent.IsWalking(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A07E0>
	bool IsWalkable(struct FHitResult& Hit); // Function Engine.CharacterMovementComponent.IsWalkable(Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A0710>
	float GetValidPerchRadius(); // Function Engine.CharacterMovementComponent.GetValidPerchRadius(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A06E0>
	float GetPerchRadiusThreshold(); // Function Engine.CharacterMovementComponent.GetPerchRadiusThreshold(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A06B0>
	struct UPrimitiveComponent GetMovementBase(); // Function Engine.CharacterMovementComponent.GetMovementBase(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A0680>
	float GetMinAnalogSpeed(); // Function Engine.CharacterMovementComponent.GetMinAnalogSpeed(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A0640>
	float GetMaxJumpHeightWithJumpTime(); // Function Engine.CharacterMovementComponent.GetMaxJumpHeightWithJumpTime(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A0600>
	float GetMaxJumpHeight(); // Function Engine.CharacterMovementComponent.GetMaxJumpHeight(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A05C0>
	float GetMaxBrakingDeceleration(); // Function Engine.CharacterMovementComponent.GetMaxBrakingDeceleration(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A0580>
	float GetMaxAcceleration(); // Function Engine.CharacterMovementComponent.GetMaxAcceleration(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A0540>
	struct FVector GetLastUpdateVelocity(); // Function Engine.CharacterMovementComponent.GetLastUpdateVelocity(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A0510>
	struct FRotator GetLastUpdateRotation(); // Function Engine.CharacterMovementComponent.GetLastUpdateRotation(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A04C0>
	struct FVector GetLastUpdateLocation(); // Function Engine.CharacterMovementComponent.GetLastUpdateLocation(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A0490>
	struct FVector GetImpartedMovementBaseVelocity(); // Function Engine.CharacterMovementComponent.GetImpartedMovementBaseVelocity(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A0450>
	struct FVector GetCurrentAcceleration(); // Function Engine.CharacterMovementComponent.GetCurrentAcceleration(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A0410>
	struct ACharacter GetCharacterOwner(); // Function Engine.CharacterMovementComponent.GetCharacterOwner(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A03F0>
	float GetAnalogInputModifier(); // Function Engine.CharacterMovementComponent.GetAnalogInputModifier(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A03C0>
	void DisableMovement(); // Function Engine.CharacterMovementComponent.DisableMovement(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A03A0>
	void ClearAccumulatedForces(); // Function Engine.CharacterMovementComponent.ClearAccumulatedForces(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A0380>
	void CapsuleTouched(struct UPrimitiveComponent OverlappedComp, struct UActor Other, struct UPrimitiveComponent OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Engine.CharacterMovementComponent.CapsuleTouched(Native|Protected|HasOutParms) // <VeiledExperts-Win64-Shipping.exe+0x32A0190>
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration); // Function Engine.CharacterMovementComponent.CalcVelocity(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A0030>
	void AddImpulse(struct FVector Impulse, bool bVelocityChange); // Function Engine.CharacterMovementComponent.AddImpulse(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329FF50>
	void AddForce(struct FVector Force); // Function Engine.CharacterMovementComponent.AddForce(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329FEC0>
};

// Class Engine.Player
class UPlayer : public Object {

public:

	struct APlayerController PlayerController; // 0x30 (8)
	int32_t CurrentNetSpeed; // 0x38 (4)
	int32_t ConfiguredInternetSpeed; // 0x3C (4)
	int32_t ConfiguredLanSpeed; // 0x40 (4)
};

// Class Engine.NetConnection
class UNetConnection : public UPlayer {

public:

	struct TArray<struct UChildConnection> Children; // 0x48 (16)
	struct UNetDriver Driver; // 0x58 (8)
	struct UClass* PackageMapClass; // 0x60 (8)
	struct UPackageMap PackageMap; // 0x68 (8)
	struct TArray<struct UChannel> OpenChannels; // 0x70 (16)
	struct TArray<struct UActor> SentTemporaries; // 0x80 (16)
	struct UActor ViewTarget; // 0x90 (8)
	struct UActor OwningActor; // 0x98 (8)
	int32_t MaxPacket; // 0xA0 (4)
	char InternalAck : 1; // 0xA4 (1)
	char pad_A4_1 : 7; // 0xA4 (1)
	struct FUniqueNetIdRepl PlayerId; // 0x160 (40)
	double LastReceiveTime; // 0x1D0 (8)
	struct TArray<struct UChannel> ChannelsToTick; // 0x1510 (16)
};

// Class Engine.NetDriver
class UNetDriver : public Object {

public:

	struct FString NetConnectionClassName; // 0x30 (16)
	struct FString ReplicationDriverClassName; // 0x40 (16)
	int32_t MaxDownloadSize; // 0x50 (4)
	char bClampListenServerTickRate : 1; // 0x54 (1)
	char pad_4C_1 : 7; // 0x4C (1)
	int32_t NetServerMaxTickRate; // 0x58 (4)
	int32_t MaxNetTickRate; // 0x5C (4)
	int32_t MaxInternetClientRate; // 0x60 (4)
	int32_t MaxClientRate; // 0x64 (4)
	float ServerTravelPause; // 0x68 (4)
	float SpawnPrioritySeconds; // 0x6C (4)
	float RelevantTimeout; // 0x70 (4)
	float KeepAliveTime; // 0x74 (4)
	float InitialConnectTimeout; // 0x78 (4)
	float ConnectionTimeout; // 0x7C (4)
	float TimeoutMultiplierForUnoptimizedBuilds; // 0x80 (4)
	bool bNoTimeouts; // 0x84 (1)
	bool bNeverApplyNetworkEmulationSettings; // 0x85 (1)
	struct UNetConnection ServerConnection; // 0x88 (8)
	struct TArray<struct UNetConnection> ClientConnections; // 0x90 (16)
	int32_t RecentlyDisconnectedTrackingTime; // 0x100 (4)
	struct UWorld World; // 0x140 (8)
	struct UPackage WorldPackage; // 0x148 (8)
	struct UClass* NetConnectionClass; // 0x170 (8)
	struct UClass* ReplicationDriverClass; // 0x178 (8)
	struct FName NetDriverName; // 0x190 (8)
	struct TArray<struct FChannelDefinition> ChannelDefinitions; // 0x198 (16)
	struct TMap<struct FName, struct FChannelDefinition> ChannelDefinitionMap; // 0x1A8 (80)
	struct TArray<struct UChannel> ActorChannelPool; // 0x1F8 (16)
	float Time; // 0x210 (4)
	struct UReplicationDriver ReplicationDriver; // 0x6E8 (8)
};

// Class Engine.Brush
class ABrush : public UActor {

public:

	enum class EBrushType BrushType; // 0x220 (1)
	struct FColor BrushColor; // 0x224 (4)
	int32_t PolyFlags; // 0x228 (4)
	char bColored : 1; // 0x22C (1)
	char pad_229_1 : 7; // 0x229 (1)
	char pad_22A_0 : 1; // 0x22A (1)
	char bSolidWhenSelected : 1; // 0x22C (1)
	char pad_22A_2 : 6; // 0x22A (1)
	char pad_22B_0 : 2; // 0x22B (1)
	char bPlaceableFromClassBrowser : 1; // 0x22C (1)
	char pad_22B_3 : 5; // 0x22B (1)
	char pad_22C_0 : 3; // 0x22C (1)
	char bNotForClientOrServer : 1; // 0x22C (1)
	char pad_22C_4 : 4; // 0x22C (1)
	struct UModel Brush; // 0x230 (8)
	struct UBrushComponent BrushComponent; // 0x238 (8)
	char bInManipulation : 1; // 0x240 (1)
	char pad_23D_1 : 7; // 0x23D (1)
	struct TArray<struct FGeomSelection> SavedSelections; // 0x248 (16)
};

// Class Engine.World
class UWorld : public Object {

public:

	struct ULevel PersistentLevel; // 0x30 (8)
	struct UNetDriver NetDriver; // 0x38 (8)
	struct ULineBatchComponent LineBatcher; // 0x40 (8)
	struct ULineBatchComponent PersistentLineBatcher; // 0x48 (8)
	struct ULineBatchComponent ForegroundLineBatcher; // 0x50 (8)
	struct AGameNetworkManager NetworkManager; // 0x58 (8)
	struct UPhysicsCollisionHandler PhysicsCollisionHandler; // 0x60 (8)
	struct TArray<struct Object> ExtraReferencedObjects; // 0x68 (16)
	struct TArray<struct Object> PerModuleDataObjects; // 0x78 (16)
	struct TArray<struct UActor> LevelSequenceActors; // 0x88 (16)
	struct TArray<struct ULevelStreaming> StreamingLevels; // 0x98 (16)
	struct FStreamingLevelsToConsider StreamingLevelsToConsider; // 0xA8 (40)
	struct FString StreamingLevelsPrefix; // 0xD0 (16)
	struct ULevel CurrentLevelPendingVisibility; // 0xE0 (8)
	struct ULevel CurrentLevelPendingInvisibility; // 0xE8 (8)
	struct UDemoNetDriver DemoNetDriver; // 0xF0 (8)
	struct AParticleEventManager MyParticleEventManager; // 0xF8 (8)
	struct APhysicsVolume DefaultPhysicsVolume; // 0x100 (8)
	char pad_100_0 : 2; // 0x100 (1)
	char bAreConstraintsDirty : 1; // 0x11E (1)
	char pad_100_3 : 5; // 0x100 (1)
	struct UNavigationSystemBase NavigationSystem; // 0x120 (8)
	struct AGameModeBase AuthorityGameMode; // 0x128 (8)
	struct AGameStateBase GameState; // 0x130 (8)
	struct UAISystemBase AISystem; // 0x138 (8)
	struct UAvoidanceManager AvoidanceManager; // 0x140 (8)
	struct TArray<struct ULevel> Levels; // 0x148 (16)
	struct TArray<struct FLevelCollection> LevelCollections; // 0x158 (16)
	struct UGameInstance OwningGameInstance; // 0x188 (8)
	struct TArray<struct UMaterialParameterCollectionInstance> ParameterCollectionInstances; // 0x190 (16)
	struct UCanvas CanvasForRenderingToTarget; // 0x1A0 (8)
	struct UCanvas CanvasForDrawMaterialToRenderTarget; // 0x1A8 (8)
	struct TArray<struct UActorComponent> ComponentsThatNeedEndOfFrameUpdate; // 0x200 (16)
	struct TArray<struct UActorComponent> ComponentsThatNeedEndOfFrameUpdate_OnGameThread; // 0x210 (16)
	struct UWorldComposition WorldComposition; // 0x560 (8)
	struct FWorldPSCPool PSCPool; // 0x5F0 (88)

	struct AWorldSettings K2_GetWorldSettings(); // Function Engine.World.K2_GetWorldSettings(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33CD7C0>
	void HandleTimelineScrubbed(); // Function Engine.World.HandleTimelineScrubbed(Final|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x33CD7A0>
};

// Class Engine.InterpTrack
class UInterpTrack : public Object {

public:

	struct TArray<struct UInterpTrack> SubTracks; // 0x38 (16)
	struct UClass* TrackInstClass; // 0x48 (8)
	enum class ETrackActiveCondition ActiveCondition; // 0x50 (1)
	struct FString TrackTitle; // 0x58 (16)
	char bOnePerGroup : 1; // 0x68 (1)
	char pad_51_1 : 7; // 0x51 (1)
	char pad_52_0 : 1; // 0x52 (1)
	char bDirGroupOnly : 1; // 0x68 (1)
	char pad_52_2 : 6; // 0x52 (1)
	char pad_53_0 : 2; // 0x53 (1)
	char bDisableTrack : 1; // 0x68 (1)
	char pad_53_3 : 5; // 0x53 (1)
	char pad_54_0 : 3; // 0x54 (1)
	char bIsSelected : 1; // 0x68 (1)
	char pad_54_4 : 4; // 0x54 (1)
	char pad_55_0 : 4; // 0x55 (1)
	char bIsAnimControlTrack : 1; // 0x68 (1)
	char pad_55_5 : 3; // 0x55 (1)
	char pad_56_0 : 5; // 0x56 (1)
	char bSubTrackOnly : 1; // 0x68 (1)
	char pad_56_6 : 2; // 0x56 (1)
	char pad_57_0 : 6; // 0x57 (1)
	char bVisible : 1; // 0x68 (1)
	char pad_57_7 : 1; // 0x57 (1)
	char pad_58_0 : 7; // 0x58 (1)
	char bIsRecording : 1; // 0x68 (1)
};

// Class Engine.InterpTrackVectorBase
class UInterpTrackVectorBase : public UInterpTrack {

public:

	struct FInterpCurveVector VectorTrack; // 0x70 (24)
	float CurveTension; // 0x88 (4)
};

// Class Engine.InterpTrackFloatBase
class UInterpTrackFloatBase : public UInterpTrack {

public:

	struct FInterpCurveFloat FloatTrack; // 0x70 (24)
	float CurveTension; // 0x88 (4)
};

// Class Engine.MaterialExpression
class UMaterialExpression : public Object {

public:

	struct UMaterial Material; // 0x28 (8)
	struct UMaterialFunction Function; // 0x30 (8)
	char bIsParameterExpression : 1; // 0x38 (1)
};

// Class Engine.MaterialExpressionTextureBase
class UMaterialExpressionTextureBase : public UMaterialExpression {

public:

	struct UTexture Texture; // 0x40 (8)
	enum class EMaterialSamplerType SamplerType; // 0x48 (1)
	char IsDefaultMeshpaintTexture : 1; // 0x49 (1)
};

// Class Engine.MaterialExpressionTextureSample
class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase {

public:

	struct FExpressionInput Coordinates; // 0x50 (12)
	struct FExpressionInput TextureObject; // 0x64 (12)
	struct FExpressionInput MipValue; // 0x78 (12)
	struct FExpressionInput CoordinatesDX; // 0x8C (12)
	struct FExpressionInput CoordinatesDY; // 0xA0 (12)
	struct FExpressionInput AutomaticViewMipBiasValue; // 0xB4 (12)
	enum class ETextureMipValueMode MipValueMode; // 0xC8 (1)
	enum class ESamplerSourceMode SamplerSource; // 0xC9 (1)
	char AutomaticViewMipBias : 1; // 0xCA (1)
	char pad_9A_1 : 7; // 0x9A (1)
	char ConstCoordinate; // 0xCB (1)
	int32_t ConstMipValue; // 0xCC (4)
};

// Class Engine.MaterialExpressionTextureSampleParameter
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample {

public:

	struct FName ParameterName; // 0xD0 (8)
	struct FGuid ExpressionGUID; // 0xD8 (16)
	struct FName Group; // 0xE8 (8)
};

// Class Engine.SplineComponent
class USplineComponent : public UPrimitiveComponent {

public:

	struct FSplineCurves SplineCurves; // 0x408 (104)
	struct FInterpCurveVector SplineInfo; // 0x470 (24)
	struct FInterpCurveQuat SplineRotInfo; // 0x488 (24)
	struct FInterpCurveVector SplineScaleInfo; // 0x4A0 (24)
	struct FInterpCurveFloat SplineReparamTable; // 0x4B8 (24)
	bool bAllowSplineEditingPerInstance; // 0x4D0 (1)
	int32_t ReparamStepsPerSegment; // 0x4D4 (4)
	float Duration; // 0x4D8 (4)
	bool bStationaryEndpoints; // 0x4DC (1)
	bool bSplineHasBeenEdited; // 0x4DD (1)
	bool bModifiedByConstructionScript; // 0x4DE (1)
	bool bInputSplinePointsToConstructionScript; // 0x4DF (1)
	bool bDrawDebug; // 0x4E0 (1)
	bool bClosedLoop; // 0x4E1 (1)
	bool bLoopPositionOverride; // 0x4E2 (1)
	float LoopPosition; // 0x4E4 (4)
	struct FVector DefaultUpVector; // 0x4E8 (12)

	void UpdateSpline(); // Function Engine.SplineComponent.UpdateSpline(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33B9010>
	void SetWorldLocationAtSplinePoint(int32_t PointIndex, struct FVector& InLocation); // Function Engine.SplineComponent.SetWorldLocationAtSplinePoint(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33B8B80>
	void SetUpVectorAtSplinePoint(int32_t PointIndex, struct FVector& InUpVector, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetUpVectorAtSplinePoint(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33B8A20>
	void SetUnselectedSplineSegmentColor(struct FLinearColor& SegmentColor); // Function Engine.SplineComponent.SetUnselectedSplineSegmentColor(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33B8140>
	void SetTangentsAtSplinePoint(int32_t PointIndex, struct FVector& InArriveTangent, struct FVector& InLeaveTangent, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetTangentsAtSplinePoint(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33B8860>
	void SetTangentAtSplinePoint(int32_t PointIndex, struct FVector& InTangent, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetTangentAtSplinePoint(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33B8700>
	void SetSplineWorldPoints(struct TArray<struct FVector>& Points); // Function Engine.SplineComponent.SetSplineWorldPoints(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33B8580>
	void SetSplinePointType(int32_t PointIndex, enum class ESplinePointType Type, bool bUpdateSpline); // Function Engine.SplineComponent.SetSplinePointType(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33B8350>
	void SetSplinePoints(struct TArray<struct FVector>& Points, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetSplinePoints(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33B8450>
	void SetSplineLocalPoints(struct TArray<struct FVector>& Points); // Function Engine.SplineComponent.SetSplineLocalPoints(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33B82A0>
	void SetSelectedSplineSegmentColor(struct FLinearColor& SegmentColor); // Function Engine.SplineComponent.SetSelectedSplineSegmentColor(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33B8140>
	void SetLocationAtSplinePoint(int32_t PointIndex, struct FVector& InLocation, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetLocationAtSplinePoint(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33B7FE0>
	void SetDrawDebug(bool bShow); // Function Engine.SplineComponent.SetDrawDebug(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33B7F50>
	void SetDefaultUpVector(struct FVector& UpVector, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.SetDefaultUpVector(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33B7E70>
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline); // Function Engine.SplineComponent.SetClosedLoopAtPosition(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33B7D60>
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline); // Function Engine.SplineComponent.SetClosedLoop(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33B7C90>
	void RemoveSplinePoint(int32_t Index, bool bUpdateSpline); // Function Engine.SplineComponent.RemoveSplinePoint(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33B7BD0>
	bool IsClosedLoop(); // Function Engine.SplineComponent.IsClosedLoop(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B7BA0>
	struct FVector GetWorldTangentAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetWorldTangentAtDistanceAlongSpline(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B7AF0>
	struct FRotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetWorldRotationAtTime(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B7A00>
	struct FRotator GetWorldRotationAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetWorldRotationAtDistanceAlongSpline(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B7950>
	struct FVector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetWorldLocationAtTime(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B7860>
	struct FVector GetWorldLocationAtSplinePoint(int32_t PointIndex); // Function Engine.SplineComponent.GetWorldLocationAtSplinePoint(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B77B0>
	struct FVector GetWorldLocationAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetWorldLocationAtDistanceAlongSpline(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B7700>
	struct FVector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetWorldDirectionAtTime(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B7610>
	struct FVector GetWorldDirectionAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetWorldDirectionAtDistanceAlongSpline(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B7560>
	struct FVector GetVectorPropertyAtSplinePoint(int32_t Index, struct FName PropertyName); // Function Engine.SplineComponent.GetVectorPropertyAtSplinePoint(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B7490>
	struct FVector GetVectorPropertyAtSplineInputKey(float InKey, struct FName PropertyName); // Function Engine.SplineComponent.GetVectorPropertyAtSplineInputKey(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B73B0>
	struct FVector GetUpVectorAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetUpVectorAtTime(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B7290>
	struct FVector GetUpVectorAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetUpVectorAtSplinePoint(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B71C0>
	struct FVector GetUpVectorAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetUpVectorAtSplineInputKey(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B70E0>
	struct FVector GetUpVectorAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetUpVectorAtDistanceAlongSpline(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B7000>
	struct FTransform GetTransformAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity, bool bUseScale); // Function Engine.SplineComponent.GetTransformAtTime(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B6E70>
	struct FTransform GetTransformAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale); // Function Engine.SplineComponent.GetTransformAtSplinePoint(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B6D30>
	struct FTransform GetTransformAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale); // Function Engine.SplineComponent.GetTransformAtSplineInputKey(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B6BE0>
	struct FTransform GetTransformAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale); // Function Engine.SplineComponent.GetTransformAtDistanceAlongSpline(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B6A90>
	struct FVector GetTangentAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetTangentAtTime(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B6970>
	struct FVector GetTangentAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetTangentAtSplinePoint(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B5150>
	struct FVector GetTangentAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetTangentAtSplineInputKey(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B6890>
	struct FVector GetTangentAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetTangentAtDistanceAlongSpline(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B67B0>
	enum class ESplinePointType GetSplinePointType(int32_t PointIndex); // Function Engine.SplineComponent.GetSplinePointType(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B6720>
	float GetSplineLength(); // Function Engine.SplineComponent.GetSplineLength(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B66F0>
	struct FVector GetScaleAtTime(float Time, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetScaleAtTime(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B6580>
	struct FVector GetScaleAtSplinePoint(int32_t PointIndex); // Function Engine.SplineComponent.GetScaleAtSplinePoint(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B64E0>
	struct FVector GetScaleAtSplineInputKey(float InKey); // Function Engine.SplineComponent.GetScaleAtSplineInputKey(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B6440>
	struct FVector GetScaleAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetScaleAtDistanceAlongSpline(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B63A0>
	struct FRotator GetRotationAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetRotationAtTime(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B6280>
	struct FRotator GetRotationAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRotationAtSplinePoint(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B61B0>
	struct FRotator GetRotationAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRotationAtSplineInputKey(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B60D0>
	struct FRotator GetRotationAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRotationAtDistanceAlongSpline(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B5FF0>
	float GetRollAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetRollAtTime(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B5EE0>
	float GetRollAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRollAtSplinePoint(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B5E20>
	float GetRollAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRollAtSplineInputKey(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B5D50>
	float GetRollAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRollAtDistanceAlongSpline(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B5C80>
	struct FVector GetRightVectorAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetRightVectorAtTime(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B5B60>
	struct FVector GetRightVectorAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRightVectorAtSplinePoint(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B5A90>
	struct FVector GetRightVectorAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRightVectorAtSplineInputKey(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B59B0>
	struct FVector GetRightVectorAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRightVectorAtDistanceAlongSpline(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B58D0>
	int32_t GetNumberOfSplineSegments(); // Function Engine.SplineComponent.GetNumberOfSplineSegments(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B58A0>
	int32_t GetNumberOfSplinePoints(); // Function Engine.SplineComponent.GetNumberOfSplinePoints(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B5870>
	struct FVector GetLocationAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetLocationAtTime(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B5750>
	struct FVector GetLocationAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLocationAtSplinePoint(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B5680>
	struct FVector GetLocationAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLocationAtSplineInputKey(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B55A0>
	struct FVector GetLocationAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLocationAtDistanceAlongSpline(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B54C0>
	void GetLocationAndTangentAtSplinePoint(int32_t PointIndex, struct FVector& Location, struct FVector& Tangent, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLocationAndTangentAtSplinePoint(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B5350>
	void GetLocalLocationAndTangentAtSplinePoint(int32_t PointIndex, struct FVector& LocalLocation, struct FVector& LocalTangent); // Function Engine.SplineComponent.GetLocalLocationAndTangentAtSplinePoint(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B5220>
	struct FVector GetLeaveTangentAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLeaveTangentAtSplinePoint(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B5150>
	float GetInputKeyAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetInputKeyAtDistanceAlongSpline(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B50C0>
	float GetFloatPropertyAtSplinePoint(int32_t Index, struct FName PropertyName); // Function Engine.SplineComponent.GetFloatPropertyAtSplinePoint(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B5000>
	float GetFloatPropertyAtSplineInputKey(float InKey, struct FName PropertyName); // Function Engine.SplineComponent.GetFloatPropertyAtSplineInputKey(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B4F30>
	float GetDistanceAlongSplineAtSplinePoint(int32_t PointIndex); // Function Engine.SplineComponent.GetDistanceAlongSplineAtSplinePoint(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B4EA0>
	struct FVector GetDirectionAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetDirectionAtTime(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B4D80>
	struct FVector GetDirectionAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetDirectionAtSplinePoint(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B4CB0>
	struct FVector GetDirectionAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetDirectionAtSplineInputKey(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B4BD0>
	struct FVector GetDirectionAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetDirectionAtDistanceAlongSpline(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B4AF0>
	struct FVector GetDefaultUpVector(enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetDefaultUpVector(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B4A50>
	struct FVector GetArriveTangentAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetArriveTangentAtSplinePoint(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B4980>
	struct FVector FindUpVectorClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindUpVectorClosestToWorldLocation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B4890>
	struct FTransform FindTransformClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale); // Function Engine.SplineComponent.FindTransformClosestToWorldLocation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B4740>
	struct FVector FindTangentClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindTangentClosestToWorldLocation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B4650>
	struct FVector FindScaleClosestToWorldLocation(struct FVector& WorldLocation); // Function Engine.SplineComponent.FindScaleClosestToWorldLocation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B45A0>
	struct FRotator FindRotationClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindRotationClosestToWorldLocation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B44B0>
	float FindRollClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindRollClosestToWorldLocation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B43D0>
	struct FVector FindRightVectorClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindRightVectorClosestToWorldLocation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B42E0>
	struct FVector FindLocationClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindLocationClosestToWorldLocation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B41F0>
	float FindInputKeyClosestToWorldLocation(struct FVector& WorldLocation); // Function Engine.SplineComponent.FindInputKeyClosestToWorldLocation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B4150>
	struct FVector FindDirectionClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindDirectionClosestToWorldLocation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B4060>
	void ClearSplinePoints(bool bUpdateSpline); // Function Engine.SplineComponent.ClearSplinePoints(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33B3FD0>
	void AddSplineWorldPoint(struct FVector& Position); // Function Engine.SplineComponent.AddSplineWorldPoint(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33B3F30>
	void AddSplinePointAtIndex(struct FVector& Position, int32_t Index, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.AddSplinePointAtIndex(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33B3DD0>
	void AddSplinePoint(struct FVector& Position, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.AddSplinePoint(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33B3CC0>
	void AddSplineLocalPoint(struct FVector& Position); // Function Engine.SplineComponent.AddSplineLocalPoint(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33B3C30>
	void AddPoints(struct TArray<struct FSplinePoint>& Points, bool bUpdateSpline); // Function Engine.SplineComponent.AddPoints(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33B3B30>
	void AddPoint(struct FSplinePoint& Point, bool bUpdateSpline); // Function Engine.SplineComponent.AddPoint(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33B3A20>
};

// Class Engine.SkeletalMeshComponent
class USkeletalMeshComponent : public USkinnedMeshComponent {

public:

	struct UAnimBlueprintGeneratedClass* AnimBlueprintGeneratedClass; // 0x640 (8)
	struct UClass* AnimClass; // 0x648 (8)
	struct UAnimInstance AnimScriptInstance; // 0x650 (8)
	struct UAnimInstance PostProcessAnimInstance; // 0x658 (8)
	struct FSingleAnimationPlayData AnimationData; // 0x660 (24)
	struct FVector RootBoneTranslation; // 0x688 (12)
	struct FVector LineCheckBoundsScale; // 0x694 (12)
	struct TArray<struct UAnimInstance> LinkedInstances; // 0x6C0 (16)
	struct TArray<struct FTransform> CachedBoneSpaceTransforms; // 0x6D0 (16)
	struct TArray<struct FTransform> CachedComponentSpaceTransforms; // 0x6E0 (16)
	float GlobalAnimRateScale; // 0x710 (4)
	enum class EKinematicBonesUpdateToPhysics KinematicBonesUpdateType; // 0x714 (1)
	enum class EPhysicsTransformUpdateMode PhysicsTransformUpdateMode; // 0x715 (1)
	enum class EAnimationMode AnimationMode; // 0x717 (1)
	char bDisablePostProcessBlueprint : 1; // 0x719 (1)
	char pad_6C7_1 : 7; // 0x6C7 (1)
	char pad_6C8_0 : 2; // 0x6C8 (1)
	char bUpdateOverlapsOnAnimationFinalize : 1; // 0x719 (1)
	char pad_6C8_3 : 5; // 0x6C8 (1)
	char pad_6C9_0 : 4; // 0x6C9 (1)
	char bHasValidBodies : 1; // 0x719 (1)
	char pad_6C9_5 : 3; // 0x6C9 (1)
	char pad_6CA_0 : 6; // 0x6CA (1)
	char bBlendPhysics : 1; // 0x719 (1)
	char pad_6CA_7 : 1; // 0x6CA (1)
	char pad_6CB_0 : 7; // 0x6CB (1)
	char bEnablePhysicsOnDedicatedServer : 1; // 0x719 (1)
	char bUpdateJointsFromAnimation : 1; // 0x71A (1)
	char pad_6CC_1 : 7; // 0x6CC (1)
	char pad_6CD_0 : 1; // 0x6CD (1)
	char bDisableClothSimulation : 1; // 0x71A (1)
	char pad_6CD_2 : 6; // 0x6CD (1)
	char pad_6CE_0 : 2; // 0x6CE (1)
	char bDisableRigidBodyAnimNode : 1; // 0x71A (1)
	char pad_6CE_3 : 5; // 0x6CE (1)
	char pad_6CF_0 : 3; // 0x6CF (1)
	char bAllowAnimCurveEvaluation : 1; // 0x71A (1)
	char pad_6CF_4 : 4; // 0x6CF (1)
	char pad_6D0_0 : 4; // 0x6D0 (1)
	char bDisableAnimCurves : 1; // 0x71A (1)
	char pad_6D0_5 : 3; // 0x6D0 (1)
	char bCollideWithEnvironment : 1; // 0x71B (1)
	char pad_6D1_1 : 7; // 0x6D1 (1)
	char pad_6D2_0 : 1; // 0x6D2 (1)
	char bCollideWithAttachedChildren : 1; // 0x71B (1)
	char pad_6D2_2 : 6; // 0x6D2 (1)
	char pad_6D3_0 : 2; // 0x6D3 (1)
	char bLocalSpaceSimulation : 1; // 0x71B (1)
	char pad_6D3_3 : 5; // 0x6D3 (1)
	char pad_6D4_0 : 3; // 0x6D4 (1)
	char bResetAfterTeleport : 1; // 0x71B (1)
	char pad_6D4_4 : 4; // 0x6D4 (1)
	char pad_6D5_0 : 5; // 0x6D5 (1)
	char bDeferKinematicBoneUpdate : 1; // 0x71B (1)
	char pad_6D5_6 : 2; // 0x6D5 (1)
	char pad_6D6_0 : 6; // 0x6D6 (1)
	char bNoSkeletonUpdate : 1; // 0x71B (1)
	char pad_6D6_7 : 1; // 0x6D6 (1)
	char pad_6D7_0 : 7; // 0x6D7 (1)
	char bPauseAnims : 1; // 0x71B (1)
	char bUseRefPoseOnInitAnim : 1; // 0x71C (1)
	char pad_6D8_1 : 7; // 0x6D8 (1)
	char pad_6D9_0 : 1; // 0x6D9 (1)
	char bEnablePerPolyCollision : 1; // 0x71C (1)
	char pad_6D9_2 : 6; // 0x6D9 (1)
	char pad_6DA_0 : 2; // 0x6DA (1)
	char bForceRefpose : 1; // 0x71C (1)
	char pad_6DA_3 : 5; // 0x6DA (1)
	char pad_6DB_0 : 3; // 0x6DB (1)
	char bOnlyAllowAutonomousTickPose : 1; // 0x71C (1)
	char pad_6DB_4 : 4; // 0x6DB (1)
	char pad_6DC_0 : 4; // 0x6DC (1)
	char bIsAutonomousTickPose : 1; // 0x71C (1)
	char pad_6DC_5 : 3; // 0x6DC (1)
	char pad_6DD_0 : 5; // 0x6DD (1)
	char bOldForceRefPose : 1; // 0x71C (1)
	char pad_6DD_6 : 2; // 0x6DD (1)
	char pad_6DE_0 : 6; // 0x6DE (1)
	char bShowPrePhysBones : 1; // 0x71C (1)
	char pad_6DE_7 : 1; // 0x6DE (1)
	char pad_6DF_0 : 7; // 0x6DF (1)
	char bRequiredBonesUpToDate : 1; // 0x71C (1)
	char bAnimTreeInitialised : 1; // 0x71D (1)
	char pad_6E0_1 : 7; // 0x6E0 (1)
	char pad_6E1_0 : 1; // 0x6E1 (1)
	char bIncludeComponentLocationIntoBounds : 1; // 0x71D (1)
	char pad_6E1_2 : 6; // 0x6E1 (1)
	char pad_6E2_0 : 2; // 0x6E2 (1)
	char bEnableLineCheckWithBounds : 1; // 0x71D (1)
	char pad_6E2_3 : 5; // 0x6E2 (1)
	char pad_6E3_0 : 3; // 0x6E3 (1)
	char bUseBendingElements : 1; // 0x71D (1)
	char pad_6E3_4 : 4; // 0x6E3 (1)
	char pad_6E4_0 : 4; // 0x6E4 (1)
	char bUseTetrahedralConstraints : 1; // 0x71D (1)
	char pad_6E4_5 : 3; // 0x6E4 (1)
	char pad_6E5_0 : 5; // 0x6E5 (1)
	char bUseThinShellVolumeConstraints : 1; // 0x71D (1)
	char pad_6E5_6 : 2; // 0x6E5 (1)
	char pad_6E6_0 : 6; // 0x6E6 (1)
	char bUseSelfCollisions : 1; // 0x71D (1)
	char pad_6E6_7 : 1; // 0x6E6 (1)
	char pad_6E7_0 : 7; // 0x6E7 (1)
	char bUseContinuousCollisionDetection : 1; // 0x71D (1)
	char bPropagateCurvesToSlaves : 1; // 0x71E (1)
	char pad_6E8_1 : 7; // 0x6E8 (1)
	char pad_6E9_0 : 1; // 0x6E9 (1)
	char bSkipKinematicUpdateWhenInterpolating : 1; // 0x71E (1)
	char pad_6E9_2 : 6; // 0x6E9 (1)
	char pad_6EA_0 : 2; // 0x6EA (1)
	char bSkipBoundsUpdateWhenInterpolating : 1; // 0x71E (1)
	char pad_6EA_3 : 5; // 0x6EA (1)
	char pad_6EB_0 : 4; // 0x6EB (1)
	char bNeedsQueuedAnimEventsDispatched : 1; // 0x71E (1)
	char pad_6EB_5 : 3; // 0x6EB (1)
	uint16_t CachedAnimCurveUidVersion; // 0x720 (2)
	enum class EClothMassMode MassMode; // 0x722 (1)
	float UniformMass; // 0x724 (4)
	float TotalMass; // 0x728 (4)
	float Density; // 0x72C (4)
	float MinPerParticleMass; // 0x730 (4)
	float ClothBlendWeight; // 0x734 (4)
	float EdgeStiffness; // 0x738 (4)
	float BendingStiffness; // 0x73C (4)
	float AreaStiffness; // 0x740 (4)
	float VolumeStiffness; // 0x744 (4)
	float StrainLimitingStiffness; // 0x748 (4)
	float ShapeTargetStiffness; // 0x74C (4)
	struct TArray<struct FName> DisallowedAnimCurves; // 0x750 (16)
	struct UBodySetup BodySetup; // 0x760 (8)
	struct FMulticastInlineDelegate OnConstraintBroken; // 0x770 (16)
	struct UClass* ClothingSimulationFactory; // 0x780 (8)
	float TeleportDistanceThreshold; // 0x858 (4)
	float TeleportRotationThreshold; // 0x85C (4)
	uint32_t LastPoseTickFrame; // 0x868 (4)
	struct UClothingSimulationInteractor ClothingInteractor; // 0x8C0 (8)
	struct FMulticastInlineDelegate OnAnimInitialized; // 0x990 (16)

	void UnlinkAnimClassLayers(struct UClass* InClass); // Function Engine.SkeletalMeshComponent.UnlinkAnimClassLayers(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A3620>
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace); // Function Engine.SkeletalMeshComponent.UnbindClothFromMasterPoseComponent(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A3590>
	void ToggleDisablePostProcessBlueprint(); // Function Engine.SkeletalMeshComponent.ToggleDisablePostProcessBlueprint(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A3570>
	void TermBodiesBelow(struct FName ParentBoneName); // Function Engine.SkeletalMeshComponent.TermBodiesBelow(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A34F0>
	void SuspendClothingSimulation(); // Function Engine.SkeletalMeshComponent.SuspendClothingSimulation(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A34D0>
	void Stop(); // Function Engine.SkeletalMeshComponent.Stop(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A34B0>
	void SnapshotPose(struct FPoseSnapshot& Snapshot); // Function Engine.SkeletalMeshComponent.SnapshotPose(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A33E0>
	void SetUpdateAnimationInEditor(bool NewUpdateState); // Function Engine.SkeletalMeshComponent.SetUpdateAnimationInEditor(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x1805190>
	void SetTeleportRotationThreshold(float Threshold); // Function Engine.SkeletalMeshComponent.SetTeleportRotationThreshold(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A3360>
	void SetTeleportDistanceThreshold(float Threshold); // Function Engine.SkeletalMeshComponent.SetTeleportDistanceThreshold(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A32E0>
	void SetPosition(float InPos, bool bFireNotifies); // Function Engine.SkeletalMeshComponent.SetPosition(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A3210>
	void SetPlayRate(float Rate); // Function Engine.SkeletalMeshComponent.SetPlayRate(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A3190>
	void SetPhysicsBlendWeight(float PhysicsBlendWeight); // Function Engine.SkeletalMeshComponent.SetPhysicsBlendWeight(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A3110>
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, struct FName BoneName, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetNotifyRigidBodyCollisionBelow(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A3000>
	void SetMorphTarget(struct FName MorphTargetName, float Value, bool bRemoveZeroWeight); // Function Engine.SkeletalMeshComponent.SetMorphTarget(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A2EF0>
	void SetEnablePhysicsBlending(bool bNewBlendPhysics); // Function Engine.SkeletalMeshComponent.SetEnablePhysicsBlending(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A2E60>
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, struct FName BoneName, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetEnableGravityOnAllBodiesBelow(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A2D50>
	void SetEnableBodyGravity(bool bEnableGravity, struct FName BoneName); // Function Engine.SkeletalMeshComponent.SetEnableBodyGravity(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A2C90>
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess); // Function Engine.SkeletalMeshComponent.SetDisablePostProcessBlueprint(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A2C00>
	void SetDisableAnimCurves(bool bInDisableAnimCurves); // Function Engine.SkeletalMeshComponent.SetDisableAnimCurves(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A2B70>
	void SetConstraintProfileForAll(struct FName ProfileName, bool bDefaultIfNotFound); // Function Engine.SkeletalMeshComponent.SetConstraintProfileForAll(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A2AA0>
	void SetConstraintProfile(struct FName JointName, struct FName ProfileName, bool bDefaultIfNotFound); // Function Engine.SkeletalMeshComponent.SetConstraintProfile(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A2990>
	void SetClothMaxDistanceScale(float Scale); // Function Engine.SkeletalMeshComponent.SetClothMaxDistanceScale(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A2910>
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, struct FName BoneName); // Function Engine.SkeletalMeshComponent.SetBodyNotifyRigidBodyCollision(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A2840>
	void SetAnimClass(struct UClass* NewClass); // Function Engine.SkeletalMeshComponent.SetAnimClass(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A26B0>
	void SetAnimationMode(enum class EAnimationMode InAnimationMode); // Function Engine.SkeletalMeshComponent.SetAnimationMode(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A27C0>
	void SetAnimation(struct UAnimationAsset NewAnimToPlay); // Function Engine.SkeletalMeshComponent.SetAnimation(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A2740>
	void SetAngularLimits(struct FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle); // Function Engine.SkeletalMeshComponent.SetAngularLimits(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A2560>
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim); // Function Engine.SkeletalMeshComponent.SetAllowRigidBodyAnimNode(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A2390>
	void SetAllowedAnimCurvesEvaluation(struct TArray<struct FName>& List, bool bAllow); // Function Engine.SkeletalMeshComponent.SetAllowedAnimCurvesEvaluation(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A2460>
	void SetAllowAnimCurveEvaluation(bool bInAllow); // Function Engine.SkeletalMeshComponent.SetAllowAnimCurveEvaluation(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A2300>
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.SetAllMotorsAngularVelocityDrive(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A21E0>
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.SetAllMotorsAngularPositionDrive(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A20C0>
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.SetAllMotorsAngularDriveParams(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A1F60>
	void SetAllBodiesSimulatePhysics(bool bNewSimulate); // Function Engine.SkeletalMeshComponent.SetAllBodiesSimulatePhysics(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A1ED0>
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.SetAllBodiesPhysicsBlendWeight(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A1E00>
	void SetAllBodiesBelowSimulatePhysics(struct FName& InBoneName, bool bNewSimulate, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetAllBodiesBelowSimulatePhysics(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A1CE0>
	void SetAllBodiesBelowPhysicsBlendWeight(struct FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsBlendWeight(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A1B70>
	void ResumeClothingSimulation(); // Function Engine.SkeletalMeshComponent.ResumeClothingSimulation(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A1B50>
	void ResetClothTeleportMode(); // Function Engine.SkeletalMeshComponent.ResetClothTeleportMode(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A1B30>
	void ResetAnimInstanceDynamics(enum class ETeleportType InTeleportType); // Function Engine.SkeletalMeshComponent.ResetAnimInstanceDynamics(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A1AB0>
	void ResetAllowedAnimCurveEvaluation(); // Function Engine.SkeletalMeshComponent.ResetAllowedAnimCurveEvaluation(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A1A90>
	void ResetAllBodiesSimulatePhysics(); // Function Engine.SkeletalMeshComponent.ResetAllBodiesSimulatePhysics(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A1A70>
	void PlayAnimation(struct UAnimationAsset NewAnimToPlay, bool bLooping); // Function Engine.SkeletalMeshComponent.PlayAnimation(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A19A0>
	void Play(bool bLooping); // Function Engine.SkeletalMeshComponent.Play(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A1910>
	void OverrideAnimationData(struct UAnimationAsset InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate); // Function Engine.SkeletalMeshComponent.OverrideAnimationData(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A1770>
	void LinkAnimGraphByTag(struct FName InTag, struct UClass* InClass); // Function Engine.SkeletalMeshComponent.LinkAnimGraphByTag(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A16B0>
	void LinkAnimClassLayers(struct UClass* InClass); // Function Engine.SkeletalMeshComponent.LinkAnimClassLayers(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A1630>
	bool K2_GetClosestPointOnPhysicsAsset(struct FVector& WorldPosition, struct FVector& ClosestWorldPosition, struct FVector& Normal, struct FName& BoneName, float& Distance); // Function Engine.SkeletalMeshComponent.K2_GetClosestPointOnPhysicsAsset(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A1430>
	bool IsPlaying(); // Function Engine.SkeletalMeshComponent.IsPlaying(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A1400>
	bool IsClothingSimulationSuspended(); // Function Engine.SkeletalMeshComponent.IsClothingSimulationSuspended(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A13D0>
	bool IsBodyGravityEnabled(struct FName BoneName); // Function Engine.SkeletalMeshComponent.IsBodyGravityEnabled(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A1340>
	bool HasValidAnimationInstance(); // Function Engine.SkeletalMeshComponent.HasValidAnimationInstance(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A1310>
	float GetTeleportRotationThreshold(); // Function Engine.SkeletalMeshComponent.GetTeleportRotationThreshold(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A12E0>
	float GetTeleportDistanceThreshold(); // Function Engine.SkeletalMeshComponent.GetTeleportDistanceThreshold(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A12E0>
	struct FVector GetSkeletalCenterOfMass(); // Function Engine.SkeletalMeshComponent.GetSkeletalCenterOfMass(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A12A0>
	struct UAnimInstance GetPostProcessInstance(); // Function Engine.SkeletalMeshComponent.GetPostProcessInstance(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A1270>
	float GetPosition(); // Function Engine.SkeletalMeshComponent.GetPosition(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A1240>
	float GetPlayRate(); // Function Engine.SkeletalMeshComponent.GetPlayRate(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A1210>
	float GetMorphTarget(struct FName MorphTargetName); // Function Engine.SkeletalMeshComponent.GetMorphTarget(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A1170>
	struct UAnimInstance GetLinkedAnimLayerInstanceByGroup(struct FName InGroup); // Function Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByGroup(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A10E0>
	struct UAnimInstance GetLinkedAnimLayerInstanceByClass(struct UClass* InClass); // Function Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByClass(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A1050>
	void GetLinkedAnimGraphInstancesByTag(struct FName InTag, struct TArray<struct UAnimInstance>& OutLinkedInstances); // Function Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstancesByTag(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A0F60>
	struct UAnimInstance GetLinkedAnimGraphInstanceByTag(struct FName InTag); // Function Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstanceByTag(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A0ED0>
	bool GetDisablePostProcessBlueprint(); // Function Engine.SkeletalMeshComponent.GetDisablePostProcessBlueprint(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A0EA0>
	bool GetDisableAnimCurves(); // Function Engine.SkeletalMeshComponent.GetDisableAnimCurves(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A0E70>
	void GetCurrentJointAngles(struct FName InBoneName, float& Swing1Angle, float& TwistAngle, float& Swing2Angle); // Function Engine.SkeletalMeshComponent.GetCurrentJointAngles(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A0CF0>
	float GetClothMaxDistanceScale(); // Function Engine.SkeletalMeshComponent.GetClothMaxDistanceScale(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A0C90>
	struct UClothingSimulationInteractor GetClothingSimulationInteractor(); // Function Engine.SkeletalMeshComponent.GetClothingSimulationInteractor(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A0CC0>
	float GetBoneMass(struct FName BoneName, bool bScaleMass); // Function Engine.SkeletalMeshComponent.GetBoneMass(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A0BC0>
	struct UAnimInstance GetAnimInstance(); // Function Engine.SkeletalMeshComponent.GetAnimInstance(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A0B60>
	struct UClass* GetAnimClass(); // Function Engine.SkeletalMeshComponent.GetAnimClass(Final|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x33A0B30>
	enum class EAnimationMode GetAnimationMode(); // Function Engine.SkeletalMeshComponent.GetAnimationMode(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A0B90>
	bool GetAllowRigidBodyAnimNode(); // Function Engine.SkeletalMeshComponent.GetAllowRigidBodyAnimNode(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A0AD0>
	bool GetAllowedAnimCurveEvaluate(); // Function Engine.SkeletalMeshComponent.GetAllowedAnimCurveEvaluate(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A0B00>
	void ForceClothNextUpdateTeleportAndReset(); // Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleportAndReset(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A0AB0>
	void ForceClothNextUpdateTeleport(); // Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleport(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A0A90>
	struct FName FindConstraintBoneName(int32_t ConstraintIndex); // Function Engine.SkeletalMeshComponent.FindConstraintBoneName(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A0A00>
	void ClearMorphTargets(); // Function Engine.SkeletalMeshComponent.ClearMorphTargets(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A09E0>
	void BreakConstraint(struct FVector Impulse, struct FVector HitLocation, struct FName InBoneName); // Function Engine.SkeletalMeshComponent.BreakConstraint(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A08B0>
	void BindClothToMasterPoseComponent(); // Function Engine.SkeletalMeshComponent.BindClothToMasterPoseComponent(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A0890>
	void AllowAnimCurveEvaluation(struct FName NameOfCurve, bool bAllow); // Function Engine.SkeletalMeshComponent.AllowAnimCurveEvaluation(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A07C0>
	void AddImpulseToAllBodiesBelow(struct FVector Impulse, struct FName BoneName, bool bVelChange, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.AddImpulseToAllBodiesBelow(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A0650>
	void AddForceToAllBodiesBelow(struct FVector Force, struct FName BoneName, bool bAccelChange, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.AddForceToAllBodiesBelow(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A04E0>
	void AccumulateAllBodiesBelowPhysicsBlendWeight(struct FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.AccumulateAllBodiesBelowPhysicsBlendWeight(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A03C0>
};

// Class Engine.AnimInstance
class UAnimInstance : public Object {

public:

	struct USkeleton CurrentSkeleton; // 0x28 (8)
	enum class ERootMotionMode RootMotionMode; // 0x30 (1)
	char bUseMultiThreadedAnimationUpdate : 1; // 0x31 (1)
	char bUsingCopyPoseFromMesh : 1; // 0x31 (1)
	char pad_31_2 : 2; // 0x31 (1)
	char bReceiveNotifiesFromLinkedInstances : 1; // 0x31 (1)
	char bPropagateNotifiesToLinkedInstances : 1; // 0x31 (1)
	char bQueueMontageEvents : 1; // 0x31 (1)
	char pad_31_7 : 1; // 0x31 (1)
	struct FMulticastInlineDelegate OnMontageBlendingOut; // 0x38 (16)
	struct FMulticastInlineDelegate OnMontageStarted; // 0x48 (16)
	struct FMulticastInlineDelegate OnMontageEnded; // 0x58 (16)
	struct FMulticastInlineDelegate OnAllMontageInstancesEnded; // 0x68 (16)
	struct FAnimNotifyQueue NotifyQueue; // 0x100 (112)
	struct TArray<struct FAnimNotifyEvent> ActiveAnimNotifyState; // 0x170 (16)

	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic); // Function Engine.AnimInstance.UnlockAIResources(Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3271180>
	void UnlinkAnimClassLayers(struct UClass* InClass); // Function Engine.AnimInstance.UnlinkAnimClassLayers(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3272790>
	struct APawn TryGetPawnOwner(); // Function Engine.AnimInstance.TryGetPawnOwner(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3272760>
	void StopSlotAnimation(float InBlendOutTime, struct FName SlotNodeName); // Function Engine.AnimInstance.StopSlotAnimation(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3272690>
	void SnapshotPose(struct FPoseSnapshot& Snapshot); // Function Engine.AnimInstance.SnapshotPose(Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32725C0>
	void SetRootMotionMode(enum class ERootMotionMode Value); // Function Engine.AnimInstance.SetRootMotionMode(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3267020>
	void SetReceiveNotifiesFromLinkedInstances(bool bSet); // Function Engine.AnimInstance.SetReceiveNotifiesFromLinkedInstances(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3272530>
	void SetPropagateNotifiesToLinkedInstances(bool bSet); // Function Engine.AnimInstance.SetPropagateNotifiesToLinkedInstances(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32724A0>
	void SetMorphTarget(struct FName MorphTargetName, float Value); // Function Engine.AnimInstance.SetMorphTarget(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32723D0>
	void SavePoseSnapshot(struct FName SnapshotName); // Function Engine.AnimInstance.SavePoseSnapshot(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3272340>
	void ResetDynamics(enum class ETeleportType InTeleportType); // Function Engine.AnimInstance.ResetDynamics(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32722C0>
	struct UAnimMontage PlaySlotAnimationAsDynamicMontage(struct UAnimSequenceBase Asset, struct FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32_t LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt); // Function Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3272080>
	float PlaySlotAnimation(struct UAnimSequenceBase Asset, struct FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32_t LoopCount); // Function Engine.AnimInstance.PlaySlotAnimation(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3271EC0>
	void Montage_StopGroupByName(float InBlendOutTime, struct FName GroupName); // Function Engine.AnimInstance.Montage_StopGroupByName(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3271DF0>
	void Montage_Stop(float InBlendOutTime, struct UAnimMontage Montage); // Function Engine.AnimInstance.Montage_Stop(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3271D20>
	void Montage_SetPosition(struct UAnimMontage Montage, float NewPosition); // Function Engine.AnimInstance.Montage_SetPosition(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3271C50>
	void Montage_SetPlayRate(struct UAnimMontage Montage, float NewPlayRate); // Function Engine.AnimInstance.Montage_SetPlayRate(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3271B80>
	void Montage_SetNextSection(struct FName SectionNameToChange, struct FName NextSection, struct UAnimMontage Montage); // Function Engine.AnimInstance.Montage_SetNextSection(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3271A80>
	void Montage_Resume(struct UAnimMontage Montage); // Function Engine.AnimInstance.Montage_Resume(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3271A00>
	float Montage_Play(struct UAnimMontage MontageToPlay, float InPlayRate, enum class EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages); // Function Engine.AnimInstance.Montage_Play(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3271870>
	void Montage_Pause(struct UAnimMontage Montage); // Function Engine.AnimInstance.Montage_Pause(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32717F0>
	void Montage_JumpToSectionsEnd(struct FName SectionName, struct UAnimMontage Montage); // Function Engine.AnimInstance.Montage_JumpToSectionsEnd(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3271730>
	void Montage_JumpToSection(struct FName SectionName, struct UAnimMontage Montage); // Function Engine.AnimInstance.Montage_JumpToSection(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3271670>
	bool Montage_IsPlaying(struct UAnimMontage Montage); // Function Engine.AnimInstance.Montage_IsPlaying(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32715E0>
	bool Montage_IsActive(struct UAnimMontage Montage); // Function Engine.AnimInstance.Montage_IsActive(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3271550>
	float Montage_GetPosition(struct UAnimMontage Montage); // Function Engine.AnimInstance.Montage_GetPosition(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32714B0>
	float Montage_GetPlayRate(struct UAnimMontage Montage); // Function Engine.AnimInstance.Montage_GetPlayRate(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3271410>
	bool Montage_GetIsStopped(struct UAnimMontage Montage); // Function Engine.AnimInstance.Montage_GetIsStopped(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3271380>
	struct FName Montage_GetCurrentSection(struct UAnimMontage Montage); // Function Engine.AnimInstance.Montage_GetCurrentSection(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32712F0>
	float Montage_GetBlendTime(struct UAnimMontage Montage); // Function Engine.AnimInstance.Montage_GetBlendTime(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3271250>
	void LockAIResources(bool bLockMovement, bool LockAILogic); // Function Engine.AnimInstance.LockAIResources(Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3271180>
	void LinkAnimGraphByTag(struct FName InTag, struct UClass* InClass); // Function Engine.AnimInstance.LinkAnimGraphByTag(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32710C0>
	void LinkAnimClassLayers(struct UClass* InClass); // Function Engine.AnimInstance.LinkAnimClassLayers(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3271040>
	bool IsSyncGroupBetweenMarkers(struct FName InSyncGroupName, struct FName PreviousMarker, struct FName NextMarker, bool bRespectMarkerOrder); // Function Engine.AnimInstance.IsSyncGroupBetweenMarkers(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3270EF0>
	bool IsPlayingSlotAnimation(struct UAnimSequenceBase Asset, struct FName SlotNodeName); // Function Engine.AnimInstance.IsPlayingSlotAnimation(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3270E30>
	bool IsAnyMontagePlaying(); // Function Engine.AnimInstance.IsAnyMontagePlaying(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3270E00>
	bool HasMarkerBeenHitThisFrame(struct FName SyncGroup, struct FName MarkerName); // Function Engine.AnimInstance.HasMarkerBeenHitThisFrame(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3270D40>
	bool GetTimeToClosestMarker(struct FName SyncGroup, struct FName MarkerName, float& OutMarkerTime); // Function Engine.AnimInstance.GetTimeToClosestMarker(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3270C30>
	struct FMarkerSyncAnimPosition GetSyncGroupPosition(struct FName InSyncGroupName); // Function Engine.AnimInstance.GetSyncGroupPosition(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3270B90>
	float GetRelevantAnimTimeRemainingFraction(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimTimeRemainingFraction(Final|Native|Public|BlueprintCallable|BlueprintPure) // <VeiledExperts-Win64-Shipping.exe+0x3270AD0>
	float GetRelevantAnimTimeRemaining(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimTimeRemaining(Final|Native|Public|BlueprintCallable|BlueprintPure) // <VeiledExperts-Win64-Shipping.exe+0x3270A10>
	float GetRelevantAnimTimeFraction(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimTimeFraction(Final|Native|Public|BlueprintCallable|BlueprintPure) // <VeiledExperts-Win64-Shipping.exe+0x3270950>
	float GetRelevantAnimTime(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimTime(Final|Native|Public|BlueprintCallable|BlueprintPure) // <VeiledExperts-Win64-Shipping.exe+0x3270890>
	float GetRelevantAnimLength(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimLength(Final|Native|Public|BlueprintCallable|BlueprintPure) // <VeiledExperts-Win64-Shipping.exe+0x32707D0>
	bool GetReceiveNotifiesFromLinkedInstances(); // Function Engine.AnimInstance.GetReceiveNotifiesFromLinkedInstances(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32707A0>
	bool GetPropagateNotifiesToLinkedInstances(); // Function Engine.AnimInstance.GetPropagateNotifiesToLinkedInstances(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3270770>
	struct USkeletalMeshComponent GetOwningComponent(); // Function Engine.AnimInstance.GetOwningComponent(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3270740>
	struct UActor GetOwningActor(); // Function Engine.AnimInstance.GetOwningActor(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3270710>
	struct UAnimInstance GetLinkedAnimLayerInstanceByGroup(struct FName InGroup); // Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByGroup(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3270680>
	struct UAnimInstance GetLinkedAnimLayerInstanceByClass(struct UClass* InClass); // Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByClass(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32705F0>
	void GetLinkedAnimGraphInstancesByTag(struct FName InTag, struct TArray<struct UAnimInstance>& OutLinkedInstances); // Function Engine.AnimInstance.GetLinkedAnimGraphInstancesByTag(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3270500>
	struct UAnimInstance GetLinkedAnimGraphInstanceByTag(struct FName InTag); // Function Engine.AnimInstance.GetLinkedAnimGraphInstanceByTag(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3270470>
	float GetInstanceTransitionTimeElapsedFraction(int32_t MachineIndex, int32_t TransitionIndex); // Function Engine.AnimInstance.GetInstanceTransitionTimeElapsedFraction(Final|Native|Public|BlueprintCallable|BlueprintPure) // <VeiledExperts-Win64-Shipping.exe+0x32703B0>
	float GetInstanceTransitionTimeElapsed(int32_t MachineIndex, int32_t TransitionIndex); // Function Engine.AnimInstance.GetInstanceTransitionTimeElapsed(Final|Native|Public|BlueprintCallable|BlueprintPure) // <VeiledExperts-Win64-Shipping.exe+0x32702F0>
	float GetInstanceTransitionCrossfadeDuration(int32_t MachineIndex, int32_t TransitionIndex); // Function Engine.AnimInstance.GetInstanceTransitionCrossfadeDuration(Final|Native|Public|BlueprintCallable|BlueprintPure) // <VeiledExperts-Win64-Shipping.exe+0x3270230>
	float GetInstanceStateWeight(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetInstanceStateWeight(Final|Native|Public|BlueprintCallable|BlueprintPure) // <VeiledExperts-Win64-Shipping.exe+0x3270170>
	float GetInstanceMachineWeight(int32_t MachineIndex); // Function Engine.AnimInstance.GetInstanceMachineWeight(Final|Native|Public|BlueprintCallable|BlueprintPure) // <VeiledExperts-Win64-Shipping.exe+0x32700E0>
	float GetInstanceCurrentStateElapsedTime(int32_t MachineIndex); // Function Engine.AnimInstance.GetInstanceCurrentStateElapsedTime(Final|Native|Public|BlueprintCallable|BlueprintPure) // <VeiledExperts-Win64-Shipping.exe+0x3270050>
	float GetInstanceAssetPlayerTimeFromEndFraction(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEndFraction(Final|Native|Public|BlueprintCallable|BlueprintPure) // <VeiledExperts-Win64-Shipping.exe+0x326FFC0>
	float GetInstanceAssetPlayerTimeFromEnd(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEnd(Final|Native|Public|BlueprintCallable|BlueprintPure) // <VeiledExperts-Win64-Shipping.exe+0x326FF30>
	float GetInstanceAssetPlayerTimeFraction(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFraction(Final|Native|Public|BlueprintCallable|BlueprintPure) // <VeiledExperts-Win64-Shipping.exe+0x326FEA0>
	float GetInstanceAssetPlayerTime(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerTime(Final|Native|Public|BlueprintCallable|BlueprintPure) // <VeiledExperts-Win64-Shipping.exe+0x326FE10>
	float GetInstanceAssetPlayerLength(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerLength(Final|Native|Public|BlueprintCallable|BlueprintPure) // <VeiledExperts-Win64-Shipping.exe+0x326FD80>
	float GetCurveValue(struct FName CurveName); // Function Engine.AnimInstance.GetCurveValue(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x326FCE0>
	struct FName GetCurrentStateName(int32_t MachineIndex); // Function Engine.AnimInstance.GetCurrentStateName(Final|Native|Public|BlueprintCallable|BlueprintPure) // <VeiledExperts-Win64-Shipping.exe+0x326FC50>
	struct UAnimMontage GetCurrentActiveMontage(); // Function Engine.AnimInstance.GetCurrentActiveMontage(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x326FC20>
	void GetAllCurveNames(struct TArray<struct FName>& OutNames); // Function Engine.AnimInstance.GetAllCurveNames(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x326FB70>
	void GetActiveCurveNames(enum class EAnimCurveType CurveType, struct TArray<struct FName>& OutNames); // Function Engine.AnimInstance.GetActiveCurveNames(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x326FA80>
	void ClearMorphTargets(); // Function Engine.AnimInstance.ClearMorphTargets(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x326FA60>
	float CalculateDirection(struct FVector& Velocity, struct FRotator& BaseRotation); // Function Engine.AnimInstance.CalculateDirection(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x326F960>
	void BlueprintUpdateAnimation(float DeltaTimeX); // Function Engine.AnimInstance.BlueprintUpdateAnimation(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void BlueprintPostEvaluateAnimation(); // Function Engine.AnimInstance.BlueprintPostEvaluateAnimation(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void BlueprintLinkedAnimationLayersInitialized(); // Function Engine.AnimInstance.BlueprintLinkedAnimationLayersInitialized(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void BlueprintInitializeAnimation(); // Function Engine.AnimInstance.BlueprintInitializeAnimation(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void BlueprintBeginPlay(); // Function Engine.AnimInstance.BlueprintBeginPlay(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
};

// Class Engine.AudioComponent
class UAudioComponent : public USceneComponent {

public:

	struct USoundBase Sound; // 0x1F0 (8)
	struct TArray<struct FAudioComponentParam> InstanceParameters; // 0x1F8 (16)
	struct USoundClass SoundClassOverride; // 0x208 (8)
	char bAutoDestroy : 1; // 0x210 (1)
	char bStopWhenOwnerDestroyed : 1; // 0x210 (1)
	char bShouldRemainActiveIfDropped : 1; // 0x210 (1)
	char bAllowSpatialization : 1; // 0x210 (1)
	char bOverrideAttenuation : 1; // 0x210 (1)
	char bOverrideSubtitlePriority : 1; // 0x210 (1)
	char bIsUISound : 1; // 0x210 (1)
	char bEnableLowPassFilter : 1; // 0x210 (1)
	char bOverridePriority : 1; // 0x211 (1)
	char bSuppressSubtitles : 1; // 0x211 (1)
	char pad_211_2 : 6; // 0x211 (1)
	char pad_212_0 : 3; // 0x212 (1)
	char bAutoManageAttachment : 1; // 0x212 (1)
	char pad_212_4 : 4; // 0x212 (1)
	struct FName AudioComponentUserID; // 0x218 (8)
	float PitchModulationMin; // 0x220 (4)
	float PitchModulationMax; // 0x224 (4)
	float VolumeModulationMin; // 0x228 (4)
	float VolumeModulationMax; // 0x22C (4)
	float VolumeMultiplier; // 0x230 (4)
	int32_t EnvelopeFollowerAttackTime; // 0x234 (4)
	int32_t EnvelopeFollowerReleaseTime; // 0x238 (4)
	float Priority; // 0x23C (4)
	float SubtitlePriority; // 0x240 (4)
	struct USoundEffectSourcePresetChain SourceEffectChain; // 0x248 (8)
	float PitchMultiplier; // 0x250 (4)
	float LowPassFilterFrequency; // 0x254 (4)
	struct USoundAttenuation AttenuationSettings; // 0x260 (8)
	struct FSoundAttenuationSettings AttenuationOverrides; // 0x268 (928)
	struct USoundConcurrency ConcurrencySettings; // 0x608 (8)
	struct TSet<struct USoundConcurrency> ConcurrencySet; // 0x610 (80)
	enum class EAttachmentRule AutoAttachLocationRule; // 0x66C (1)
	enum class EAttachmentRule AutoAttachRotationRule; // 0x66D (1)
	enum class EAttachmentRule AutoAttachScaleRule; // 0x66E (1)
	struct FMulticastInlineDelegate OnAudioFinished; // 0x670 (16)
	struct FMulticastInlineDelegate OnAudioPlaybackPercent; // 0x698 (16)
	struct FMulticastInlineDelegate OnAudioSingleEnvelopeValue; // 0x6C0 (16)
	struct FMulticastInlineDelegate OnAudioMultiEnvelopeValue; // 0x6E8 (16)
	struct FSoundModulation Modulation; // 0x710 (16)
	struct FDelegate OnQueueSubtitles; // 0x720 (16)
	struct TWeakObjectPtr<struct USceneComponent> AutoAttachParent; // 0x730 (8)
	struct FName AutoAttachSocketName; // 0x738 (8)

	void StopDelayed(float DelayTime); // Function Engine.AudioComponent.StopDelayed(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3283E10>
	void Stop(); // Function Engine.AudioComponent.Stop(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3283DF0>
	void SetWaveParameter(struct FName InName, struct USoundWave InWave); // Function Engine.AudioComponent.SetWaveParameter(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3283D30>
	void SetVolumeMultiplier(float NewVolumeMultiplier); // Function Engine.AudioComponent.SetVolumeMultiplier(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3283CB0>
	void SetUISound(bool bInUISound); // Function Engine.AudioComponent.SetUISound(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3283C20>
	void SetSubmixSend(struct USoundSubmixBase Submix, float SendLevel); // Function Engine.AudioComponent.SetSubmixSend(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3283AD0>
	void SetSourceBusSendPreEffect(struct USoundSourceBus SoundSourceBus, float SourceBusSendLevel); // Function Engine.AudioComponent.SetSourceBusSendPreEffect(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3283980>
	void SetSourceBusSendPostEffect(struct USoundSourceBus SoundSourceBus, float SourceBusSendLevel); // Function Engine.AudioComponent.SetSourceBusSendPostEffect(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32838B0>
	void SetSound(struct USoundBase NewSound); // Function Engine.AudioComponent.SetSound(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3283830>
	void SetPitchMultiplier(float NewPitchMultiplier); // Function Engine.AudioComponent.SetPitchMultiplier(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32836A0>
	void SetPaused(bool bPause); // Function Engine.AudioComponent.SetPaused(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3283610>
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency); // Function Engine.AudioComponent.SetLowPassFilterFrequency(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3283590>
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled); // Function Engine.AudioComponent.SetLowPassFilterEnabled(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3283500>
	void SetIntParameter(struct FName InName, int32_t inInt); // Function Engine.AudioComponent.SetIntParameter(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3283440>
	void SetFloatParameter(struct FName InName, float InFloat); // Function Engine.AudioComponent.SetFloatParameter(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32832F0>
	void SetBoolParameter(struct FName InName, bool InBool); // Function Engine.AudioComponent.SetBoolParameter(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3282F20>
	void Play(float StartTime); // Function Engine.AudioComponent.Play(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3282E20>
	bool IsPlaying(); // Function Engine.AudioComponent.IsPlaying(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3282DF0>
	bool HasCookedFFTData(); // Function Engine.AudioComponent.HasCookedFFTData(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3282DC0>
	bool HasCookedAmplitudeEnvelopeData(); // Function Engine.AudioComponent.HasCookedAmplitudeEnvelopeData(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3282D90>
	enum class EAudioComponentPlayState GetPlayState(); // Function Engine.AudioComponent.GetPlayState(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3282D60>
	bool GetCookedFFTDataForAllPlayingSounds(struct TArray<struct FSoundWaveSpectralDataPerSound>& OutSoundWaveSpectralData); // Function Engine.AudioComponent.GetCookedFFTDataForAllPlayingSounds(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3282C80>
	bool GetCookedFFTData(struct TArray<float>& FrequenciesToGet, struct TArray<struct FSoundWaveSpectralData>& OutSoundWaveSpectralData); // Function Engine.AudioComponent.GetCookedFFTData(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3282B60>
	bool GetCookedEnvelopeDataForAllPlayingSounds(struct TArray<struct FSoundWaveEnvelopeDataPerSound>& OutEnvelopeData); // Function Engine.AudioComponent.GetCookedEnvelopeDataForAllPlayingSounds(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3282AA0>
	bool GetCookedEnvelopeData(float& OutEnvelopeData); // Function Engine.AudioComponent.GetCookedEnvelopeData(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32829F0>
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel, enum class EAudioFaderCurve FadeCurve); // Function Engine.AudioComponent.FadeOut(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32828E0>
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, enum class EAudioFaderCurve FadeCurve); // Function Engine.AudioComponent.FadeIn(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3282790>
	bool BP_GetAttenuationSettingsToApply(struct FSoundAttenuationSettings& OutAttenuationSettings); // Function Engine.AudioComponent.BP_GetAttenuationSettingsToApply(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32825A0>
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, enum class EAudioFaderCurve FadeCurve); // Function Engine.AudioComponent.AdjustVolume(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3281C50>
	void AdjustAttenuation(struct FSoundAttenuationSettings& InAttenuationSettings); // Function Engine.AudioComponent.AdjustAttenuation(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3281B80>
};

// Class Engine.FXSystemAsset
class UFXSystemAsset : public Object {

public:

	uint32_t MaxPoolSize; // 0x28 (4)
};

// Class Engine.GameModeBase
class AGameModeBase : public AInfo {

public:

	struct FString OptionsString; // 0x220 (16)
	struct UClass* GameSessionClass; // 0x230 (8)
	struct UClass* GameStateClass; // 0x238 (8)
	struct UClass* PlayerControllerClass; // 0x240 (8)
	struct UClass* PlayerStateClass; // 0x248 (8)
	struct UClass* HUDClass; // 0x250 (8)
	struct UClass* DefaultPawnClass; // 0x258 (8)
	struct UClass* SpectatorClass; // 0x260 (8)
	struct UClass* ReplaySpectatorPlayerControllerClass; // 0x268 (8)
	struct UClass* ServerStatReplicatorClass; // 0x270 (8)
	struct AGameSession GameSession; // 0x278 (8)
	struct AGameStateBase GameState; // 0x280 (8)
	struct AServerStatReplicator ServerStatReplicator; // 0x288 (8)
	struct FText DefaultPlayerName; // 0x290 (24)
	char bUseSeamlessTravel : 1; // 0x2A8 (1)
	char bStartPlayersAsSpectators : 1; // 0x2A8 (1)
	char bPauseable : 1; // 0x2A8 (1)

	void StartPlay(); // Function Engine.GameModeBase.StartPlay(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32CCB10>
	struct APawn SpawnDefaultPawnFor(struct AController NewPlayer, struct UActor StartSpot); // Function Engine.GameModeBase.SpawnDefaultPawnFor(Native|Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x32CACE0>
	struct APawn SpawnDefaultPawnAtTransform(struct AController NewPlayer, struct FTransform& SpawnTransform); // Function Engine.GameModeBase.SpawnDefaultPawnAtTransform(Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x32CABC0>
	bool ShouldReset(struct UActor ActorToReset); // Function Engine.GameModeBase.ShouldReset(Native|Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x32CA6E0>
	void ReturnToMainMenuHost(); // Function Engine.GameModeBase.ReturnToMainMenuHost(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32C96F0>
	void RestartPlayerAtTransform(struct AController NewPlayer, struct FTransform& SpawnTransform); // Function Engine.GameModeBase.RestartPlayerAtTransform(Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32C95D0>
	void RestartPlayerAtPlayerStart(struct AController NewPlayer, struct UActor StartSpot); // Function Engine.GameModeBase.RestartPlayerAtPlayerStart(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32C9500>
	void RestartPlayer(struct AController NewPlayer); // Function Engine.GameModeBase.RestartPlayer(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32C9470>
	void ResetLevel(); // Function Engine.GameModeBase.ResetLevel(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32C9430>
	bool PlayerCanRestart(struct APlayerController Player); // Function Engine.GameModeBase.PlayerCanRestart(Native|Event|Public|BlueprintCallable|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x32C8D90>
	bool MustSpectate(struct APlayerController NewPlayerController); // Function Engine.GameModeBase.MustSpectate(Native|Event|Public|BlueprintEvent|Const) // <VeiledExperts-Win64-Shipping.exe+0x32C7E90>
	void K2_PostLogin(struct APlayerController NewPlayer); // Function Engine.GameModeBase.K2_PostLogin(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void K2_OnSwapPlayerControllers(struct APlayerController OldPC, struct APlayerController NewPC); // Function Engine.GameModeBase.K2_OnSwapPlayerControllers(Event|Protected|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void K2_OnRestartPlayer(struct AController NewPlayer); // Function Engine.GameModeBase.K2_OnRestartPlayer(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void K2_OnLogout(struct AController ExitingController); // Function Engine.GameModeBase.K2_OnLogout(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void K2_OnChangeName(struct AController Other, struct FString NewName, bool bNameChange); // Function Engine.GameModeBase.K2_OnChangeName(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	struct UActor K2_FindPlayerStart(struct AController Player, struct FString IncomingName); // Function Engine.GameModeBase.K2_FindPlayerStart(Final|Native|Public|BlueprintCallable|BlueprintPure) // <VeiledExperts-Win64-Shipping.exe+0x32C7600>
	void InitStartSpot(struct UActor StartSpot, struct AController NewPlayer); // Function Engine.GameModeBase.InitStartSpot(Native|Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x32C7430>
	void InitializeHUDForPlayer(struct APlayerController NewPlayer); // Function Engine.GameModeBase.InitializeHUDForPlayer(Native|Event|Protected|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x32B3650>
	bool HasMatchStarted(); // Function Engine.GameModeBase.HasMatchStarted(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32C72C0>
	void HandleStartingNewPlayer(struct APlayerController NewPlayer); // Function Engine.GameModeBase.HandleStartingNewPlayer(Native|Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x32C7160>
	int32_t GetNumSpectators(); // Function Engine.GameModeBase.GetNumSpectators(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32C62B0>
	int32_t GetNumPlayers(); // Function Engine.GameModeBase.GetNumPlayers(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32C6280>
	struct UClass* GetDefaultPawnClassForController(struct AController InController); // Function Engine.GameModeBase.GetDefaultPawnClassForController(Native|Event|Public|BlueprintCallable|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x32C5D20>
	struct UActor FindPlayerStart(struct AController Player, struct FString IncomingName); // Function Engine.GameModeBase.FindPlayerStart(Native|Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x32C4DE0>
	struct UActor ChoosePlayerStart(struct AController Player); // Function Engine.GameModeBase.ChoosePlayerStart(Native|Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x32C4240>
	void ChangeName(struct AController Controller, struct FString NewName, bool bNameChange); // Function Engine.GameModeBase.ChangeName(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32C4120>
	bool CanSpectate(struct APlayerController Viewer, struct APlayerState ViewTarget); // Function Engine.GameModeBase.CanSpectate(Native|Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x32C4030>
};

// Class Engine.GameMode
class AGameMode : public AGameModeBase {

public:

	struct FName MatchState; // 0x2C0 (8)
	char bDelayedStart : 1; // 0x2C8 (1)
	char pad_2C8_1 : 7; // 0x2C8 (1)
	int32_t NumSpectators; // 0x2CC (4)
	int32_t NumPlayers; // 0x2D0 (4)
	int32_t NumBots; // 0x2D4 (4)
	float MinRespawnDelay; // 0x2D8 (4)
	int32_t NumTravellingPlayers; // 0x2DC (4)
	struct UClass* EngineMessageClass; // 0x2E0 (8)
	struct TArray<struct APlayerState> InactivePlayerArray; // 0x2E8 (16)
	float InactivePlayerStateLifeSpan; // 0x2F8 (4)
	int32_t MaxInactivePlayers; // 0x2FC (4)
	bool bHandleDedicatedServerReplays; // 0x300 (1)

	void StartMatch(); // Function Engine.GameMode.StartMatch(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32CCAF0>
	void SetBandwidthLimit(float AsyncIOBandwidthLimit); // Function Engine.GameMode.SetBandwidthLimit(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32C98C0>
	void Say(struct FString Msg); // Function Engine.GameMode.Say(Exec|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32C9820>
	void RestartGame(); // Function Engine.GameMode.RestartGame(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32C9450>
	bool ReadyToStartMatch(); // Function Engine.GameMode.ReadyToStartMatch(Native|Event|Protected|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x32C9180>
	bool ReadyToEndMatch(); // Function Engine.GameMode.ReadyToEndMatch(Native|Event|Protected|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x32C9150>
	void K2_OnSetMatchState(struct FName NewState); // Function Engine.GameMode.K2_OnSetMatchState(Event|Protected|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	bool IsMatchInProgress(); // Function Engine.GameMode.IsMatchInProgress(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x329A400>
	bool HasMatchEnded(); // Function Engine.GameMode.HasMatchEnded(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32C7290>
	struct FName GetMatchState(); // Function Engine.GameMode.GetMatchState(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32C61E0>
	void EndMatch(); // Function Engine.GameMode.EndMatch(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32C4C70>
	void AbortMatch(); // Function Engine.GameMode.AbortMatch(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32C1820>
};

// Class Engine.GameStateBase
class AGameStateBase : public AInfo {

public:

	struct UClass* GameModeClass; // 0x220 (8)
	struct AGameModeBase AuthorityGameMode; // 0x228 (8)
	struct UClass* SpectatorClass; // 0x230 (8)
	struct TArray<struct APlayerState> PlayerArray; // 0x238 (16)
	bool bReplicatedHasBegunPlay; // 0x248 (1)
	float ReplicatedWorldTimeSeconds; // 0x24C (4)
	float ServerWorldTimeSecondsDelta; // 0x250 (4)
	float ServerWorldTimeSecondsUpdateFrequency; // 0x254 (4)

	void OnRep_SpectatorClass(); // Function Engine.GameStateBase.OnRep_SpectatorClass(Native|Protected) // <VeiledExperts-Win64-Shipping.exe+0x32CFC70>
	void OnRep_ReplicatedWorldTimeSeconds(); // Function Engine.GameStateBase.OnRep_ReplicatedWorldTimeSeconds(Native|Protected) // <VeiledExperts-Win64-Shipping.exe+0x32CFC50>
	void OnRep_ReplicatedHasBegunPlay(); // Function Engine.GameStateBase.OnRep_ReplicatedHasBegunPlay(Native|Protected) // <VeiledExperts-Win64-Shipping.exe+0x32CFC30>
	void OnRep_GameModeClass(); // Function Engine.GameStateBase.OnRep_GameModeClass(Native|Protected) // <VeiledExperts-Win64-Shipping.exe+0x32A9270>
	bool HasMatchStarted(); // Function Engine.GameStateBase.HasMatchStarted(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32CF9F0>
	bool HasBegunPlay(); // Function Engine.GameStateBase.HasBegunPlay(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32CF9C0>
	float GetServerWorldTimeSeconds(); // Function Engine.GameStateBase.GetServerWorldTimeSeconds(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32CF860>
	float GetPlayerStartTime(struct AController Controller); // Function Engine.GameStateBase.GetPlayerStartTime(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32CF370>
	float GetPlayerRespawnDelay(struct AController Controller); // Function Engine.GameStateBase.GetPlayerRespawnDelay(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32CF2D0>
};

// Class Engine.GameState
class AGameState : public AGameStateBase {

public:

	struct FName MatchState; // 0x270 (8)
	struct FName PreviousMatchState; // 0x278 (8)
	int32_t ElapsedTime; // 0x280 (4)

	void OnRep_MatchState(); // Function Engine.GameState.OnRep_MatchState(Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32C9430>
	void OnRep_ElapsedTime(); // Function Engine.GameState.OnRep_ElapsedTime(Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32C96F0>
};

// Class Engine.Controller
class AController : public UActor {

public:

	struct APlayerState PlayerState; // 0x228 (8)
	struct FMulticastInlineDelegate OnInstigatedAnyDamage; // 0x238 (16)
	struct FName StateName; // 0x248 (8)
	struct APawn Pawn; // 0x250 (8)
	struct ACharacter Character; // 0x260 (8)
	struct USceneComponent TransformComponent; // 0x268 (8)
	struct FRotator ControlRotation; // 0x288 (12)
	char bAttachToPawn : 1; // 0x294 (1)

	void UnPossess(); // Function Engine.Controller.UnPossess(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A9630>
	void StopMovement(); // Function Engine.Controller.StopMovement(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A9610>
	void SetInitialLocationAndRotation(struct FVector& NewLocation, struct FRotator& NewRotation); // Function Engine.Controller.SetInitialLocationAndRotation(Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A9520>
	void SetIgnoreMoveInput(bool bNewMoveInput); // Function Engine.Controller.SetIgnoreMoveInput(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A9490>
	void SetIgnoreLookInput(bool bNewLookInput); // Function Engine.Controller.SetIgnoreLookInput(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A9400>
	void SetControlRotation(struct FRotator& NewRotation); // Function Engine.Controller.SetControlRotation(Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A9370>
	void ResetIgnoreMoveInput(); // Function Engine.Controller.ResetIgnoreMoveInput(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A9350>
	void ResetIgnoreLookInput(); // Function Engine.Controller.ResetIgnoreLookInput(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A9330>
	void ResetIgnoreInputFlags(); // Function Engine.Controller.ResetIgnoreInputFlags(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A9310>
	void ReceiveUnPossess(struct APawn UnpossessedPawn); // Function Engine.Controller.ReceiveUnPossess(Event|Protected|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void ReceivePossess(struct APawn PossessedPawn); // Function Engine.Controller.ReceivePossess(Event|Protected|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void ReceiveInstigatedAnyDamage(float Damage, struct UDamageType DamageType, struct UActor DamagedActor, struct UActor DamageCauser); // Function Engine.Controller.ReceiveInstigatedAnyDamage(BlueprintAuthorityOnly|Event|Protected|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void Possess(struct APawn InPawn); // Function Engine.Controller.Possess(Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A9290>
	void OnRep_PlayerState(); // Function Engine.Controller.OnRep_PlayerState(Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A9270>
	void OnRep_Pawn(); // Function Engine.Controller.OnRep_Pawn(Native|Public) // <VeiledExperts-Win64-Shipping.exe+0xDD0E10>
	bool LineOfSightTo(struct UActor Other, struct FVector ViewPoint, bool bAlternateChecks); // Function Engine.Controller.LineOfSightTo(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A9150>
	struct APawn K2_GetPawn(); // Function Engine.Controller.K2_GetPawn(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A9120>
	bool IsPlayerController(); // Function Engine.Controller.IsPlayerController(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A90F0>
	bool IsMoveInputIgnored(); // Function Engine.Controller.IsMoveInputIgnored(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A90C0>
	bool IsLookInputIgnored(); // Function Engine.Controller.IsLookInputIgnored(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A9090>
	bool IsLocalPlayerController(); // Function Engine.Controller.IsLocalPlayerController(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A9040>
	bool IsLocalController(); // Function Engine.Controller.IsLocalController(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A9010>
	struct UActor GetViewTarget(); // Function Engine.Controller.GetViewTarget(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A8FE0>
	struct FRotator GetDesiredRotation(); // Function Engine.Controller.GetDesiredRotation(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A8C10>
	struct FRotator GetControlRotation(); // Function Engine.Controller.GetControlRotation(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A89A0>
	void ClientSetRotation(struct FRotator NewRotation, bool bResetCamera); // Function Engine.Controller.ClientSetRotation(Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x32A87E0>
	void ClientSetLocation(struct FVector NewLocation, struct FRotator NewRotation); // Function Engine.Controller.ClientSetLocation(Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x32A8700>
	struct APlayerController CastToPlayerController(); // Function Engine.Controller.CastToPlayerController(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A86D0>
};

// Class Engine.PlayerController
class APlayerController : public AController {

public:

	struct UPlayer Player; // 0x298 (8)
	struct APawn AcknowledgedPawn; // 0x2A0 (8)
	struct UInterpTrackInstDirector ControllingDirTrackInst; // 0x2A8 (8)
	struct AHUD MyHUD; // 0x2B0 (8)
	struct APlayerCameraManager PlayerCameraManager; // 0x2B8 (8)
	struct UClass* PlayerCameraManagerClass; // 0x2C0 (8)
	bool bAutoManageActiveCameraTarget; // 0x2C8 (1)
	struct FRotator TargetViewRotation; // 0x2CC (12)
	float SmoothTargetViewRotationSpeed; // 0x2E4 (4)
	struct TArray<struct UActor> HiddenActors; // 0x2F0 (16)
	struct TArray<struct TWeakObjectPtr<struct UPrimitiveComponent>> HiddenPrimitiveComponents; // 0x300 (16)
	float LastSpectatorStateSynchTime; // 0x314 (4)
	struct FVector LastSpectatorSyncLocation; // 0x318 (12)
	struct FRotator LastSpectatorSyncRotation; // 0x324 (12)
	int32_t ClientCap; // 0x330 (4)
	struct UCheatManager CheatManager; // 0x338 (8)
	struct UClass* CheatClass; // 0x340 (8)
	struct UPlayerInput PlayerInput; // 0x348 (8)
	struct TArray<struct FActiveForceFeedbackEffect> ActiveForceFeedbackEffects; // 0x350 (16)
	char pad_341_0 : 4; // 0x341 (1)
	char bPlayerIsWaiting : 1; // 0x3D0 (1)
	char pad_341_5 : 3; // 0x341 (1)
	char NetPlayerIndex; // 0x3D4 (1)
	struct UNetConnection PendingSwapConnection; // 0x410 (8)
	struct UNetConnection NetConnection; // 0x418 (8)
	float InputYawScale; // 0x42C (4)
	float InputPitchScale; // 0x430 (4)
	float InputRollScale; // 0x434 (4)
	char bShowMouseCursor : 1; // 0x438 (1)
	char pad_35F_1 : 7; // 0x35F (1)
	char pad_360_0 : 1; // 0x360 (1)
	char bEnableClickEvents : 1; // 0x438 (1)
	char pad_360_2 : 6; // 0x360 (1)
	char pad_361_0 : 2; // 0x361 (1)
	char bEnableTouchEvents : 1; // 0x438 (1)
	char pad_361_3 : 5; // 0x361 (1)
	char pad_362_0 : 3; // 0x362 (1)
	char bEnableMouseOverEvents : 1; // 0x438 (1)
	char pad_362_4 : 4; // 0x362 (1)
	char pad_363_0 : 4; // 0x363 (1)
	char bEnableTouchOverEvents : 1; // 0x438 (1)
	char pad_363_5 : 3; // 0x363 (1)
	char pad_364_0 : 5; // 0x364 (1)
	char bForceFeedbackEnabled : 1; // 0x438 (1)
	char pad_364_6 : 2; // 0x364 (1)
	float ForceFeedbackScale; // 0x43C (4)
	struct TArray<struct FKey> ClickEventKeys; // 0x440 (16)
	enum class EMouseCursor DefaultMouseCursor; // 0x450 (1)
	enum class EMouseCursor CurrentMouseCursor; // 0x451 (1)
	enum class ECollisionChannel DefaultClickTraceChannel; // 0x452 (1)
	enum class ECollisionChannel CurrentClickTraceChannel; // 0x453 (1)
	float HitResultTraceDistance; // 0x454 (4)
	uint16_t SeamlessTravelCount; // 0x458 (2)
	uint16_t LastCompletedSeamlessTravelCount; // 0x45A (2)
	struct UInputComponent InactiveStateInputComponent; // 0x4D0 (8)
	char pad_38D_0 : 2; // 0x38D (1)
	char bShouldPerformFullTickWhenPaused : 1; // 0x4D8 (1)
	char pad_38D_3 : 5; // 0x38D (1)
	struct UTouchInterface CurrentTouchInterface; // 0x4F0 (8)
	struct ASpectatorPawn SpectatorPawn; // 0x548 (8)
	bool bIsLocalPlayerController; // 0x554 (1)
	struct FVector SpawnLocation; // 0x558 (12)

	bool WasInputKeyJustReleased(struct FKey Key); // Function Engine.PlayerController.WasInputKeyJustReleased(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3381230>
	bool WasInputKeyJustPressed(struct FKey Key); // Function Engine.PlayerController.WasInputKeyJustPressed(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3381140>
	void ToggleSpeaking(bool bInSpeaking); // Function Engine.PlayerController.ToggleSpeaking(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x33810B0>
	void TestServerLevelVisibilityChange(struct FName PackageName, struct FName Filename); // Function Engine.PlayerController.TestServerLevelVisibilityChange(Final|Exec|Native|Private) // <VeiledExperts-Win64-Shipping.exe+0x3380FF0>
	void SwitchLevel(struct FString URL); // Function Engine.PlayerController.SwitchLevel(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x3380F50>
	void StopHapticEffect(enum class EControllerHand Hand); // Function Engine.PlayerController.StopHapticEffect(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3380ED0>
	void StartFire(char FireModeNum); // Function Engine.PlayerController.StartFire(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x3380900>
	void SetVirtualJoystickVisibility(bool bVisible); // Function Engine.PlayerController.SetVirtualJoystickVisibility(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33806A0>
	void SetViewTargetWithBlend(struct UActor NewViewTarget, float BlendTime, enum class EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing); // Function Engine.PlayerController.SetViewTargetWithBlend(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3380520>
	void SetName(struct FString S); // Function Engine.PlayerController.SetName(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x3380480>
	void SetMouseLocation(int32_t X, int32_t Y); // Function Engine.PlayerController.SetMouseLocation(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33803C0>
	void SetMouseCursorWidget(enum class EMouseCursor Cursor, struct UUserWidget CursorWidget); // Function Engine.PlayerController.SetMouseCursorWidget(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3380300>
	void SetHapticsByValue(float Frequency, float Amplitude, enum class EControllerHand Hand); // Function Engine.PlayerController.SetHapticsByValue(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33800E0>
	void SetDisableHaptics(bool bNewDisabled); // Function Engine.PlayerController.SetDisableHaptics(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3380030>
	void SetControllerLightColor(struct FColor Color); // Function Engine.PlayerController.SetControllerLightColor(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x337FFC0>
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning); // Function Engine.PlayerController.SetCinematicMode(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x337FE00>
	void SetAudioListenerOverride(struct USceneComponent AttachToComponent, struct FVector Location, struct FRotator Rotation); // Function Engine.PlayerController.SetAudioListenerOverride(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x337FCE0>
	void SetAudioListenerAttenuationOverride(struct USceneComponent AttachToComponent, struct FVector AttenuationLocationOVerride); // Function Engine.PlayerController.SetAudioListenerAttenuationOverride(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x337FC10>
	void ServerViewSelf(struct FViewTargetTransitionParams TransitionParams); // Function Engine.PlayerController.ServerViewSelf(Net|Native|Event|Public|NetServer|NetValidate) // <VeiledExperts-Win64-Shipping.exe+0x337FB20>
	void ServerViewPrevPlayer(); // Function Engine.PlayerController.ServerViewPrevPlayer(Net|Native|Event|Public|NetServer|NetValidate) // <VeiledExperts-Win64-Shipping.exe+0x337FAD0>
	void ServerViewNextPlayer(); // Function Engine.PlayerController.ServerViewNextPlayer(Net|Native|Event|Public|NetServer|NetValidate) // <VeiledExperts-Win64-Shipping.exe+0x337FA80>
	void ServerVerifyViewTarget(); // Function Engine.PlayerController.ServerVerifyViewTarget(Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <VeiledExperts-Win64-Shipping.exe+0x337FA30>
	void ServerUpdateMultipleLevelsVisibility(struct TArray<struct FUpdateLevelVisibilityLevelInfo> LevelVisibilities); // Function Engine.PlayerController.ServerUpdateMultipleLevelsVisibility(Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <VeiledExperts-Win64-Shipping.exe+0x337F970>
	void ServerUpdateLevelVisibility(struct FUpdateLevelVisibilityLevelInfo LevelVisibility); // Function Engine.PlayerController.ServerUpdateLevelVisibility(Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <VeiledExperts-Win64-Shipping.exe+0x337F8B0>
	void ServerUpdateCamera(struct FVector_NetQuantize CamLoc, int32_t CamPitchAndYaw); // Function Engine.PlayerController.ServerUpdateCamera(Net|Native|Event|Public|NetServer|NetValidate) // <VeiledExperts-Win64-Shipping.exe+0x337F790>
	void ServerUnmutePlayer(struct FUniqueNetIdRepl PlayerId); // Function Engine.PlayerController.ServerUnmutePlayer(Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <VeiledExperts-Win64-Shipping.exe+0x337F630>
	void ServerToggleAILogging(); // Function Engine.PlayerController.ServerToggleAILogging(Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <VeiledExperts-Win64-Shipping.exe+0x337F5E0>
	void ServerShortTimeout(); // Function Engine.PlayerController.ServerShortTimeout(Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <VeiledExperts-Win64-Shipping.exe+0x337F590>
	void ServerSetSpectatorWaiting(bool bWaiting); // Function Engine.PlayerController.ServerSetSpectatorWaiting(Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <VeiledExperts-Win64-Shipping.exe+0x337F4D0>
	void ServerSetSpectatorLocation(struct FVector NewLoc, struct FRotator NewRot); // Function Engine.PlayerController.ServerSetSpectatorLocation(Net|Native|Event|Public|NetServer|HasDefaults|NetValidate) // <VeiledExperts-Win64-Shipping.exe+0x337F3A0>
	void ServerRestartPlayer(); // Function Engine.PlayerController.ServerRestartPlayer(Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <VeiledExperts-Win64-Shipping.exe+0x337F350>
	void ServerPause(); // Function Engine.PlayerController.ServerPause(Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <VeiledExperts-Win64-Shipping.exe+0x337F300>
	void ServerNotifyLoadedWorld(struct FName WorldPackageName); // Function Engine.PlayerController.ServerNotifyLoadedWorld(Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <VeiledExperts-Win64-Shipping.exe+0x337F250>
	void ServerMutePlayer(struct FUniqueNetIdRepl PlayerId); // Function Engine.PlayerController.ServerMutePlayer(Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <VeiledExperts-Win64-Shipping.exe+0x337F0F0>
	void ServerExecRPC(struct FString Msg); // Function Engine.PlayerController.ServerExecRPC(Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <VeiledExperts-Win64-Shipping.exe+0x337F030>
	void ServerExec(struct FString Msg); // Function Engine.PlayerController.ServerExec(Final|Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x337EF90>
	void ServerCheckClientPossessionReliable(); // Function Engine.PlayerController.ServerCheckClientPossessionReliable(Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <VeiledExperts-Win64-Shipping.exe+0x337EF40>
	void ServerCheckClientPossession(); // Function Engine.PlayerController.ServerCheckClientPossession(Net|Native|Event|Public|NetServer|NetValidate) // <VeiledExperts-Win64-Shipping.exe+0x337EEF0>
	void ServerChangeName(struct FString S); // Function Engine.PlayerController.ServerChangeName(Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <VeiledExperts-Win64-Shipping.exe+0x337EE30>
	void ServerCamera(struct FName NewMode); // Function Engine.PlayerController.ServerCamera(Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <VeiledExperts-Win64-Shipping.exe+0x337ED70>
	void ServerAcknowledgePossession(struct APawn P); // Function Engine.PlayerController.ServerAcknowledgePossession(Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <VeiledExperts-Win64-Shipping.exe+0x337ECB0>
	void SendToConsole(struct FString Command); // Function Engine.PlayerController.SendToConsole(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x337EC10>
	void RestartLevel(); // Function Engine.PlayerController.RestartLevel(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x337EBF0>
	void ResetControllerLightColor(); // Function Engine.PlayerController.ResetControllerLightColor(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x337EBD0>
	bool ProjectWorldLocationToScreen(struct FVector WorldLocation, struct FVector2D& ScreenLocation, bool bPlayerViewportRelative); // Function Engine.PlayerController.ProjectWorldLocationToScreen(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x337EA00>
	void PlayHapticEffect(struct UHapticFeedbackEffect_Base HapticEffect, enum class EControllerHand Hand, float Scale, bool bLoop); // Function Engine.PlayerController.PlayHapticEffect(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x337E8B0>
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, enum class EDynamicForceFeedbackAction Action, struct FLatentActionInfo LatentInfo); // Function Engine.PlayerController.PlayDynamicForceFeedback(Final|Native|Private|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x337E630>
	void Pause(); // Function Engine.PlayerController.Pause(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x337DF70>
	void OnServerStartedVisualLogger(bool bIsLogging); // Function Engine.PlayerController.OnServerStartedVisualLogger(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x337DEE0>
	void LocalTravel(struct FString URL); // Function Engine.PlayerController.LocalTravel(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x337DE40>
	void K2_ClientPlayForceFeedback(struct UForceFeedbackEffect ForceFeedbackEffect, struct FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused); // Function Engine.PlayerController.K2_ClientPlayForceFeedback(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x337DC90>
	bool IsInputKeyDown(struct FKey Key); // Function Engine.PlayerController.IsInputKeyDown(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x337DBA0>
	void GetViewportSize(int32_t& SizeX, int32_t& SizeY); // Function Engine.PlayerController.GetViewportSize(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x337DAC0>
	struct ASpectatorPawn GetSpectatorPawn(); // Function Engine.PlayerController.GetSpectatorPawn(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x337DAA0>
	bool GetMousePosition(float& LocationX, float& LocationY); // Function Engine.PlayerController.GetMousePosition(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x337D980>
	struct FVector GetInputVectorKeyState(struct FKey Key); // Function Engine.PlayerController.GetInputVectorKeyState(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x337D880>
	void GetInputTouchState(enum class ETouchIndex FingerIndex, float& LocationX, float& LocationY, bool& bIsCurrentlyPressed); // Function Engine.PlayerController.GetInputTouchState(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x337D700>
	void GetInputMouseDelta(float& DeltaX, float& DeltaY); // Function Engine.PlayerController.GetInputMouseDelta(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x337D620>
	void GetInputMotionState(struct FVector& Tilt, struct FVector& RotationRate, struct FVector& Gravity, struct FVector& Acceleration); // Function Engine.PlayerController.GetInputMotionState(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x337D490>
	float GetInputKeyTimeDown(struct FKey Key); // Function Engine.PlayerController.GetInputKeyTimeDown(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x337D3A0>
	void GetInputAnalogStickState(enum class EControllerAnalogStick WhichStick, float& StickX, float& StickY); // Function Engine.PlayerController.GetInputAnalogStickState(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x337D280>
	float GetInputAnalogKeyState(struct FKey Key); // Function Engine.PlayerController.GetInputAnalogKeyState(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x337D190>
	struct AHUD GetHUD(); // Function Engine.PlayerController.GetHUD(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x337C5D0>
	bool GetHitResultUnderFingerForObjects(enum class ETouchIndex FingerIndex, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderFingerForObjects(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x337CFD0>
	bool GetHitResultUnderFingerByChannel(enum class ETouchIndex FingerIndex, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderFingerByChannel(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x337CE30>
	bool GetHitResultUnderFinger(enum class ETouchIndex FingerIndex, enum class ECollisionChannel TraceChannel, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderFinger(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x337CC90>
	bool GetHitResultUnderCursorForObjects(struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderCursorForObjects(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x337CB10>
	bool GetHitResultUnderCursorByChannel(enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderCursorByChannel(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x337C9B0>
	bool GetHitResultUnderCursor(enum class ECollisionChannel TraceChannel, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderCursor(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x337C850>
	struct FVector GetFocalLocation(); // Function Engine.PlayerController.GetFocalLocation(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x337C590>
	void FOV(float NewFOV); // Function Engine.PlayerController.FOV(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x337C3B0>
	void EnableCheats(); // Function Engine.PlayerController.EnableCheats(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x337C390>
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, struct FVector& WorldLocation, struct FVector& WorldDirection); // Function Engine.PlayerController.DeprojectScreenPositionToWorld(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x337C210>
	bool DeprojectMousePositionToWorld(struct FVector& WorldLocation, struct FVector& WorldDirection); // Function Engine.PlayerController.DeprojectMousePositionToWorld(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x337C110>
	void ConsoleKey(struct FKey Key); // Function Engine.PlayerController.ConsoleKey(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x337C030>
	void ClientWasKicked(struct FText KickReason); // Function Engine.PlayerController.ClientWasKicked(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x337BF70>
	void ClientVoiceHandshakeComplete(); // Function Engine.PlayerController.ClientVoiceHandshakeComplete(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x337BF50>
	void ClientUpdateMultipleLevelsStreamingStatus(struct TArray<struct FUpdateLevelStreamingLevelStatus> LevelStatuses); // Function Engine.PlayerController.ClientUpdateMultipleLevelsStreamingStatus(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x337BEB0>
	void ClientUpdateLevelStreamingStatus(struct FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int32_t LODIndex); // Function Engine.PlayerController.ClientUpdateLevelStreamingStatus(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x337BD00>
	void ClientUnmutePlayer(struct FUniqueNetIdRepl PlayerId); // Function Engine.PlayerController.ClientUnmutePlayer(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x337BBE0>
	void ClientTravelInternal(struct FString URL, enum class ETravelType TravelType, bool bSeamless, struct FGuid MapPackageGuid); // Function Engine.PlayerController.ClientTravelInternal(Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x337BA70>
	void ClientTravel(struct FString URL, enum class ETravelType TravelType, bool bSeamless, struct FGuid MapPackageGuid); // Function Engine.PlayerController.ClientTravel(Final|Native|Public|HasDefaults) // <VeiledExperts-Win64-Shipping.exe+0x337B900>
	void ClientTeamMessage(struct APlayerState SenderPlayerState, struct FString S, struct FName Type, float MsgLifeTime); // Function Engine.PlayerController.ClientTeamMessage(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x337B7A0>
	void ClientStopForceFeedback(struct UForceFeedbackEffect ForceFeedbackEffect, struct FName Tag); // Function Engine.PlayerController.ClientStopForceFeedback(Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x337B6D0>
	void ClientStopCameraShakesFromSource(struct UCameraShakeSourceComponent SourceComponent, bool bImmediately); // Function Engine.PlayerController.ClientStopCameraShakesFromSource(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x337B600>
	void ClientStopCameraShake(struct UClass* Shake, bool bImmediately); // Function Engine.PlayerController.ClientStopCameraShake(Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x337B530>
	void ClientStopCameraAnim(struct UCameraAnim AnimToStop); // Function Engine.PlayerController.ClientStopCameraAnim(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x2A1D180>
	void ClientStartOnlineSession(); // Function Engine.PlayerController.ClientStartOnlineSession(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x337B510>
	void ClientSpawnCameraLensEffect(struct UClass* LensEffectEmitterClass); // Function Engine.PlayerController.ClientSpawnCameraLensEffect(Net|Native|Event|Public|NetClient|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x337B480>
	void ClientSetViewTarget(struct UActor A, struct FViewTargetTransitionParams TransitionParams); // Function Engine.PlayerController.ClientSetViewTarget(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x337B390>
	void ClientSetSpectatorWaiting(bool bWaiting); // Function Engine.PlayerController.ClientSetSpectatorWaiting(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x337B300>
	void ClientSetHUD(struct UClass* NewHUDClass); // Function Engine.PlayerController.ClientSetHUD(Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x337B270>
	void ClientSetForceMipLevelsToBeResident(struct UMaterialInterface Material, float ForceDuration, int32_t CinematicTextureGroups); // Function Engine.PlayerController.ClientSetForceMipLevelsToBeResident(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x337B170>
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD); // Function Engine.PlayerController.ClientSetCinematicMode(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x337B000>
	void ClientSetCameraMode(struct FName NewCamMode); // Function Engine.PlayerController.ClientSetCameraMode(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x337AF70>
	void ClientSetCameraFade(bool bEnableFading, struct FColor FadeColor, struct FVector2D FadeAlpha, float FadeTime, bool bFadeAudio); // Function Engine.PlayerController.ClientSetCameraFade(Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x337ADE0>
	void ClientSetBlockOnAsyncLoading(); // Function Engine.PlayerController.ClientSetBlockOnAsyncLoading(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x1190980>
	void ClientReturnToMainMenuWithTextReason(struct FText ReturnReason); // Function Engine.PlayerController.ClientReturnToMainMenuWithTextReason(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x337AD20>
	void ClientReturnToMainMenu(struct FString ReturnReason); // Function Engine.PlayerController.ClientReturnToMainMenu(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x337AC80>
	void ClientRetryClientRestart(struct APawn NewPawn); // Function Engine.PlayerController.ClientRetryClientRestart(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x337ABF0>
	void ClientRestart(struct APawn NewPawn); // Function Engine.PlayerController.ClientRestart(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x337AB60>
	void ClientReset(); // Function Engine.PlayerController.ClientReset(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x337AB40>
	void ClientRepObjRef(struct Object Object); // Function Engine.PlayerController.ClientRepObjRef(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x337AAB0>
	void ClientReceiveLocalizedMessage(struct UClass* Message, int32_t Switch, struct APlayerState RelatedPlayerState_2, struct APlayerState RelatedPlayerState_3, struct Object OptionalObject); // Function Engine.PlayerController.ClientReceiveLocalizedMessage(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x337A930>
	void ClientPrestreamTextures(struct UActor ForcedActor, float ForceDuration, bool bEnableStreaming, int32_t CinematicTextureGroups); // Function Engine.PlayerController.ClientPrestreamTextures(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x337A7E0>
	void ClientPrepareMapChange(struct FName LevelName, bool bFirst, bool bLast); // Function Engine.PlayerController.ClientPrepareMapChange(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x337A6D0>
	void ClientPlaySoundAtLocation(struct USoundBase Sound, struct FVector Location, float VolumeMultiplier, float PitchMultiplier); // Function Engine.PlayerController.ClientPlaySoundAtLocation(Net|Native|Event|Public|HasDefaults|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x337A580>
	void ClientPlaySound(struct USoundBase Sound, float VolumeMultiplier, float PitchMultiplier); // Function Engine.PlayerController.ClientPlaySound(Net|Native|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x337A480>
	void ClientPlayForceFeedback_Internal(struct UForceFeedbackEffect ForceFeedbackEffect, struct FForceFeedbackParameters Params); // Function Engine.PlayerController.ClientPlayForceFeedback_Internal(Final|Net|Native|Event|Private|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x337A390>
	void ClientPlayCameraShakeFromSource(struct UClass* Shake, struct UCameraShakeSourceComponent SourceComponent); // Function Engine.PlayerController.ClientPlayCameraShakeFromSource(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x337A2D0>
	void ClientPlayCameraShake(struct UClass* Shake, float Scale, enum class ECameraAnimPlaySpace PlaySpace, struct FRotator UserPlaySpaceRot); // Function Engine.PlayerController.ClientPlayCameraShake(Net|Native|Event|Public|HasDefaults|NetClient|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x337A170>
	void ClientPlayCameraAnim(struct UCameraAnim AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, enum class ECameraAnimPlaySpace Space, struct FRotator CustomPlaySpace); // Function Engine.PlayerController.ClientPlayCameraAnim(Net|Native|Event|Public|HasDefaults|NetClient|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3379ED0>
	void ClientMutePlayer(struct FUniqueNetIdRepl PlayerId); // Function Engine.PlayerController.ClientMutePlayer(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x3379DB0>
	void ClientMessage(struct FString S, struct FName Type, float MsgLifeTime); // Function Engine.PlayerController.ClientMessage(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x3379C90>
	void ClientIgnoreMoveInput(bool bIgnore); // Function Engine.PlayerController.ClientIgnoreMoveInput(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x3379C00>
	void ClientIgnoreLookInput(bool bIgnore); // Function Engine.PlayerController.ClientIgnoreLookInput(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x3379B70>
	void ClientGotoState(struct FName NewState); // Function Engine.PlayerController.ClientGotoState(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x3379AE0>
	void ClientGameEnded(struct UActor EndGameFocus, bool bIsWinner); // Function Engine.PlayerController.ClientGameEnded(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x3379A10>
	void ClientForceGarbageCollection(); // Function Engine.PlayerController.ClientForceGarbageCollection(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x33799F0>
	void ClientFlushLevelStreaming(); // Function Engine.PlayerController.ClientFlushLevelStreaming(Final|Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x33799D0>
	void ClientEndOnlineSession(); // Function Engine.PlayerController.ClientEndOnlineSession(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x33799B0>
	void ClientEnableNetworkVoice(bool bEnable); // Function Engine.PlayerController.ClientEnableNetworkVoice(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x3379920>
	void ClientCommitMapChange(); // Function Engine.PlayerController.ClientCommitMapChange(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x3379900>
	void ClientClearCameraLensEffects(); // Function Engine.PlayerController.ClientClearCameraLensEffects(Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33798E0>
	void ClientCapBandwidth(int32_t Cap); // Function Engine.PlayerController.ClientCapBandwidth(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x3379850>
	void ClientCancelPendingMapChange(); // Function Engine.PlayerController.ClientCancelPendingMapChange(Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x3379830>
	void ClientAddTextureStreamingLoc(struct FVector InLoc, float Duration, bool bOverrideLocation); // Function Engine.PlayerController.ClientAddTextureStreamingLoc(Final|Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x3379710>
	void ClearAudioListenerOverride(); // Function Engine.PlayerController.ClearAudioListenerOverride(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33796F0>
	void ClearAudioListenerAttenuationOverride(); // Function Engine.PlayerController.ClearAudioListenerAttenuationOverride(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33796D0>
	bool CanRestartPlayer(); // Function Engine.PlayerController.CanRestartPlayer(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33796A0>
	void Camera(struct FName NewMode); // Function Engine.PlayerController.Camera(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x3379610>
	void AddYawInput(float Val); // Function Engine.PlayerController.AddYawInput(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3379590>
	void AddRollInput(float Val); // Function Engine.PlayerController.AddRollInput(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3379510>
	void AddPitchInput(float Val); // Function Engine.PlayerController.AddPitchInput(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3379490>
	void ActivateTouchInterface(struct UTouchInterface NewTouchInterface); // Function Engine.PlayerController.ActivateTouchInterface(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33792C0>
};

// Class Engine.ApplicationLifecycleComponent
class UApplicationLifecycleComponent : public UActorComponent {

public:

	struct FMulticastInlineDelegate ApplicationWillDeactivateDelegate; // 0xB0 (16)
	struct FMulticastInlineDelegate ApplicationHasReactivatedDelegate; // 0xC0 (16)
	struct FMulticastInlineDelegate ApplicationWillEnterBackgroundDelegate; // 0xD0 (16)
	struct FMulticastInlineDelegate ApplicationHasEnteredForegroundDelegate; // 0xE0 (16)
	struct FMulticastInlineDelegate ApplicationWillTerminateDelegate; // 0xF0 (16)
	struct FMulticastInlineDelegate ApplicationShouldUnloadResourcesDelegate; // 0x100 (16)
	struct FMulticastInlineDelegate ApplicationReceivedStartupArgumentsDelegate; // 0x110 (16)
	struct FMulticastInlineDelegate OnTemperatureChangeDelegate; // 0x120 (16)
	struct FMulticastInlineDelegate OnLowPowerModeDelegate; // 0x130 (16)
};

// Class Engine.TriggerBase
class ATriggerBase : public UActor {

public:

	struct UShapeComponent CollisionComponent; // 0x220 (8)
};

// Class Engine.DataTable
class UDataTable : public Object {

public:

	struct UScriptStruct RowStruct; // 0x28 (8)
	char bStripFromClientBuilds : 1; // 0x80 (1)
	char pad_30_1 : 7; // 0x30 (1)
	char pad_31_0 : 1; // 0x31 (1)
	char bIgnoreExtraFields : 1; // 0x80 (1)
	char pad_31_2 : 6; // 0x31 (1)
	char pad_32_0 : 2; // 0x32 (1)
	char bIgnoreMissingFields : 1; // 0x80 (1)
	char pad_32_3 : 5; // 0x32 (1)
	struct FString ImportKeyField; // 0x88 (16)
};

// Class Engine.CameraActor
class ACameraActor : public UActor {

public:

	enum class EAutoReceiveInput AutoActivateForPlayer; // 0x220 (1)
	struct UCameraComponent CameraComponent; // 0x228 (8)
	struct USceneComponent SceneComponent; // 0x230 (8)
	char bConstrainAspectRatio : 1; // 0x240 (1)
	char pad_231_1 : 7; // 0x231 (1)
	float AspectRatio; // 0x244 (4)
	float FOVAngle; // 0x248 (4)
	float PostProcessBlendWeight; // 0x24C (4)
	struct FPostProcessSettings PostProcessSettings; // 0x250 (1376)

	int32_t GetAutoActivatePlayerIndex(); // Function Engine.CameraActor.GetAutoActivatePlayerIndex(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32961F0>
};

// Class Engine.AssetManager
class UAssetManager : public Object {

public:

	struct TArray<struct Object> ObjectReferenceList; // 0x2C0 (16)
	bool bIsGlobalAsyncScanEnvironment; // 0x2D0 (1)
	bool bShouldGuessTypeAndName; // 0x2D1 (1)
	bool bShouldUseSynchronousLoad; // 0x2D2 (1)
	bool bIsLoadingFromPakFiles; // 0x2D3 (1)
	bool bShouldAcquireMissingChunksOnLoad; // 0x2D4 (1)
	bool bOnlyCookProductionAssets; // 0x2D5 (1)
	bool bIsBulkScanning; // 0x2D6 (1)
	bool bIsPrimaryAssetDirectoryCurrent; // 0x2D7 (1)
	bool bIsManagementDatabaseCurrent; // 0x2D8 (1)
	bool bUpdateManagementDatabaseAfterScan; // 0x2D9 (1)
	bool bIncludeOnlyOnDiskAssets; // 0x2DA (1)
	int32_t NumberOfSpawnedNotifications; // 0x2DC (4)
};

// Class Engine.StaticMeshComponent
class UStaticMeshComponent : public UMeshComponent {

public:

	int32_t ForcedLodModel; // 0x430 (4)
	int32_t PreviousLODLevel; // 0x434 (4)
	int32_t MinLOD; // 0x438 (4)
	int32_t SubDivisionStepSize; // 0x43C (4)
	struct UStaticMesh StaticMesh; // 0x440 (8)
	struct FColor WireframeColorOverride; // 0x448 (4)
	char bEvaluateWorldPositionOffset : 1; // 0x44C (1)
	char bOverrideWireframeColor : 1; // 0x44C (1)
	char bOverrideMinLod : 1; // 0x44C (1)
	char bOverrideNavigationExport : 1; // 0x44C (1)
	char bForceNavigationObstacle : 1; // 0x44C (1)
	char bDisallowMeshPaintPerInstance : 1; // 0x44C (1)
	char bIgnoreInstanceForTextureStreaming : 1; // 0x44C (1)
	char bOverrideLightMapRes : 1; // 0x44C (1)
	char bCastDistanceFieldIndirectShadow : 1; // 0x44D (1)
	char bOverrideDistanceFieldSelfShadowBias : 1; // 0x44D (1)
	char bUseSubDivisions : 1; // 0x44D (1)
	char bUseDefaultCollision : 1; // 0x44D (1)
	char bReverseCulling : 1; // 0x44D (1)
	char pad_44D_5 : 3; // 0x44D (1)
	int32_t OverriddenLightMapRes; // 0x450 (4)
	float DistanceFieldIndirectShadowMinVisibility; // 0x454 (4)
	float DistanceFieldSelfShadowBias; // 0x458 (4)
	float StreamingDistanceMultiplier; // 0x45C (4)
	struct TArray<struct FStaticMeshComponentLODInfo> LODData; // 0x460 (16)
	struct TArray<struct FStreamingTextureBuildInfo> StreamingTextureData; // 0x470 (16)
	struct FLightmassPrimitiveSettings LightmassSettings; // 0x480 (24)

	bool SetStaticMesh(struct UStaticMesh NewMesh); // Function Engine.StaticMeshComponent.SetStaticMesh(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0xEEDAE0>
	void SetReverseCulling(bool ReverseCulling); // Function Engine.StaticMeshComponent.SetReverseCulling(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C0410>
	void SetForcedLodModel(int32_t NewForcedLodModel); // Function Engine.StaticMeshComponent.SetForcedLodModel(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C0010>
	void SetDistanceFieldSelfShadowBias(float NewValue); // Function Engine.StaticMeshComponent.SetDistanceFieldSelfShadowBias(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33BFD90>
	void OnRep_StaticMesh(struct UStaticMesh OldStaticMesh); // Function Engine.StaticMeshComponent.OnRep_StaticMesh(Final|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x33BFD10>
	void GetLocalBounds(struct FVector& Min, struct FVector& Max); // Function Engine.StaticMeshComponent.GetLocalBounds(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33BFB70>
};

// Class Engine.CameraShake
class UCameraShake : public Object {

public:

	char bSingleInstance : 1; // 0x28 (1)
	char pad_28_1 : 7; // 0x28 (1)
	float OscillationDuration; // 0x2C (4)
	float OscillationBlendInTime; // 0x30 (4)
	float OscillationBlendOutTime; // 0x34 (4)
	struct FROscillator RotOscillation; // 0x38 (36)
	struct FVOscillator LocOscillation; // 0x5C (36)
	struct FFOscillator FOVOscillation; // 0x80 (12)
	float AnimPlayRate; // 0x8C (4)
	float AnimScale; // 0x90 (4)
	float AnimBlendInTime; // 0x94 (4)
	float AnimBlendOutTime; // 0x98 (4)
	float RandomAnimSegmentDuration; // 0x9C (4)
	struct UCameraAnim Anim; // 0xA0 (8)
	char bRandomAnimSegment : 1; // 0xA8 (1)
	char pad_A5_1 : 7; // 0xA5 (1)
	struct APlayerCameraManager CameraOwner; // 0xC0 (8)
	float ShakeScale; // 0x148 (4)
	float OscillatorTimeRemaining; // 0x14C (4)
	struct UCameraAnimInst AnimInst; // 0x150 (8)

	void ReceiveStopShake(bool bImmediately); // Function Engine.CameraShake.ReceiveStopShake(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void ReceivePlayShake(float Scale); // Function Engine.CameraShake.ReceivePlayShake(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	bool ReceiveIsFinished(); // Function Engine.CameraShake.ReceiveIsFinished(Native|Event|Public|BlueprintEvent|Const) // <VeiledExperts-Win64-Shipping.exe+0xFBCA00>
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, struct FMinimalViewInfo& POV, struct FMinimalViewInfo& ModifiedPOV); // Function Engine.CameraShake.BlueprintUpdateCameraShake(Event|Public|HasOutParms|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
};

// Class Engine.CheatManager
class UCheatManager : public Object {

public:

	struct ADebugCameraController DebugCameraControllerRef; // 0x28 (8)
	struct UClass* DebugCameraControllerClass; // 0x30 (8)

	void Walk(); // Function Engine.CheatManager.Walk(Exec|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x25D7290>
	void ViewSelf(); // Function Engine.CheatManager.ViewSelf(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A54B0>
	void ViewPlayer(struct FString S); // Function Engine.CheatManager.ViewPlayer(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A5410>
	void ViewClass(struct UClass* DesiredClass); // Function Engine.CheatManager.ViewClass(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A5380>
	void ViewActor(struct FName ActorName); // Function Engine.CheatManager.ViewActor(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A52F0>
	void UpdateSafeArea(); // Function Engine.CheatManager.UpdateSafeArea(Final|Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A52D0>
	void ToggleServerStatReplicatorUpdateStatNet(); // Function Engine.CheatManager.ToggleServerStatReplicatorUpdateStatNet(Final|Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A52B0>
	void ToggleServerStatReplicatorClientOverwrite(); // Function Engine.CheatManager.ToggleServerStatReplicatorClientOverwrite(Final|Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A5290>
	void ToggleDebugCamera(); // Function Engine.CheatManager.ToggleDebugCamera(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A5270>
	void ToggleAILogging(); // Function Engine.CheatManager.ToggleAILogging(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A5250>
	void TestCollisionDistance(); // Function Engine.CheatManager.TestCollisionDistance(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A5230>
	void Teleport(); // Function Engine.CheatManager.Teleport(Exec|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A5210>
	void Summon(struct FString ClassName); // Function Engine.CheatManager.Summon(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A5170>
	void StreamLevelOut(struct FName PackageName); // Function Engine.CheatManager.StreamLevelOut(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x3266870>
	void StreamLevelIn(struct FName PackageName); // Function Engine.CheatManager.StreamLevelIn(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x3262CC0>
	void SpawnServerStatReplicator(); // Function Engine.CheatManager.SpawnServerStatReplicator(Final|Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A5150>
	void Slomo(float NewTimeDilation); // Function Engine.CheatManager.Slomo(Exec|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A50D0>
	void SetWorldOrigin(); // Function Engine.CheatManager.SetWorldOrigin(Final|Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A50B0>
	void SetMouseSensitivityToDefault(); // Function Engine.CheatManager.SetMouseSensitivityToDefault(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A5090>
	void ServerToggleAILogging(); // Function Engine.CheatManager.ServerToggleAILogging(Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <VeiledExperts-Win64-Shipping.exe+0x32A4FB0>
	void ReceiveInitCheatManager(); // Function Engine.CheatManager.ReceiveInitCheatManager(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void ReceiveEndPlay(); // Function Engine.CheatManager.ReceiveEndPlay(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void PlayersOnly(); // Function Engine.CheatManager.PlayersOnly(Exec|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A4F90>
	void OnlyLoadLevel(struct FName PackageName); // Function Engine.CheatManager.OnlyLoadLevel(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x3262D50>
	void LogLoc(); // Function Engine.CheatManager.LogLoc(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A4F70>
	void InvertMouse(); // Function Engine.CheatManager.InvertMouse(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A4F50>
	void God(); // Function Engine.CheatManager.God(Exec|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A4F30>
	void Ghost(); // Function Engine.CheatManager.Ghost(Exec|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32961D0>
	void FreezeFrame(float Delay); // Function Engine.CheatManager.FreezeFrame(Exec|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A4EB0>
	void Fly(); // Function Engine.CheatManager.Fly(Exec|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x2B46D10>
	void FlushLog(); // Function Engine.CheatManager.FlushLog(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A4E90>
	void EnableDebugCamera(); // Function Engine.CheatManager.EnableDebugCamera(Native|Protected|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A4E70>
	void DumpVoiceMutingState(); // Function Engine.CheatManager.DumpVoiceMutingState(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A4E50>
	void DumpPartyState(); // Function Engine.CheatManager.DumpPartyState(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A4E30>
	void DumpOnlineSessionState(); // Function Engine.CheatManager.DumpOnlineSessionState(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A4E10>
	void DumpChatState(); // Function Engine.CheatManager.DumpChatState(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A4DF0>
	void DisableDebugCamera(); // Function Engine.CheatManager.DisableDebugCamera(Native|Protected|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A4DD0>
	void DestroyTarget(); // Function Engine.CheatManager.DestroyTarget(Exec|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A4DB0>
	void DestroyServerStatReplicator(); // Function Engine.CheatManager.DestroyServerStatReplicator(Final|Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A4D90>
	void DestroyPawns(struct UClass* aClass); // Function Engine.CheatManager.DestroyPawns(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A4D00>
	void DestroyAllPawnsExceptTarget(); // Function Engine.CheatManager.DestroyAllPawnsExceptTarget(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A4CE0>
	void DestroyAll(struct UClass* aClass); // Function Engine.CheatManager.DestroyAll(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A4C50>
	void DebugCapsuleSweepSize(float HalfHeight, float Radius); // Function Engine.CheatManager.DebugCapsuleSweepSize(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A4B80>
	void DebugCapsuleSweepPawn(); // Function Engine.CheatManager.DebugCapsuleSweepPawn(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A4B60>
	void DebugCapsuleSweepComplex(bool bTraceComplex); // Function Engine.CheatManager.DebugCapsuleSweepComplex(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A4AD0>
	void DebugCapsuleSweepClear(); // Function Engine.CheatManager.DebugCapsuleSweepClear(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A4AB0>
	void DebugCapsuleSweepChannel(enum class ECollisionChannel Channel); // Function Engine.CheatManager.DebugCapsuleSweepChannel(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A4A30>
	void DebugCapsuleSweepCapture(); // Function Engine.CheatManager.DebugCapsuleSweepCapture(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A4A10>
	void DebugCapsuleSweep(); // Function Engine.CheatManager.DebugCapsuleSweep(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A49F0>
	void DamageTarget(float DamageAmount); // Function Engine.CheatManager.DamageTarget(Exec|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A4970>
	void CheatScript(struct FString ScriptName); // Function Engine.CheatManager.CheatScript(Final|Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A4890>
	void ChangeSize(float F); // Function Engine.CheatManager.ChangeSize(Exec|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A4810>
	void BugItStringCreator(struct FVector ViewLocation, struct FRotator ViewRotation, struct FString& GoString, struct FString& LocString); // Function Engine.CheatManager.BugItStringCreator(Exec|Native|Public|HasOutParms|HasDefaults) // <VeiledExperts-Win64-Shipping.exe+0x32A4650>
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll); // Function Engine.CheatManager.BugItGo(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A4480>
	void BugIt(struct FString ScreenShotDescription); // Function Engine.CheatManager.BugIt(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32A43E0>
};

// Class Engine.SpringArmComponent
class USpringArmComponent : public USceneComponent {

public:

	float TargetArmLength; // 0x1F0 (4)
	struct FVector SocketOffset; // 0x1F4 (12)
	struct FVector TargetOffset; // 0x200 (12)
	float ProbeSize; // 0x20C (4)
	enum class ECollisionChannel ProbeChannel; // 0x210 (1)
	char bDoCollisionTest : 1; // 0x214 (1)
	char pad_211_1 : 7; // 0x211 (1)
	char pad_212_0 : 1; // 0x212 (1)
	char bUsePawnControlRotation : 1; // 0x214 (1)
	char pad_212_2 : 6; // 0x212 (1)
	char pad_213_0 : 2; // 0x213 (1)
	char bInheritPitch : 1; // 0x214 (1)
	char pad_213_3 : 5; // 0x213 (1)
	char pad_214_0 : 3; // 0x214 (1)
	char bInheritYaw : 1; // 0x214 (1)
	char bInheritRoll : 1; // 0x214 (1)
	char bEnableCameraLag : 1; // 0x214 (1)
	char bEnableCameraRotationLag : 1; // 0x214 (1)
	char bUseCameraLagSubstepping : 1; // 0x214 (1)
	char bDrawDebugLagMarkers : 1; // 0x215 (1)
	char pad_215_1 : 7; // 0x215 (1)
	float CameraLagSpeed; // 0x218 (4)
	float CameraRotationLagSpeed; // 0x21C (4)
	float CameraLagMaxTimeStep; // 0x220 (4)
	float CameraLagMaxDistance; // 0x224 (4)

	bool IsCollisionFixApplied(); // Function Engine.SpringArmComponent.IsCollisionFixApplied(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33BB8E0>
	struct FVector GetUnfixedCameraPosition(); // Function Engine.SpringArmComponent.GetUnfixedCameraPosition(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A0410>
	struct FRotator GetTargetRotation(); // Function Engine.SpringArmComponent.GetTargetRotation(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33BB8A0>
};

// Class Engine.SphereComponent
class USphereComponent : public UShapeComponent {

public:

	float SphereRadius; // 0x420 (4)

	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps); // Function Engine.SphereComponent.SetSphereRadius(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33B81D0>
	float GetUnscaledSphereRadius(); // Function Engine.SphereComponent.GetUnscaledSphereRadius(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x329B8E0>
	float GetShapeScale(); // Function Engine.SphereComponent.GetShapeScale(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B66B0>
	float GetScaledSphereRadius(); // Function Engine.SphereComponent.GetScaledSphereRadius(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33B6660>
};

// Class Engine.GameInstance
class UGameInstance : public Object {

public:

	struct TArray<struct ULocalPlayer> LocalPlayers; // 0x38 (16)
	struct UOnlineSession OnlineSession; // 0x48 (8)
	struct TArray<struct Object> ReferencedObjects; // 0x50 (16)

	void ReceiveShutdown(); // Function Engine.GameInstance.ReceiveShutdown(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void ReceiveInit(); // Function Engine.GameInstance.ReceiveInit(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void HandleTravelError(enum class ETravelFailure FailureType); // Function Engine.GameInstance.HandleTravelError(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void HandleNetworkError(enum class ENetworkFailure FailureType, bool bIsServer); // Function Engine.GameInstance.HandleNetworkError(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void DebugRemovePlayer(int32_t ControllerId); // Function Engine.GameInstance.DebugRemovePlayer(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32BE0C0>
	void DebugCreatePlayer(int32_t ControllerId); // Function Engine.GameInstance.DebugCreatePlayer(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32BE030>
};

// Class Engine.Engine
class UEngine : public Object {

public:

	struct UFont TinyFont; // 0x30 (8)
	struct FSoftObjectPath TinyFontName; // 0x38 (24)
	struct UFont SmallFont; // 0x50 (8)
	struct FSoftObjectPath SmallFontName; // 0x58 (24)
	struct UFont MediumFont; // 0x70 (8)
	struct FSoftObjectPath MediumFontName; // 0x78 (24)
	struct UFont LargeFont; // 0x90 (8)
	struct FSoftObjectPath LargeFontName; // 0x98 (24)
	struct UFont SubtitleFont; // 0xB0 (8)
	struct FSoftObjectPath SubtitleFontName; // 0xB8 (24)
	struct TArray<struct UFont> AdditionalFonts; // 0xD0 (16)
	struct TArray<struct FString> AdditionalFontNames; // 0xE8 (16)
	struct UClass* ConsoleClass; // 0xF8 (8)
	struct FSoftClassPath ConsoleClassName; // 0x100 (24)
	struct UClass* GameViewportClientClass; // 0x118 (8)
	struct FSoftClassPath GameViewportClientClassName; // 0x120 (24)
	struct UClass* LocalPlayerClass; // 0x138 (8)
	struct FSoftClassPath LocalPlayerClassName; // 0x140 (24)
	struct UClass* WorldSettingsClass; // 0x158 (8)
	struct FSoftClassPath WorldSettingsClassName; // 0x160 (24)
	struct FSoftClassPath NavigationSystemClassName; // 0x178 (24)
	struct UClass* NavigationSystemClass; // 0x190 (8)
	struct FSoftClassPath NavigationSystemConfigClassName; // 0x198 (24)
	struct UClass* NavigationSystemConfigClass; // 0x1B0 (8)
	struct FSoftClassPath AvoidanceManagerClassName; // 0x1B8 (24)
	struct UClass* AvoidanceManagerClass; // 0x1D0 (8)
	struct UClass* PhysicsCollisionHandlerClass; // 0x1D8 (8)
	struct FSoftClassPath PhysicsCollisionHandlerClassName; // 0x1E0 (24)
	struct FSoftClassPath GameUserSettingsClassName; // 0x1F8 (24)
	struct UClass* GameUserSettingsClass; // 0x210 (8)
	struct FSoftClassPath AIControllerClassName; // 0x218 (24)
	struct UGameUserSettings GameUserSettings; // 0x230 (8)
	struct UClass* LevelScriptActorClass; // 0x238 (8)
	struct FSoftClassPath LevelScriptActorClassName; // 0x240 (24)
	struct FSoftClassPath DefaultBlueprintBaseClassName; // 0x258 (24)
	struct FSoftClassPath GameSingletonClassName; // 0x270 (24)
	struct Object GameSingleton; // 0x288 (8)
	struct FSoftClassPath AssetManagerClassName; // 0x290 (24)
	struct UAssetManager AssetManager; // 0x2A8 (8)
	struct UTexture2D DefaultTexture; // 0x2B0 (8)
	struct FSoftObjectPath DefaultTextureName; // 0x2B8 (24)
	struct UTexture DefaultDiffuseTexture; // 0x2D0 (8)
	struct FSoftObjectPath DefaultDiffuseTextureName; // 0x2D8 (24)
	struct UTexture2D DefaultBSPVertexTexture; // 0x2F0 (8)
	struct FSoftObjectPath DefaultBSPVertexTextureName; // 0x2F8 (24)
	struct UTexture2D HighFrequencyNoiseTexture; // 0x310 (8)
	struct FSoftObjectPath HighFrequencyNoiseTextureName; // 0x318 (24)
	struct UTexture2D DefaultBokehTexture; // 0x330 (8)
	struct FSoftObjectPath DefaultBokehTextureName; // 0x338 (24)
	struct UTexture2D DefaultBloomKernelTexture; // 0x350 (8)
	struct FSoftObjectPath DefaultBloomKernelTextureName; // 0x358 (24)
	struct UMaterial WireframeMaterial; // 0x370 (8)
	struct FString WireframeMaterialName; // 0x378 (16)
	struct UMaterial DebugMeshMaterial; // 0x388 (8)
	struct FSoftObjectPath DebugMeshMaterialName; // 0x390 (24)
	struct UMaterial EmissiveMeshMaterial; // 0x3A8 (8)
	struct FSoftObjectPath EmissiveMeshMaterialName; // 0x3B0 (24)
	struct UMaterial LevelColorationLitMaterial; // 0x3C8 (8)
	struct FString LevelColorationLitMaterialName; // 0x3D0 (16)
	struct UMaterial LevelColorationUnlitMaterial; // 0x3E0 (8)
	struct FString LevelColorationUnlitMaterialName; // 0x3E8 (16)
	struct UMaterial LightingTexelDensityMaterial; // 0x3F8 (8)
	struct FString LightingTexelDensityName; // 0x400 (16)
	struct UMaterial ShadedLevelColorationLitMaterial; // 0x410 (8)
	struct FString ShadedLevelColorationLitMaterialName; // 0x418 (16)
	struct UMaterial ShadedLevelColorationUnlitMaterial; // 0x428 (8)
	struct FString ShadedLevelColorationUnlitMaterialName; // 0x430 (16)
	struct UMaterial RemoveSurfaceMaterial; // 0x440 (8)
	struct FSoftObjectPath RemoveSurfaceMaterialName; // 0x448 (24)
	struct UMaterial VertexColorMaterial; // 0x460 (8)
	struct FString VertexColorMaterialName; // 0x468 (16)
	struct UMaterial VertexColorViewModeMaterial_ColorOnly; // 0x478 (8)
	struct FString VertexColorViewModeMaterialName_ColorOnly; // 0x480 (16)
	struct UMaterial VertexColorViewModeMaterial_AlphaAsColor; // 0x490 (8)
	struct FString VertexColorViewModeMaterialName_AlphaAsColor; // 0x498 (16)
	struct UMaterial VertexColorViewModeMaterial_RedOnly; // 0x4A8 (8)
	struct FString VertexColorViewModeMaterialName_RedOnly; // 0x4B0 (16)
	struct UMaterial VertexColorViewModeMaterial_GreenOnly; // 0x4C0 (8)
	struct FString VertexColorViewModeMaterialName_GreenOnly; // 0x4C8 (16)
	struct UMaterial VertexColorViewModeMaterial_BlueOnly; // 0x4D8 (8)
	struct FString VertexColorViewModeMaterialName_BlueOnly; // 0x4E0 (16)
	struct FSoftObjectPath DebugEditorMaterialName; // 0x4F0 (24)
	struct UMaterial ConstraintLimitMaterial; // 0x508 (8)
	struct UMaterialInstanceDynamic ConstraintLimitMaterialX; // 0x510 (8)
	struct UMaterialInstanceDynamic ConstraintLimitMaterialXAxis; // 0x518 (8)
	struct UMaterialInstanceDynamic ConstraintLimitMaterialY; // 0x520 (8)
	struct UMaterialInstanceDynamic ConstraintLimitMaterialYAxis; // 0x528 (8)
	struct UMaterialInstanceDynamic ConstraintLimitMaterialZ; // 0x530 (8)
	struct UMaterialInstanceDynamic ConstraintLimitMaterialZAxis; // 0x538 (8)
	struct UMaterialInstanceDynamic ConstraintLimitMaterialPrismatic; // 0x540 (8)
	struct UMaterial InvalidLightmapSettingsMaterial; // 0x548 (8)
	struct FSoftObjectPath InvalidLightmapSettingsMaterialName; // 0x550 (24)
	struct UMaterial PreviewShadowsIndicatorMaterial; // 0x568 (8)
	struct FSoftObjectPath PreviewShadowsIndicatorMaterialName; // 0x570 (24)
	struct UMaterial ArrowMaterial; // 0x588 (8)
	struct UMaterialInstanceDynamic ArrowMaterialYellow; // 0x590 (8)
	struct FSoftObjectPath ArrowMaterialName; // 0x598 (24)
	struct FLinearColor LightingOnlyBrightness; // 0x5B0 (16)
	struct TArray<struct FLinearColor> ShaderComplexityColors; // 0x5C0 (16)
	struct TArray<struct FLinearColor> QuadComplexityColors; // 0x5D0 (16)
	struct TArray<struct FLinearColor> LightComplexityColors; // 0x5E0 (16)
	struct TArray<struct FLinearColor> StationaryLightOverlapColors; // 0x5F0 (16)
	struct TArray<struct FLinearColor> LODColorationColors; // 0x600 (16)
	struct TArray<struct FLinearColor> HLODColorationColors; // 0x610 (16)
	struct TArray<struct FLinearColor> StreamingAccuracyColors; // 0x620 (16)
	float MaxPixelShaderAdditiveComplexityCount; // 0x630 (4)
	float MaxES3PixelShaderAdditiveComplexityCount; // 0x634 (4)
	float MinLightMapDensity; // 0x638 (4)
	float IdealLightMapDensity; // 0x63C (4)
	float MaxLightMapDensity; // 0x640 (4)
	char bRenderLightMapDensityGrayscale : 1; // 0x644 (1)
	char pad_634_1 : 7; // 0x634 (1)
	float RenderLightMapDensityGrayscaleScale; // 0x648 (4)
	float RenderLightMapDensityColorScale; // 0x64C (4)
	struct FLinearColor LightMapDensityVertexMappedColor; // 0x650 (16)
	struct FLinearColor LightMapDensitySelectedColor; // 0x660 (16)
	struct TArray<struct FStatColorMapping> StatColorMappings; // 0x670 (16)
	struct UPhysicalMaterial DefaultPhysMaterial; // 0x680 (8)
	struct FSoftObjectPath DefaultPhysMaterialName; // 0x688 (24)
	struct TArray<struct FGameNameRedirect> ActiveGameNameRedirects; // 0x6A0 (16)
	struct TArray<struct FClassRedirect> ActiveClassRedirects; // 0x6B0 (16)
	struct TArray<struct FPluginRedirect> ActivePluginRedirects; // 0x6C0 (16)
	struct TArray<struct FStructRedirect> ActiveStructRedirects; // 0x6D0 (16)
	struct UTexture2D PreIntegratedSkinBRDFTexture; // 0x6E0 (8)
	struct FSoftObjectPath PreIntegratedSkinBRDFTextureName; // 0x6E8 (24)
	struct UTexture2D BlueNoiseTexture; // 0x700 (8)
	struct FSoftObjectPath BlueNoiseTextureName; // 0x708 (24)
	struct UTexture2D MiniFontTexture; // 0x720 (8)
	struct FSoftObjectPath MiniFontTextureName; // 0x728 (24)
	struct UTexture WeightMapPlaceholderTexture; // 0x740 (8)
	struct FSoftObjectPath WeightMapPlaceholderTextureName; // 0x748 (24)
	struct UTexture2D LightMapDensityTexture; // 0x760 (8)
	struct FSoftObjectPath LightMapDensityTextureName; // 0x768 (24)
	struct UGameViewportClient GameViewport; // 0x788 (8)
	struct TArray<struct FString> DeferredCommands; // 0x790 (16)
	int32_t TickCycles; // 0x7A0 (4)
	int32_t GameCycles; // 0x7A4 (4)
	int32_t ClientCycles; // 0x7A8 (4)
	float NearClipPlane; // 0x7AC (4)
	char bHardwareSurveyEnabled : 1; // 0x7B0 (1)
	char pad_795_1 : 7; // 0x795 (1)
	char pad_796_0 : 1; // 0x796 (1)
	char bSubtitlesEnabled : 1; // 0x7B0 (1)
	char pad_796_2 : 6; // 0x796 (1)
	char pad_797_0 : 2; // 0x797 (1)
	char bSubtitlesForcedOff : 1; // 0x7B0 (1)
	char pad_797_3 : 5; // 0x797 (1)
	int32_t MaximumLoopIterationCount; // 0x7B4 (4)
	char bCanBlueprintsTickByDefault : 1; // 0x7B8 (1)
	char pad_79C_1 : 7; // 0x79C (1)
	char pad_79D_0 : 1; // 0x79D (1)
	char bOptimizeAnimBlueprintMemberVariableAccess : 1; // 0x7B8 (1)
	char pad_79D_2 : 6; // 0x79D (1)
	char pad_79E_0 : 2; // 0x79E (1)
	char bAllowMultiThreadedAnimationUpdate : 1; // 0x7B8 (1)
	char pad_79E_3 : 5; // 0x79E (1)
	char pad_79F_0 : 3; // 0x79F (1)
	char bEnableEditorPSysRealtimeLOD : 1; // 0x7B8 (1)
	char pad_79F_4 : 4; // 0x79F (1)
	char pad_7A0_0 : 5; // 0x7A0 (1)
	char bSmoothFrameRate : 1; // 0x7B8 (1)
	char pad_7A0_6 : 2; // 0x7A0 (1)
	char pad_7A1_0 : 6; // 0x7A1 (1)
	char bUseFixedFrameRate : 1; // 0x7B8 (1)
	char pad_7A1_7 : 1; // 0x7A1 (1)
	float FixedFrameRate; // 0x7BC (4)
	struct FFloatRange SmoothedFrameRateRange; // 0x7C0 (16)
	struct UEngineCustomTimeStep CustomTimeStep; // 0x7D0 (8)
	struct FSoftClassPath CustomTimeStepClassName; // 0x7F8 (24)
	struct UTimecodeProvider TimecodeProvider; // 0x810 (8)
	struct FSoftClassPath TimecodeProviderClassName; // 0x838 (24)
	bool bGenerateDefaultTimecode; // 0x850 (1)
	struct FFrameRate GenerateDefaultTimecodeFrameRate; // 0x854 (8)
	float GenerateDefaultTimecodeFrameDelay; // 0x85C (4)
	char bCheckForMultiplePawnsSpawnedInAFrame : 1; // 0x860 (1)
	char pad_803_1 : 7; // 0x803 (1)
	int32_t NumPawnsAllowedToBeSpawnedInAFrame; // 0x864 (4)
	char bShouldGenerateLowQualityLightmaps : 1; // 0x868 (1)
	char pad_808_1 : 7; // 0x808 (1)
	struct FColor C_WorldBox; // 0x86C (4)
	struct FColor C_BrushWire; // 0x870 (4)
	struct FColor C_AddWire; // 0x874 (4)
	struct FColor C_SubtractWire; // 0x878 (4)
	struct FColor C_SemiSolidWire; // 0x87C (4)
	struct FColor C_NonSolidWire; // 0x880 (4)
	struct FColor C_WireBackground; // 0x884 (4)
	struct FColor C_ScaleBoxHi; // 0x888 (4)
	struct FColor C_VolumeCollision; // 0x88C (4)
	struct FColor C_BSPCollision; // 0x890 (4)
	struct FColor C_OrthoBackground; // 0x894 (4)
	struct FColor C_Volume; // 0x898 (4)
	struct FColor C_BrushShape; // 0x89C (4)
	float StreamingDistanceFactor; // 0x8A0 (4)
	struct FDirectoryPath GameScreenshotSaveDirectory; // 0x8A8 (16)
	enum class ETransitionType TransitionType; // 0x8B8 (1)
	struct FString TransitionDescription; // 0x8C0 (16)
	struct FString TransitionGameMode; // 0x8D0 (16)
	float MeshLODRange; // 0x8E0 (4)
	char bAllowMatureLanguage : 1; // 0x8E4 (1)
	char pad_876_1 : 7; // 0x876 (1)
	float CameraRotationThreshold; // 0x8E8 (4)
	float CameraTranslationThreshold; // 0x8EC (4)
	float PrimitiveProbablyVisibleTime; // 0x8F0 (4)
	float MaxOcclusionPixelsFraction; // 0x8F4 (4)
	char bPauseOnLossOfFocus : 1; // 0x8F8 (1)
	char pad_887_1 : 7; // 0x887 (1)
	int32_t MaxParticleResize; // 0x8FC (4)
	int32_t MaxParticleResizeWarn; // 0x900 (4)
	struct TArray<struct FDropNoteInfo> PendingDroppedNotes; // 0x908 (16)
	float NetClientTicksPerSecond; // 0x918 (4)
	float DisplayGamma; // 0x91C (4)
	float MinDesiredFrameRate; // 0x920 (4)
	struct FLinearColor DefaultSelectedMaterialColor; // 0x924 (16)
	struct FLinearColor SelectedMaterialColor; // 0x934 (16)
	struct FLinearColor SelectionOutlineColor; // 0x944 (16)
	struct FLinearColor SubduedSelectionOutlineColor; // 0x954 (16)
	struct FLinearColor SelectedMaterialColorOverride; // 0x964 (16)
	bool bIsOverridingSelectedColor; // 0x974 (1)
	char bEnableOnScreenDebugMessages : 1; // 0x978 (1)
	char pad_8FD_1 : 7; // 0x8FD (1)
	char pad_8FE_0 : 1; // 0x8FE (1)
	char bEnableOnScreenDebugMessagesDisplay : 1; // 0x978 (1)
	char pad_8FE_2 : 6; // 0x8FE (1)
	char pad_8FF_0 : 2; // 0x8FF (1)
	char bSuppressMapWarnings : 1; // 0x978 (1)
	char pad_8FF_3 : 5; // 0x8FF (1)
	char pad_900_0 : 3; // 0x900 (1)
	char bDisableAILogging : 1; // 0x978 (1)
	char pad_900_4 : 4; // 0x900 (1)
	uint32_t bEnableVisualLogRecordingOnStart; // 0x97C (4)
	int32_t ScreenSaverInhibitorSemaphore; // 0x984 (4)
	char bLockReadOnlyLevels : 1; // 0x988 (1)
	char pad_909_1 : 7; // 0x909 (1)
	struct FString ParticleEventManagerClassPath; // 0x990 (16)
	float SelectionHighlightIntensity; // 0x9A0 (4)
	float BSPSelectionHighlightIntensity; // 0x9A4 (4)
	float SelectionHighlightIntensityBillboards; // 0x9A8 (4)
	struct TArray<struct FNetDriverDefinition> NetDriverDefinitions; // 0xBF8 (16)
	struct TArray<struct FString> ServerActors; // 0xC08 (16)
	struct TArray<struct FString> RuntimeServerActors; // 0xC18 (16)
	float NetErrorLogInterval; // 0xC28 (4)
	char bStartedLoadMapMovie : 1; // 0xC2C (1)
	char pad_95A_1 : 7; // 0x95A (1)
	int32_t NextWorldContextHandle; // 0xC48 (4)
};

// Class Engine.GameViewportClient
class UGameViewportClient : public UScriptViewportClient {

public:

	struct UConsole ViewportConsole; // 0x40 (8)
	struct TArray<struct FDebugDisplayProperty> DebugProperties; // 0x48 (16)
	int32_t MaxSplitscreenPlayers; // 0x68 (4)
	struct UWorld World; // 0x78 (8)
	struct UGameInstance GameInstance; // 0x80 (8)

	void SSSwapControllers(); // Function Engine.GameViewportClient.SSSwapControllers(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x25D7410>
	void ShowTitleSafeArea(); // Function Engine.GameViewportClient.ShowTitleSafeArea(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x25D7430>
	void SetConsoleTarget(int32_t PlayerIndex); // Function Engine.GameViewportClient.SetConsoleTarget(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32CFEF0>
};

// Class Engine.ChildActorComponent
class UChildActorComponent : public USceneComponent {

public:

	struct UClass* ChildActorClass; // 0x1F0 (8)
	struct UActor ChildActor; // 0x1F8 (8)
	struct UActor ChildActorTemplate; // 0x200 (8)

	void SetChildActorClass(struct UClass* InClass); // Function Engine.ChildActorComponent.SetChildActorClass(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A5000>
};

// Class Engine.ParticleModule
class UParticleModule : public Object {

public:

	char bSpawnModule : 1; // 0x28 (1)
	char bUpdateModule : 1; // 0x28 (1)
	char bFinalUpdateModule : 1; // 0x28 (1)
	char bUpdateForGPUEmitter : 1; // 0x28 (1)
	char bCurvesAsColor : 1; // 0x28 (1)
	char b3DDrawMode : 1; // 0x28 (1)
	char bSupported3DDrawMode : 1; // 0x28 (1)
	char bEnabled : 1; // 0x28 (1)
	char bEditable : 1; // 0x29 (1)
	char LODDuplicate : 1; // 0x29 (1)
	char bSupportsRandomSeed : 1; // 0x29 (1)
	char bRequiresLoopingNotification : 1; // 0x29 (1)
	char pad_29_4 : 4; // 0x29 (1)
	char LODValidity; // 0x2A (1)
};

// Class Engine.ParticleModuleCollision
class UParticleModuleCollision : public UParticleModuleCollisionBase {

public:

	struct FRawDistributionVector DampingFactor; // 0x30 (72)
	struct FRawDistributionVector DampingFactorRotation; // 0x78 (72)
	struct FRawDistributionFloat MaxCollisions; // 0xC0 (48)
	enum class EParticleCollisionComplete CollisionCompletionOption; // 0xF0 (1)
	struct TArray<enum class EObjectTypeQuery> CollisionTypes; // 0xF8 (16)
	char bApplyPhysics : 1; // 0x110 (1)
	char pad_101_1 : 7; // 0x101 (1)
	char pad_102_0 : 1; // 0x102 (1)
	char bIgnoreTriggerVolumes : 1; // 0x110 (1)
	char pad_102_2 : 6; // 0x102 (1)
	struct FRawDistributionFloat ParticleMass; // 0x118 (48)
	float DirScalar; // 0x148 (4)
	char bPawnsDoNotDecrementCount : 1; // 0x14C (1)
	char pad_137_1 : 7; // 0x137 (1)
	char pad_138_0 : 1; // 0x138 (1)
	char bOnlyVerticalNormalsDecrementCount : 1; // 0x14C (1)
	char pad_138_2 : 6; // 0x138 (1)
	float VerticalFudgeFactor; // 0x150 (4)
	struct FRawDistributionFloat DelayAmount; // 0x158 (48)
	char bDropDetail : 1; // 0x188 (1)
	char pad_16D_1 : 7; // 0x16D (1)
	char pad_16E_0 : 1; // 0x16E (1)
	char bCollideOnlyIfVisible : 1; // 0x188 (1)
	char pad_16E_2 : 6; // 0x16E (1)
	char pad_16F_0 : 2; // 0x16F (1)
	char bIgnoreSourceActor : 1; // 0x188 (1)
	char pad_16F_3 : 5; // 0x16F (1)
	float MaxCollisionDistance; // 0x18C (4)
};

// Class Engine.SkyLight
class ASkyLight : public AInfo {

public:

	struct USkyLightComponent LightComponent; // 0x220 (8)
	char bEnabled : 1; // 0x228 (1)

	void OnRep_bEnabled(); // Function Engine.SkyLight.OnRep_bEnabled(Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32BE150>
};

// Class Engine.InstancedStaticMeshComponent
class UInstancedStaticMeshComponent : public UStaticMeshComponent {

public:

	struct TArray<struct FInstancedStaticMeshInstanceData> PerInstanceSMData; // 0x498 (16)
	int32_t NumCustomDataFloats; // 0x4A8 (4)
	struct TArray<float> PerInstanceSMCustomData; // 0x4B0 (16)
	int32_t InstancingRandomSeed; // 0x4C0 (4)
	int32_t InstanceStartCullDistance; // 0x4C4 (4)
	int32_t InstanceEndCullDistance; // 0x4C8 (4)
	struct TArray<int32_t> InstanceReorderTable; // 0x4D0 (16)
	int32_t NumPendingLightmaps; // 0x528 (4)
	struct TArray<struct FInstancedStaticMeshMappingInfo> CachedMappings; // 0x530 (16)

	bool UpdateInstanceTransform(int32_t InstanceIndex, struct FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // Function Engine.InstancedStaticMeshComponent.UpdateInstanceTransform(Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32DAF30>
	bool SetCustomDataValue(int32_t InstanceIndex, int32_t CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty); // Function Engine.InstancedStaticMeshComponent.SetCustomDataValue(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32DADE0>
	void SetCullDistances(int32_t StartCullDistance, int32_t EndCullDistance); // Function Engine.InstancedStaticMeshComponent.SetCullDistances(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32DAD20>
	bool RemoveInstance(int32_t InstanceIndex); // Function Engine.InstancedStaticMeshComponent.RemoveInstance(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32DAC60>
	bool GetInstanceTransform(int32_t InstanceIndex, struct FTransform& OutInstanceTransform, bool bWorldSpace); // Function Engine.InstancedStaticMeshComponent.GetInstanceTransform(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32DA310>
	struct TArray<int32_t> GetInstancesOverlappingSphere(struct FVector& Center, float Radius, bool bSphereInWorldSpace); // Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingSphere(Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32DA5A0>
	struct TArray<int32_t> GetInstancesOverlappingBox(struct FBox& Box, bool bBoxInWorldSpace); // Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingBox(Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32DA470>
	int32_t GetInstanceCount(); // Function Engine.InstancedStaticMeshComponent.GetInstanceCount(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32DA2E0>
	void ClearInstances(); // Function Engine.InstancedStaticMeshComponent.ClearInstances(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32D9AC0>
	bool BatchUpdateInstancesTransforms(int32_t StartInstanceIndex, struct TArray<struct FTransform>& NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // Function Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransforms(Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32D98D0>
	bool BatchUpdateInstancesTransform(int32_t StartInstanceIndex, int32_t NumInstances, struct FTransform& NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // Function Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransform(Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32D96A0>
	int32_t AddInstanceWorldSpace(struct FTransform& WorldTransform); // Function Engine.InstancedStaticMeshComponent.AddInstanceWorldSpace(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32D95C0>
	int32_t AddInstance(struct FTransform& InstanceTransform); // Function Engine.InstancedStaticMeshComponent.AddInstance(Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32D94E0>
};

// Class Engine.HierarchicalInstancedStaticMeshComponent
class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent {

public:

	struct TArray<int32_t> SortedInstances; // 0x550 (16)
	int32_t NumBuiltInstances; // 0x560 (4)
	struct FBox BuiltInstanceBounds; // 0x568 (28)
	struct FBox UnbuiltInstanceBounds; // 0x584 (28)
	struct TArray<struct FBox> UnbuiltInstanceBoundsList; // 0x5A0 (16)
	char bEnableDensityScaling : 1; // 0x5B0 (1)
	char pad_59C_1 : 7; // 0x59C (1)
	int32_t OcclusionLayerNumNodes; // 0x5B8 (4)
	struct FBoxSphereBounds CacheMeshExtendedBounds; // 0x5BC (28)
	bool bDisableCollision; // 0x5D8 (1)
	int32_t InstanceCountToRender; // 0x5DC (4)

	bool RemoveInstances(struct TArray<int32_t>& InstancesToRemove); // Function Engine.HierarchicalInstancedStaticMeshComponent.RemoveInstances(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32D5660>
};

// Class Engine.StaticMeshActor
class AStaticMeshActor : public UActor {

public:

	struct UStaticMeshComponent StaticMeshComponent; // 0x220 (8)
	bool bStaticMeshReplicateMovement; // 0x228 (1)
	enum class ENavDataGatheringMode NavigationGeometryGatheringMode; // 0x229 (1)

	void SetMobility(enum class EComponentMobility InMobility); // Function Engine.StaticMeshActor.SetMobility(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C0190>
};

// Class Engine.MaterialInterface
class UMaterialInterface : public Object {

public:

	struct USubsurfaceProfile SubsurfaceProfile; // 0x38 (8)
	struct FLightmassMaterialInterfaceSettings LightmassSettings; // 0x50 (16)
	struct TArray<struct FMaterialTextureInfo> TextureStreamingData; // 0x60 (16)
	struct TArray<struct UAssetUserData> AssetUserData; // 0x70 (16)

	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int32_t CinematicTextureGroups, bool bFastResponse); // Function Engine.MaterialInterface.SetForceMipLevelsToBeResident(RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3353430>
	struct UPhysicalMaterialMask GetPhysicalMaterialMask(); // Function Engine.MaterialInterface.GetPhysicalMaterialMask(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x2A12CE0>
	struct UPhysicalMaterial GetPhysicalMaterialFromMap(int32_t Index); // Function Engine.MaterialInterface.GetPhysicalMaterialFromMap(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3352BE0>
	struct UPhysicalMaterial GetPhysicalMaterial(); // Function Engine.MaterialInterface.GetPhysicalMaterial(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x2A12D10>
	struct FMaterialParameterInfo GetParameterInfo(enum class EMaterialParameterAssociation Association, struct FName ParameterName, struct UMaterialFunctionInterface LayerFunction); // Function Engine.MaterialInterface.GetParameterInfo(Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3352AD0>
	struct UMaterial GetBaseMaterial(); // Function Engine.MaterialInterface.GetBaseMaterial(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3352AA0>
};

// Class Engine.MaterialInstance
class UMaterialInstance : public UMaterialInterface {

public:

	struct UPhysicalMaterial PhysMaterial; // 0x88 (8)
	struct UPhysicalMaterial PhysicalMaterialMap[0x8]; // 0x90 (64)
	struct UMaterialInterface Parent; // 0xD0 (8)
	char bHasStaticPermutationResource : 1; // 0xD8 (1)
	char bOverrideSubsurfaceProfile : 1; // 0xD8 (1)
	char pad_D8_2 : 6; // 0xD8 (1)
	struct TArray<struct FScalarParameterValue> ScalarParameterValues; // 0xE0 (16)
	struct TArray<struct FVectorParameterValue> VectorParameterValues; // 0xF0 (16)
	struct TArray<struct FTextureParameterValue> TextureParameterValues; // 0x100 (16)
	struct TArray<struct FRuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues; // 0x110 (16)
	struct TArray<struct FFontParameterValue> FontParameterValues; // 0x120 (16)
	struct FMaterialInstanceBasePropertyOverrides BasePropertyOverrides; // 0x130 (8)
	struct FStaticParameterSet StaticParameters; // 0x148 (64)
	struct FMaterialCachedParameters CachedLayerParameters; // 0x188 (416)
	struct TArray<struct Object> CachedReferencedTextures; // 0x328 (16)
};

// Class Engine.MaterialInstanceConstant
class UMaterialInstanceConstant : public UMaterialInstance {

public:

	struct UPhysicalMaterialMask PhysMaterialMask; // 0x408 (8)

	struct FLinearColor K2_GetVectorParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceConstant.K2_GetVectorParameterValue(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3353120>
	struct UTexture K2_GetTextureParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceConstant.K2_GetTextureParameterValue(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3352F50>
	float K2_GetScalarParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceConstant.K2_GetScalarParameterValue(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3352D50>
};

// Class Engine.BlueprintGeneratedClass
class UBlueprintGeneratedClass : public UClass {

public:

	int32_t NumReplicatedProperties; // 0x230 (4)
	char bHasNativizedParent : 1; // 0x234 (1)
	char bHasCookedComponentInstancingData : 1; // 0x234 (1)
	char pad_234_2 : 6; // 0x234 (1)
	struct TArray<struct UDynamicBlueprintBinding> DynamicBindingObjects; // 0x238 (16)
	struct TArray<struct UActorComponent> ComponentTemplates; // 0x248 (16)
	struct TArray<struct UTimelineTemplate> Timelines; // 0x258 (16)
	struct TArray<struct FBPComponentClassOverride> ComponentClassOverrides; // 0x268 (16)
	struct USimpleConstructionScript SimpleConstructionScript; // 0x278 (8)
	struct UInheritableComponentHandler InheritableComponentHandler; // 0x280 (8)
	struct UStructProperty UberGraphFramePointerProperty; // 0x288 (8)
	struct UFunction UberGraphFunction; // 0x298 (8)
	struct TMap<struct FName, struct FBlueprintCookedComponentInstancingData> CookedComponentInstancingData; // 0x2A0 (80)
};

// Class Engine.CameraComponent
class UCameraComponent : public USceneComponent {

public:

	float FieldOfView; // 0x1F0 (4)
	float OrthoWidth; // 0x1F4 (4)
	float OrthoNearClipPlane; // 0x1F8 (4)
	float OrthoFarClipPlane; // 0x1FC (4)
	float AspectRatio; // 0x200 (4)
	char bConstrainAspectRatio : 1; // 0x204 (1)
	char bUseFieldOfViewForLOD : 1; // 0x204 (1)
	char bLockToHmd : 1; // 0x204 (1)
	char bUsePawnControlRotation : 1; // 0x204 (1)
	char pad_204_4 : 4; // 0x204 (1)
	enum class ECameraProjectionMode ProjectionMode; // 0x205 (1)
	float PostProcessBlendWeight; // 0x240 (4)
	struct FPostProcessSettings PostProcessSettings; // 0x270 (1376)

	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD); // Function Engine.CameraComponent.SetUseFieldOfViewForLOD(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32969D0>
	void SetProjectionMode(enum class ECameraProjectionMode InProjectionMode); // Function Engine.CameraComponent.SetProjectionMode(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32968D0>
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight); // Function Engine.CameraComponent.SetPostProcessBlendWeight(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3296850>
	void SetOrthoWidth(float InOrthoWidth); // Function Engine.CameraComponent.SetOrthoWidth(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32967D0>
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane); // Function Engine.CameraComponent.SetOrthoNearClipPlane(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3296750>
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane); // Function Engine.CameraComponent.SetOrthoFarClipPlane(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32966D0>
	void SetFieldOfView(float InFieldOfView); // Function Engine.CameraComponent.SetFieldOfView(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3296650>
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio); // Function Engine.CameraComponent.SetConstraintAspectRatio(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3296540>
	void SetAspectRatio(float InAspectRatio); // Function Engine.CameraComponent.SetAspectRatio(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32964C0>
	void RemoveBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject); // Function Engine.CameraComponent.RemoveBlendable(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3296390>
	void OnCameraMeshHiddenChanged(); // Function Engine.CameraComponent.OnCameraMeshHiddenChanged(Final|Native|Protected|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0xFBCF20>
	void GetCameraView(float DeltaTime, struct FMinimalViewInfo& DesiredView); // Function Engine.CameraComponent.GetCameraView(Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3296220>
	void AddOrUpdateBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight); // Function Engine.CameraComponent.AddOrUpdateBlendable(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3295FF0>
};

// Class Engine.SoundBase
class USoundBase : public Object {

public:

	struct USoundClass SoundClassObject; // 0x28 (8)
	char bDebug : 1; // 0x30 (1)
	char bOverrideConcurrency : 1; // 0x30 (1)
	char bOutputToBusOnly : 1; // 0x30 (1)
	char bHasDelayNode : 1; // 0x30 (1)
	char bHasConcatenatorNode : 1; // 0x30 (1)
	char bBypassVolumeScaleForPriority : 1; // 0x30 (1)
	char pad_30_6 : 2; // 0x30 (1)
	enum class EVirtualizationMode VirtualizationMode; // 0x31 (1)
	struct TSet<struct USoundConcurrency> ConcurrencySet; // 0x88 (80)
	struct FSoundConcurrencySettings ConcurrencyOverrides; // 0xD8 (32)
	float Duration; // 0xF8 (4)
	float MaxDistance; // 0xFC (4)
	float TotalSamples; // 0x100 (4)
	float Priority; // 0x104 (4)
	struct USoundAttenuation AttenuationSettings; // 0x108 (8)
	struct FSoundModulation Modulation; // 0x110 (16)
	struct USoundSubmixBase SoundSubmixObject; // 0x120 (8)
	struct TArray<struct FSoundSubmixSendInfo> SoundSubmixSends; // 0x128 (16)
	struct USoundEffectSourcePresetChain SourceEffectChain; // 0x138 (8)
	struct TArray<struct FSoundSourceBusSendInfo> BusSends; // 0x140 (16)
	struct TArray<struct FSoundSourceBusSendInfo> PreEffectBusSends; // 0x150 (16)
};

// Class Engine.SoundWave
class USoundWave : public USoundBase {

public:

	int32_t CompressionQuality; // 0x160 (4)
	int32_t StreamingPriority; // 0x164 (4)
	enum class ESoundwaveSampleRateSettings SampleRateQuality; // 0x168 (1)
	enum class ESoundGroup SoundGroup; // 0x16A (1)
	char bLooping : 1; // 0x16B (1)
	char pad_16A_1 : 7; // 0x16A (1)
	char pad_16B_0 : 1; // 0x16B (1)
	char bStreaming : 1; // 0x16B (1)
	char bSeekableStreaming : 1; // 0x16B (1)
	char pad_16B_3 : 5; // 0x16B (1)
	enum class ESoundWaveLoadingBehavior LoadingBehavior; // 0x16C (1)
	char pad_16D_0 : 5; // 0x16D (1)
	char bMature : 1; // 0x16D (1)
	char bManualWordWrap : 1; // 0x16D (1)
	char bSingleLine : 1; // 0x16D (1)
	char bIsAmbisonics : 1; // 0x16E (1)
	char pad_16E_1 : 7; // 0x16E (1)
	struct TArray<float> FrequenciesToAnalyze; // 0x170 (16)
	struct TArray<struct FSoundWaveSpectralTimeData> CookedSpectralTimeData; // 0x180 (16)
	struct TArray<struct FSoundWaveEnvelopeTimeData> CookedEnvelopeTimeData; // 0x190 (16)
	int32_t InitialChunkSize; // 0x1A0 (4)
	struct FString SpokenText; // 0x1E8 (16)
	float SubtitlePriority; // 0x1F8 (4)
	float Volume; // 0x1FC (4)
	float Pitch; // 0x200 (4)
	int32_t NumChannels; // 0x204 (4)
	int32_t SampleRate; // 0x208 (4)
	struct TArray<struct FSubtitleCue> Subtitles; // 0x218 (16)
	struct UCurveTable Curves; // 0x228 (8)
	struct UCurveTable InternalCurves; // 0x230 (8)
};

// Class Engine.BlueprintCore
class UBlueprintCore : public Object {

public:

	struct UClass* SkeletonGeneratedClass; // 0x28 (8)
	struct UClass* GeneratedClass; // 0x30 (8)
	bool bLegacyNeedToPurgeSkelRefs; // 0x38 (1)
	struct FGuid BlueprintGuid; // 0x3C (16)
};

// Class Engine.Blueprint
class UBlueprint : public UBlueprintCore {

public:

	struct UClass* ParentClass; // 0x50 (8)
	enum class EBlueprintType BlueprintType; // 0x58 (1)
	char bRecompileOnLoad : 1; // 0x59 (1)
	char bHasBeenRegenerated : 1; // 0x59 (1)
	char bIsRegeneratingOnLoad : 1; // 0x59 (1)
	char pad_59_3 : 5; // 0x59 (1)
	int32_t BlueprintSystemVersion; // 0x5C (4)
	struct USimpleConstructionScript SimpleConstructionScript; // 0x60 (8)
	struct TArray<struct UActorComponent> ComponentTemplates; // 0x68 (16)
	struct TArray<struct UTimelineTemplate> Timelines; // 0x78 (16)
	struct TArray<struct FBPComponentClassOverride> ComponentClassOverrides; // 0x88 (16)
	struct UInheritableComponentHandler InheritableComponentHandler; // 0x98 (8)
};

// Class Engine.Channel
class UChannel : public Object {

public:

	struct UNetConnection Connection; // 0x28 (8)
};

// Class Engine.ActorChannel
class UActorChannel : public UChannel {

public:

	struct UActor Actor; // 0x70 (8)
	struct TArray<struct Object> CreateSubObjects; // 0x160 (16)
};

// Class Engine.AnimationAsset
class UAnimationAsset : public Object {

public:

	struct USkeleton Skeleton; // 0x38 (8)
	struct TArray<struct UAnimMetaData> MetaData; // 0x60 (16)
	struct TArray<struct UAssetUserData> AssetUserData; // 0x70 (16)
};

// Class Engine.BlendSpaceBase
class UBlendSpaceBase : public UAnimationAsset {

public:

	bool bRotationBlendInMeshSpace; // 0x88 (1)
	float AnimLength; // 0x8C (4)
	struct FInterpolationParameter InterpolationParam[0x3]; // 0x90 (24)
	float TargetWeightInterpolationSpeedPerSec; // 0xA8 (4)
	enum class ENotifyTriggerMode NotifyTriggerMode; // 0xAC (1)
	struct TArray<struct FPerBoneInterpolation> PerBoneBlend; // 0xB0 (16)
	int32_t SampleIndexWithMarkers; // 0xC0 (4)
	struct TArray<struct FBlendSample> SampleData; // 0xC8 (16)
	struct TArray<struct FEditorElement> GridSamples; // 0xD8 (16)
	struct FBlendParameter BlendParameters[0x3]; // 0xE8 (96)
};

// Class Engine.BlendSpace
class UBlendSpace : public UBlendSpaceBase {

public:

	enum class EBlendSpaceAxis AxisToScaleAnimation; // 0x148 (1)
};

// Class Engine.BlendSpace1D
class UBlendSpace1D : public UBlendSpaceBase {

public:

	bool bScaleAnimation; // 0x148 (1)
};

// Class Engine.AISystemBase
class UAISystemBase : public Object {

public:

	struct FSoftClassPath AISystemClassName; // 0x28 (24)
	struct FName AISystemModuleName; // 0x40 (8)
	bool bInstantiateAISystemOnClient; // 0x50 (1)
};

// Class Engine.AmbientSound
class AAmbientSound : public UActor {

public:

	struct UAudioComponent AudioComponent; // 0x220 (8)

	void Stop(); // Function Engine.AmbientSound.Stop(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x326AC50>
	void Play(float StartTime); // Function Engine.AmbientSound.Play(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x326A730>
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel); // Function Engine.AmbientSound.FadeOut(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x326A510>
	void FadeIn(float FadeInDuration, float FadeVolumeLevel); // Function Engine.AmbientSound.FadeIn(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x326A450>
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel); // Function Engine.AmbientSound.AdjustVolume(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x326A300>
};

// Class Engine.AnimationSettings
class UAnimationSettings : public UDeveloperSettings {

public:

	int32_t CompressCommandletVersion; // 0x38 (4)
	struct TArray<struct FString> KeyEndEffectorsMatchNameArray; // 0x40 (16)
	bool ForceRecompression; // 0x50 (1)
	bool bOnlyCheckForMissingSkeletalMeshes; // 0x51 (1)
	bool bForceBelowThreshold; // 0x52 (1)
	bool bFirstRecompressUsingCurrentOrDefault; // 0x53 (1)
	bool bRaiseMaxErrorToExisting; // 0x54 (1)
	bool bEnablePerformanceLog; // 0x55 (1)
	bool bStripAnimationDataOnDedicatedServer; // 0x56 (1)
	bool bTickAnimationOnSkeletalMeshInit; // 0x57 (1)
};

// Class Engine.AnimBlueprint
class UAnimBlueprint : public UBlueprint {

public:

	struct USkeleton TargetSkeleton; // 0xA8 (8)
	struct TArray<struct FAnimGroupInfo> Groups; // 0xB0 (16)
	bool bUseMultiThreadedAnimationUpdate; // 0xC0 (1)
	bool bWarnAboutBlueprintUsage; // 0xC1 (1)
};

// Class Engine.AnimBlueprintGeneratedClass
class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass {

public:

	struct TArray<struct FBakedAnimationStateMachine> BakedStateMachines; // 0x330 (16)
	struct USkeleton TargetSkeleton; // 0x340 (8)
	struct TArray<struct FAnimNotifyEvent> AnimNotifies; // 0x348 (16)
	struct TMap<struct FName, struct FCachedPoseIndices> OrderedSavedPoseIndicesMap; // 0x358 (80)
	struct TArray<struct FName> SyncGroupNames; // 0x428 (16)
	struct TArray<struct FExposedValueHandler> EvaluateGraphExposedInputs; // 0x438 (16)
	struct TMap<struct FName, struct FGraphAssetPlayerInformation> GraphAssetPlayerInformation; // 0x448 (80)
	struct TMap<struct FName, struct FAnimGraphBlendOptions> GraphBlendOptions; // 0x498 (80)
};

// Class Engine.AnimBoneCompressionCodec
class UAnimBoneCompressionCodec : public Object {

public:

	struct FString Description; // 0x28 (16)
};

// Class Engine.AnimBoneCompressionSettings
class UAnimBoneCompressionSettings : public Object {

public:

	struct TArray<struct UAnimBoneCompressionCodec> Codecs; // 0x28 (16)
};

// Class Engine.AnimClassData
class UAnimClassData : public Object {

public:

	struct TArray<struct FBakedAnimationStateMachine> BakedStateMachines; // 0x30 (16)
	struct USkeleton TargetSkeleton; // 0x40 (8)
	struct TArray<struct FAnimNotifyEvent> AnimNotifies; // 0x48 (16)
	struct TMap<struct FName, struct FCachedPoseIndices> OrderedSavedPoseIndicesMap; // 0x58 (80)
	struct TArray<struct FAnimBlueprintFunction> AnimBlueprintFunctions; // 0xA8 (16)
	struct TArray<struct FAnimBlueprintFunctionData> AnimBlueprintFunctionData; // 0xB8 (16)
	struct TArray<struct TFieldPath<FNone>> AnimNodeProperties; // 0xC8 (16)
	struct TArray<struct TFieldPath<FNone>> LinkedAnimGraphNodeProperties; // 0xE8 (16)
	struct TArray<struct TFieldPath<FNone>> LinkedAnimLayerNodeProperties; // 0x108 (16)
	struct TArray<struct TFieldPath<FNone>> PreUpdateNodeProperties; // 0x128 (16)
	struct TArray<struct TFieldPath<FNone>> DynamicResetNodeProperties; // 0x148 (16)
	struct TArray<struct TFieldPath<FNone>> StateMachineNodeProperties; // 0x168 (16)
	struct TArray<struct TFieldPath<FNone>> InitializationNodeProperties; // 0x188 (16)
	struct TMap<struct FName, struct FGraphAssetPlayerInformation> GraphNameAssetPlayers; // 0x1A8 (80)
	struct TArray<struct FName> SyncGroupNames; // 0x1F8 (16)
	struct TArray<struct FExposedValueHandler> EvaluateGraphExposedInputs; // 0x208 (16)
	struct TMap<struct FName, struct FAnimGraphBlendOptions> GraphBlendOptions; // 0x218 (80)
};

// Class Engine.AnimSequenceBase
class UAnimSequenceBase : public UAnimationAsset {

public:

	struct TArray<struct FAnimNotifyEvent> Notifies; // 0x80 (16)
	float SequenceLength; // 0x90 (4)
	float RateScale; // 0x94 (4)
	struct FRawCurveTracks RawCurveData; // 0x98 (16)

	float GetPlayLength(); // Function Engine.AnimSequenceBase.GetPlayLength(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x327C230>
};

// Class Engine.AnimComposite
class UAnimComposite : public UAnimCompositeBase {

public:

	struct FAnimTrack AnimationTrack; // 0xA8 (16)
};

// Class Engine.AnimCompress
class UAnimCompress : public UAnimBoneCompressionCodec {

public:

	char bNeedsSkeleton : 1; // 0x38 (1)
	char pad_38_1 : 7; // 0x38 (1)
	enum class AnimationCompressionFormat TranslationCompressionFormat; // 0x3C (1)
	enum class AnimationCompressionFormat RotationCompressionFormat; // 0x3D (1)
	enum class AnimationCompressionFormat ScaleCompressionFormat; // 0x3E (1)
};

// Class Engine.AnimCompress_RemoveLinearKeys
class UAnimCompress_RemoveLinearKeys : public UAnimCompress {

public:

	float MaxPosDiff; // 0x40 (4)
	float MaxAngleDiff; // 0x44 (4)
	float MaxScaleDiff; // 0x48 (4)
	float MaxEffectorDiff; // 0x4C (4)
	float MinEffectorDiff; // 0x50 (4)
	float EffectorDiffSocket; // 0x54 (4)
	float ParentKeyScale; // 0x58 (4)
	char bRetarget : 1; // 0x5C (1)
	char bActuallyFilterLinearKeys : 1; // 0x5C (1)
};

// Class Engine.AnimCompress_PerTrackCompression
class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys {

public:

	float MaxZeroingThreshold; // 0x60 (4)
	float MaxPosDiffBitwise; // 0x64 (4)
	float MaxAngleDiffBitwise; // 0x68 (4)
	float MaxScaleDiffBitwise; // 0x6C (4)
	struct TArray<enum class AnimationCompressionFormat> AllowedRotationFormats; // 0x70 (16)
	struct TArray<enum class AnimationCompressionFormat> AllowedTranslationFormats; // 0x80 (16)
	struct TArray<enum class AnimationCompressionFormat> AllowedScaleFormats; // 0x90 (16)
	char bResampleAnimation : 1; // 0xA0 (1)
	char pad_A0_1 : 7; // 0xA0 (1)
	float ResampledFramerate; // 0xA4 (4)
	int32_t MinKeysForResampling; // 0xA8 (4)
	char bUseAdaptiveError : 1; // 0xAC (1)
	char pad_A9_1 : 7; // 0xA9 (1)
	char pad_AA_0 : 1; // 0xAA (1)
	char bUseOverrideForEndEffectors : 1; // 0xAC (1)
	char pad_AA_2 : 6; // 0xAA (1)
	int32_t TrackHeightBias; // 0xB0 (4)
	float ParentingDivisor; // 0xB4 (4)
	float ParentingDivisorExponent; // 0xB8 (4)
	char bUseAdaptiveError2 : 1; // 0xBC (1)
	char pad_B7_1 : 7; // 0xB7 (1)
	float RotationErrorSourceRatio; // 0xC0 (4)
	float TranslationErrorSourceRatio; // 0xC4 (4)
	float ScaleErrorSourceRatio; // 0xC8 (4)
	float MaxErrorPerTrackRatio; // 0xCC (4)
	float PerturbationProbeSize; // 0xD0 (4)
};

// Class Engine.AnimCompress_RemoveEverySecondKey
class UAnimCompress_RemoveEverySecondKey : public UAnimCompress {

public:

	int32_t MinKeys; // 0x40 (4)
	char bStartAtSecondKey : 1; // 0x44 (1)
};

// Class Engine.AnimCompress_RemoveTrivialKeys
class UAnimCompress_RemoveTrivialKeys : public UAnimCompress {

public:

	float MaxPosDiff; // 0x40 (4)
	float MaxAngleDiff; // 0x44 (4)
	float MaxScaleDiff; // 0x48 (4)
};

// Class Engine.AnimCurveCompressionSettings
class UAnimCurveCompressionSettings : public Object {

public:

	struct UAnimCurveCompressionCodec Codec; // 0x28 (8)
};

// Class Engine.AnimMontage
class UAnimMontage : public UAnimCompositeBase {

public:

	struct FAlphaBlend BlendIn; // 0xA8 (48)
	float BlendInTime; // 0xD8 (4)
	struct FAlphaBlend BlendOut; // 0xE0 (48)
	float BlendOutTime; // 0x110 (4)
	float BlendOutTriggerTime; // 0x114 (4)
	struct FName SyncGroup; // 0x118 (8)
	int32_t SyncSlotIndex; // 0x120 (4)
	struct FMarkerSyncData MarkerData; // 0x128 (32)
	struct TArray<struct FCompositeSection> CompositeSections; // 0x148 (16)
	struct TArray<struct FSlotAnimationTrack> SlotAnimTracks; // 0x158 (16)
	struct TArray<struct FBranchingPoint> BranchingPoints; // 0x168 (16)
	bool bEnableRootMotionTranslation; // 0x178 (1)
	bool bEnableRootMotionRotation; // 0x179 (1)
	bool bEnableAutoBlendOut; // 0x17A (1)
	enum class ERootMotionRootLock RootMotionRootLock; // 0x17B (1)
	struct TArray<struct FBranchingPointMarker> BranchingPointMarkers; // 0x180 (16)
	struct TArray<int32_t> BranchingPointStateNotifyIndices; // 0x190 (16)
	struct FTimeStretchCurve TimeStretchCurve; // 0x1A0 (40)
	struct FName TimeStretchCurveName; // 0x1C8 (8)

	float GetDefaultBlendOutTime(); // Function Engine.AnimMontage.GetDefaultBlendOutTime(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x2935BD0>
};

// Class Engine.AnimNotify_PlayParticleEffect
class UAnimNotify_PlayParticleEffect : public UAnimNotify {

public:

	struct UParticleSystem PSTemplate; // 0x38 (8)
	struct FVector LocationOffset; // 0x40 (12)
	struct FRotator RotationOffset; // 0x4C (12)
	struct FVector Scale; // 0x58 (12)
	char Attached : 1; // 0x80 (1)
	char pad_64_1 : 7; // 0x64 (1)
	struct FName SocketName; // 0x84 (8)
};

// Class Engine.AnimNotify_PlaySound
class UAnimNotify_PlaySound : public UAnimNotify {

public:

	struct USoundBase Sound; // 0x38 (8)
	float VolumeMultiplier; // 0x40 (4)
	float PitchMultiplier; // 0x44 (4)
	char bFollow : 1; // 0x48 (1)
	char pad_48_1 : 7; // 0x48 (1)
	struct FName AttachName; // 0x4C (8)
};

// Class Engine.AnimNotifyState_TimedParticleEffect
class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState {

public:

	struct UParticleSystem PSTemplate; // 0x30 (8)
	struct FName SocketName; // 0x38 (8)
	struct FVector LocationOffset; // 0x40 (12)
	struct FRotator RotationOffset; // 0x4C (12)
	bool bDestroyAtEnd; // 0x58 (1)
};

// Class Engine.AnimNotifyState_Trail
class UAnimNotifyState_Trail : public UAnimNotifyState {

public:

	struct UParticleSystem PSTemplate; // 0x30 (8)
	struct FName FirstSocketName; // 0x38 (8)
	struct FName SecondSocketName; // 0x40 (8)
	enum class ETrailWidthMode WidthScaleMode; // 0x48 (1)
	struct FName WidthScaleCurve; // 0x4C (8)
	char bRecycleSpawnedSystems : 1; // 0x54 (1)

	struct UParticleSystem OverridePSTemplate(struct USkeletalMeshComponent MeshComp, struct UAnimSequenceBase Animation); // Function Engine.AnimNotifyState_Trail.OverridePSTemplate(Event|Public|BlueprintEvent|Const) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
};

// Class Engine.AnimSequence
class UAnimSequence : public UAnimSequenceBase {

public:

	int32_t NumFrames; // 0xA8 (4)
	struct TArray<struct FTrackToSkeletonMap> TrackToSkeletonMapTable; // 0xB0 (16)
	struct UAnimBoneCompressionSettings BoneCompressionSettings; // 0xD0 (8)
	struct UAnimCurveCompressionSettings CurveCompressionSettings; // 0xD8 (8)
	enum class EAdditiveAnimationType AdditiveAnimType; // 0x150 (1)
	enum class EAdditiveBasePoseType RefPoseType; // 0x151 (1)
	struct UAnimSequence RefPoseSeq; // 0x158 (8)
	int32_t RefFrameIndex; // 0x160 (4)
	struct FName RetargetSource; // 0x164 (8)
	enum class EAnimInterpolationType Interpolation; // 0x16C (1)
	bool bEnableRootMotion; // 0x16D (1)
	enum class ERootMotionRootLock RootMotionRootLock; // 0x16E (1)
	bool bForceRootLock; // 0x16F (1)
	bool bUseNormalizedRootMotionScale; // 0x170 (1)
	bool bRootMotionSettingsCopiedFromMontage; // 0x171 (1)
	struct TArray<struct FAnimSyncMarker> AuthoredSyncMarkers; // 0x178 (16)
};

// Class Engine.AnimSet
class UAnimSet : public Object {

public:

	char bAnimRotationOnly : 1; // 0x28 (1)
	char pad_28_1 : 7; // 0x28 (1)
	struct TArray<struct FName> TrackBoneNames; // 0x30 (16)
	struct TArray<struct FAnimSetMeshLinkup> LinkupCache; // 0x40 (16)
	struct TArray<char> BoneUseAnimTranslation; // 0x50 (16)
	struct TArray<char> ForceUseMeshTranslation; // 0x60 (16)
	struct TArray<struct FName> UseTranslationBoneNames; // 0x70 (16)
	struct TArray<struct FName> ForceMeshTranslationBoneNames; // 0x80 (16)
	struct FName PreviewSkelMeshName; // 0x90 (8)
	struct FName BestRatioSkelMeshName; // 0x98 (8)
};

// Class Engine.AnimSingleNodeInstance
class UAnimSingleNodeInstance : public UAnimInstance {

public:

	struct UAnimationAsset CurrentAsset; // 0x268 (8)
	struct FDelegate PostEvaluateAnimEvent; // 0x270 (16)

	void StopAnim(); // Function Engine.AnimSingleNodeInstance.StopAnim(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x327CA40>
	void SetReverse(bool bInReverse); // Function Engine.AnimSingleNodeInstance.SetReverse(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x327C9B0>
	void SetPreviewCurveOverride(struct FName& PoseName, float Value, bool bRemoveIfZero); // Function Engine.AnimSingleNodeInstance.SetPreviewCurveOverride(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x327C890>
	void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies); // Function Engine.AnimSingleNodeInstance.SetPositionWithPreviousTime(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x327C780>
	void SetPosition(float InPosition, bool bFireNotifies); // Function Engine.AnimSingleNodeInstance.SetPosition(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x327C6B0>
	void SetPlayRate(float InPlayRate); // Function Engine.AnimSingleNodeInstance.SetPlayRate(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x327C5A0>
	void SetPlaying(bool bIsPlaying); // Function Engine.AnimSingleNodeInstance.SetPlaying(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x327C620>
	void SetLooping(bool bIsLooping); // Function Engine.AnimSingleNodeInstance.SetLooping(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x327C510>
	void SetBlendSpaceInput(struct FVector& InBlendInput); // Function Engine.AnimSingleNodeInstance.SetBlendSpaceInput(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x327C480>
	void SetAnimationAsset(struct UAnimationAsset NewAsset, bool bIsLooping, float InPlayRate); // Function Engine.AnimSingleNodeInstance.SetAnimationAsset(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x327C370>
	void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition); // Function Engine.AnimSingleNodeInstance.PlayAnim(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x327C270>
	float GetLength(); // Function Engine.AnimSingleNodeInstance.GetLength(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x327C200>
	struct UAnimationAsset GetAnimationAsset(); // Function Engine.AnimSingleNodeInstance.GetAnimationAsset(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x327C1D0>
};

// Class Engine.AnimStreamable
class UAnimStreamable : public UAnimSequenceBase {

public:

	int32_t NumFrames; // 0xA8 (4)
	enum class EAnimInterpolationType Interpolation; // 0xAC (1)
	struct FName RetargetSource; // 0xB0 (8)
	struct UAnimBoneCompressionSettings BoneCompressionSettings; // 0xC8 (8)
	struct UAnimCurveCompressionSettings CurveCompressionSettings; // 0xD0 (8)
	bool bEnableRootMotion; // 0xD8 (1)
	enum class ERootMotionRootLock RootMotionRootLock; // 0xD9 (1)
	bool bForceRootLock; // 0xDA (1)
	bool bUseNormalizedRootMotionScale; // 0xDB (1)
};

// Class Engine.ArrowComponent
class UArrowComponent : public UPrimitiveComponent {

public:

	struct FColor ArrowColor; // 0x408 (4)
	float ArrowSize; // 0x40C (4)
	float ScreenSize; // 0x410 (4)
	char bIsScreenSizeScaled : 1; // 0x414 (1)
	char bTreatAsASprite : 1; // 0x414 (1)

	void SetArrowColor(struct FLinearColor NewColor); // Function Engine.ArrowComponent.SetArrowColor(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x327F7B0>
};

// Class Engine.AssetExportTask
class UAssetExportTask : public Object {

public:

	struct Object Object; // 0x28 (8)
	struct UExporter Exporter; // 0x30 (8)
	struct FString Filename; // 0x38 (16)
	bool bSelected; // 0x48 (1)
	bool bReplaceIdentical; // 0x49 (1)
	bool bPrompt; // 0x4A (1)
	bool bAutomated; // 0x4B (1)
	bool bUseFileArchive; // 0x4C (1)
	bool bWriteEmptyFiles; // 0x4D (1)
	struct TArray<struct Object> IgnoreObjectList; // 0x50 (16)
	struct Object Options; // 0x60 (8)
	struct TArray<struct FString> Errors; // 0x68 (16)
};

// Class Engine.AssetManagerSettings
class UAssetManagerSettings : public UDeveloperSettings {

public:

	struct TArray<struct FPrimaryAssetTypeInfo> PrimaryAssetTypesToScan; // 0x38 (16)
	struct TArray<struct FDirectoryPath> DirectoriesToExclude; // 0x48 (16)
	struct TArray<struct FPrimaryAssetRulesOverride> PrimaryAssetRules; // 0x58 (16)
	struct TArray<struct FPrimaryAssetRulesCustomOverride> CustomPrimaryAssetRules; // 0x68 (16)
	bool bOnlyCookProductionAssets; // 0x78 (1)
	bool bShouldManagerDetermineTypeAndName; // 0x79 (1)
	bool bShouldGuessTypeAndNameInEditor; // 0x7A (1)
	bool bShouldAcquireMissingChunksOnLoad; // 0x7B (1)
	struct TArray<struct FAssetManagerRedirect> PrimaryAssetIdRedirects; // 0x80 (16)
	struct TArray<struct FAssetManagerRedirect> PrimaryAssetTypeRedirects; // 0x90 (16)
	struct TArray<struct FAssetManagerRedirect> AssetPathRedirects; // 0xA0 (16)
	struct TSet<struct FName> MetaDataTagsForAssetRegistry; // 0xB0 (80)
};

// Class Engine.AssetMappingTable
class UAssetMappingTable : public Object {

public:

	struct TArray<struct FAssetMapping> MappedAssets; // 0x28 (16)
};

// Class Engine.AsyncActionHandleSaveGame
class UAsyncActionHandleSaveGame : public UBlueprintAsyncActionBase {

public:

	struct FMulticastInlineDelegate Completed; // 0x30 (16)
	struct USaveGame SaveGameObject; // 0x60 (8)

	struct UAsyncActionHandleSaveGame AsyncSaveGameToSlot(struct Object WorldContextObject, struct USaveGame SaveGameObject, struct FString SlotName, int32_t UserIndex); // Function Engine.AsyncActionHandleSaveGame.AsyncSaveGameToSlot(Final|Native|Static|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x327F660>
	struct UAsyncActionHandleSaveGame AsyncLoadGameFromSlot(struct Object WorldContextObject, struct FString SlotName, int32_t UserIndex); // Function Engine.AsyncActionHandleSaveGame.AsyncLoadGameFromSlot(Final|Native|Static|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x327F540>
};

// Class Engine.AsyncActionLoadPrimaryAsset
class UAsyncActionLoadPrimaryAsset : public UAsyncActionLoadPrimaryAssetBase {

public:

	struct FMulticastInlineDelegate Completed; // 0x78 (16)

	struct UAsyncActionLoadPrimaryAsset AsyncLoadPrimaryAsset(struct Object WorldContextObject, struct FPrimaryAssetId PrimaryAsset, struct TArray<struct FName>& LoadBundles); // Function Engine.AsyncActionLoadPrimaryAsset.AsyncLoadPrimaryAsset(Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3282060>
};

// Class Engine.AsyncActionLoadPrimaryAssetClass
class UAsyncActionLoadPrimaryAssetClass : public UAsyncActionLoadPrimaryAssetBase {

public:

	struct FMulticastInlineDelegate Completed; // 0x78 (16)

	struct UAsyncActionLoadPrimaryAssetClass AsyncLoadPrimaryAssetClass(struct Object WorldContextObject, struct FPrimaryAssetId PrimaryAsset, struct TArray<struct FName>& LoadBundles); // Function Engine.AsyncActionLoadPrimaryAssetClass.AsyncLoadPrimaryAssetClass(Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32821A0>
};

// Class Engine.AsyncActionLoadPrimaryAssetList
class UAsyncActionLoadPrimaryAssetList : public UAsyncActionLoadPrimaryAssetBase {

public:

	struct FMulticastInlineDelegate Completed; // 0x78 (16)

	struct UAsyncActionLoadPrimaryAssetList AsyncLoadPrimaryAssetList(struct Object WorldContextObject, struct TArray<struct FPrimaryAssetId>& PrimaryAssetList, struct TArray<struct FName>& LoadBundles); // Function Engine.AsyncActionLoadPrimaryAssetList.AsyncLoadPrimaryAssetList(Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3282440>
};

// Class Engine.AsyncActionLoadPrimaryAssetClassList
class UAsyncActionLoadPrimaryAssetClassList : public UAsyncActionLoadPrimaryAssetBase {

public:

	struct FMulticastInlineDelegate Completed; // 0x78 (16)

	struct UAsyncActionLoadPrimaryAssetClassList AsyncLoadPrimaryAssetClassList(struct Object WorldContextObject, struct TArray<struct FPrimaryAssetId>& PrimaryAssetList, struct TArray<struct FName>& LoadBundles); // Function Engine.AsyncActionLoadPrimaryAssetClassList.AsyncLoadPrimaryAssetClassList(Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32822E0>
};

// Class Engine.AsyncActionChangePrimaryAssetBundles
class UAsyncActionChangePrimaryAssetBundles : public UAsyncActionLoadPrimaryAssetBase {

public:

	struct FMulticastInlineDelegate Completed; // 0x78 (16)

	struct UAsyncActionChangePrimaryAssetBundles AsyncChangeBundleStateForPrimaryAssetList(struct Object WorldContextObject, struct TArray<struct FPrimaryAssetId>& PrimaryAssetList, struct TArray<struct FName>& AddBundles, struct TArray<struct FName>& RemoveBundles); // Function Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForPrimaryAssetList(Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3281EB0>
	struct UAsyncActionChangePrimaryAssetBundles AsyncChangeBundleStateForMatchingPrimaryAssets(struct Object WorldContextObject, struct TArray<struct FName>& NewBundles, struct TArray<struct FName>& OldBundles); // Function Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForMatchingPrimaryAssets(Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3281D50>
};

// Class Engine.AtmosphericFog
class AAtmosphericFog : public AInfo {

public:

	struct UAtmosphericFogComponent AtmosphericFogComponent; // 0x220 (8)
};

// Class Engine.AtmosphericFogComponent
class UAtmosphericFogComponent : public USceneComponent {

public:

	float SunMultiplier; // 0x1F0 (4)
	float FogMultiplier; // 0x1F4 (4)
	float DensityMultiplier; // 0x1F8 (4)
	float DensityOffset; // 0x1FC (4)
	float DistanceScale; // 0x200 (4)
	float AltitudeScale; // 0x204 (4)
	float DistanceOffset; // 0x208 (4)
	float GroundOffset; // 0x20C (4)
	float StartDistance; // 0x210 (4)
	float SunDiscScale; // 0x214 (4)
	float DefaultBrightness; // 0x218 (4)
	struct FColor DefaultLightColor; // 0x21C (4)
	char bDisableSunDisk : 1; // 0x220 (1)
	char bAtmosphereAffectsSunIlluminance : 1; // 0x220 (1)
	char bDisableGroundScattering : 1; // 0x220 (1)
	char pad_220_3 : 5; // 0x220 (1)
	struct FAtmospherePrecomputeParameters PrecomputeParams; // 0x224 (44)
	struct UTexture2D TransmittanceTexture; // 0x250 (8)
	struct UTexture2D IrradianceTexture; // 0x258 (8)

	void StartPrecompute(); // Function Engine.AtmosphericFogComponent.StartPrecompute(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0xFBCF20>
	void SetSunMultiplier(float NewSunMultiplier); // Function Engine.AtmosphericFogComponent.SetSunMultiplier(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3283BA0>
	void SetStartDistance(float NewStartDistance); // Function Engine.AtmosphericFogComponent.SetStartDistance(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3283A50>
	void SetPrecomputeParams(float DensityHeight, int32_t MaxScatteringOrder, int32_t InscatterAltitudeSampleNum); // Function Engine.AtmosphericFogComponent.SetPrecomputeParams(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3283720>
	void SetFogMultiplier(float NewFogMultiplier); // Function Engine.AtmosphericFogComponent.SetFogMultiplier(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32833C0>
	void SetDistanceScale(float NewDistanceScale); // Function Engine.AtmosphericFogComponent.SetDistanceScale(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3283270>
	void SetDistanceOffset(float NewDistanceOffset); // Function Engine.AtmosphericFogComponent.SetDistanceOffset(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32831F0>
	void SetDensityOffset(float NewDensityOffset); // Function Engine.AtmosphericFogComponent.SetDensityOffset(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3283170>
	void SetDensityMultiplier(float NewDensityMultiplier); // Function Engine.AtmosphericFogComponent.SetDensityMultiplier(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32830F0>
	void SetDefaultLightColor(struct FLinearColor NewLightColor); // Function Engine.AtmosphericFogComponent.SetDefaultLightColor(Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3283070>
	void SetDefaultBrightness(float NewBrightness); // Function Engine.AtmosphericFogComponent.SetDefaultBrightness(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3282FF0>
	void SetAltitudeScale(float NewAltitudeScale); // Function Engine.AtmosphericFogComponent.SetAltitudeScale(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3282EA0>
	void DisableSunDisk(bool NewSunDisk); // Function Engine.AtmosphericFogComponent.DisableSunDisk(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3282700>
	void DisableGroundScattering(bool NewGroundScattering); // Function Engine.AtmosphericFogComponent.DisableGroundScattering(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3282670>
};

// Class Engine.AudioSettings
class UAudioSettings : public UDeveloperSettings {

public:

	struct FSoftObjectPath DefaultSoundClassName; // 0x38 (24)
	struct FSoftObjectPath DefaultMediaSoundClassName; // 0x50 (24)
	struct FSoftObjectPath DefaultSoundConcurrencyName; // 0x68 (24)
	struct FSoftObjectPath DefaultBaseSoundMix; // 0x80 (24)
	struct FSoftObjectPath VoiPSoundClass; // 0x98 (24)
	struct FSoftObjectPath MasterSubmix; // 0xB0 (24)
	struct FSoftObjectPath ReverbSubmix; // 0xC8 (24)
	struct FSoftObjectPath EQSubmix; // 0xE0 (24)
	enum class EVoiceSampleRate VoiPSampleRate; // 0xF8 (4)
	float DefaultReverbSendLevel; // 0xFC (4)
	int32_t MaximumConcurrentStreams; // 0x100 (4)
	float GlobalMinPitchScale; // 0x104 (4)
	float GlobalMaxPitchScale; // 0x108 (4)
	struct TArray<struct FAudioQualitySettings> QualityLevels; // 0x110 (16)
	char bAllowPlayWhenSilent : 1; // 0x120 (1)
	char pad_11C_1 : 7; // 0x11C (1)
	char pad_11D_0 : 1; // 0x11D (1)
	char bDisableMasterEQ : 1; // 0x120 (1)
	char pad_11D_2 : 6; // 0x11D (1)
	char pad_11E_0 : 2; // 0x11E (1)
	char bAllowCenterChannel3DPanning : 1; // 0x120 (1)
	char pad_11E_3 : 5; // 0x11E (1)
	uint32_t NumStoppingSources; // 0x124 (4)
	enum class EPanningMethod PanningMethod; // 0x128 (1)
	enum class EMonoChannelUpmixMethod MonoChannelUpmixMethod; // 0x129 (1)
	struct FString DialogueFilenameFormat; // 0x130 (16)
};

// Class Engine.AudioVolume
class AAudioVolume : public AVolume {

public:

	float Priority; // 0x258 (4)
	char bEnabled : 1; // 0x25C (1)
	char pad_25C_1 : 7; // 0x25C (1)
	struct FReverbSettings Settings; // 0x260 (32)
	struct FInteriorSettings AmbientZoneSettings; // 0x280 (36)

	void SetReverbSettings(struct FReverbSettings& NewReverbSettings); // Function Engine.AudioVolume.SetReverbSettings(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32879E0>
	void SetPriority(float NewPriority); // Function Engine.AudioVolume.SetPriority(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3287960>
	void SetInteriorSettings(struct FInteriorSettings& NewInteriorSettings); // Function Engine.AudioVolume.SetInteriorSettings(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32878C0>
	void SetEnabled(bool bNewEnabled); // Function Engine.AudioVolume.SetEnabled(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3287830>
	void OnRep_bEnabled(); // Function Engine.AudioVolume.OnRep_bEnabled(Final|Native|Private) // <VeiledExperts-Win64-Shipping.exe+0x3287740>
};

// Class Engine.AutoDestroySubsystem
class UAutoDestroySubsystem : public UWorldSubsystem {

public:

	struct TArray<struct UActor> ActorsToPoll; // 0x38 (16)

	void OnActorEndPlay(struct UActor Actor, enum class EEndPlayReason EndPlayReason); // Function Engine.AutoDestroySubsystem.OnActorEndPlay(Final|Native|Private) // <VeiledExperts-Win64-Shipping.exe+0x3287680>
};

// Class Engine.AutomationTestSettings
class UAutomationTestSettings : public Object {

public:

	struct TArray<struct FString> EngineTestModules; // 0x28 (16)
	struct TArray<struct FString> EditorTestModules; // 0x38 (16)
	struct FSoftObjectPath AutomationTestmap; // 0x48 (24)
	struct TArray<struct FEditorMapPerformanceTestDefinition> EditorPerformanceTestMaps; // 0x60 (16)
	struct TArray<struct FSoftObjectPath> AssetsToOpen; // 0x70 (16)
	struct FBuildPromotionTestSettings BuildPromotionTest; // 0x80 (496)
	struct FMaterialEditorPromotionSettings MaterialEditorPromotionTest; // 0x270 (48)
	struct FParticleEditorPromotionSettings ParticleEditorPromotionTest; // 0x2A0 (16)
	struct FBlueprintEditorPromotionSettings BlueprintEditorPromotionTest; // 0x2B0 (48)
	struct TArray<struct FString> TestLevelFolders; // 0x2E0 (16)
	struct TArray<struct FExternalToolDefinition> ExternalTools; // 0x2F0 (16)
	struct TArray<struct FEditorImportExportTestDefinition> ImportExportTestDefinitions; // 0x300 (16)
	struct TArray<struct FLaunchOnTestSettings> LaunchOnSettings; // 0x310 (16)
	struct FIntPoint DefaultScreenshotResolution; // 0x320 (8)
};

// Class Engine.AvoidanceManager
class UAvoidanceManager : public Object {

public:

	float DefaultTimeToLive; // 0x30 (4)
	float LockTimeAfterAvoid; // 0x34 (4)
	float LockTimeAfterClean; // 0x38 (4)
	float DeltaTimeToPredict; // 0x3C (4)
	float ArtificialRadiusExpansion; // 0x40 (4)
	float TestHeightDifference; // 0x44 (4)
	float HeightCheckMargin; // 0x48 (4)

	bool RegisterMovementComponent(struct UMovementComponent MovementComp, float AvoidanceWeight); // Function Engine.AvoidanceManager.RegisterMovementComponent(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3287760>
	int32_t GetObjectCount(); // Function Engine.AvoidanceManager.GetObjectCount(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3287650>
	int32_t GetNewAvoidanceUID(); // Function Engine.AvoidanceManager.GetNewAvoidanceUID(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3287620>
	struct FVector GetAvoidanceVelocityForComponent(struct UMovementComponent MovementComp); // Function Engine.AvoidanceManager.GetAvoidanceVelocityForComponent(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3287580>
};

// Class Engine.BandwidthTestActor
class ABandwidthTestActor : public UActor {

public:

	struct FBandwidthTestGenerator BandwidthGenerator; // 0x220 (32)
};

// Class Engine.BillboardComponent
class UBillboardComponent : public UPrimitiveComponent {

public:

	struct UTexture2D Sprite; // 0x408 (8)
	char bIsScreenSizeScaled : 1; // 0x410 (1)
	float ScreenSize; // 0x414 (4)
	float U; // 0x418 (4)
	float UL; // 0x41C (4)
	float V; // 0x420 (4)
	float VL; // 0x424 (4)

	void SetUV(int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL); // Function Engine.BillboardComponent.SetUV(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3287CA0>
	void SetSpriteAndUV(struct UTexture2D NewSprite, int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL); // Function Engine.BillboardComponent.SetSpriteAndUV(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3287B20>
	void SetSprite(struct UTexture2D NewSprite); // Function Engine.BillboardComponent.SetSprite(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3287A90>
};

// Class Engine.Skeleton
class USkeleton : public Object {

public:

	struct TArray<struct FBoneNode> BoneTree; // 0x38 (16)
	struct TArray<struct FTransform> RefLocalPoses; // 0x48 (16)
	struct FGuid VirtualBoneGuid; // 0x170 (16)
	struct TArray<struct FVirtualBone> VirtualBones; // 0x180 (16)
	struct TArray<struct USkeletalMeshSocket> Sockets; // 0x190 (16)
	struct FSmartNameContainer SmartNames; // 0x1F0 (80)
	struct TArray<struct UBlendProfile> BlendProfiles; // 0x270 (16)
	struct TArray<struct FAnimSlotGroup> SlotGroups; // 0x280 (16)
	struct TArray<struct UAssetUserData> AssetUserData; // 0x358 (16)
};

// Class Engine.BlendProfile
class UBlendProfile : public Object {

public:

	struct USkeleton OwningSkeleton; // 0x30 (8)
	struct TArray<struct FBlendProfileBoneEntry> ProfileEntries; // 0x38 (16)
};

// Class Engine.PlatformGameInstance
class UPlatformGameInstance : public UGameInstance {

public:

	struct FMulticastInlineDelegate ApplicationWillDeactivateDelegate; // 0x198 (16)
	struct FMulticastInlineDelegate ApplicationHasReactivatedDelegate; // 0x1A8 (16)
	struct FMulticastInlineDelegate ApplicationWillEnterBackgroundDelegate; // 0x1B8 (16)
	struct FMulticastInlineDelegate ApplicationHasEnteredForegroundDelegate; // 0x1C8 (16)
	struct FMulticastInlineDelegate ApplicationWillTerminateDelegate; // 0x1D8 (16)
	struct FMulticastInlineDelegate ApplicationShouldUnloadResourcesDelegate; // 0x1E8 (16)
	struct FMulticastInlineDelegate ApplicationReceivedStartupArgumentsDelegate; // 0x1F8 (16)
	struct FMulticastInlineDelegate ApplicationRegisteredForRemoteNotificationsDelegate; // 0x208 (16)
	struct FMulticastInlineDelegate ApplicationRegisteredForUserNotificationsDelegate; // 0x218 (16)
	struct FMulticastInlineDelegate ApplicationFailedToRegisterForRemoteNotificationsDelegate; // 0x228 (16)
	struct FMulticastInlineDelegate ApplicationReceivedRemoteNotificationDelegate; // 0x238 (16)
	struct FMulticastInlineDelegate ApplicationReceivedLocalNotificationDelegate; // 0x248 (16)
	struct FMulticastInlineDelegate ApplicationReceivedScreenOrientationChangedNotificationDelegate; // 0x258 (16)
};

// Class Engine.BodySetup
class UBodySetup : public Object {

public:

	struct FKAggregateGeom AggGeom; // 0x28 (88)
	struct FName BoneName; // 0x80 (8)
	enum class EPhysicsType PhysicsType; // 0x88 (1)
	char bAlwaysFullAnimWeight : 1; // 0x89 (1)
	char bConsiderForBounds : 1; // 0x89 (1)
	char bMeshCollideAll : 1; // 0x89 (1)
	char bDoubleSidedGeometry : 1; // 0x89 (1)
	char bGenerateNonMirroredCollision : 1; // 0x89 (1)
	char bSharedCookedData : 1; // 0x89 (1)
	char bGenerateMirroredCollision : 1; // 0x89 (1)
	char bSupportUVsAndFaceRemap : 1; // 0x89 (1)
	enum class EBodyCollisionResponse CollisionReponse; // 0x8B (1)
	enum class ECollisionTraceFlag CollisionTraceFlag; // 0x8C (1)
	struct UPhysicalMaterial PhysMaterial; // 0x90 (8)
	struct FWalkableSlopeOverride WalkableSlopeOverride; // 0x98 (16)
	struct FBodyInstance DefaultInstance; // 0x120 (304)
	struct FVector BuildScale3D; // 0x258 (12)
};

// Class Engine.BoneMaskFilter
class UBoneMaskFilter : public Object {

public:

	struct TArray<struct FInputBlendPose> BlendPoses; // 0x28 (16)
};

// Class Engine.BookMark
class UBookMark : public UBookmarkBase {

public:

	struct FVector Location; // 0x28 (12)
	struct FRotator Rotation; // 0x34 (12)
	struct TArray<struct FString> HiddenLevels; // 0x40 (16)
};

// Class Engine.BookMark2D
class UBookMark2D : public UBookmarkBase {

public:

	float Zoom2D; // 0x28 (4)
	struct FIntPoint Location; // 0x2C (8)
};

// Class Engine.ReflectionCapture
class AReflectionCapture : public UActor {

public:

	struct UReflectionCaptureComponent CaptureComponent; // 0x220 (8)
};

// Class Engine.ReflectionCaptureComponent
class UReflectionCaptureComponent : public USceneComponent {

public:

	struct UBillboardComponent CaptureOffsetComponent; // 0x1F0 (8)
	enum class EReflectionSourceType ReflectionSourceType; // 0x1F8 (1)
	struct UTextureCube Cubemap; // 0x200 (8)
	float SourceCubemapAngle; // 0x208 (4)
	float Brightness; // 0x20C (4)
	struct FVector CaptureOffset; // 0x210 (12)
	struct FGuid MapBuildDataId; // 0x21C (16)
};

// Class Engine.BoxReflectionCaptureComponent
class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent {

public:

	float BoxTransitionDistance; // 0x268 (4)
	struct UBoxComponent PreviewInfluenceBox; // 0x270 (8)
	struct UBoxComponent PreviewCaptureBox; // 0x278 (8)
};

// Class Engine.Breakpoint
class UBreakpoint : public Object {

public:

	char bEnabled : 1; // 0x28 (1)
	char pad_28_1 : 7; // 0x28 (1)
	struct UEdGraphNode Node; // 0x30 (8)
	char bStepOnce : 1; // 0x38 (1)
	char pad_31_1 : 7; // 0x31 (1)
	char pad_32_0 : 1; // 0x32 (1)
	char bStepOnce_WasPreviouslyDisabled : 1; // 0x38 (1)
	char pad_32_2 : 6; // 0x32 (1)
	char pad_33_0 : 2; // 0x33 (1)
	char bStepOnce_RemoveAfterHit : 1; // 0x38 (1)
};

// Class Engine.BrushBuilder
class UBrushBuilder : public Object {

public:

	struct FString BitmapFilename; // 0x28 (16)
	struct FString Tooltip; // 0x38 (16)
	char NotifyBadParams : 1; // 0x48 (1)
	char pad_48_1 : 7; // 0x48 (1)
	struct TArray<struct FVector> Vertices; // 0x50 (16)
	struct TArray<struct FBuilderPoly> Polys; // 0x60 (16)
	struct FName Layer; // 0x70 (8)
	char MergeCoplanars : 1; // 0x78 (1)
};

// Class Engine.BrushComponent
class UBrushComponent : public UPrimitiveComponent {

public:

	struct UModel Brush; // 0x408 (8)
	struct UBodySetup BrushBodySetup; // 0x410 (8)
};

// Class Engine.ButtonStyleAsset
class UButtonStyleAsset : public Object {

public:

	struct FButtonStyle ButtonStyle; // 0x28 (632)
};

// Class Engine.CameraAnim
class UCameraAnim : public Object {

public:

	struct UInterpGroup CameraInterpGroup; // 0x28 (8)
	float AnimLength; // 0x30 (4)
	struct FBox BoundingBox; // 0x34 (28)
	char bRelativeToInitialTransform : 1; // 0x50 (1)
	char bRelativeToInitialFOV : 1; // 0x50 (1)
	char pad_50_2 : 6; // 0x50 (1)
	float BaseFOV; // 0x54 (4)
	struct FPostProcessSettings BasePostProcessSettings; // 0x60 (1376)
	float BasePostProcessBlendWeight; // 0x5C0 (4)
};

// Class Engine.CameraAnimInst
class UCameraAnimInst : public Object {

public:

	struct UCameraAnim CamAnim; // 0x28 (8)
	struct UInterpGroupInst InterpGroupInst; // 0x30 (8)
	float PlayRate; // 0x50 (4)
	struct UInterpTrackMove MoveTrack; // 0x68 (8)
	struct UInterpTrackInstMove MoveInst; // 0x70 (8)
	enum class ECameraAnimPlaySpace PlaySpace; // 0x78 (1)

	void Stop(bool bImmediate); // Function Engine.CameraAnimInst.Stop(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3296A60>
	void SetScale(float NewDuration); // Function Engine.CameraAnimInst.SetScale(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3296950>
	void SetDuration(float NewDuration); // Function Engine.CameraAnimInst.SetDuration(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32965D0>
};

// Class Engine.CameraModifier
class UCameraModifier : public Object {

public:

	char bDebug : 1; // 0x28 (1)
	char bExclusive : 1; // 0x28 (1)
	char pad_28_2 : 6; // 0x28 (1)
	char Priority; // 0x2C (1)
	struct APlayerCameraManager CameraOwner; // 0x30 (8)
	float AlphaInTime; // 0x38 (4)
	float AlphaOutTime; // 0x3C (4)
	float Alpha; // 0x40 (4)

	bool IsDisabled(); // Function Engine.CameraModifier.IsDisabled(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x25D7390>
	struct UActor GetViewTarget(); // Function Engine.CameraModifier.GetViewTarget(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x2A12D10>
	void EnableModifier(); // Function Engine.CameraModifier.EnableModifier(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32961D0>
	void DisableModifier(bool bImmediate); // Function Engine.CameraModifier.DisableModifier(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3296140>
	void BlueprintModifyPostProcess(float DeltaTime, float& PostProcessBlendWeight, struct FPostProcessSettings& PostProcessSettings); // Function Engine.CameraModifier.BlueprintModifyPostProcess(BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void BlueprintModifyCamera(float DeltaTime, struct FVector ViewLocation, struct FRotator ViewRotation, float FOV, struct FVector& NewViewLocation, struct FRotator& NewViewRotation, float& NewFOV); // Function Engine.CameraModifier.BlueprintModifyCamera(BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
};

// Class Engine.CameraModifier_CameraShake
class UCameraModifier_CameraShake : public UCameraModifier {

public:

	struct TArray<struct FActiveCameraShakeInfo> ActiveShakes; // 0x48 (16)
	struct TMap<struct UClass*, struct FPooledCameraShakes> ExpiredPooledShakesMap; // 0x58 (80)
	float SplitScreenShakeScale; // 0xA8 (4)
};

// Class Engine.CameraShakeSourceActor
class ACameraShakeSourceActor : public UActor {

public:

	struct UCameraShakeSourceComponent CameraShakeSourceComponent; // 0x220 (8)
};

// Class Engine.CameraShakeSourceComponent
class UCameraShakeSourceComponent : public USceneComponent {

public:

	enum class ECameraShakeAttenuation Attenuation; // 0x1F0 (1)
	float InnerAttenuationRadius; // 0x1F4 (4)
	float OuterAttenuationRadius; // 0x1F8 (4)
	struct UClass* CameraShake; // 0x200 (8)
	bool bAutoPlay; // 0x208 (1)

	void StopAllCameraShakes(bool bImmediately); // Function Engine.CameraShakeSourceComponent.StopAllCameraShakes(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329EE60>
	void PlayCameraShake(struct UClass* InCameraShake); // Function Engine.CameraShakeSourceComponent.PlayCameraShake(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329D740>
	void Play(); // Function Engine.CameraShakeSourceComponent.Play(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329D610>
	float GetAttenuationFactor(struct FVector& Location); // Function Engine.CameraShakeSourceComponent.GetAttenuationFactor(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x329B380>
};

// Class Engine.Canvas
class UCanvas : public Object {

public:

	float OrgX; // 0x28 (4)
	float OrgY; // 0x2C (4)
	float ClipX; // 0x30 (4)
	float ClipY; // 0x34 (4)
	struct FColor DrawColor; // 0x38 (4)
	char bCenterX : 1; // 0x3C (1)
	char bCenterY : 1; // 0x3C (1)
	char bNoSmooth : 1; // 0x3C (1)
	char pad_3C_3 : 5; // 0x3C (1)
	int32_t SizeX; // 0x40 (4)
	int32_t SizeY; // 0x44 (4)
	struct FPlane ColorModulate; // 0x50 (16)
	struct UTexture2D DefaultTexture; // 0x60 (8)
	struct UTexture2D GradientTexture0; // 0x68 (8)
	struct UReporterGraph ReporterGraph; // 0x70 (8)

	struct FVector2D K2_TextSize(struct UFont RenderFont, struct FString RenderText, struct FVector2D Scale); // Function Engine.Canvas.K2_TextSize(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329D190>
	struct FVector2D K2_StrLen(struct UFont RenderFont, struct FString RenderText); // Function Engine.Canvas.K2_StrLen(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329D0B0>
	struct FVector K2_Project(struct FVector WorldLocation); // Function Engine.Canvas.K2_Project(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329D000>
	void K2_DrawTriangle(struct UTexture RenderTexture, struct TArray<struct FCanvasUVTri> Triangles); // Function Engine.Canvas.K2_DrawTriangle(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329CEE0>
	void K2_DrawTexture(struct UTexture RenderTexture, struct FVector2D ScreenPosition, struct FVector2D ScreenSize, struct FVector2D CoordinatePosition, struct FVector2D CoordinateSize, struct FLinearColor RenderColor, enum class EBlendMode BlendMode, float Rotation, struct FVector2D PivotPoint); // Function Engine.Canvas.K2_DrawTexture(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329CC60>
	void K2_DrawText(struct UFont RenderFont, struct FString RenderText, struct FVector2D ScreenPosition, struct FVector2D Scale, struct FLinearColor RenderColor, float Kerning, struct FLinearColor ShadowColor, struct FVector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, struct FLinearColor OutlineColor); // Function Engine.Canvas.K2_DrawText(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329C8E0>
	void K2_DrawPolygon(struct UTexture RenderTexture, struct FVector2D ScreenPosition, struct FVector2D Radius, int32_t NumberOfSides, struct FLinearColor RenderColor); // Function Engine.Canvas.K2_DrawPolygon(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329C750>
	void K2_DrawMaterialTriangle(struct UMaterialInterface RenderMaterial, struct TArray<struct FCanvasUVTri> Triangles); // Function Engine.Canvas.K2_DrawMaterialTriangle(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329C630>
	void K2_DrawMaterial(struct UMaterialInterface RenderMaterial, struct FVector2D ScreenPosition, struct FVector2D ScreenSize, struct FVector2D CoordinatePosition, struct FVector2D CoordinateSize, float Rotation, struct FVector2D PivotPoint); // Function Engine.Canvas.K2_DrawMaterial(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329C410>
	void K2_DrawLine(struct FVector2D ScreenPositionA, struct FVector2D ScreenPositionB, float Thickness, struct FLinearColor RenderColor); // Function Engine.Canvas.K2_DrawLine(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329C2C0>
	void K2_DrawBox(struct FVector2D ScreenPosition, struct FVector2D ScreenSize, float Thickness, struct FLinearColor RenderColor); // Function Engine.Canvas.K2_DrawBox(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329C170>
	void K2_DrawBorder(struct UTexture BorderTexture, struct UTexture BackgroundTexture, struct UTexture LeftBorderTexture, struct UTexture RightBorderTexture, struct UTexture TopBorderTexture, struct UTexture BottomBorderTexture, struct FVector2D ScreenPosition, struct FVector2D ScreenSize, struct FVector2D CoordinatePosition, struct FVector2D CoordinateSize, struct FLinearColor RenderColor, struct FVector2D BorderScale, struct FVector2D BackgroundScale, float Rotation, struct FVector2D PivotPoint, struct FVector2D CornerSize); // Function Engine.Canvas.K2_DrawBorder(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329BD30>
	void K2_Deproject(struct FVector2D ScreenPosition, struct FVector& WorldOrigin, struct FVector& WorldDirection); // Function Engine.Canvas.K2_Deproject(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329BC10>
};

// Class Engine.TextureRenderTarget
class UTextureRenderTarget : public UTexture {

public:

	float TargetGamma; // 0xB8 (4)
};

// Class Engine.TextureRenderTarget2D
class UTextureRenderTarget2D : public UTextureRenderTarget {

public:

	int32_t SizeX; // 0xC0 (4)
	int32_t SizeY; // 0xC4 (4)
	struct FLinearColor ClearColor; // 0xC8 (16)
	enum class TextureAddress AddressX; // 0xD8 (1)
	enum class TextureAddress AddressY; // 0xD9 (1)
	char bForceLinearGamma : 1; // 0xDA (1)
	char bHDR : 1; // 0xDA (1)
	char bGPUSharedFlag : 1; // 0xDA (1)
	char pad_DA_3 : 5; // 0xDA (1)
	enum class ETextureRenderTargetFormat RenderTargetFormat; // 0xDB (1)
	char bAutoGenerateMips : 1; // 0xDC (1)
	char pad_DC_1 : 7; // 0xDC (1)
	enum class TextureFilter MipsSamplerFilter; // 0xDD (1)
	enum class TextureAddress MipsAddressU; // 0xDE (1)
	enum class TextureAddress MipsAddressV; // 0xDF (1)
	enum class EPixelFormat OverrideFormat; // 0xE0 (1)
};

// Class Engine.CanvasRenderTarget2D
class UCanvasRenderTarget2D : public UTextureRenderTarget2D {

public:

	struct FMulticastInlineDelegate OnCanvasRenderTargetUpdate; // 0xE8 (16)
	struct TWeakObjectPtr<struct UWorld> World; // 0xF8 (8)
	bool bShouldClearRenderTargetOnReceiveUpdate; // 0x100 (1)

	void UpdateResource(); // Function Engine.CanvasRenderTarget2D.UpdateResource(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329F030>
	void ReceiveUpdate(struct UCanvas Canvas, int32_t Width, int32_t Height); // Function Engine.CanvasRenderTarget2D.ReceiveUpdate(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void GetSize(int32_t& Width, int32_t& Height); // Function Engine.CanvasRenderTarget2D.GetSize(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // <VeiledExperts-Win64-Shipping.exe+0x329B800>
	struct UCanvasRenderTarget2D CreateCanvasRenderTarget2D(struct Object WorldContextObject, struct UClass* CanvasRenderTarget2DClass, int32_t Width, int32_t Height); // Function Engine.CanvasRenderTarget2D.CreateCanvasRenderTarget2D(Final|Native|Static|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329B190>
};

// Class Engine.CapsuleComponent
class UCapsuleComponent : public UShapeComponent {

public:

	float CapsuleHalfHeight; // 0x420 (4)
	float CapsuleRadius; // 0x424 (4)

	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps); // Function Engine.CapsuleComponent.SetCapsuleSize(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329ED50>
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps); // Function Engine.CapsuleComponent.SetCapsuleRadius(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329EC80>
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps); // Function Engine.CapsuleComponent.SetCapsuleHalfHeight(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329EBB0>
	void GetUnscaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere); // Function Engine.CapsuleComponent.GetUnscaledCapsuleSize_WithoutHemisphere(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x329BA40>
	void GetUnscaledCapsuleSize(float& OutRadius, float& OutHalfHeight); // Function Engine.CapsuleComponent.GetUnscaledCapsuleSize(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x329B950>
	float GetUnscaledCapsuleRadius(); // Function Engine.CapsuleComponent.GetUnscaledCapsuleRadius(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x329B930>
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere(); // Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight_WithoutHemisphere(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x329B900>
	float GetUnscaledCapsuleHalfHeight(); // Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x329B8E0>
	float GetShapeScale(); // Function Engine.CapsuleComponent.GetShapeScale(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x329B7C0>
	void GetScaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere); // Function Engine.CapsuleComponent.GetScaledCapsuleSize_WithoutHemisphere(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x329B6A0>
	void GetScaledCapsuleSize(float& OutRadius, float& OutHalfHeight); // Function Engine.CapsuleComponent.GetScaledCapsuleSize(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x329B590>
	float GetScaledCapsuleRadius(); // Function Engine.CapsuleComponent.GetScaledCapsuleRadius(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x329B550>
	float GetScaledCapsuleHalfHeight_WithoutHemisphere(); // Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight_WithoutHemisphere(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x329B500>
	float GetScaledCapsuleHalfHeight(); // Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x329B4D0>
};

// Class Engine.ChaosPhysicalMaterial
class UChaosPhysicalMaterial : public Object {

public:

	float Friction; // 0x28 (4)
	float StaticFriction; // 0x2C (4)
	float Restitution; // 0x30 (4)
	float LinearEtherDrag; // 0x34 (4)
	float AngularEtherDrag; // 0x38 (4)
	float SleepingLinearVelocityThreshold; // 0x3C (4)
	float SleepingAngularVelocityThreshold; // 0x40 (4)
};

// Class Engine.CheckBoxStyleAsset
class UCheckBoxStyleAsset : public Object {

public:

	struct FCheckBoxStyle CheckBoxStyle; // 0x28 (1408)
};

// Class Engine.ChildConnection
class UChildConnection : public UNetConnection {

public:

	struct UNetConnection Parent; // 0x1A30 (8)
};

// Class Engine.PlatformInterfaceBase
class UPlatformInterfaceBase : public Object {

public:

	struct TArray<struct FDelegateArray> AllDelegates; // 0x28 (16)
};

// Class Engine.CloudStorageBase
class UCloudStorageBase : public UPlatformInterfaceBase {

public:

	struct TArray<struct FString> LocalCloudFiles; // 0x38 (16)
	char bSuppressDelegateCalls : 1; // 0x48 (1)
};

// Class Engine.CollisionProfile
class UCollisionProfile : public UDeveloperSettings {

public:

	struct TArray<struct FCollisionResponseTemplate> Profiles; // 0x38 (16)
	struct TArray<struct FCustomChannelSetup> DefaultChannelResponses; // 0x48 (16)
	struct TArray<struct FCustomProfile> EditProfiles; // 0x58 (16)
	struct TArray<struct FRedirector> ProfileRedirects; // 0x68 (16)
	struct TArray<struct FRedirector> CollisionChannelRedirects; // 0x78 (16)
};

// Class Engine.Commandlet
class UCommandlet : public Object {

public:

	struct FString HelpDescription; // 0x28 (16)
	struct FString HelpUsage; // 0x38 (16)
	struct FString HelpWebLink; // 0x48 (16)
	struct TArray<struct FString> HelpParamNames; // 0x58 (16)
	struct TArray<struct FString> HelpParamDescriptions; // 0x68 (16)
	char IsServer : 1; // 0x78 (1)
	char IsClient : 1; // 0x78 (1)
	char IsEditor : 1; // 0x78 (1)
	char LogToConsole : 1; // 0x78 (1)
	char ShowErrorCount : 1; // 0x78 (1)
	char ShowProgress : 1; // 0x78 (1)
};

// Class Engine.ComponentDelegateBinding
class UComponentDelegateBinding : public UDynamicBlueprintBinding {

public:

	struct TArray<struct FBlueprintComponentDelegateBinding> ComponentDelegateBindings; // 0x28 (16)
};

// Class Engine.CompositeCurveTable
class UCompositeCurveTable : public UCurveTable {

public:

	struct TArray<struct UCurveTable> ParentTables; // 0xA0 (16)
	struct TArray<struct UCurveTable> OldParentTables; // 0xB0 (16)
};

// Class Engine.CompositeDataTable
class UCompositeDataTable : public UDataTable {

public:

	struct TArray<struct UDataTable> ParentTables; // 0xC8 (16)
	struct TArray<struct UDataTable> OldParentTables; // 0xD8 (16)
};

// Class Engine.Console
class UConsole : public Object {

public:

	struct ULocalPlayer ConsoleTargetPlayer; // 0x38 (8)
	struct UTexture2D DefaultTexture_Black; // 0x40 (8)
	struct UTexture2D DefaultTexture_White; // 0x48 (8)
	struct TArray<struct FString> HistoryBuffer; // 0x68 (16)
};

// Class Engine.StreamingSettings
class UStreamingSettings : public UDeveloperSettings {

public:

	char AsyncLoadingThreadEnabled : 1; // 0x38 (1)
	char WarnIfTimeLimitExceeded : 1; // 0x38 (1)
	char pad_38_2 : 6; // 0x38 (1)
	float TimeLimitExceededMultiplier; // 0x3C (4)
	float TimeLimitExceededMinTime; // 0x40 (4)
	int32_t MinBulkDataSizeForAsyncLoading; // 0x44 (4)
	char UseBackgroundLevelStreaming : 1; // 0x48 (1)
	char pad_45_1 : 7; // 0x45 (1)
	char pad_46_0 : 1; // 0x46 (1)
	char AsyncLoadingUseFullTimeLimit : 1; // 0x48 (1)
	char pad_46_2 : 6; // 0x46 (1)
	float AsyncLoadingTimeLimit; // 0x4C (4)
	float PriorityAsyncLoadingExtraTime; // 0x50 (4)
	float LevelStreamingActorsUpdateTimeLimit; // 0x54 (4)
	float PriorityLevelStreamingActorsUpdateExtraTime; // 0x58 (4)
	int32_t LevelStreamingComponentsRegistrationGranularity; // 0x5C (4)
	float LevelStreamingUnregisterComponentsTimeLimit; // 0x60 (4)
	int32_t LevelStreamingComponentsUnregistrationGranularity; // 0x64 (4)
	char FlushStreamingOnExit : 1; // 0x68 (1)
	char pad_63_1 : 7; // 0x63 (1)
	char pad_64_0 : 1; // 0x64 (1)
	char EventDrivenLoaderEnabled : 1; // 0x68 (1)
};

// Class Engine.GarbageCollectionSettings
class UGarbageCollectionSettings : public UDeveloperSettings {

public:

	float TimeBetweenPurgingPendingKillObjects; // 0x38 (4)
	char FlushStreamingOnGC : 1; // 0x3C (1)
	char AllowParallelGC : 1; // 0x3C (1)
	char IncrementalBeginDestroyEnabled : 1; // 0x3C (1)
	char MultithreadedDestructionEnabled : 1; // 0x3C (1)
	char CreateGCClusters : 1; // 0x3C (1)
	char AssetClusteringEnabled : 1; // 0x3C (1)
	char ActorClusteringEnabled : 1; // 0x3C (1)
	char BlueprintClusteringEnabled : 1; // 0x3C (1)
	char UseDisregardForGCOnDedicatedServers : 1; // 0x3D (1)
	char pad_3D_1 : 7; // 0x3D (1)
	int32_t MinGCClusterSize; // 0x40 (4)
	int32_t NumRetriesBeforeForcingGC; // 0x44 (4)
	int32_t MaxObjectsNotConsideredByGC; // 0x48 (4)
	int32_t SizeOfPermanentObjectPool; // 0x4C (4)
	int32_t MaxObjectsInGame; // 0x50 (4)
	int32_t MaxObjectsInEditor; // 0x54 (4)
};

// Class Engine.CullDistanceVolume
class ACullDistanceVolume : public AVolume {

public:

	struct TArray<struct FCullDistanceSizePair> CullDistances; // 0x258 (16)
	char bEnabled : 1; // 0x268 (1)
};

// Class Engine.CurveFloat
class UCurveFloat : public UCurveBase {

public:

	struct FRichCurve FloatCurve; // 0x30 (128)
	bool bIsEventCurve; // 0xB0 (1)

	float GetFloatValue(float InTime); // Function Engine.CurveFloat.GetFloatValue(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A8C50>
};

// Class Engine.CurveLinearColor
class UCurveLinearColor : public UCurveBase {

public:

	struct FRichCurve FloatCurves[0x4]; // 0x30 (512)
	float AdjustHue; // 0x230 (4)
	float AdjustSaturation; // 0x234 (4)
	float AdjustBrightness; // 0x238 (4)
	float AdjustBrightnessCurve; // 0x23C (4)
	float AdjustVibrance; // 0x240 (4)
	float AdjustMinAlpha; // 0x244 (4)
	float AdjustMaxAlpha; // 0x248 (4)

	struct FLinearColor GetLinearColorValue(float InTime); // Function Engine.CurveLinearColor.GetLinearColorValue(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A8CE0>
	struct FLinearColor GetClampedLinearColorValue(float InTime); // Function Engine.CurveLinearColor.GetClampedLinearColorValue(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A8900>
};

// Class Engine.Texture2D
class UTexture2D : public UTexture {

public:

	int32_t LevelIndex; // 0xB8 (4)
	int32_t FirstResourceMemMip; // 0xBC (4)
	char bTemporarilyDisableStreaming : 1; // 0xC0 (1)
	char pad_C0_1 : 7; // 0xC0 (1)
	enum class TextureAddress AddressX; // 0xC1 (1)
	enum class TextureAddress AddressY; // 0xC2 (1)
	struct FIntPoint ImportedSize; // 0xC4 (8)

	int32_t Blueprint_GetSizeY(); // Function Engine.Texture2D.Blueprint_GetSizeY(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33C2C80>
	int32_t Blueprint_GetSizeX(); // Function Engine.Texture2D.Blueprint_GetSizeX(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33C2C50>
};

// Class Engine.CurveLinearColorAtlas
class UCurveLinearColorAtlas : public UTexture2D {

public:

	uint32_t TextureSize; // 0xE8 (4)
	struct TArray<struct UCurveLinearColor> GradientCurves; // 0xF0 (16)

	bool GetCurvePosition(struct UCurveLinearColor InCurve, float& Position); // Function Engine.CurveLinearColorAtlas.GetCurvePosition(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A89E0>
};

// Class Engine.CurveVector
class UCurveVector : public UCurveBase {

public:

	struct FRichCurve FloatCurves[0x3]; // 0x30 (384)

	struct FVector GetVectorValue(float InTime); // Function Engine.CurveVector.GetVectorValue(Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32A8F40>
};

// Class Engine.DamageType
class UDamageType : public Object {

public:

	char bCausedByWorld : 1; // 0x28 (1)
	char bScaleMomentumByMass : 1; // 0x28 (1)
	char bRadialDamageVelChange : 1; // 0x28 (1)
	char pad_28_3 : 5; // 0x28 (1)
	float DamageImpulse; // 0x2C (4)
	float DestructibleImpulse; // 0x30 (4)
	float DestructibleDamageSpreadScale; // 0x34 (4)
	float DamageFalloff; // 0x38 (4)
};

// Class Engine.DebugCameraController
class ADebugCameraController : public APlayerController {

public:

	char bShowSelectedInfo : 1; // 0x570 (1)
	char bIsFrozenRendering : 1; // 0x570 (1)
	char bIsOrbitingSelectedActor : 1; // 0x570 (1)
	char bOrbitPivotUseCenter : 1; // 0x570 (1)
	char bEnableBufferVisualization : 1; // 0x570 (1)
	char bEnableBufferVisualizationFullMode : 1; // 0x570 (1)
	char bIsBufferVisualizationInputSetup : 1; // 0x570 (1)
	char bLastDisplayEnabled : 1; // 0x570 (1)
	struct UDrawFrustumComponent DrawFrustum; // 0x578 (8)
	struct UActor SelectedActor; // 0x580 (8)
	struct UPrimitiveComponent SelectedComponent; // 0x588 (8)
	struct FHitResult SelectedHitPoint; // 0x590 (136)
	struct APlayerController OriginalControllerRef; // 0x618 (8)
	struct UPlayer OriginalPlayer; // 0x620 (8)
	float SpeedScale; // 0x628 (4)
	float InitialMaxSpeed; // 0x62C (4)
	float InitialAccel; // 0x630 (4)
	float InitialDecel; // 0x634 (4)

	void ToggleDisplay(); // Function Engine.DebugCameraController.ToggleDisplay(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32AD750>
	void ShowDebugSelectedInfo(); // Function Engine.DebugCameraController.ShowDebugSelectedInfo(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32AD730>
	void SetPawnMovementSpeedScale(float NewSpeedScale); // Function Engine.DebugCameraController.SetPawnMovementSpeedScale(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32AD630>
	void ReceiveOnDeactivate(struct APlayerController RestoredPC); // Function Engine.DebugCameraController.ReceiveOnDeactivate(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void ReceiveOnActorSelected(struct UActor NewSelectedActor, struct FVector& SelectHitLocation, struct FVector& SelectHitNormal, struct FHitResult& Hit); // Function Engine.DebugCameraController.ReceiveOnActorSelected(Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void ReceiveOnActivate(struct APlayerController OriginalPC); // Function Engine.DebugCameraController.ReceiveOnActivate(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	struct UActor GetSelectedActor(); // Function Engine.DebugCameraController.GetSelectedActor(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32AD0B0>
};

// Class Engine.DebugCameraControllerSettings
class UDebugCameraControllerSettings : public UDeveloperSettings {

public:

	struct TArray<struct FDebugCameraControllerSettingsViewModeIndex> CycleViewModes; // 0x38 (16)
};

// Class Engine.HUD
class AHUD : public UActor {

public:

	struct APlayerController PlayerOwner; // 0x220 (8)
	char bLostFocusPaused : 1; // 0x228 (1)
	char bShowHUD : 1; // 0x228 (1)
	char bShowDebugInfo : 1; // 0x228 (1)
	char pad_228_3 : 5; // 0x228 (1)
	int32_t CurrentTargetIndex; // 0x22C (4)
	char bShowHitBoxDebugInfo : 1; // 0x230 (1)
	char pad_22D_1 : 7; // 0x22D (1)
	char pad_22E_0 : 1; // 0x22E (1)
	char bShowOverlays : 1; // 0x230 (1)
	char pad_22E_2 : 6; // 0x22E (1)
	char pad_22F_0 : 2; // 0x22F (1)
	char bEnableDebugTextShadow : 1; // 0x230 (1)
	char pad_22F_3 : 5; // 0x22F (1)
	struct TArray<struct UActor> PostRenderedActors; // 0x238 (16)
	struct TArray<struct FName> DebugDisplay; // 0x250 (16)
	struct TArray<struct FName> ToggledDebugCategories; // 0x260 (16)
	struct UCanvas Canvas; // 0x270 (8)
	struct UCanvas DebugCanvas; // 0x278 (8)
	struct TArray<struct FDebugTextInfo> DebugTextList; // 0x280 (16)
	struct UClass* ShowDebugTargetDesiredClass; // 0x290 (8)
	struct UActor ShowDebugTargetActor; // 0x298 (8)

	void ShowHUD(); // Function Engine.HUD.ShowHUD(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32BE150>
	void ShowDebugToggleSubCategory(struct FName Category); // Function Engine.HUD.ShowDebugToggleSubCategory(Final|Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32D5830>
	void ShowDebugForReticleTargetToggle(struct UClass* DesiredClass); // Function Engine.HUD.ShowDebugForReticleTargetToggle(Final|Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32D57B0>
	void ShowDebug(struct FName DebugType); // Function Engine.HUD.ShowDebug(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32D5720>
	void RemoveDebugText(struct UActor SrcActor, bool bLeaveDurationText); // Function Engine.HUD.RemoveDebugText(Final|Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x32D5590>
	void RemoveAllDebugStrings(); // Function Engine.HUD.RemoveAllDebugStrings(Final|Net|NetReliableNative|Event|Public|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x32D5570>
	void ReceiveHitBoxRelease(struct FName BoxName); // Function Engine.HUD.ReceiveHitBoxRelease(BlueprintCosmetic|Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void ReceiveHitBoxEndCursorOver(struct FName BoxName); // Function Engine.HUD.ReceiveHitBoxEndCursorOver(BlueprintCosmetic|Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void ReceiveHitBoxClick(struct FName BoxName); // Function Engine.HUD.ReceiveHitBoxClick(BlueprintCosmetic|Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void ReceiveHitBoxBeginCursorOver(struct FName BoxName); // Function Engine.HUD.ReceiveHitBoxBeginCursorOver(BlueprintCosmetic|Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void ReceiveDrawHUD(int32_t SizeX, int32_t SizeY); // Function Engine.HUD.ReceiveDrawHUD(BlueprintCosmetic|Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	struct FVector Project(struct FVector Location); // Function Engine.HUD.Project(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32D50F0>
	void PreviousDebugTarget(); // Function Engine.HUD.PreviousDebugTarget(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32CFC50>
	void NextDebugTarget(); // Function Engine.HUD.NextDebugTarget(Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0xDD0DF0>
	void GetTextSize(struct FString Text, float& OutWidth, float& OutHeight, struct UFont Font, float Scale); // Function Engine.HUD.GetTextSize(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32D4610>
	struct APlayerController GetOwningPlayerController(); // Function Engine.HUD.GetOwningPlayerController(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0xF23050>
	struct APawn GetOwningPawn(); // Function Engine.HUD.GetOwningPawn(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32D45E0>
	void GetActorsInSelectionRectangle(struct UClass* ClassFilter, struct FVector2D& FirstPoint, struct FVector2D& SecondPoint, struct TArray<struct UActor>& OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed); // Function Engine.HUD.GetActorsInSelectionRectangle(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // <VeiledExperts-Win64-Shipping.exe+0x32D43D0>
	void DrawTextureSimple(struct UTexture Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition); // Function Engine.HUD.DrawTextureSimple(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32D4240>
	void DrawTexture(struct UTexture Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, struct FLinearColor TintColor, enum class EBlendMode BlendMode, float Scale, bool bScalePosition, float Rotation, struct FVector2D RotPivot); // Function Engine.HUD.DrawTexture(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32D3E20>
	void DrawText(struct FString Text, struct FLinearColor TextColor, float ScreenX, float ScreenY, struct UFont Font, float Scale, bool bScalePosition); // Function Engine.HUD.DrawText(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32D3C00>
	void DrawRect(struct FLinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH); // Function Engine.HUD.DrawRect(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32D3A50>
	void DrawMaterialTriangle(struct UMaterialInterface Material, struct FVector2D V0_Pos, struct FVector2D V1_Pos, struct FVector2D V2_Pos, struct FVector2D V0_UV, struct FVector2D V1_UV, struct FVector2D V2_UV, struct FLinearColor V0_Color, struct FLinearColor V1_Color, struct FLinearColor V2_Color); // Function Engine.HUD.DrawMaterialTriangle(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32D3790>
	void DrawMaterialSimple(struct UMaterialInterface Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition); // Function Engine.HUD.DrawMaterialSimple(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32D3590>
	void DrawMaterial(struct UMaterialInterface Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, struct FVector2D RotPivot); // Function Engine.HUD.DrawMaterial(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32D3200>
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, struct FLinearColor LineColor, float LineThickness); // Function Engine.HUD.DrawLine(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32D3020>
	void Deproject(float ScreenX, float ScreenY, struct FVector& WorldPosition, struct FVector& WorldDirection); // Function Engine.HUD.Deproject(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32D2EB0>
	void AddHitBox(struct FVector2D Position, struct FVector2D Size, struct FName InName, bool bConsumesInput, int32_t Priority); // Function Engine.HUD.AddHitBox(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32D2BA0>
	void AddDebugText(struct FString DebugText, struct UActor SrcActor, float Duration, struct FVector Offset, struct FVector DesiredOffset, struct FColor TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, struct UFont InFont, float FontScale, bool bDrawShadow); // Function Engine.HUD.AddDebugText(Final|Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // <VeiledExperts-Win64-Shipping.exe+0x32D2820>
};

// Class Engine.DecalActor
class ADecalActor : public UActor {

public:

	struct UDecalComponent decal; // 0x220 (8)

	void SetDecalMaterial(struct UMaterialInterface NewDecalMaterial); // Function Engine.DecalActor.SetDecalMaterial(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32AD2E0>
	struct UMaterialInterface GetDecalMaterial(); // Function Engine.DecalActor.GetDecalMaterial(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32ACF90>
	struct UMaterialInstanceDynamic CreateDynamicMaterialInstance(); // Function Engine.DecalActor.CreateDynamicMaterialInstance(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32AC6C0>
};

// Class Engine.DecalComponent
class UDecalComponent : public USceneComponent {

public:

	struct UMaterialInterface DecalMaterial; // 0x1F0 (8)
	int32_t SortOrder; // 0x1F8 (4)
	float FadeScreenSize; // 0x1FC (4)
	float FadeStartDelay; // 0x200 (4)
	float FadeDuration; // 0x204 (4)
	float FadeInDuration; // 0x208 (4)
	float FadeInStartDelay; // 0x20C (4)
	char bDestroyOwnerAfterFade : 1; // 0x210 (1)
	char pad_210_1 : 7; // 0x210 (1)
	struct FVector DecalSize; // 0x214 (12)

	void SetSortOrder(int32_t Value); // Function Engine.DecalComponent.SetSortOrder(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32AD6B0>
	void SetFadeScreenSize(float NewFadeScreenSize); // Function Engine.DecalComponent.SetFadeScreenSize(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32AD5B0>
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade); // Function Engine.DecalComponent.SetFadeOut(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32AD4A0>
	void SetFadeIn(float StartDelay, float Duaration); // Function Engine.DecalComponent.SetFadeIn(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32AD3E0>
	void SetDecalMaterial(struct UMaterialInterface NewDecalMaterial); // Function Engine.DecalComponent.SetDecalMaterial(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32AD360>
	float GetFadeStartDelay(); // Function Engine.DecalComponent.GetFadeStartDelay(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32AD080>
	float GetFadeInStartDelay(); // Function Engine.DecalComponent.GetFadeInStartDelay(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32AD050>
	float GetFadeInDuration(); // Function Engine.DecalComponent.GetFadeInDuration(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32AD020>
	float GetFadeDuration(); // Function Engine.DecalComponent.GetFadeDuration(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32ACFF0>
	struct UMaterialInterface GetDecalMaterial(); // Function Engine.DecalComponent.GetDecalMaterial(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32ACFC0>
	struct UMaterialInstanceDynamic CreateDynamicMaterialInstance(); // Function Engine.DecalComponent.CreateDynamicMaterialInstance(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32AC6F0>
};

// Class Engine.DefaultPawn
class ADefaultPawn : public APawn {

public:

	float BaseTurnRate; // 0x280 (4)
	float BaseLookUpRate; // 0x284 (4)
	struct UPawnMovementComponent MovementComponent; // 0x288 (8)
	struct USphereComponent CollisionComponent; // 0x290 (8)
	struct UStaticMeshComponent MeshComponent; // 0x298 (8)
	char bAddDefaultMovementBindings : 1; // 0x2A0 (1)

	void TurnAtRate(float Rate); // Function Engine.DefaultPawn.TurnAtRate(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32AD770>
	void MoveUp_World(float Val); // Function Engine.DefaultPawn.MoveUp_World(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32AD260>
	void MoveRight(float Val); // Function Engine.DefaultPawn.MoveRight(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32AD1E0>
	void MoveForward(float Val); // Function Engine.DefaultPawn.MoveForward(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32AD160>
	void LookUpAtRate(float Rate); // Function Engine.DefaultPawn.LookUpAtRate(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32AD0E0>
};

// Class Engine.PhysicsVolume
class APhysicsVolume : public AVolume {

public:

	float TerminalVelocity; // 0x258 (4)
	int32_t Priority; // 0x25C (4)
	float FluidFriction; // 0x260 (4)
	char bWaterVolume : 1; // 0x264 (1)
	char bPhysicsOnContact : 1; // 0x264 (1)
};

// Class Engine.DemoNetDriver
class UDemoNetDriver : public UNetDriver {

public:

	struct TMap<struct FString, struct FRollbackNetStartupActorInfo> RollbackNetStartupActors; // 0x840 (80)
	float CheckpointSaveMaxMSPerFrame; // 0xC54 (4)
	struct TArray<struct FMulticastRecordOptions> MulticastRecordOptions; // 0xC88 (16)
	bool bIsLocalReplay; // 0xCE8 (1)
	struct TArray<struct APlayerController> SpectatorControllers; // 0xCF0 (16)
};

// Class Engine.PendingNetGame
class UPendingNetGame : public Object {

public:

	struct UNetDriver NetDriver; // 0x30 (8)
	struct UDemoNetDriver DemoNetDriver; // 0x38 (8)
};

// Class Engine.TextureLODSettings
class UTextureLODSettings : public Object {

public:

	struct TArray<struct FTextureLODGroup> TextureLODGroups; // 0x28 (16)
};

// Class Engine.DeviceProfile
class UDeviceProfile : public UTextureLODSettings {

public:

	struct FString DeviceType; // 0x38 (16)
	struct FString BaseProfileName; // 0x48 (16)
	struct Object Parent; // 0x58 (8)
	struct TArray<struct FString> CVars; // 0x78 (16)
};

// Class Engine.DeviceProfileManager
class UDeviceProfileManager : public Object {

public:

	struct TArray<struct Object> Profiles; // 0x28 (16)
};

// Class Engine.DialogueVoice
class UDialogueVoice : public Object {

public:

	enum class EGrammaticalGender Gender; // 0x28 (1)
	enum class EGrammaticalNumber Plurality; // 0x29 (1)
	struct FGuid LocalizationGUID; // 0x2C (16)
};

// Class Engine.DialogueWave
class UDialogueWave : public Object {

public:

	char bMature : 1; // 0x28 (1)
	char bOverride_SubtitleOverride : 1; // 0x28 (1)
	char pad_28_2 : 6; // 0x28 (1)
	struct FString SpokenText; // 0x30 (16)
	struct FString SubtitleOverride; // 0x40 (16)
	struct TArray<struct FDialogueContextMapping> ContextMappings; // 0x50 (16)
	struct FGuid LocalizationGUID; // 0x60 (16)
};

// Class Engine.Light
class ALight : public UActor {

public:

	struct ULightComponent LightComponent; // 0x220 (8)
	char bEnabled : 1; // 0x228 (1)

	void ToggleEnabled(); // Function Engine.Light.ToggleEnabled(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333F4B0>
	void SetLightFunctionScale(struct FVector NewLightFunctionScale); // Function Engine.Light.SetLightFunctionScale(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333ED40>
	void SetLightFunctionMaterial(struct UMaterialInterface NewLightFunctionMaterial); // Function Engine.Light.SetLightFunctionMaterial(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333EC40>
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance); // Function Engine.Light.SetLightFunctionFadeDistance(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333EB40>
	void SetLightColor(struct FLinearColor NewLightColor); // Function Engine.Light.SetLightColor(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333E970>
	void SetEnabled(bool bSetEnabled); // Function Engine.Light.SetEnabled(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333E5D0>
	void SetCastShadows(bool bNewValue); // Function Engine.Light.SetCastShadows(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333E1D0>
	void SetBrightness(float NewBrightness); // Function Engine.Light.SetBrightness(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333E030>
	void SetAffectTranslucentLighting(bool bNewValue); // Function Engine.Light.SetAffectTranslucentLighting(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333DD20>
	void OnRep_bEnabled(); // Function Engine.Light.OnRep_bEnabled(Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32BE150>
	bool IsEnabled(); // Function Engine.Light.IsEnabled(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x333D620>
	struct FLinearColor GetLightColor(); // Function Engine.Light.GetLightColor(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x333D540>
	float GetBrightness(); // Function Engine.Light.GetBrightness(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x333D4E0>
};

// Class Engine.LightComponentBase
class ULightComponentBase : public USceneComponent {

public:

	struct FGuid LightGuid; // 0x1F0 (16)
	float Brightness; // 0x200 (4)
	float Intensity; // 0x204 (4)
	struct FColor LightColor; // 0x208 (4)
	char bAffectsWorld : 1; // 0x20C (1)
	char CastShadows : 1; // 0x20C (1)
	char CastStaticShadows : 1; // 0x20C (1)
	char CastDynamicShadows : 1; // 0x20C (1)
	char bAffectTranslucentLighting : 1; // 0x20C (1)
	char bTransmission : 1; // 0x20C (1)
	char bCastVolumetricShadow : 1; // 0x20C (1)
	char bCastDeepShadow : 1; // 0x20C (1)
	char bCastRaytracedShadow : 1; // 0x20D (1)
	char bAffectReflection : 1; // 0x20D (1)
	char bAffectGlobalIllumination : 1; // 0x20D (1)
	char pad_20D_3 : 5; // 0x20D (1)
	float IndirectLightingIntensity; // 0x210 (4)
	float VolumetricScatteringIntensity; // 0x214 (4)
	int32_t SamplesPerPixel; // 0x218 (4)

	void SetSamplesPerPixel(int32_t NewValue); // Function Engine.LightComponentBase.SetSamplesPerPixel(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333F000>
	void SetCastVolumetricShadow(bool bNewValue); // Function Engine.LightComponentBase.SetCastVolumetricShadow(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333E2F0>
	void SetCastShadows(bool bNewValue); // Function Engine.LightComponentBase.SetCastShadows(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333E260>
	void SetCastRaytracedShadow(bool bNewValue); // Function Engine.LightComponentBase.SetCastRaytracedShadow(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333E140>
	void SetCastDeepShadow(bool bNewValue); // Function Engine.LightComponentBase.SetCastDeepShadow(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333E0B0>
	void SetAffectReflection(bool bNewValue); // Function Engine.LightComponentBase.SetAffectReflection(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333DC90>
	void SetAffectGlobalIllumination(bool bNewValue); // Function Engine.LightComponentBase.SetAffectGlobalIllumination(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333DC00>
	struct FLinearColor GetLightColor(); // Function Engine.LightComponentBase.GetLightColor(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x333D580>
};

// Class Engine.LightComponent
class ULightComponent : public ULightComponentBase {

public:

	float Temperature; // 0x220 (4)
	float MaxDrawDistance; // 0x224 (4)
	float MaxDistanceFadeRange; // 0x228 (4)
	char bUseTemperature : 1; // 0x22C (1)
	char pad_22C_1 : 7; // 0x22C (1)
	int32_t ShadowMapChannel; // 0x230 (4)
	float MinRoughness; // 0x238 (4)
	float SpecularScale; // 0x23C (4)
	float ShadowResolutionScale; // 0x240 (4)
	float ShadowBias; // 0x244 (4)
	float ShadowSlopeBias; // 0x248 (4)
	float ShadowSharpen; // 0x24C (4)
	float ContactShadowLength; // 0x250 (4)
	char ContactShadowLengthInWS : 1; // 0x254 (1)
	char pad_24D_1 : 7; // 0x24D (1)
	char pad_24E_0 : 1; // 0x24E (1)
	char InverseSquaredFalloff : 1; // 0x254 (1)
	char pad_24E_2 : 6; // 0x24E (1)
	char pad_24F_0 : 2; // 0x24F (1)
	char CastTranslucentShadows : 1; // 0x254 (1)
	char pad_24F_3 : 5; // 0x24F (1)
	char pad_250_0 : 3; // 0x250 (1)
	char bCastShadowsFromCinematicObjectsOnly : 1; // 0x254 (1)
	char pad_250_4 : 4; // 0x250 (1)
	char pad_251_0 : 4; // 0x251 (1)
	char bAffectDynamicIndirectLighting : 1; // 0x254 (1)
	char pad_251_5 : 3; // 0x251 (1)
	char pad_252_0 : 5; // 0x252 (1)
	char bForceCachedShadowsForMovablePrimitives : 1; // 0x254 (1)
	char pad_252_6 : 2; // 0x252 (1)
	struct FLightingChannels LightingChannels; // 0x258 (1)
	struct UMaterialInterface LightFunctionMaterial; // 0x260 (8)
	struct FVector LightFunctionScale; // 0x268 (12)
	struct UTextureLightProfile IESTexture; // 0x278 (8)
	char bUseIESBrightness : 1; // 0x280 (1)
	char pad_270_1 : 7; // 0x270 (1)
	float IESBrightnessScale; // 0x284 (4)
	float LightFunctionFadeDistance; // 0x288 (4)
	float DisabledBrightness; // 0x28C (4)
	char bEnableLightShaftBloom : 1; // 0x290 (1)
	char pad_27D_1 : 7; // 0x27D (1)
	float BloomScale; // 0x294 (4)
	float BloomThreshold; // 0x298 (4)
	float BloomMaxBrightness; // 0x29C (4)
	struct FColor BloomTint; // 0x2A0 (4)
	bool bUseRayTracedDistanceFieldShadows; // 0x2A4 (1)
	float RayStartOffsetDepthScale; // 0x2A8 (4)

	void SetVolumetricScatteringIntensity(float NewIntensity); // Function Engine.LightComponent.SetVolumetricScatteringIntensity(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333F430>
	void SetUseIESBrightness(bool bNewValue); // Function Engine.LightComponent.SetUseIESBrightness(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333F3A0>
	void SetTransmission(bool bNewValue); // Function Engine.LightComponent.SetTransmission(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333F310>
	void SetTemperature(float NewTemperature); // Function Engine.LightComponent.SetTemperature(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333F290>
	void SetSpecularScale(float NewValue); // Function Engine.LightComponent.SetSpecularScale(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333F210>
	void SetShadowSlopeBias(float NewValue); // Function Engine.LightComponent.SetShadowSlopeBias(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333F100>
	void SetShadowBias(float NewValue); // Function Engine.LightComponent.SetShadowBias(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333F080>
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2); // Function Engine.LightComponent.SetLightingChannels(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333EE60>
	void SetLightFunctionScale(struct FVector NewLightFunctionScale); // Function Engine.LightComponent.SetLightFunctionScale(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333EDD0>
	void SetLightFunctionMaterial(struct UMaterialInterface NewLightFunctionMaterial); // Function Engine.LightComponent.SetLightFunctionMaterial(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333ECC0>
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance); // Function Engine.LightComponent.SetLightFunctionFadeDistance(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333EBC0>
	void SetLightFunctionDisabledBrightness(float NewValue); // Function Engine.LightComponent.SetLightFunctionDisabledBrightness(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333EAC0>
	void SetLightColor(struct FLinearColor NewLightColor, bool bSRGB); // Function Engine.LightComponent.SetLightColor(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333E9F0>
	void SetIntensity(float NewIntensity); // Function Engine.LightComponent.SetIntensity(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333E870>
	void SetIndirectLightingIntensity(float NewIntensity); // Function Engine.LightComponent.SetIndirectLightingIntensity(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333E7F0>
	void SetIESTexture(struct UTextureLightProfile NewValue); // Function Engine.LightComponent.SetIESTexture(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333E770>
	void SetIESBrightnessScale(float NewValue); // Function Engine.LightComponent.SetIESBrightnessScale(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333E6F0>
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue); // Function Engine.LightComponent.SetForceCachedShadowsForMovablePrimitives(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333E660>
	void SetEnableLightShaftBloom(bool bNewValue); // Function Engine.LightComponent.SetEnableLightShaftBloom(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333E540>
	void SetBloomTint(struct FColor NewValue); // Function Engine.LightComponent.SetBloomTint(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333DFC0>
	void SetBloomThreshold(float NewValue); // Function Engine.LightComponent.SetBloomThreshold(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333DF40>
	void SetBloomScale(float NewValue); // Function Engine.LightComponent.SetBloomScale(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333DEC0>
	void SetBloomMaxBrightness(float NewValue); // Function Engine.LightComponent.SetBloomMaxBrightness(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333DE40>
	void SetAffectTranslucentLighting(bool bNewValue); // Function Engine.LightComponent.SetAffectTranslucentLighting(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333DDB0>
	void SetAffectDynamicIndirectLighting(bool bNewValue); // Function Engine.LightComponent.SetAffectDynamicIndirectLighting(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333DB70>
};

// Class Engine.DirectionalLightComponent
class UDirectionalLightComponent : public ULightComponent {

public:

	float ShadowCascadeBiasDistribution; // 0x320 (4)
	char bEnableLightShaftOcclusion : 1; // 0x324 (1)
	char pad_324_1 : 7; // 0x324 (1)
	float OcclusionMaskDarkness; // 0x328 (4)
	float OcclusionDepthRange; // 0x32C (4)
	struct FVector LightShaftOverrideDirection; // 0x330 (12)
	float WholeSceneDynamicShadowRadius; // 0x33C (4)
	float DynamicShadowDistanceMovableLight; // 0x340 (4)
	float DynamicShadowDistanceStationaryLight; // 0x344 (4)
	int32_t DynamicShadowCascades; // 0x348 (4)
	float CascadeDistributionExponent; // 0x34C (4)
	float CascadeTransitionFraction; // 0x350 (4)
	float ShadowDistanceFadeoutFraction; // 0x354 (4)
	char bUseInsetShadowsForMovableObjects : 1; // 0x358 (1)
	char pad_355_1 : 7; // 0x355 (1)
	int32_t FarShadowCascadeCount; // 0x35C (4)
	float FarShadowDistance; // 0x360 (4)
	float DistanceFieldShadowDistance; // 0x364 (4)
	float LightSourceAngle; // 0x368 (4)
	float LightSourceSoftAngle; // 0x36C (4)
	float TraceDistance; // 0x370 (4)
	struct FLightmassDirectionalLightSettings LightmassSettings; // 0x374 (16)
	char bCastModulatedShadows : 1; // 0x384 (1)
	char pad_37E_1 : 7; // 0x37E (1)
	struct FColor ModulatedShadowColor; // 0x388 (4)
	float ShadowAmount; // 0x38C (4)
	char bUsedAsAtmosphereSunLight : 1; // 0x390 (1)
	char pad_387_1 : 7; // 0x387 (1)
	int32_t AtmosphereSunLightIndex; // 0x394 (4)

	void SetShadowDistanceFadeoutFraction(float NewValue); // Function Engine.DirectionalLightComponent.SetShadowDistanceFadeoutFraction(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32B0AF0>
	void SetShadowAmount(float NewValue); // Function Engine.DirectionalLightComponent.SetShadowAmount(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32B0A70>
	void SetOcclusionMaskDarkness(float NewValue); // Function Engine.DirectionalLightComponent.SetOcclusionMaskDarkness(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32B09F0>
	void SetLightShaftOverrideDirection(struct FVector NewValue); // Function Engine.DirectionalLightComponent.SetLightShaftOverrideDirection(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32B0960>
	void SetEnableLightShaftOcclusion(bool bNewValue); // Function Engine.DirectionalLightComponent.SetEnableLightShaftOcclusion(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32B08D0>
	void SetDynamicShadowDistanceStationaryLight(float NewValue); // Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceStationaryLight(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32B0850>
	void SetDynamicShadowDistanceMovableLight(float NewValue); // Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceMovableLight(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32B07D0>
	void SetDynamicShadowCascades(int32_t NewValue); // Function Engine.DirectionalLightComponent.SetDynamicShadowCascades(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32B0750>
	void SetCascadeTransitionFraction(float NewValue); // Function Engine.DirectionalLightComponent.SetCascadeTransitionFraction(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32B06D0>
	void SetCascadeDistributionExponent(float NewValue); // Function Engine.DirectionalLightComponent.SetCascadeDistributionExponent(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32B0650>
};

// Class Engine.DistributionFloat
class UDistributionFloat : public UDistribution {

public:

	char bCanBeBaked : 1; // 0x30 (1)
	char pad_30_1 : 1; // 0x30 (1)
	char bBakedDataSuccesfully : 1; // 0x30 (1)
};

// Class Engine.DistributionFloatConstant
class UDistributionFloatConstant : public UDistributionFloat {

public:

	float Constant; // 0x38 (4)
};

// Class Engine.DistributionFloatConstantCurve
class UDistributionFloatConstantCurve : public UDistributionFloat {

public:

	struct FInterpCurveFloat ConstantCurve; // 0x38 (24)
};

// Class Engine.DistributionFloatParameterBase
class UDistributionFloatParameterBase : public UDistributionFloatConstant {

public:

	struct FName ParameterName; // 0x40 (8)
	float MinInput; // 0x48 (4)
	float MaxInput; // 0x4C (4)
	float MinOutput; // 0x50 (4)
	float MaxOutput; // 0x54 (4)
	enum class DistributionParamMode ParamMode; // 0x58 (1)
};

// Class Engine.DistributionFloatUniform
class UDistributionFloatUniform : public UDistributionFloat {

public:

	float Min; // 0x38 (4)
	float Max; // 0x3C (4)
};

// Class Engine.DistributionFloatUniformCurve
class UDistributionFloatUniformCurve : public UDistributionFloat {

public:

	struct FInterpCurveVector2D ConstantCurve; // 0x38 (24)
};

// Class Engine.DistributionVector
class UDistributionVector : public UDistribution {

public:

	char bCanBeBaked : 1; // 0x30 (1)
	char bIsDirty : 1; // 0x30 (1)
	char bBakedDataSuccesfully : 1; // 0x30 (1)
};

// Class Engine.DistributionVectorConstant
class UDistributionVectorConstant : public UDistributionVector {

public:

	struct FVector Constant; // 0x38 (12)
	char bLockAxes : 1; // 0x44 (1)
	char pad_44_1 : 7; // 0x44 (1)
	enum class EDistributionVectorLockFlags LockedAxes; // 0x48 (1)
};

// Class Engine.DistributionVectorConstantCurve
class UDistributionVectorConstantCurve : public UDistributionVector {

public:

	struct FInterpCurveVector ConstantCurve; // 0x38 (24)
	char bLockAxes : 1; // 0x50 (1)
	char pad_50_1 : 7; // 0x50 (1)
	enum class EDistributionVectorLockFlags LockedAxes; // 0x54 (1)
};

// Class Engine.DistributionVectorParameterBase
class UDistributionVectorParameterBase : public UDistributionVectorConstant {

public:

	struct FName ParameterName; // 0x50 (8)
	struct FVector MinInput; // 0x58 (12)
	struct FVector MaxInput; // 0x64 (12)
	struct FVector MinOutput; // 0x70 (12)
	struct FVector MaxOutput; // 0x7C (12)
	enum class DistributionParamMode ParamModes[0x3]; // 0x88 (3)
};

// Class Engine.DistributionVectorUniform
class UDistributionVectorUniform : public UDistributionVector {

public:

	struct FVector Max; // 0x38 (12)
	struct FVector Min; // 0x44 (12)
	char bLockAxes : 1; // 0x50 (1)
	char pad_50_1 : 7; // 0x50 (1)
	enum class EDistributionVectorLockFlags LockedAxes; // 0x54 (1)
	enum class EDistributionVectorMirrorFlags MirrorFlags[0x3]; // 0x55 (3)
	char bUseExtremes : 1; // 0x58 (1)
};

// Class Engine.DistributionVectorUniformCurve
class UDistributionVectorUniformCurve : public UDistributionVector {

public:

	struct FInterpCurveTwoVectors ConstantCurve; // 0x38 (24)
	char bLockAxes1 : 1; // 0x50 (1)
	char bLockAxes2 : 1; // 0x50 (1)
	char pad_50_2 : 6; // 0x50 (1)
	enum class EDistributionVectorLockFlags LockedAxes[0x2]; // 0x54 (2)
	enum class EDistributionVectorMirrorFlags MirrorFlags[0x3]; // 0x56 (3)
	char bUseExtremes : 1; // 0x5C (1)
};

// Class Engine.DrawFrustumComponent
class UDrawFrustumComponent : public UPrimitiveComponent {

public:

	struct FColor FrustumColor; // 0x408 (4)
	float FrustumAngle; // 0x40C (4)
	float FrustumAspectRatio; // 0x410 (4)
	float FrustumStartDist; // 0x414 (4)
	float FrustumEndDist; // 0x418 (4)
	struct UTexture Texture; // 0x420 (8)
};

// Class Engine.EdGraph
class UEdGraph : public Object {

public:

	struct UClass* Schema; // 0x28 (8)
	struct TArray<struct UEdGraphNode> Nodes; // 0x30 (16)
	char bEditable : 1; // 0x40 (1)
	char bAllowDeletion : 1; // 0x40 (1)
	char bAllowRenaming : 1; // 0x40 (1)
};

// Class Engine.GraphNodeContextMenuContext
class UGraphNodeContextMenuContext : public Object {

public:

	struct UBlueprint Blueprint; // 0x28 (8)
	struct UEdGraph Graph; // 0x30 (8)
	struct UEdGraphNode Node; // 0x38 (8)
	bool bIsDebugging; // 0x48 (1)
};

// Class Engine.EdGraphNode
class UEdGraphNode : public Object {

public:

	struct TArray<struct UEdGraphPin_Deprecated> DeprecatedPins; // 0x38 (16)
	int32_t NodePosX; // 0x48 (4)
	int32_t NodePosY; // 0x4C (4)
	int32_t NodeWidth; // 0x50 (4)
	int32_t NodeHeight; // 0x54 (4)
	enum class ENodeAdvancedPins AdvancedPinDisplay; // 0x58 (1)
	enum class ENodeEnabledState EnabledState; // 0x59 (1)
	char pad_4A_0 : 1; // 0x4A (1)
	char bDisplayAsDisabled : 1; // 0x5B (1)
	char pad_4A_2 : 6; // 0x4A (1)
	char pad_4B_0 : 2; // 0x4B (1)
	char bUserSetEnabledState : 1; // 0x5B (1)
	char pad_4B_3 : 5; // 0x4B (1)
	char pad_4C_0 : 4; // 0x4C (1)
	char bIsNodeEnabled : 1; // 0x5B (1)
	char pad_4C_5 : 3; // 0x4C (1)
	char pad_4D_0 : 6; // 0x4D (1)
	char bHasCompilerMessage : 1; // 0x5B (1)
	char pad_4D_7 : 1; // 0x4D (1)
	struct FString NodeComment; // 0x60 (16)
	int32_t ErrorType; // 0x70 (4)
	struct FString ErrorMsg; // 0x78 (16)
	struct FGuid NodeGuid; // 0x88 (16)
};

// Class Engine.EdGraphNode_Documentation
class UEdGraphNode_Documentation : public UEdGraphNode {

public:

	struct FString Link; // 0x98 (16)
	struct FString Excerpt; // 0xA8 (16)
};

// Class Engine.EdGraphPin_Deprecated
class UEdGraphPin_Deprecated : public Object {

public:

	struct FString PinName; // 0x28 (16)
	struct FString PinToolTip; // 0x38 (16)
	enum class EEdGraphPinDirection Direction; // 0x48 (1)
	struct FEdGraphPinType PinType; // 0x50 (88)
	struct FString DefaultValue; // 0xA8 (16)
	struct FString AutogeneratedDefaultValue; // 0xB8 (16)
	struct Object DefaultObject; // 0xC8 (8)
	struct FText DefaultTextValue; // 0xD0 (24)
	struct TArray<struct UEdGraphPin_Deprecated> LinkedTo; // 0xE8 (16)
	struct TArray<struct UEdGraphPin_Deprecated> SubPins; // 0xF8 (16)
	struct UEdGraphPin_Deprecated ParentPin; // 0x108 (8)
	struct UEdGraphPin_Deprecated ReferencePassThroughConnection; // 0x110 (8)
};

// Class Engine.Emitter
class AEmitter : public UActor {

public:

	struct UParticleSystemComponent ParticleSystemComponent; // 0x220 (8)
	char bDestroyOnSystemFinish : 1; // 0x228 (1)
	char bPostUpdateTickGroup : 1; // 0x228 (1)
	char bCurrentlyActive : 1; // 0x228 (1)
	char pad_228_3 : 5; // 0x228 (1)
	struct FMulticastInlineDelegate OnParticleSpawn; // 0x230 (16)
	struct FMulticastInlineDelegate OnParticleBurst; // 0x240 (16)
	struct FMulticastInlineDelegate OnParticleDeath; // 0x250 (16)
	struct FMulticastInlineDelegate OnParticleCollide; // 0x260 (16)

	void ToggleActive(); // Function Engine.Emitter.ToggleActive(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32B3B80>
	void SetVectorParameter(struct FName ParameterName, struct FVector Param); // Function Engine.Emitter.SetVectorParameter(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32B3AB0>
	void SetTemplate(struct UParticleSystem NewTemplate); // Function Engine.Emitter.SetTemplate(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32B3A20>
	void SetMaterialParameter(struct FName ParameterName, struct UMaterialInterface Param); // Function Engine.Emitter.SetMaterialParameter(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32B3960>
	void SetFloatParameter(struct FName ParameterName, float Param); // Function Engine.Emitter.SetFloatParameter(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32B3890>
	void SetColorParameter(struct FName ParameterName, struct FLinearColor Param); // Function Engine.Emitter.SetColorParameter(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32B37C0>
	void SetActorParameter(struct FName ParameterName, struct UActor Param); // Function Engine.Emitter.SetActorParameter(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32B3700>
	void OnRep_bCurrentlyActive(); // Function Engine.Emitter.OnRep_bCurrentlyActive(Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32B36E0>
	void OnParticleSystemFinished(struct UParticleSystemComponent FinishedComponent); // Function Engine.Emitter.OnParticleSystemFinished(Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32B3650>
	bool IsActive(); // Function Engine.Emitter.IsActive(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32B3620>
	void Deactivate(); // Function Engine.Emitter.Deactivate(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32B3600>
	void Activate(); // Function Engine.Emitter.Activate(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32B35E0>
};

// Class Engine.EmitterCameraLensEffectBase
class AEmitterCameraLensEffectBase : public AEmitter {

public:

	struct UParticleSystem PS_CameraEffect; // 0x270 (8)
	struct UParticleSystem PS_CameraEffectNonExtremeContent; // 0x278 (8)
	struct APlayerCameraManager BaseCamera; // 0x280 (8)
	struct FTransform RelativeTransform; // 0x290 (48)
	float BaseFOV; // 0x2C0 (4)
	char bAllowMultipleInstances : 1; // 0x2C4 (1)
	char pad_2BC_1 : 7; // 0x2BC (1)
	char pad_2BD_0 : 1; // 0x2BD (1)
	char bResetWhenRetriggered : 1; // 0x2C4 (1)
	char pad_2BD_2 : 6; // 0x2BD (1)
	struct TArray<struct UClass*> EmittersToTreatAsSame; // 0x2C8 (16)
	float DistFromCamera; // 0x2D8 (4)
};

// Class Engine.EngineMessage
class UEngineMessage : public ULocalMessage {

public:

	struct FString FailedPlaceMessage; // 0x28 (16)
	struct FString MaxedOutMessage; // 0x38 (16)
	struct FString EnteredMessage; // 0x48 (16)
	struct FString LeftMessage; // 0x58 (16)
	struct FString GlobalNameChange; // 0x68 (16)
	struct FString SpecEnteredMessage; // 0x78 (16)
	struct FString NewPlayerMessage; // 0x88 (16)
	struct FString NewSpecMessage; // 0x98 (16)
};

// Class Engine.ExponentialHeightFog
class AExponentialHeightFog : public AInfo {

public:

	struct UExponentialHeightFogComponent Component; // 0x220 (8)
	char bEnabled : 1; // 0x228 (1)

	void OnRep_bEnabled(); // Function Engine.ExponentialHeightFog.OnRep_bEnabled(Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32BE150>
};

// Class Engine.ExponentialHeightFogComponent
class UExponentialHeightFogComponent : public USceneComponent {

public:

	float FogDensity; // 0x1F0 (4)
	float FogHeightFalloff; // 0x1F4 (4)
	struct FExponentialHeightFogData SecondFogData; // 0x1F8 (12)
	struct FLinearColor FogInscatteringColor; // 0x204 (16)
	struct UTextureCube InscatteringColorCubemap; // 0x218 (8)
	float InscatteringColorCubemapAngle; // 0x220 (4)
	struct FLinearColor InscatteringTextureTint; // 0x224 (16)
	float FullyDirectionalInscatteringColorDistance; // 0x234 (4)
	float NonDirectionalInscatteringColorDistance; // 0x238 (4)
	float DirectionalInscatteringExponent; // 0x23C (4)
	float DirectionalInscatteringStartDistance; // 0x240 (4)
	struct FLinearColor DirectionalInscatteringColor; // 0x244 (16)
	float FogMaxOpacity; // 0x254 (4)
	float StartDistance; // 0x258 (4)
	float FogCutoffDistance; // 0x25C (4)
	bool bEnableVolumetricFog; // 0x260 (1)
	float VolumetricFogScatteringDistribution; // 0x264 (4)
	struct FColor VolumetricFogAlbedo; // 0x268 (4)
	struct FLinearColor VolumetricFogEmissive; // 0x26C (16)
	float VolumetricFogExtinctionScale; // 0x27C (4)
	float VolumetricFogDistance; // 0x280 (4)
	float VolumetricFogStaticLightingScatteringIntensity; // 0x284 (4)
	bool bOverrideLightColorsWithFogInscatteringColors; // 0x288 (1)

	void SetVolumetricFogScatteringDistribution(float NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogScatteringDistribution(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32BEBA0>
	void SetVolumetricFogExtinctionScale(float NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogExtinctionScale(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32BEB20>
	void SetVolumetricFogEmissive(struct FLinearColor NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogEmissive(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32BEAA0>
	void SetVolumetricFogDistance(float NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogDistance(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32BEA20>
	void SetVolumetricFogAlbedo(struct FColor NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogAlbedo(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32BE9B0>
	void SetVolumetricFog(bool bNewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFog(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32BE920>
	void SetStartDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetStartDistance(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32BE8A0>
	void SetNonDirectionalInscatteringColorDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetNonDirectionalInscatteringColorDistance(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32BE820>
	void SetInscatteringTextureTint(struct FLinearColor Value); // Function Engine.ExponentialHeightFogComponent.SetInscatteringTextureTint(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32BE720>
	void SetInscatteringColorCubemapAngle(float Value); // Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemapAngle(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32BE6A0>
	void SetInscatteringColorCubemap(struct UTextureCube Value); // Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemap(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32BE620>
	void SetFullyDirectionalInscatteringColorDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetFullyDirectionalInscatteringColorDistance(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32BE5A0>
	void SetFogMaxOpacity(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogMaxOpacity(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32BE4A0>
	void SetFogInscatteringColor(struct FLinearColor Value); // Function Engine.ExponentialHeightFogComponent.SetFogInscatteringColor(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32BE420>
	void SetFogHeightFalloff(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogHeightFalloff(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32833C0>
	void SetFogDensity(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogDensity(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3283BA0>
	void SetFogCutoffDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogCutoffDistance(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32BE3A0>
	void SetDirectionalInscatteringStartDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartDistance(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32BE320>
	void SetDirectionalInscatteringExponent(float Value); // Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringExponent(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32BE2A0>
	void SetDirectionalInscatteringColor(struct FLinearColor Value); // Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringColor(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32BE220>
};

// Class Engine.Exporter
class UExporter : public Object {

public:

	struct UClass* SupportedClass; // 0x28 (8)
	struct Object ExportRootScope; // 0x30 (8)
	struct TArray<struct FString> FormatExtension; // 0x38 (16)
	struct TArray<struct FString> FormatDescription; // 0x48 (16)
	int32_t PreferredFormatIndex; // 0x58 (4)
	int32_t TextIndent; // 0x5C (4)
	char bText : 1; // 0x60 (1)
	char bSelectedOnly : 1; // 0x60 (1)
	char bForceFileOperations : 1; // 0x60 (1)
	char pad_60_3 : 5; // 0x60 (1)
	struct UAssetExportTask ExportTask; // 0x68 (8)

	bool ScriptRunAssetExportTask(struct UAssetExportTask Task); // Function Engine.Exporter.ScriptRunAssetExportTask(Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	bool RunAssetExportTasks(struct TArray<struct UAssetExportTask>& ExportTasks); // Function Engine.Exporter.RunAssetExportTasks(Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32BE170>
	bool RunAssetExportTask(struct UAssetExportTask Task); // Function Engine.Exporter.RunAssetExportTask(Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x11A4100>
};

// Class Engine.FloatingPawnMovement
class UFloatingPawnMovement : public UPawnMovementComponent {

public:

	float MaxSpeed; // 0x138 (4)
	float Acceleration; // 0x13C (4)
	float Deceleration; // 0x140 (4)
	float TurningBoost; // 0x144 (4)
	char bPositionCorrected : 1; // 0x148 (1)
};

// Class Engine.Font
class UFont : public Object {

public:

	enum class EFontCacheType FontCacheType; // 0x30 (1)
	struct TArray<struct FFontCharacter> Characters; // 0x38 (16)
	struct TArray<struct UTexture2D> Textures; // 0x48 (16)
	int32_t IsRemapped; // 0x58 (4)
	float EmScale; // 0x5C (4)
	float Ascent; // 0x60 (4)
	float Descent; // 0x64 (4)
	float Leading; // 0x68 (4)
	int32_t Kerning; // 0x6C (4)
	struct FFontImportOptionsData ImportOptions; // 0x70 (176)
	int32_t NumCharacters; // 0x120 (4)
	struct TArray<int32_t> MaxCharHeight; // 0x128 (16)
	float ScalingFactor; // 0x138 (4)
	int32_t LegacyFontSize; // 0x13C (4)
	struct FName LegacyFontName; // 0x140 (8)
	struct FCompositeFont CompositeFont; // 0x148 (56)
};

// Class Engine.FontFace
class UFontFace : public Object {

public:

	struct FString SourceFilename; // 0x30 (16)
	enum class EFontHinting Hinting; // 0x40 (1)
	enum class EFontLoadingPolicy LoadingPolicy; // 0x41 (1)
	enum class EFontLayoutMethod LayoutMethod; // 0x42 (1)
};

// Class Engine.FontImportOptions
class UFontImportOptions : public Object {

public:

	struct FFontImportOptionsData Data; // 0x28 (176)
};

// Class Engine.ForceFeedbackAttenuation
class UForceFeedbackAttenuation : public Object {

public:

	struct FForceFeedbackAttenuationSettings Attenuation; // 0x28 (176)
};

// Class Engine.ForceFeedbackComponent
class UForceFeedbackComponent : public USceneComponent {

public:

	struct UForceFeedbackEffect ForceFeedbackEffect; // 0x1F0 (8)
	char bAutoDestroy : 1; // 0x1F8 (1)
	char bStopWhenOwnerDestroyed : 1; // 0x1F8 (1)
	char bLooping : 1; // 0x1F8 (1)
	char bIgnoreTimeDilation : 1; // 0x1F8 (1)
	char bOverrideAttenuation : 1; // 0x1F8 (1)
	char pad_1F8_5 : 3; // 0x1F8 (1)
	float IntensityMultiplier; // 0x1FC (4)
	struct UForceFeedbackAttenuation AttenuationSettings; // 0x200 (8)
	struct FForceFeedbackAttenuationSettings AttenuationOverrides; // 0x208 (176)
	struct FMulticastInlineDelegate OnForceFeedbackFinished; // 0x2B8 (16)

	void Stop(); // Function Engine.ForceFeedbackComponent.Stop(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32BEC20>
	void SetIntensityMultiplier(float NewIntensityMultiplier); // Function Engine.ForceFeedbackComponent.SetIntensityMultiplier(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32BE7A0>
	void SetForceFeedbackEffect(struct UForceFeedbackEffect NewForceFeedbackEffect); // Function Engine.ForceFeedbackComponent.SetForceFeedbackEffect(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32BE520>
	void Play(float StartTime); // Function Engine.ForceFeedbackComponent.Play(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3296650>
	bool BP_GetAttenuationSettingsToApply(struct FForceFeedbackAttenuationSettings& OutAttenuationSettings); // Function Engine.ForceFeedbackComponent.BP_GetAttenuationSettingsToApply(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32BDF30>
	void AdjustAttenuation(struct FForceFeedbackAttenuationSettings& InAttenuationSettings); // Function Engine.ForceFeedbackComponent.AdjustAttenuation(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32BDE30>
};

// Class Engine.ForceFeedbackEffect
class UForceFeedbackEffect : public Object {

public:

	struct TArray<struct FForceFeedbackChannelDetails> ChannelDetails; // 0x28 (16)
	float Duration; // 0x38 (4)
};

// Class Engine.GameEngine
class UGameEngine : public UEngine {

public:

	float MaxDeltaTime; // 0xDE0 (4)
	float ServerFlushLogInterval; // 0xDE4 (4)
	struct UGameInstance GameInstance; // 0xDE8 (8)
};

// Class Engine.GameNetworkManager
class AGameNetworkManager : public AInfo {

public:

	float BadPacketLossThreshold; // 0x220 (4)
	float SeverePacketLossThreshold; // 0x224 (4)
	int32_t BadPingThreshold; // 0x228 (4)
	int32_t SeverePingThreshold; // 0x22C (4)
	int32_t AdjustedNetSpeed; // 0x230 (4)
	float LastNetSpeedUpdateTime; // 0x234 (4)
	int32_t TotalNetBandwidth; // 0x238 (4)
	int32_t MinDynamicBandwidth; // 0x23C (4)
	int32_t MaxDynamicBandwidth; // 0x240 (4)
	char bIsStandbyCheckingEnabled : 1; // 0x244 (1)
	char bHasStandbyCheatTriggered : 1; // 0x244 (1)
	char pad_244_2 : 6; // 0x244 (1)
	float StandbyRxCheatTime; // 0x248 (4)
	float StandbyTxCheatTime; // 0x24C (4)
	float PercentMissingForRxStandby; // 0x250 (4)
	float PercentMissingForTxStandby; // 0x254 (4)
	float PercentForBadPing; // 0x258 (4)
	float JoinInProgressStandbyWaitTime; // 0x25C (4)
	float MoveRepSize; // 0x260 (4)
	float MAXPOSITIONERRORSQUARED; // 0x264 (4)
	float MAXNEARZEROVELOCITYSQUARED; // 0x268 (4)
	float CLIENTADJUSTUPDATECOST; // 0x26C (4)
	float MAXCLIENTUPDATEINTERVAL; // 0x270 (4)
	float MaxClientForcedUpdateDuration; // 0x274 (4)
	float ServerForcedUpdateHitchThreshold; // 0x278 (4)
	float ServerForcedUpdateHitchCooldown; // 0x27C (4)
	float MaxMoveDeltaTime; // 0x280 (4)
	float MaxClientSmoothingDeltaTime; // 0x284 (4)
	float ClientNetSendMoveDeltaTime; // 0x288 (4)
	float ClientNetSendMoveDeltaTimeThrottled; // 0x28C (4)
	float ClientNetSendMoveDeltaTimeStationary; // 0x290 (4)
	int32_t ClientNetSendMoveThrottleAtNetSpeed; // 0x294 (4)
	int32_t ClientNetSendMoveThrottleOverPlayerCount; // 0x298 (4)
	bool ClientAuthorativePosition; // 0x29C (1)
	float ClientErrorUpdateRateLimit; // 0x2A0 (4)
	float ClientNetCamUpdateDeltaTime; // 0x2A4 (4)
	float ClientNetCamUpdatePositionLimit; // 0x2A8 (4)
	bool bMovementTimeDiscrepancyDetection; // 0x2AC (1)
	bool bMovementTimeDiscrepancyResolution; // 0x2AD (1)
	float MovementTimeDiscrepancyMaxTimeMargin; // 0x2B0 (4)
	float MovementTimeDiscrepancyMinTimeMargin; // 0x2B4 (4)
	float MovementTimeDiscrepancyResolutionRate; // 0x2B8 (4)
	float MovementTimeDiscrepancyDriftAllowance; // 0x2BC (4)
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution; // 0x2C0 (1)
	bool bUseDistanceBasedRelevancy; // 0x2C1 (1)
};

// Class Engine.GameSession
class AGameSession : public AInfo {

public:

	int32_t MaxSpectators; // 0x220 (4)
	int32_t MaxPlayers; // 0x224 (4)
	int32_t MaxPartySize; // 0x228 (4)
	char MaxSplitscreensPerConnection; // 0x22C (1)
	bool bRequiresPushToTalk; // 0x22D (1)
	struct FName SessionName; // 0x230 (8)
};

// Class Engine.GameUserSettings
class UGameUserSettings : public Object {

public:

	bool bUseVSync; // 0x28 (1)
	bool bUseDynamicResolution; // 0x29 (1)
	uint32_t ResolutionSizeX; // 0x80 (4)
	uint32_t ResolutionSizeY; // 0x84 (4)
	uint32_t LastUserConfirmedResolutionSizeX; // 0x88 (4)
	uint32_t LastUserConfirmedResolutionSizeY; // 0x8C (4)
	int32_t WindowPosX; // 0x90 (4)
	int32_t WindowPosY; // 0x94 (4)
	int32_t FullscreenMode; // 0x98 (4)
	int32_t LastConfirmedFullscreenMode; // 0x9C (4)
	int32_t PreferredFullscreenMode; // 0xA0 (4)
	uint32_t Version; // 0xA4 (4)
	int32_t AudioQualityLevel; // 0xA8 (4)
	int32_t LastConfirmedAudioQualityLevel; // 0xAC (4)
	float FrameRateLimit; // 0xB0 (4)
	int32_t DesiredScreenWidth; // 0xB8 (4)
	bool bUseDesiredScreenHeight; // 0xBC (1)
	int32_t DesiredScreenHeight; // 0xC0 (4)
	int32_t LastUserConfirmedDesiredScreenWidth; // 0xC4 (4)
	int32_t LastUserConfirmedDesiredScreenHeight; // 0xC8 (4)
	float LastRecommendedScreenWidth; // 0xCC (4)
	float LastRecommendedScreenHeight; // 0xD0 (4)
	float LastCPUBenchmarkResult; // 0xD4 (4)
	float LastGPUBenchmarkResult; // 0xD8 (4)
	struct TArray<float> LastCPUBenchmarkSteps; // 0xE0 (16)
	struct TArray<float> LastGPUBenchmarkSteps; // 0xF0 (16)
	float LastGPUBenchmarkMultiplier; // 0x100 (4)
	bool bUseHDRDisplayOutput; // 0x104 (1)
	int32_t HDRDisplayOutputNits; // 0x108 (4)
	struct FMulticastInlineDelegate OnGameUserSettingsUINeedsUpdate; // 0x110 (16)

	void ValidateSettings(); // Function Engine.GameUserSettings.ValidateSettings(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x25D7290>
	bool SupportsHDRDisplayOutput(); // Function Engine.GameUserSettings.SupportsHDRDisplayOutput(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32D07B0>
	void SetVSyncEnabled(bool bEnable); // Function Engine.GameUserSettings.SetVSyncEnabled(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32D0620>
	void SetVisualEffectQuality(int32_t Value); // Function Engine.GameUserSettings.SetVisualEffectQuality(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32D0730>
	void SetViewDistanceQuality(int32_t Value); // Function Engine.GameUserSettings.SetViewDistanceQuality(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32D06B0>
	void SetToDefaults(); // Function Engine.GameUserSettings.SetToDefaults(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x2A009C0>
	void SetTextureQuality(int32_t Value); // Function Engine.GameUserSettings.SetTextureQuality(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32D05A0>
	void SetShadowQuality(int32_t Value); // Function Engine.GameUserSettings.SetShadowQuality(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32D0520>
	void SetShadingQuality(int32_t Value); // Function Engine.GameUserSettings.SetShadingQuality(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32D04A0>
	void SetScreenResolution(struct FIntPoint Resolution); // Function Engine.GameUserSettings.SetScreenResolution(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32D0420>
	void SetResolutionScaleValueEx(float NewScaleValue); // Function Engine.GameUserSettings.SetResolutionScaleValueEx(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32D03A0>
	void SetResolutionScaleValue(int32_t NewScaleValue); // Function Engine.GameUserSettings.SetResolutionScaleValue(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32D0320>
	void SetResolutionScaleNormalized(float NewScaleNormalized); // Function Engine.GameUserSettings.SetResolutionScaleNormalized(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32D02A0>
	void SetPostProcessingQuality(int32_t Value); // Function Engine.GameUserSettings.SetPostProcessingQuality(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32D0220>
	void SetOverallScalabilityLevel(int32_t Value); // Function Engine.GameUserSettings.SetOverallScalabilityLevel(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32D0190>
	void SetFullscreenMode(enum class EWindowMode InFullscreenMode); // Function Engine.GameUserSettings.SetFullscreenMode(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32D0110>
	void SetFrameRateLimit(float NewLimit); // Function Engine.GameUserSettings.SetFrameRateLimit(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32D0090>
	void SetFoliageQuality(int32_t Value); // Function Engine.GameUserSettings.SetFoliageQuality(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32D0010>
	void SetDynamicResolutionEnabled(bool bEnable); // Function Engine.GameUserSettings.SetDynamicResolutionEnabled(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32CFF80>
	void SetBenchmarkFallbackValues(); // Function Engine.GameUserSettings.SetBenchmarkFallbackValues(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32CFED0>
	void SetAudioQualityLevel(int32_t QualityLevel); // Function Engine.GameUserSettings.SetAudioQualityLevel(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32CFE50>
	void SetAntiAliasingQuality(int32_t Value); // Function Engine.GameUserSettings.SetAntiAliasingQuality(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32CFDD0>
	void SaveSettings(); // Function Engine.GameUserSettings.SaveSettings(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A4F30>
	void RunHardwareBenchmark(int32_t WorkScale, float CPUMultiplier, float GPUMultiplier); // Function Engine.GameUserSettings.RunHardwareBenchmark(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32CFCD0>
	void RevertVideoMode(); // Function Engine.GameUserSettings.RevertVideoMode(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32CFCB0>
	void ResetToCurrentSettings(); // Function Engine.GameUserSettings.ResetToCurrentSettings(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32CFC90>
	void LoadSettings(bool bForceReload); // Function Engine.GameUserSettings.LoadSettings(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32CFBA0>
	bool IsVSyncEnabled(); // Function Engine.GameUserSettings.IsVSyncEnabled(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32CFB70>
	bool IsVSyncDirty(); // Function Engine.GameUserSettings.IsVSyncDirty(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32CFB40>
	bool IsScreenResolutionDirty(); // Function Engine.GameUserSettings.IsScreenResolutionDirty(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32CFB10>
	bool IsHDREnabled(); // Function Engine.GameUserSettings.IsHDREnabled(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32CFAE0>
	bool IsFullscreenModeDirty(); // Function Engine.GameUserSettings.IsFullscreenModeDirty(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32CFAB0>
	bool IsDynamicResolutionEnabled(); // Function Engine.GameUserSettings.IsDynamicResolutionEnabled(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32CFA80>
	bool IsDynamicResolutionDirty(); // Function Engine.GameUserSettings.IsDynamicResolutionDirty(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32CFA50>
	bool IsDirty(); // Function Engine.GameUserSettings.IsDirty(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32CFA20>
	int32_t GetVisualEffectQuality(); // Function Engine.GameUserSettings.GetVisualEffectQuality(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32CF990>
	int32_t GetViewDistanceQuality(); // Function Engine.GameUserSettings.GetViewDistanceQuality(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32CF960>
	int32_t GetTextureQuality(); // Function Engine.GameUserSettings.GetTextureQuality(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32CF930>
	int32_t GetSyncInterval(); // Function Engine.GameUserSettings.GetSyncInterval(Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <VeiledExperts-Win64-Shipping.exe+0x32CF900>
	int32_t GetShadowQuality(); // Function Engine.GameUserSettings.GetShadowQuality(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32CF8D0>
	int32_t GetShadingQuality(); // Function Engine.GameUserSettings.GetShadingQuality(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32CF8A0>
	struct FIntPoint GetScreenResolution(); // Function Engine.GameUserSettings.GetScreenResolution(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32CF820>
	float GetResolutionScaleNormalized(); // Function Engine.GameUserSettings.GetResolutionScaleNormalized(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32CF7F0>
	void GetResolutionScaleInformationEx(float& CurrentScaleNormalized, float& CurrentScaleValue, float& MinScaleValue, float& MaxScaleValue); // Function Engine.GameUserSettings.GetResolutionScaleInformationEx(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32CF650>
	void GetResolutionScaleInformation(float& CurrentScaleNormalized, int32_t& CurrentScaleValue, int32_t& MinScaleValue, int32_t& MaxScaleValue); // Function Engine.GameUserSettings.GetResolutionScaleInformation(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32CF4B0>
	float GetRecommendedResolutionScale(); // Function Engine.GameUserSettings.GetRecommendedResolutionScale(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32CF470>
	enum class EWindowMode GetPreferredFullscreenMode(); // Function Engine.GameUserSettings.GetPreferredFullscreenMode(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32CF440>
	int32_t GetPostProcessingQuality(); // Function Engine.GameUserSettings.GetPostProcessingQuality(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32CF410>
	int32_t GetOverallScalabilityLevel(); // Function Engine.GameUserSettings.GetOverallScalabilityLevel(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32CF2A0>
	struct FIntPoint GetLastConfirmedScreenResolution(); // Function Engine.GameUserSettings.GetLastConfirmedScreenResolution(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32CF260>
	enum class EWindowMode GetLastConfirmedFullscreenMode(); // Function Engine.GameUserSettings.GetLastConfirmedFullscreenMode(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32CF230>
	struct UGameUserSettings GetGameUserSettings(); // Function Engine.GameUserSettings.GetGameUserSettings(Final|Native|Static|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32CF200>
	enum class EWindowMode GetFullscreenMode(); // Function Engine.GameUserSettings.GetFullscreenMode(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32CF1D0>
	float GetFrameRateLimit(); // Function Engine.GameUserSettings.GetFrameRateLimit(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32CF1A0>
	int32_t GetFramePace(); // Function Engine.GameUserSettings.GetFramePace(Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <VeiledExperts-Win64-Shipping.exe+0x32CF170>
	int32_t GetFoliageQuality(); // Function Engine.GameUserSettings.GetFoliageQuality(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32CF140>
	struct FIntPoint GetDesktopResolution(); // Function Engine.GameUserSettings.GetDesktopResolution(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32CF100>
	struct FIntPoint GetDefaultWindowPosition(); // Function Engine.GameUserSettings.GetDefaultWindowPosition(Final|Native|Static|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32CF0C0>
	enum class EWindowMode GetDefaultWindowMode(); // Function Engine.GameUserSettings.GetDefaultWindowMode(Final|Native|Static|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32CF090>
	float GetDefaultResolutionScale(); // Function Engine.GameUserSettings.GetDefaultResolutionScale(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32CF050>
	struct FIntPoint GetDefaultResolution(); // Function Engine.GameUserSettings.GetDefaultResolution(Final|Native|Static|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32CF010>
	int32_t GetCurrentHDRDisplayNits(); // Function Engine.GameUserSettings.GetCurrentHDRDisplayNits(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32CEFE0>
	int32_t GetAudioQualityLevel(); // Function Engine.GameUserSettings.GetAudioQualityLevel(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x2877ED0>
	int32_t GetAntiAliasingQuality(); // Function Engine.GameUserSettings.GetAntiAliasingQuality(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0xF0FD10>
	void EnableHDRDisplayOutput(bool bEnable, int32_t DisplayNits); // Function Engine.GameUserSettings.EnableHDRDisplayOutput(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32CEF20>
	void ConfirmVideoMode(); // Function Engine.GameUserSettings.ConfirmVideoMode(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x25D73F0>
	void ApplySettings(bool bCheckForCommandLineOverrides); // Function Engine.GameUserSettings.ApplySettings(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32CEE90>
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides); // Function Engine.GameUserSettings.ApplyResolutionSettings(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32CEE00>
	void ApplyNonResolutionSettings(); // Function Engine.GameUserSettings.ApplyNonResolutionSettings(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x25D7430>
	void ApplyHardwareBenchmarkResults(); // Function Engine.GameUserSettings.ApplyHardwareBenchmarkResults(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32A4F90>
};

// Class Engine.SpotLight
class ASpotLight : public ALight {

public:

	struct USpotLightComponent SpotLightComponent; // 0x230 (8)

	void SetOuterConeAngle(float NewOuterConeAngle); // Function Engine.SpotLight.SetOuterConeAngle(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33BC110>
	void SetInnerConeAngle(float NewInnerConeAngle); // Function Engine.SpotLight.SetInnerConeAngle(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33BC010>
};

// Class Engine.HapticFeedbackEffect_Buffer
class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base {

public:

	struct TArray<char> Amplitudes; // 0x28 (16)
	int32_t SampleRate; // 0x38 (4)
};

// Class Engine.HapticFeedbackEffect_Curve
class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base {

public:

	struct FHapticFeedbackDetails_Curve HapticDetails; // 0x28 (272)
};

// Class Engine.HapticFeedbackEffect_SoundWave
class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base {

public:

	struct USoundWave SoundWave; // 0x28 (8)
};

// Class Engine.HLODProxy
class UHLODProxy : public Object {

public:

	struct TArray<struct FHLODProxyMesh> ProxyMeshes; // 0x28 (16)
};

// Class Engine.InGameAdManager
class UInGameAdManager : public UPlatformInterfaceBase {

public:

	char bShouldPauseWhileAdOpen : 1; // 0x38 (1)
	char pad_38_1 : 7; // 0x38 (1)
	struct TArray<struct FDelegate> ClickedBannerDelegates; // 0x40 (16)
	struct TArray<struct FDelegate> ClosedAdDelegates; // 0x50 (16)
};

// Class Engine.InheritableComponentHandler
class UInheritableComponentHandler : public Object {

public:

	struct TArray<struct FComponentOverrideRecord> Records; // 0x28 (16)
	struct TArray<struct UActorComponent> UnnecessaryComponents; // 0x38 (16)
};

// Class Engine.InputActionDelegateBinding
class UInputActionDelegateBinding : public UInputDelegateBinding {

public:

	struct TArray<struct FBlueprintInputActionDelegateBinding> InputActionDelegateBindings; // 0x28 (16)
};

// Class Engine.InputAxisDelegateBinding
class UInputAxisDelegateBinding : public UInputDelegateBinding {

public:

	struct TArray<struct FBlueprintInputAxisDelegateBinding> InputAxisDelegateBindings; // 0x28 (16)
};

// Class Engine.InputAxisKeyDelegateBinding
class UInputAxisKeyDelegateBinding : public UInputDelegateBinding {

public:

	struct TArray<struct FBlueprintInputAxisKeyDelegateBinding> InputAxisKeyDelegateBindings; // 0x28 (16)
};

// Class Engine.InputComponent
class UInputComponent : public UActorComponent {

public:

	struct TArray<struct FCachedKeyToActionInfo> CachedKeyToActionInfo; // 0x120 (16)

	bool WasControllerKeyJustReleased(struct FKey Key); // Function Engine.InputComponent.WasControllerKeyJustReleased(Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32DA890>
	bool WasControllerKeyJustPressed(struct FKey Key); // Function Engine.InputComponent.WasControllerKeyJustPressed(Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32DA890>
	bool IsControllerKeyDown(struct FKey Key); // Function Engine.InputComponent.IsControllerKeyDown(Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32DA890>
	void GetTouchState(int32_t FingerIndex, float& LocationX, float& LocationY, bool& bIsCurrentlyPressed); // Function Engine.InputComponent.GetTouchState(Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32DA710>
	struct FVector GetControllerVectorKeyState(struct FKey Key); // Function Engine.InputComponent.GetControllerVectorKeyState(Final|Native|Private|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32DA1B0>
	void GetControllerMouseDelta(float& DeltaX, float& DeltaY); // Function Engine.InputComponent.GetControllerMouseDelta(Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32DA0D0>
	float GetControllerKeyTimeDown(struct FKey Key); // Function Engine.InputComponent.GetControllerKeyTimeDown(Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32D9EC0>
	void GetControllerAnalogStickState(enum class EControllerAnalogStick WhichStick, float& StickX, float& StickY); // Function Engine.InputComponent.GetControllerAnalogStickState(Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32D9FB0>
	float GetControllerAnalogKeyState(struct FKey Key); // Function Engine.InputComponent.GetControllerAnalogKeyState(Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32D9EC0>
};

// Class Engine.InputKeyDelegateBinding
class UInputKeyDelegateBinding : public UInputDelegateBinding {

public:

	struct TArray<struct FBlueprintInputKeyDelegateBinding> InputKeyDelegateBindings; // 0x28 (16)
};

// Class Engine.InputSettings
class UInputSettings : public Object {

public:

	struct TArray<struct FInputAxisConfigEntry> AxisConfig; // 0x28 (16)
	char bAltEnterTogglesFullscreen : 1; // 0x38 (1)
	char bF11TogglesFullscreen : 1; // 0x38 (1)
	char bUseMouseForTouch : 1; // 0x38 (1)
	char bEnableMouseSmoothing : 1; // 0x38 (1)
	char bEnableFOVScaling : 1; // 0x38 (1)
	char bCaptureMouseOnLaunch : 1; // 0x38 (1)
	char bDefaultViewportMouseLock : 1; // 0x38 (1)
	char bAlwaysShowTouchInterface : 1; // 0x38 (1)
	char bShowConsoleOnFourFingerTap : 1; // 0x39 (1)
	char bEnableGestureRecognizer : 1; // 0x39 (1)
	char pad_39_2 : 6; // 0x39 (1)
	bool bUseAutocorrect; // 0x3A (1)
	struct TArray<struct FString> ExcludedAutocorrectOS; // 0x40 (16)
	struct TArray<struct FString> ExcludedAutocorrectCultures; // 0x50 (16)
	struct TArray<struct FString> ExcludedAutocorrectDeviceModels; // 0x60 (16)
	enum class EMouseCaptureMode DefaultViewportMouseCaptureMode; // 0x70 (1)
	enum class EMouseLockMode DefaultViewportMouseLockMode; // 0x71 (1)
	float FOVScale; // 0x74 (4)
	float DoubleClickTime; // 0x78 (4)
	struct TArray<struct FInputActionKeyMapping> ActionMappings; // 0x80 (16)
	struct TArray<struct FInputAxisKeyMapping> AxisMappings; // 0x90 (16)
	struct TArray<struct FInputActionSpeechMapping> SpeechMappings; // 0xA0 (16)
	struct FSoftObjectPath DefaultTouchInterface; // 0xB0 (24)
	struct FKey ConsoleKey; // 0xC8 (24)
	struct TArray<struct FKey> ConsoleKeys; // 0xE0 (16)

	void SaveKeyMappings(); // Function Engine.InputSettings.SaveKeyMappings(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32DAD00>
	void RemoveAxisMapping(struct FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Function Engine.InputSettings.RemoveAxisMapping(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32DAAF0>
	void RemoveActionMapping(struct FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Function Engine.InputSettings.RemoveActionMapping(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32DA980>
	struct UInputSettings GetInputSettings(); // Function Engine.InputSettings.GetInputSettings(Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <VeiledExperts-Win64-Shipping.exe+0x32DA2B0>
	void GetAxisNames(struct TArray<struct FName>& AxisNames); // Function Engine.InputSettings.GetAxisNames(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32D9E10>
	void GetAxisMappingByName(struct FName InAxisName, struct TArray<struct FInputAxisKeyMapping>& OutMappings); // Function Engine.InputSettings.GetAxisMappingByName(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32D9CE0>
	void GetActionNames(struct TArray<struct FName>& ActionNames); // Function Engine.InputSettings.GetActionNames(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32D9C30>
	void GetActionMappingByName(struct FName InActionName, struct TArray<struct FInputActionKeyMapping>& OutMappings); // Function Engine.InputSettings.GetActionMappingByName(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x32D9B00>
	void ForceRebuildKeymaps(); // Function Engine.InputSettings.ForceRebuildKeymaps(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32D9AE0>
	void AddAxisMapping(struct FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Function Engine.InputSettings.AddAxisMapping(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32D9370>
	void AddActionMapping(struct FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Function Engine.InputSettings.AddActionMapping(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32D9200>
};

// Class Engine.InputTouchDelegateBinding
class UInputTouchDelegateBinding : public UInputDelegateBinding {

public:

	struct TArray<struct FBlueprintInputTouchDelegateBinding> InputTouchDelegateBindings; // 0x28 (16)
};

// Class Engine.InterpCurveEdSetup
class UInterpCurveEdSetup : public Object {

public:

	struct TArray<struct FCurveEdTab> Tabs; // 0x28 (16)
	int32_t ActiveTab; // 0x38 (4)
};

// Class Engine.InterpData
class UInterpData : public Object {

public:

	float InterpLength; // 0x28 (4)
	float PathBuildTime; // 0x2C (4)
	struct TArray<struct UInterpGroup> InterpGroups; // 0x30 (16)
	struct UInterpCurveEdSetup CurveEdSetup; // 0x40 (8)
	float EdSectionStart; // 0x48 (4)
	float EdSectionEnd; // 0x4C (4)
	char bShouldBakeAndPrune : 1; // 0x50 (1)
	char pad_50_1 : 7; // 0x50 (1)
	struct UInterpGroupDirector CachedDirectorGroup; // 0x58 (8)
	struct TArray<struct FName> AllEventNames; // 0x60 (16)
};

// Class Engine.InterpFilter
class UInterpFilter : public Object {

public:

	struct FString Caption; // 0x28 (16)
};

// Class Engine.InterpGroup
class UInterpGroup : public Object {

public:

	struct TArray<struct UInterpTrack> InterpTracks; // 0x30 (16)
	struct FName GroupName; // 0x40 (8)
	struct FColor GroupColor; // 0x48 (4)
	char bCollapsed : 1; // 0x4C (1)
	char pad_44_1 : 7; // 0x44 (1)
	char pad_45_0 : 1; // 0x45 (1)
	char bVisible : 1; // 0x4C (1)
	char pad_45_2 : 6; // 0x45 (1)
	char pad_46_0 : 2; // 0x46 (1)
	char bIsFolder : 1; // 0x4C (1)
	char pad_46_3 : 5; // 0x46 (1)
	char pad_47_0 : 3; // 0x47 (1)
	char bIsParented : 1; // 0x4C (1)
	char pad_47_4 : 4; // 0x47 (1)
	char pad_48_0 : 4; // 0x48 (1)
	char bIsSelected : 1; // 0x4C (1)
};

// Class Engine.InterpGroupCamera
class UInterpGroupCamera : public UInterpGroup {

public:

	struct UCameraAnim CameraAnimInst; // 0x50 (8)
	float CompressTolerance; // 0x58 (4)
};

// Class Engine.InterpGroupInst
class UInterpGroupInst : public Object {

public:

	struct UInterpGroup Group; // 0x28 (8)
	struct UActor GroupActor; // 0x30 (8)
	struct TArray<struct UInterpTrackInst> TrackInst; // 0x38 (16)
};

// Class Engine.InterpToMovementComponent
class UInterpToMovementComponent : public UMovementComponent {

public:

	float Duration; // 0xF0 (4)
	char bPauseOnImpact : 1; // 0xF4 (1)
	char pad_F4_1 : 7; // 0xF4 (1)
	bool bSweep; // 0xF8 (1)
	enum class ETeleportType TeleportType; // 0xF9 (1)
	enum class EInterpToBehaviourType BehaviourType; // 0xFA (1)
	bool bCheckIfStillInWorld; // 0xFB (1)
	char bForceSubStepping : 1; // 0xFC (1)
	char pad_F9_1 : 7; // 0xF9 (1)
	struct FMulticastInlineDelegate OnInterpToReverse; // 0x100 (16)
	struct FMulticastInlineDelegate OnInterpToStop; // 0x110 (16)
	struct FMulticastInlineDelegate OnWaitBeginDelegate; // 0x120 (16)
	struct FMulticastInlineDelegate OnWaitEndDelegate; // 0x130 (16)
	struct FMulticastInlineDelegate OnResetDelegate; // 0x140 (16)
	float MaxSimulationTimeStep; // 0x150 (4)
	int32_t MaxSimulationIterations; // 0x154 (4)
	struct TArray<struct FInterpControlPoint> ControlPoints; // 0x158 (16)

	void StopSimulating(struct FHitResult& HitResult); // Function Engine.InterpToMovementComponent.StopSimulating(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32DE490>
	void RestartMovement(float InitialDirection); // Function Engine.InterpToMovementComponent.RestartMovement(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32DE410>
	void OnInterpToWaitEndDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitEndDelegate__DelegateSignature(MulticastDelegate|Public|Delegate|HasOutParms) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void OnInterpToWaitBeginDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitBeginDelegate__DelegateSignature(MulticastDelegate|Public|Delegate|HasOutParms) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void OnInterpToStopDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToStopDelegate__DelegateSignature(MulticastDelegate|Public|Delegate|HasOutParms) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void OnInterpToReverseDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToReverseDelegate__DelegateSignature(MulticastDelegate|Public|Delegate|HasOutParms) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void OnInterpToResetDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToResetDelegate__DelegateSignature(MulticastDelegate|Public|Delegate|HasOutParms) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void FinaliseControlPoints(); // Function Engine.InterpToMovementComponent.FinaliseControlPoints(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32DE3F0>
};

// Class Engine.InterpTrackAnimControl
class UInterpTrackAnimControl : public UInterpTrackFloatBase {

public:

	struct FName SlotName; // 0x90 (8)
	struct TArray<struct FAnimControlTrackKey> AnimSeqs; // 0x98 (16)
	char bSkipAnimNotifiers : 1; // 0xA8 (1)
};

// Class Engine.InterpTrackBoolProp
class UInterpTrackBoolProp : public UInterpTrack {

public:

	struct TArray<struct FBoolTrackKey> BoolTrack; // 0x70 (16)
	struct FName PropertyName; // 0x80 (8)
};

// Class Engine.InterpTrackColorProp
class UInterpTrackColorProp : public UInterpTrackVectorBase {

public:

	struct FName PropertyName; // 0x90 (8)
};

// Class Engine.InterpTrackDirector
class UInterpTrackDirector : public UInterpTrack {

public:

	struct TArray<struct FDirectorTrackCut> CutTrack; // 0x70 (16)
	char bSimulateCameraCutsOnClients : 1; // 0x80 (1)
};

// Class Engine.InterpTrackEvent
class UInterpTrackEvent : public UInterpTrack {

public:

	struct TArray<struct FEventTrackKey> EventTrack; // 0x70 (16)
	char bFireEventsWhenForwards : 1; // 0x80 (1)
	char bFireEventsWhenBackwards : 1; // 0x80 (1)
	char bFireEventsWhenJumpingForwards : 1; // 0x80 (1)
	char bUseCustomEventName : 1; // 0x80 (1)
};

// Class Engine.InterpTrackFade
class UInterpTrackFade : public UInterpTrackFloatBase {

public:

	char bPersistFade : 1; // 0x90 (1)
	char bFadeAudio : 1; // 0x90 (1)
	char pad_90_2 : 6; // 0x90 (1)
	struct FLinearColor FadeColor; // 0x94 (16)
};

// Class Engine.InterpTrackFloatAnimBPParam
class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase {

public:

	struct UAnimBlueprintGeneratedClass* AnimBlueprintClass; // 0x90 (8)
	struct UClass* AnimClass; // 0x98 (8)
	struct FName ParamName; // 0xA0 (8)
};

// Class Engine.InterpTrackFloatMaterialParam
class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase {

public:

	struct TArray<struct UMaterialInterface> TargetMaterials; // 0x90 (16)
	struct FName ParamName; // 0xA0 (8)
};

// Class Engine.InterpTrackFloatParticleParam
class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase {

public:

	struct FName ParamName; // 0x90 (8)
};

// Class Engine.InterpTrackFloatProp
class UInterpTrackFloatProp : public UInterpTrackFloatBase {

public:

	struct FName PropertyName; // 0x90 (8)
};

// Class Engine.InterpTrackInstAnimControl
class UInterpTrackInstAnimControl : public UInterpTrackInst {

public:

	float LastUpdatePosition; // 0x28 (4)
};

// Class Engine.InterpTrackInstProperty
class UInterpTrackInstProperty : public UInterpTrackInst {

public:

	struct TFieldPath<FNone> InterpProperty; // 0x28 (32)
	struct Object PropertyOuterObjectInst; // 0x48 (8)
};

// Class Engine.InterpTrackInstBoolProp
class UInterpTrackInstBoolProp : public UInterpTrackInstProperty {

public:

	bool ResetBool; // 0x60 (1)
};

// Class Engine.InterpTrackInstColorProp
class UInterpTrackInstColorProp : public UInterpTrackInstProperty {

public:

	struct FColor ResetColor; // 0x58 (4)
};

// Class Engine.InterpTrackInstDirector
class UInterpTrackInstDirector : public UInterpTrackInst {

public:

	struct UActor OldViewTarget; // 0x28 (8)
};

// Class Engine.InterpTrackInstEvent
class UInterpTrackInstEvent : public UInterpTrackInst {

public:

	float LastUpdatePosition; // 0x28 (4)
};

// Class Engine.InterpTrackInstFloatAnimBPParam
class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst {

public:

	struct UAnimInstance AnimScriptInstance; // 0x28 (8)
	float ResetFloat; // 0x30 (4)
};

// Class Engine.InterpTrackInstFloatMaterialParam
class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst {

public:

	struct TArray<struct UMaterialInstanceDynamic> MaterialInstances; // 0x28 (16)
	struct TArray<float> ResetFloats; // 0x38 (16)
	struct TArray<struct FPrimitiveMaterialRef> PrimitiveMaterialRefs; // 0x48 (16)
	struct UInterpTrackFloatMaterialParam InstancedTrack; // 0x58 (8)
};

// Class Engine.InterpTrackInstFloatParticleParam
class UInterpTrackInstFloatParticleParam : public UInterpTrackInst {

public:

	float ResetFloat; // 0x28 (4)
};

// Class Engine.InterpTrackInstFloatProp
class UInterpTrackInstFloatProp : public UInterpTrackInstProperty {

public:

	float ResetFloat; // 0x58 (4)
};

// Class Engine.InterpTrackInstLinearColorProp
class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty {

public:

	struct FLinearColor ResetColor; // 0x58 (16)
};

// Class Engine.InterpTrackInstMove
class UInterpTrackInstMove : public UInterpTrackInst {

public:

	struct FVector ResetLocation; // 0x28 (12)
	struct FRotator ResetRotation; // 0x34 (12)
};

// Class Engine.InterpTrackInstParticleReplay
class UInterpTrackInstParticleReplay : public UInterpTrackInst {

public:

	float LastUpdatePosition; // 0x28 (4)
};

// Class Engine.InterpTrackInstSlomo
class UInterpTrackInstSlomo : public UInterpTrackInst {

public:

	float OldTimeDilation; // 0x28 (4)
};

// Class Engine.InterpTrackInstSound
class UInterpTrackInstSound : public UInterpTrackInst {

public:

	float LastUpdatePosition; // 0x28 (4)
	struct UAudioComponent PlayAudioComp; // 0x30 (8)
};

// Class Engine.InterpTrackInstToggle
class UInterpTrackInstToggle : public UInterpTrackInst {

public:

	enum class ETrackToggleAction Action; // 0x28 (1)
	float LastUpdatePosition; // 0x2C (4)
	char bSavedActiveState : 1; // 0x30 (1)
};

// Class Engine.InterpTrackInstVectorMaterialParam
class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst {

public:

	struct TArray<struct UMaterialInstanceDynamic> MaterialInstances; // 0x28 (16)
	struct TArray<struct FVector> ResetVectors; // 0x38 (16)
	struct TArray<struct FPrimitiveMaterialRef> PrimitiveMaterialRefs; // 0x48 (16)
	struct UInterpTrackVectorMaterialParam InstancedTrack; // 0x58 (8)
};

// Class Engine.InterpTrackInstVectorProp
class UInterpTrackInstVectorProp : public UInterpTrackInstProperty {

public:

	struct FVector ResetVector; // 0x58 (12)
};

// Class Engine.InterpTrackInstVisibility
class UInterpTrackInstVisibility : public UInterpTrackInst {

public:

	enum class EVisibilityTrackAction Action; // 0x28 (1)
	float LastUpdatePosition; // 0x2C (4)
};

// Class Engine.InterpTrackLinearColorBase
class UInterpTrackLinearColorBase : public UInterpTrack {

public:

	struct FInterpCurveLinearColor LinearColorTrack; // 0x70 (24)
	float CurveTension; // 0x88 (4)
};

// Class Engine.InterpTrackLinearColorProp
class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase {

public:

	struct FName PropertyName; // 0x90 (8)
};

// Class Engine.InterpTrackMove
class UInterpTrackMove : public UInterpTrack {

public:

	struct FInterpCurveVector PosTrack; // 0x70 (24)
	struct FInterpCurveVector EulerTrack; // 0x88 (24)
	struct FInterpLookupTrack LookupTrack; // 0xA0 (16)
	struct FName LookAtGroupName; // 0xB0 (8)
	float LinCurveTension; // 0xB8 (4)
	float AngCurveTension; // 0xBC (4)
	char bUseQuatInterpolation : 1; // 0xC0 (1)
	char bShowArrowAtKeys : 1; // 0xC0 (1)
	char bDisableMovement : 1; // 0xC0 (1)
	char bShowTranslationOnCurveEd : 1; // 0xC0 (1)
	char bShowRotationOnCurveEd : 1; // 0xC0 (1)
	char bHide3DTrack : 1; // 0xC0 (1)
	char pad_C0_6 : 2; // 0xC0 (1)
	enum class EInterpTrackMoveRotMode RotMode; // 0xC4 (1)
};

// Class Engine.InterpTrackMoveAxis
class UInterpTrackMoveAxis : public UInterpTrackFloatBase {

public:

	enum class EInterpMoveAxis MoveAxis; // 0x90 (1)
	struct FInterpLookupTrack LookupTrack; // 0x98 (16)
};

// Class Engine.InterpTrackParticleReplay
class UInterpTrackParticleReplay : public UInterpTrack {

public:

	struct TArray<struct FParticleReplayTrackKey> TrackKeys; // 0x70 (16)
};

// Class Engine.InterpTrackSound
class UInterpTrackSound : public UInterpTrackVectorBase {

public:

	struct TArray<struct FSoundTrackKey> Sounds; // 0x90 (16)
	char bPlayOnReverse : 1; // 0xA0 (1)
	char bContinueSoundOnMatineeEnd : 1; // 0xA0 (1)
	char bSuppressSubtitles : 1; // 0xA0 (1)
	char bTreatAsDialogue : 1; // 0xA0 (1)
	char bAttach : 1; // 0xA0 (1)
};

// Class Engine.InterpTrackToggle
class UInterpTrackToggle : public UInterpTrack {

public:

	struct TArray<struct FToggleTrackKey> ToggleTrack; // 0x70 (16)
	char bActivateSystemEachUpdate : 1; // 0x80 (1)
	char bActivateWithJustAttachedFlag : 1; // 0x80 (1)
	char bFireEventsWhenForwards : 1; // 0x80 (1)
	char bFireEventsWhenBackwards : 1; // 0x80 (1)
	char bFireEventsWhenJumpingForwards : 1; // 0x80 (1)
};

// Class Engine.InterpTrackVectorMaterialParam
class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase {

public:

	struct TArray<struct UMaterialInterface> TargetMaterials; // 0x90 (16)
	struct FName ParamName; // 0xA0 (8)
};

// Class Engine.InterpTrackVectorProp
class UInterpTrackVectorProp : public UInterpTrackVectorBase {

public:

	struct FName PropertyName; // 0x90 (8)
};

// Class Engine.InterpTrackVisibility
class UInterpTrackVisibility : public UInterpTrack {

public:

	struct TArray<struct FVisibilityTrackKey> VisibilityTrack; // 0x70 (16)
	char bFireEventsWhenForwards : 1; // 0x80 (1)
	char bFireEventsWhenBackwards : 1; // 0x80 (1)
	char bFireEventsWhenJumpingForwards : 1; // 0x80 (1)
};

// Class Engine.IntSerialization
class UIntSerialization : public Object {

public:

	uint16_t UnsignedInt16Variable; // 0x28 (2)
	uint32_t UnsignedInt32Variable; // 0x2C (4)
	uint64_t UnsignedInt64Variable; // 0x30 (8)
	int8_t SignedInt8Variable; // 0x38 (1)
	int16_t SignedInt16Variable; // 0x3A (2)
	int64_t SignedInt64Variable; // 0x40 (8)
	char UnsignedInt8Variable; // 0x48 (1)
	int32_t SignedInt32Variable; // 0x4C (4)
};

// Class Engine.Layer
class ULayer : public Object {

public:

	struct FName LayerName; // 0x28 (8)
	char bIsVisible : 1; // 0x30 (1)
	char pad_30_1 : 7; // 0x30 (1)
	struct TArray<struct FLayerActorStats> ActorStats; // 0x38 (16)
};

// Class Engine.Level
class ULevel : public Object {

public:

	struct UWorld OwningWorld; // 0xB8 (8)
	struct UModel Model; // 0xC0 (8)
	struct TArray<struct UModelComponent> ModelComponents; // 0xC8 (16)
	struct ULevelActorContainer ActorCluster; // 0xD8 (8)
	int32_t NumTextureStreamingUnbuiltComponents; // 0xE0 (4)
	int32_t NumTextureStreamingDirtyResources; // 0xE4 (4)
	struct ALevelScriptActor LevelScriptActor; // 0xE8 (8)
	struct ANavigationObjectBase NavListStart; // 0xF0 (8)
	struct ANavigationObjectBase NavListEnd; // 0xF8 (8)
	struct TArray<struct UNavigationDataChunk> NavDataChunks; // 0x100 (16)
	float LightmapTotalSize; // 0x110 (4)
	float ShadowmapTotalSize; // 0x114 (4)
	struct TArray<struct FVector> StaticNavigableGeometry; // 0x118 (16)
	struct TArray<struct FGuid> StreamingTextureGuids; // 0x128 (16)
	struct FGuid LevelBuildDataId; // 0x1D0 (16)
	struct UMapBuildDataRegistry MapBuildData; // 0x1E0 (8)
	struct FIntVector LightBuildLevelOffset; // 0x1E8 (12)
	char bIsLightingScenario : 1; // 0x1F4 (1)
	char pad_CC_1 : 7; // 0xCC (1)
	char pad_CD_0 : 3; // 0xCD (1)
	char bTextureStreamingRotationChanged : 1; // 0x1F4 (1)
	char pad_CD_4 : 4; // 0xCD (1)
	char pad_CE_0 : 4; // 0xCE (1)
	char bStaticComponentsRegisteredInStreamingManager : 1; // 0x1F4 (1)
	char pad_CE_5 : 3; // 0xCE (1)
	char pad_CF_0 : 5; // 0xCF (1)
	char bIsVisible : 1; // 0x1F4 (1)
	char pad_CF_6 : 2; // 0xCF (1)
	struct AWorldSettings WorldSettings; // 0x240 (8)
	struct TArray<struct UAssetUserData> AssetUserData; // 0x250 (16)
	struct TArray<struct FReplicatedStaticActorDestructionInfo> DestroyedReplicatedStaticActors; // 0x270 (16)
};

// Class Engine.LevelActorContainer
class ULevelActorContainer : public Object {

public:

	struct TArray<struct UActor> Actors; // 0x28 (16)
};

// Class Engine.LevelBounds
class ALevelBounds : public UActor {

public:

	struct UBoxComponent BoxComponent; // 0x220 (8)
	bool bAutoUpdateBounds; // 0x228 (1)
};

// Class Engine.LevelScriptActor
class ALevelScriptActor : public UActor {

public:

	char bInputEnabled : 1; // 0x220 (1)

	void WorldOriginLocationChanged(struct FIntVector OldOriginLocation, struct FIntVector NewOriginLocation); // Function Engine.LevelScriptActor.WorldOriginLocationChanged(Event|Public|HasDefaults|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning); // Function Engine.LevelScriptActor.SetCinematicMode(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333E380>
	bool RemoteEvent(struct FName EventName); // Function Engine.LevelScriptActor.RemoteEvent(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333DAD0>
	void LevelReset(); // Function Engine.LevelScriptActor.LevelReset(BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
};

// Class Engine.LevelStreaming
class ULevelStreaming : public Object {

public:

	struct TSoftObjectPtr<UWorld> WorldAsset; // 0x28 (40)
	struct FName PackageNameToLoad; // 0x50 (8)
	struct TArray<struct FName> LODPackageNames; // 0x58 (16)
	struct FTransform LevelTransform; // 0x80 (48)
	int32_t LevelLODIndex; // 0xB0 (4)
	int32_t StreamingPriority; // 0xB4 (4)
	char pad_A0_0 : 3; // 0xA0 (1)
	char bShouldBeVisible : 1; // 0xBA (1)
	char pad_A0_4 : 4; // 0xA0 (1)
	char pad_A1_0 : 4; // 0xA1 (1)
	char bShouldBeLoaded : 1; // 0xBA (1)
	char pad_A1_5 : 3; // 0xA1 (1)
	char pad_A2_0 : 5; // 0xA2 (1)
	char bLocked : 1; // 0xBA (1)
	char pad_A2_6 : 2; // 0xA2 (1)
	char pad_A3_0 : 6; // 0xA3 (1)
	char bIsStatic : 1; // 0xBA (1)
	char pad_A3_7 : 1; // 0xA3 (1)
	char pad_A4_0 : 7; // 0xA4 (1)
	char bShouldBlockOnLoad : 1; // 0xBA (1)
	char bShouldBlockOnUnload : 1; // 0xBB (1)
	char pad_A5_1 : 7; // 0xA5 (1)
	char pad_A6_0 : 1; // 0xA6 (1)
	char bDisableDistanceStreaming : 1; // 0xBB (1)
	char pad_A6_2 : 6; // 0xA6 (1)
	char pad_A7_0 : 2; // 0xA7 (1)
	char bDrawOnLevelStatusMap : 1; // 0xBB (1)
	char pad_A7_3 : 5; // 0xA7 (1)
	struct FLinearColor LevelColor; // 0xBC (16)
	struct TArray<struct ALevelStreamingVolume> EditorStreamingVolumes; // 0xD0 (16)
	float MinTimeBetweenVolumeUnloadRequests; // 0xE0 (4)
	struct FMulticastInlineDelegate OnLevelLoaded; // 0xE8 (16)
	struct FMulticastInlineDelegate OnLevelUnloaded; // 0xF8 (16)
	struct FMulticastInlineDelegate OnLevelShown; // 0x108 (16)
	struct FMulticastInlineDelegate OnLevelHidden; // 0x118 (16)
	struct ULevel LoadedLevel; // 0x128 (8)
	struct ULevel PendingUnloadLevel; // 0x130 (8)

	bool ShouldBeLoaded(); // Function Engine.LevelStreaming.ShouldBeLoaded(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x2B64670>
	void SetShouldBeVisible(bool bInShouldBeVisible); // Function Engine.LevelStreaming.SetShouldBeVisible(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333F180>
	void SetShouldBeLoaded(bool bInShouldBeLoaded); // Function Engine.LevelStreaming.SetShouldBeLoaded(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32CEE90>
	void SetPriority(int32_t NewPriority); // Function Engine.LevelStreaming.SetPriority(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333EF80>
	void SetLevelLODIndex(int32_t LODIndex); // Function Engine.LevelStreaming.SetLevelLODIndex(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333E8F0>
	bool IsStreamingStatePending(); // Function Engine.LevelStreaming.IsStreamingStatePending(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x333D6B0>
	bool IsLevelVisible(); // Function Engine.LevelStreaming.IsLevelVisible(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x333D680>
	bool IsLevelLoaded(); // Function Engine.LevelStreaming.IsLevelLoaded(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x333D650>
	struct FName GetWorldAssetPackageFName(); // Function Engine.LevelStreaming.GetWorldAssetPackageFName(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x333D5E0>
	struct ULevel GetLoadedLevel(); // Function Engine.LevelStreaming.GetLoadedLevel(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x333D5C0>
	struct ALevelScriptActor GetLevelScriptActor(); // Function Engine.LevelStreaming.GetLevelScriptActor(Final|Native|Public|BlueprintCallable|BlueprintPure) // <VeiledExperts-Win64-Shipping.exe+0x333D510>
	struct ULevelStreaming CreateInstance(struct FString UniqueInstanceName); // Function Engine.LevelStreaming.CreateInstance(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333D430>
};

// Class Engine.LevelStreamingDynamic
class ULevelStreamingDynamic : public ULevelStreaming {

public:

	char bInitiallyLoaded : 1; // 0x148 (1)
	char bInitiallyVisible : 1; // 0x148 (1)

	struct ULevelStreamingDynamic LoadLevelInstanceBySoftObjectPtr(struct Object WorldContextObject, struct TSoftObjectPtr<UWorld> Level, struct FVector Location, struct FRotator Rotation, bool& bOutSuccess); // Function Engine.LevelStreamingDynamic.LoadLevelInstanceBySoftObjectPtr(Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333D8E0>
	struct ULevelStreamingDynamic LoadLevelInstance(struct Object WorldContextObject, struct FString LevelName, struct FVector Location, struct FRotator Rotation, bool& bOutSuccess); // Function Engine.LevelStreamingDynamic.LoadLevelInstance(Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333D6E0>
};

// Class Engine.LevelStreamingVolume
class ALevelStreamingVolume : public AVolume {

public:

	struct TArray<struct FName> StreamingLevelNames; // 0x258 (16)
	char bEditorPreVisOnly : 1; // 0x268 (1)
	char bDisabled : 1; // 0x268 (1)
	char pad_268_2 : 6; // 0x268 (1)
	enum class EStreamingVolumeUsage StreamingUsage; // 0x26C (1)
};

// Class Engine.LightmappedSurfaceCollection
class ULightmappedSurfaceCollection : public Object {

public:

	struct UModel SourceModel; // 0x28 (8)
	struct TArray<int32_t> Surfaces; // 0x30 (16)
};

// Class Engine.LightmassPortal
class ALightmassPortal : public UActor {

public:

	struct ULightmassPortalComponent PortalComponent; // 0x220 (8)
};

// Class Engine.LightmassPortalComponent
class ULightmassPortalComponent : public USceneComponent {

public:

	struct UBoxComponent PreviewBox; // 0x1F0 (8)
};

// Class Engine.LightmassPrimitiveSettingsObject
class ULightmassPrimitiveSettingsObject : public Object {

public:

	struct FLightmassPrimitiveSettings LightmassSettings; // 0x28 (24)
};

// Class Engine.LocalLightComponent
class ULocalLightComponent : public ULightComponent {

public:

	enum class ELightUnits IntensityUnits; // 0x320 (1)
	float Radius; // 0x324 (4)
	float AttenuationRadius; // 0x328 (4)
	struct FLightmassPointLightSettings LightmassSettings; // 0x32C (12)

	void SetIntensityUnits(enum class ELightUnits NewIntensityUnits); // Function Engine.LocalLightComponent.SetIntensityUnits(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3341210>
	void SetAttenuationRadius(float NewRadius); // Function Engine.LocalLightComponent.SetAttenuationRadius(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3341190>
	float GetUnitsConversionFactor(enum class ELightUnits SrcUnits, enum class ELightUnits TargetUnits, float CosHalfConeAngle); // Function Engine.LocalLightComponent.GetUnitsConversionFactor(Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <VeiledExperts-Win64-Shipping.exe+0x3341090>
};

// Class Engine.LocalPlayer
class ULocalPlayer : public UPlayer {

public:

	struct UGameViewportClient ViewportClient; // 0x70 (8)
	enum class EAspectRatioAxisConstraint AspectRatioAxisConstraint; // 0x94 (1)
	struct UClass* PendingLevelPlayerControllerClass; // 0x98 (8)
	char bSentSplitJoin : 1; // 0xA0 (1)
	char pad_59_1 : 7; // 0x59 (1)
	int32_t ControllerId; // 0xB8 (4)
};

// Class Engine.LODActor
class ALODActor : public UActor {

public:

	struct UStaticMeshComponent StaticMeshComponent; // 0x220 (8)
	struct TMap<struct UMaterialInterface, struct UInstancedStaticMeshComponent> ImpostersStaticMeshComponents; // 0x228 (80)
	struct UHLODProxy Proxy; // 0x278 (8)
	struct FName Key; // 0x280 (8)
	float LODDrawDistance; // 0x288 (4)
	int32_t LODLevel; // 0x28C (4)
	struct TArray<struct UActor> SubActors; // 0x290 (16)
	char CachedNumHLODLevels; // 0x2A0 (1)
};

// Class Engine.MapBuildDataRegistry
class UMapBuildDataRegistry : public Object {

public:

	enum class ELightingBuildQuality LevelLightingQuality; // 0x28 (1)
};

// Class Engine.Material
class UMaterial : public UMaterialInterface {

public:

	struct UPhysicalMaterial PhysMaterial; // 0x88 (8)
	struct UPhysicalMaterialMask PhysMaterialMask; // 0x90 (8)
	struct UPhysicalMaterial PhysicalMaterialMap[0x8]; // 0x98 (64)
	struct FScalarMaterialInput Metallic; // 0xD8 (12)
	struct FScalarMaterialInput Specular; // 0xEC (12)
	struct FScalarMaterialInput Anisotropy; // 0x100 (12)
	struct FVectorMaterialInput Normal; // 0x114 (12)
	struct FVectorMaterialInput Tangent; // 0x128 (12)
	struct FColorMaterialInput EmissiveColor; // 0x13C (12)
	enum class EMaterialDomain MaterialDomain; // 0x150 (1)
	enum class EBlendMode BlendMode; // 0x151 (1)
	enum class EDecalBlendMode DecalBlendMode; // 0x152 (1)
	enum class EMaterialDecalResponse MaterialDecalResponse; // 0x153 (1)
	enum class EMaterialShadingModel ShadingModel; // 0x154 (1)
	char bCastDynamicShadowAsMasked : 1; // 0x155 (1)
	char pad_125_1 : 7; // 0x125 (1)
	struct FMaterialShadingModelField ShadingModels; // 0x156 (2)
	float OpacityMaskClipValue; // 0x158 (4)
	struct FVectorMaterialInput WorldPositionOffset; // 0x15C (12)
	struct FScalarMaterialInput Refraction; // 0x170 (12)
	struct FMaterialAttributesInput MaterialAttributes; // 0x184 (16)
	struct FScalarMaterialInput PixelDepthOffset; // 0x19C (12)
	struct FShadingModelMaterialInput ShadingModelFromMaterialExpression; // 0x1B0 (12)
	char bEnableSeparateTranslucency : 1; // 0x1C4 (1)
	char pad_16C_1 : 7; // 0x16C (1)
	char pad_16D_0 : 1; // 0x16D (1)
	char bEnableResponsiveAA : 1; // 0x1C4 (1)
	char pad_16D_2 : 6; // 0x16D (1)
	char pad_16E_0 : 2; // 0x16E (1)
	char bScreenSpaceReflections : 1; // 0x1C4 (1)
	char pad_16E_3 : 5; // 0x16E (1)
	char pad_16F_0 : 3; // 0x16F (1)
	char bContactShadows : 1; // 0x1C4 (1)
	char pad_16F_4 : 4; // 0x16F (1)
	char pad_170_0 : 4; // 0x170 (1)
	char TwoSided : 1; // 0x1C4 (1)
	char pad_170_5 : 3; // 0x170 (1)
	char pad_171_0 : 5; // 0x171 (1)
	char DitheredLODTransition : 1; // 0x1C4 (1)
	char pad_171_6 : 2; // 0x171 (1)
	char pad_172_0 : 6; // 0x172 (1)
	char DitherOpacityMask : 1; // 0x1C4 (1)
	char pad_172_7 : 1; // 0x172 (1)
	char pad_173_0 : 7; // 0x173 (1)
	char bAllowNegativeEmissiveColor : 1; // 0x1C4 (1)
	enum class ETranslucencyLightingMode TranslucencyLightingMode; // 0x1C5 (1)
	char bEnableMobileSeparateTranslucency : 1; // 0x1C6 (1)
	char pad_175_1 : 7; // 0x175 (1)
	int32_t NumCustomizedUVs; // 0x1C8 (4)
	float TranslucencyDirectionalLightingIntensity; // 0x1CC (4)
	float TranslucentShadowDensityScale; // 0x1D0 (4)
	float TranslucentSelfShadowDensityScale; // 0x1D4 (4)
	float TranslucentSelfShadowSecondDensityScale; // 0x1D8 (4)
	float TranslucentSelfShadowSecondOpacity; // 0x1DC (4)
	float TranslucentBackscatteringExponent; // 0x1E0 (4)
	struct FLinearColor TranslucentMultipleScatteringExtinction; // 0x1E4 (16)
	float TranslucentShadowStartOffset; // 0x1F4 (4)
	char bDisableDepthTest : 1; // 0x1F8 (1)
	char pad_1A6_1 : 7; // 0x1A6 (1)
	char pad_1A7_0 : 1; // 0x1A7 (1)
	char bWriteOnlyAlpha : 1; // 0x1F8 (1)
	char pad_1A7_2 : 6; // 0x1A7 (1)
	char pad_1A8_0 : 2; // 0x1A8 (1)
	char bGenerateSphericalParticleNormals : 1; // 0x1F8 (1)
	char pad_1A8_3 : 5; // 0x1A8 (1)
	char pad_1A9_0 : 3; // 0x1A9 (1)
	char bTangentSpaceNormal : 1; // 0x1F8 (1)
	char pad_1A9_4 : 4; // 0x1A9 (1)
	char pad_1AA_0 : 4; // 0x1AA (1)
	char bUseEmissiveForDynamicAreaLighting : 1; // 0x1F8 (1)
	char pad_1AA_5 : 3; // 0x1AA (1)
	char pad_1AB_0 : 5; // 0x1AB (1)
	char bBlockGI : 1; // 0x1F8 (1)
	char pad_1AB_6 : 2; // 0x1AB (1)
	char pad_1AC_0 : 6; // 0x1AC (1)
	char bUsedAsSpecialEngineMaterial : 1; // 0x1F8 (1)
	char pad_1AC_7 : 1; // 0x1AC (1)
	char pad_1AD_0 : 7; // 0x1AD (1)
	char bUsedWithSkeletalMesh : 1; // 0x1F8 (1)
	char bUsedWithEditorCompositing : 1; // 0x1F9 (1)
	char pad_1AE_1 : 7; // 0x1AE (1)
	char pad_1AF_0 : 1; // 0x1AF (1)
	char bUsedWithParticleSprites : 1; // 0x1F9 (1)
	char pad_1AF_2 : 6; // 0x1AF (1)
	char pad_1B0_0 : 2; // 0x1B0 (1)
	char bUsedWithBeamTrails : 1; // 0x1F9 (1)
	char pad_1B0_3 : 5; // 0x1B0 (1)
	char pad_1B1_0 : 3; // 0x1B1 (1)
	char bUsedWithMeshParticles : 1; // 0x1F9 (1)
	char pad_1B1_4 : 4; // 0x1B1 (1)
	char pad_1B2_0 : 4; // 0x1B2 (1)
	char bUsedWithNiagaraSprites : 1; // 0x1F9 (1)
	char pad_1B2_5 : 3; // 0x1B2 (1)
	char pad_1B3_0 : 5; // 0x1B3 (1)
	char bUsedWithNiagaraRibbons : 1; // 0x1F9 (1)
	char pad_1B3_6 : 2; // 0x1B3 (1)
	char pad_1B4_0 : 6; // 0x1B4 (1)
	char bUsedWithNiagaraMeshParticles : 1; // 0x1F9 (1)
	char pad_1B4_7 : 1; // 0x1B4 (1)
	char pad_1B5_0 : 7; // 0x1B5 (1)
	char bUsedWithGeometryCache : 1; // 0x1F9 (1)
	char bUsedWithStaticLighting : 1; // 0x1FA (1)
	char pad_1B6_1 : 7; // 0x1B6 (1)
	char pad_1B7_0 : 1; // 0x1B7 (1)
	char bUsedWithMorphTargets : 1; // 0x1FA (1)
	char pad_1B7_2 : 6; // 0x1B7 (1)
	char pad_1B8_0 : 2; // 0x1B8 (1)
	char bUsedWithSplineMeshes : 1; // 0x1FA (1)
	char pad_1B8_3 : 5; // 0x1B8 (1)
	char pad_1B9_0 : 3; // 0x1B9 (1)
	char bUsedWithInstancedStaticMeshes : 1; // 0x1FA (1)
	char pad_1B9_4 : 4; // 0x1B9 (1)
	char pad_1BA_0 : 4; // 0x1BA (1)
	char bUsedWithGeometryCollections : 1; // 0x1FA (1)
	char pad_1BA_5 : 3; // 0x1BA (1)
	char pad_1BB_0 : 5; // 0x1BB (1)
	char bUsesDistortion : 1; // 0x1FA (1)
	char pad_1BB_6 : 2; // 0x1BB (1)
	char pad_1BC_0 : 6; // 0x1BC (1)
	char bUsedWithClothing : 1; // 0x1FA (1)
	char pad_1BC_7 : 1; // 0x1BC (1)
	char bUsedWithWater : 1; // 0x1FC (1)
	char pad_1BD_1 : 7; // 0x1BD (1)
	char pad_1BE_0 : 1; // 0x1BE (1)
	char bUsedWithHairStrands : 1; // 0x1FC (1)
	char pad_1BE_2 : 6; // 0x1BE (1)
	char pad_1BF_0 : 2; // 0x1BF (1)
	char bUsedWithLidarPointCloud : 1; // 0x1FC (1)
	char pad_1BF_3 : 5; // 0x1BF (1)
	char bUsedWithUI : 1; // 0x200 (1)
	char pad_1C0_1 : 7; // 0x1C0 (1)
	char pad_1C1_0 : 1; // 0x1C1 (1)
	char bAutomaticallySetUsageInEditor : 1; // 0x200 (1)
	char pad_1C1_2 : 6; // 0x1C1 (1)
	char pad_1C2_0 : 2; // 0x1C2 (1)
	char bFullyRough : 1; // 0x200 (1)
	char pad_1C2_3 : 5; // 0x1C2 (1)
	char pad_1C3_0 : 3; // 0x1C3 (1)
	char bUseFullPrecision : 1; // 0x200 (1)
	char pad_1C3_4 : 4; // 0x1C3 (1)
	char pad_1C4_0 : 4; // 0x1C4 (1)
	char bUseLightmapDirectionality : 1; // 0x200 (1)
	char pad_1C4_5 : 3; // 0x1C4 (1)
	char bForwardRenderUsePreintegratedGFForSimpleIBL : 1; // 0x204 (1)
	char pad_1C5_1 : 7; // 0x1C5 (1)
	char bUseHQForwardReflections : 1; // 0x208 (1)
	char pad_1C6_1 : 7; // 0x1C6 (1)
	char pad_1C7_0 : 1; // 0x1C7 (1)
	char bUsePlanarForwardReflections : 1; // 0x208 (1)
	char pad_1C7_2 : 6; // 0x1C7 (1)
	char pad_1C8_0 : 2; // 0x1C8 (1)
	char bNormalCurvatureToRoughness : 1; // 0x208 (1)
	char pad_1C8_3 : 5; // 0x1C8 (1)
	enum class EMaterialTessellationMode D3D11TessellationMode; // 0x209 (1)
	char bEnableCrackFreeDisplacement : 1; // 0x20A (1)
	char pad_1CA_1 : 7; // 0x1CA (1)
	char pad_1CB_0 : 1; // 0x1CB (1)
	char bEnableAdaptiveTessellation : 1; // 0x20A (1)
	char pad_1CB_2 : 6; // 0x1CB (1)
	char pad_1CC_0 : 2; // 0x1CC (1)
	char AllowTranslucentCustomDepthWrites : 1; // 0x20A (1)
	char pad_1CC_3 : 5; // 0x1CC (1)
	char pad_1CD_0 : 3; // 0x1CD (1)
	char Wireframe : 1; // 0x20A (1)
	char pad_1CD_4 : 4; // 0x1CD (1)
	char pad_1CE_0 : 4; // 0x1CE (1)
	char bCanMaskedBeAssumedOpaque : 1; // 0x20A (1)
	char pad_1CE_5 : 3; // 0x1CE (1)
	char pad_1CF_0 : 5; // 0x1CF (1)
	char bIsMasked : 1; // 0x20A (1)
	char pad_1CF_6 : 2; // 0x1CF (1)
	char pad_1D0_0 : 6; // 0x1D0 (1)
	char bIsPreviewMaterial : 1; // 0x20A (1)
	char pad_1D0_7 : 1; // 0x1D0 (1)
	char pad_1D1_0 : 7; // 0x1D1 (1)
	char bIsFunctionPreviewMaterial : 1; // 0x20A (1)
	char bUseMaterialAttributes : 1; // 0x20B (1)
	char pad_1D2_1 : 7; // 0x1D2 (1)
	char pad_1D3_0 : 1; // 0x1D3 (1)
	char bCastRayTracedShadows : 1; // 0x20B (1)
	char pad_1D3_2 : 6; // 0x1D3 (1)
	char pad_1D4_0 : 2; // 0x1D4 (1)
	char bUseTranslucencyVertexFog : 1; // 0x20B (1)
	char pad_1D4_3 : 5; // 0x1D4 (1)
	char pad_1D5_0 : 3; // 0x1D5 (1)
	char bIsSky : 1; // 0x20B (1)
	char pad_1D5_4 : 4; // 0x1D5 (1)
	char pad_1D6_0 : 4; // 0x1D6 (1)
	char bComputeFogPerPixel : 1; // 0x20B (1)
	char pad_1D6_5 : 3; // 0x1D6 (1)
	char pad_1D7_0 : 5; // 0x1D7 (1)
	char bOutputTranslucentVelocity : 1; // 0x20B (1)
	char pad_1D7_6 : 2; // 0x1D7 (1)
	char pad_1D8_0 : 6; // 0x1D8 (1)
	char bAllowDevelopmentShaderCompile : 1; // 0x20B (1)
	char pad_1D8_7 : 1; // 0x1D8 (1)
	char pad_1D9_0 : 7; // 0x1D9 (1)
	char bIsMaterialEditorStatsMaterial : 1; // 0x20B (1)
	enum class EBlendableLocation BlendableLocation; // 0x20C (1)
	char BlendableOutputAlpha : 1; // 0x20D (1)
	char pad_1DB_1 : 7; // 0x1DB (1)
	char pad_1DC_0 : 1; // 0x1DC (1)
	char bEnableStencilTest : 1; // 0x20D (1)
	char pad_1DC_2 : 6; // 0x1DC (1)
	enum class EMaterialStencilCompare StencilCompare; // 0x20E (1)
	char StencilRefValue; // 0x20F (1)
	enum class ERefractionMode RefractionMode; // 0x210 (1)
	int32_t BlendablePriority; // 0x214 (4)
	char bIsBlendable : 1; // 0x218 (1)
	char pad_1E4_1 : 7; // 0x1E4 (1)
	uint32_t UsageFlagWarnings; // 0x21C (4)
	float RefractionDepthBias; // 0x220 (4)
	struct FGuid StateId; // 0x224 (16)
	float MaxDisplacement; // 0x234 (4)
	struct FMaterialCachedExpressionData CachedExpressionData; // 0x2C0 (552)
};

// Class Engine.MaterialBillboardComponent
class UMaterialBillboardComponent : public UPrimitiveComponent {

public:

	struct TArray<struct FMaterialSpriteElement> Elements; // 0x408 (16)

	void SetElements(struct TArray<struct FMaterialSpriteElement>& NewElements); // Function Engine.MaterialBillboardComponent.SetElements(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3344F80>
	void AddElement(struct UMaterialInterface Material, struct UCurveFloat DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, struct UCurveFloat DistanceToSizeCurve); // Function Engine.MaterialBillboardComponent.AddElement(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3344DB0>
};

// Class Engine.MaterialExpressionAbs
class UMaterialExpressionAbs : public UMaterialExpression {

public:

	struct FExpressionInput Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionAdd
class UMaterialExpressionAdd : public UMaterialExpression {

public:

	struct FExpressionInput A; // 0x40 (12)
	struct FExpressionInput B; // 0x54 (12)
	float ConstA; // 0x68 (4)
	float ConstB; // 0x6C (4)
};

// Class Engine.MaterialExpressionAntialiasedTextureMask
class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D {

public:

	float Threshold; // 0xF0 (4)
	enum class ETextureColorChannel Channel; // 0xF4 (1)
};

// Class Engine.MaterialExpressionAppendVector
class UMaterialExpressionAppendVector : public UMaterialExpression {

public:

	struct FExpressionInput A; // 0x40 (12)
	struct FExpressionInput B; // 0x54 (12)
};

// Class Engine.MaterialExpressionArccosine
class UMaterialExpressionArccosine : public UMaterialExpression {

public:

	struct FExpressionInput Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionArccosineFast
class UMaterialExpressionArccosineFast : public UMaterialExpression {

public:

	struct FExpressionInput Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionArcsine
class UMaterialExpressionArcsine : public UMaterialExpression {

public:

	struct FExpressionInput Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionArcsineFast
class UMaterialExpressionArcsineFast : public UMaterialExpression {

public:

	struct FExpressionInput Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionArctangent
class UMaterialExpressionArctangent : public UMaterialExpression {

public:

	struct FExpressionInput Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionArctangent2
class UMaterialExpressionArctangent2 : public UMaterialExpression {

public:

	struct FExpressionInput Y; // 0x40 (12)
	struct FExpressionInput X; // 0x54 (12)
};

// Class Engine.MaterialExpressionArctangent2Fast
class UMaterialExpressionArctangent2Fast : public UMaterialExpression {

public:

	struct FExpressionInput Y; // 0x40 (12)
	struct FExpressionInput X; // 0x54 (12)
};

// Class Engine.MaterialExpressionArctangentFast
class UMaterialExpressionArctangentFast : public UMaterialExpression {

public:

	struct FExpressionInput Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionAtmosphericFogColor
class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression {

public:

	struct FExpressionInput WorldPosition; // 0x40 (12)
};

// Class Engine.MaterialExpressionBentNormalCustomOutput
class UMaterialExpressionBentNormalCustomOutput : public UMaterialExpressionCustomOutput {

public:

	struct FExpressionInput Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionBlackBody
class UMaterialExpressionBlackBody : public UMaterialExpression {

public:

	struct FExpressionInput Temp; // 0x40 (12)
};

// Class Engine.MaterialExpressionBlendMaterialAttributes
class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression {

public:

	struct FMaterialAttributesInput A; // 0x40 (16)
	struct FMaterialAttributesInput B; // 0x58 (16)
	struct FExpressionInput Alpha; // 0x70 (12)
	enum class EMaterialAttributeBlend PixelAttributeBlendType; // 0x84 (1)
	enum class EMaterialAttributeBlend VertexAttributeBlendType; // 0x85 (1)
};

// Class Engine.MaterialExpressionBreakMaterialAttributes
class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression {

public:

	struct FMaterialAttributesInput MaterialAttributes; // 0x40 (16)
};

// Class Engine.MaterialExpressionBumpOffset
class UMaterialExpressionBumpOffset : public UMaterialExpression {

public:

	struct FExpressionInput Coordinate; // 0x40 (12)
	struct FExpressionInput Height; // 0x54 (12)
	struct FExpressionInput HeightRatioInput; // 0x68 (12)
	float HeightRatio; // 0x7C (4)
	float ReferencePlane; // 0x80 (4)
	uint32_t ConstCoordinate; // 0x84 (4)
};

// Class Engine.MaterialExpressionCeil
class UMaterialExpressionCeil : public UMaterialExpression {

public:

	struct FExpressionInput Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionParameter
class UMaterialExpressionParameter : public UMaterialExpression {

public:

	struct FName ParameterName; // 0x40 (8)
	struct FGuid ExpressionGUID; // 0x48 (16)
};

// Class Engine.MaterialExpressionVectorParameter
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter {

public:

	struct FLinearColor DefaultValue; // 0x58 (16)
	bool bUseCustomPrimitiveData; // 0x68 (1)
	char PrimitiveDataIndex; // 0x69 (1)
};

// Class Engine.MaterialExpressionChannelMaskParameter
class UMaterialExpressionChannelMaskParameter : public UMaterialExpressionVectorParameter {

public:

	enum class EChannelMaskParameterColor MaskChannel; // 0x70 (1)
	struct FExpressionInput Input; // 0x74 (12)
};

// Class Engine.MaterialExpressionClamp
class UMaterialExpressionClamp : public UMaterialExpression {

public:

	struct FExpressionInput Input; // 0x40 (12)
	struct FExpressionInput Min; // 0x54 (12)
	struct FExpressionInput Max; // 0x68 (12)
	enum class EClampMode ClampMode; // 0x7C (1)
	float MinDefault; // 0x80 (4)
	float MaxDefault; // 0x84 (4)
};

// Class Engine.MaterialExpressionClearCoatNormalCustomOutput
class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput {

public:

	struct FExpressionInput Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionCollectionParameter
class UMaterialExpressionCollectionParameter : public UMaterialExpression {

public:

	struct UMaterialParameterCollection Collection; // 0x40 (8)
	struct FName ParameterName; // 0x48 (8)
	struct FGuid ParameterId; // 0x50 (16)
};

// Class Engine.MaterialExpressionComment
class UMaterialExpressionComment : public UMaterialExpression {

public:

	int32_t SizeX; // 0x40 (4)
	int32_t SizeY; // 0x44 (4)
	struct FString Text; // 0x48 (16)
	struct FLinearColor CommentColor; // 0x58 (16)
	int32_t FontSize; // 0x68 (4)
};

// Class Engine.MaterialExpressionComponentMask
class UMaterialExpressionComponentMask : public UMaterialExpression {

public:

	struct FExpressionInput Input; // 0x40 (12)
	char R : 1; // 0x54 (1)
	char pad_4C_1 : 7; // 0x4C (1)
	char pad_4D_0 : 1; // 0x4D (1)
	char G : 1; // 0x54 (1)
	char pad_4D_2 : 6; // 0x4D (1)
	char pad_4E_0 : 2; // 0x4E (1)
	char B : 1; // 0x54 (1)
	char pad_4E_3 : 5; // 0x4E (1)
	char pad_4F_0 : 3; // 0x4F (1)
	char A : 1; // 0x54 (1)
};

// Class Engine.MaterialExpressionConstant
class UMaterialExpressionConstant : public UMaterialExpression {

public:

	float R; // 0x40 (4)
};

// Class Engine.MaterialExpressionConstant2Vector
class UMaterialExpressionConstant2Vector : public UMaterialExpression {

public:

	float R; // 0x40 (4)
	float G; // 0x44 (4)
};

// Class Engine.MaterialExpressionConstant3Vector
class UMaterialExpressionConstant3Vector : public UMaterialExpression {

public:

	struct FLinearColor Constant; // 0x40 (16)
};

// Class Engine.MaterialExpressionConstant4Vector
class UMaterialExpressionConstant4Vector : public UMaterialExpression {

public:

	struct FLinearColor Constant; // 0x40 (16)
};

// Class Engine.MaterialExpressionConstantBiasScale
class UMaterialExpressionConstantBiasScale : public UMaterialExpression {

public:

	struct FExpressionInput Input; // 0x40 (12)
	float Bias; // 0x54 (4)
	float Scale; // 0x58 (4)
};

// Class Engine.MaterialExpressionCosine
class UMaterialExpressionCosine : public UMaterialExpression {

public:

	struct FExpressionInput Input; // 0x40 (12)
	float Period; // 0x54 (4)
};

// Class Engine.MaterialExpressionCrossProduct
class UMaterialExpressionCrossProduct : public UMaterialExpression {

public:

	struct FExpressionInput A; // 0x40 (12)
	struct FExpressionInput B; // 0x54 (12)
};

// Class Engine.MaterialExpressionScalarParameter
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter {

public:

	float DefaultValue; // 0x58 (4)
	bool bUseCustomPrimitiveData; // 0x5C (1)
	char PrimitiveDataIndex; // 0x5D (1)
};

// Class Engine.MaterialExpressionCurveAtlasRowParameter
class UMaterialExpressionCurveAtlasRowParameter : public UMaterialExpressionScalarParameter {

public:

	struct UCurveLinearColor Curve; // 0x60 (8)
	struct UCurveLinearColorAtlas Atlas; // 0x68 (8)
	struct FExpressionInput InputTime; // 0x70 (12)
};

// Class Engine.MaterialExpressionCustom
class UMaterialExpressionCustom : public UMaterialExpression {

public:

	struct FString Code; // 0x40 (16)
	enum class ECustomMaterialOutputType OutputType; // 0x50 (1)
	struct FString Description; // 0x58 (16)
	struct TArray<struct FCustomInput> Inputs; // 0x68 (16)
	struct TArray<struct FCustomDefine> AdditionalDefines; // 0x78 (16)
	struct TArray<struct FString> IncludeFilePaths; // 0x88 (16)
};

// Class Engine.MaterialExpressionDDX
class UMaterialExpressionDDX : public UMaterialExpression {

public:

	struct FExpressionInput Value; // 0x40 (12)
};

// Class Engine.MaterialExpressionDDY
class UMaterialExpressionDDY : public UMaterialExpression {

public:

	struct FExpressionInput Value; // 0x40 (12)
};

// Class Engine.MaterialExpressionDecalMipmapLevel
class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression {

public:

	struct FExpressionInput TextureSize; // 0x40 (12)
	float ConstWidth; // 0x54 (4)
	float ConstHeight; // 0x58 (4)
};

// Class Engine.MaterialExpressionDepthFade
class UMaterialExpressionDepthFade : public UMaterialExpression {

public:

	struct FExpressionInput InOpacity; // 0x40 (12)
	struct FExpressionInput FadeDistance; // 0x54 (12)
	float OpacityDefault; // 0x68 (4)
	float FadeDistanceDefault; // 0x6C (4)
};

// Class Engine.MaterialExpressionDepthOfFieldFunction
class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression {

public:

	enum class EDepthOfFieldFunctionValue FunctionValue; // 0x40 (1)
	struct FExpressionInput Depth; // 0x44 (12)
};

// Class Engine.MaterialExpressionDeriveNormalZ
class UMaterialExpressionDeriveNormalZ : public UMaterialExpression {

public:

	struct FExpressionInput InXY; // 0x40 (12)
};

// Class Engine.MaterialExpressionDesaturation
class UMaterialExpressionDesaturation : public UMaterialExpression {

public:

	struct FExpressionInput Input; // 0x40 (12)
	struct FExpressionInput Fraction; // 0x54 (12)
	struct FLinearColor LuminanceFactors; // 0x68 (16)
};

// Class Engine.MaterialExpressionDistance
class UMaterialExpressionDistance : public UMaterialExpression {

public:

	struct FExpressionInput A; // 0x40 (12)
	struct FExpressionInput B; // 0x54 (12)
};

// Class Engine.MaterialExpressionDistanceFieldGradient
class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression {

public:

	struct FExpressionInput Position; // 0x40 (12)
};

// Class Engine.MaterialExpressionDistanceToNearestSurface
class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression {

public:

	struct FExpressionInput Position; // 0x40 (12)
};

// Class Engine.MaterialExpressionDivide
class UMaterialExpressionDivide : public UMaterialExpression {

public:

	struct FExpressionInput A; // 0x40 (12)
	struct FExpressionInput B; // 0x54 (12)
	float ConstA; // 0x68 (4)
	float ConstB; // 0x6C (4)
};

// Class Engine.MaterialExpressionDotProduct
class UMaterialExpressionDotProduct : public UMaterialExpression {

public:

	struct FExpressionInput A; // 0x40 (12)
	struct FExpressionInput B; // 0x54 (12)
};

// Class Engine.MaterialExpressionDynamicParameter
class UMaterialExpressionDynamicParameter : public UMaterialExpression {

public:

	struct TArray<struct FString> ParamNames; // 0x40 (16)
	struct FLinearColor DefaultValue; // 0x50 (16)
	uint32_t ParameterIndex; // 0x60 (4)
};

// Class Engine.MaterialExpressionFeatureLevelSwitch
class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression {

public:

	struct FExpressionInput Default; // 0x40 (12)
	struct FExpressionInput Inputs[0x4]; // 0x54 (48)
};

// Class Engine.MaterialExpressionFloor
class UMaterialExpressionFloor : public UMaterialExpression {

public:

	struct FExpressionInput Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionFmod
class UMaterialExpressionFmod : public UMaterialExpression {

public:

	struct FExpressionInput A; // 0x40 (12)
	struct FExpressionInput B; // 0x54 (12)
};

// Class Engine.MaterialExpressionFontSample
class UMaterialExpressionFontSample : public UMaterialExpression {

public:

	struct UFont Font; // 0x40 (8)
	int32_t FontTexturePage; // 0x48 (4)
};

// Class Engine.MaterialExpressionFontSampleParameter
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample {

public:

	struct FName ParameterName; // 0x50 (8)
	struct FGuid ExpressionGUID; // 0x58 (16)
	struct FName Group; // 0x68 (8)
};

// Class Engine.MaterialExpressionFrac
class UMaterialExpressionFrac : public UMaterialExpression {

public:

	struct FExpressionInput Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionFresnel
class UMaterialExpressionFresnel : public UMaterialExpression {

public:

	struct FExpressionInput ExponentIn; // 0x40 (12)
	float Exponent; // 0x54 (4)
	struct FExpressionInput BaseReflectFractionIn; // 0x58 (12)
	float BaseReflectFraction; // 0x6C (4)
	struct FExpressionInput Normal; // 0x70 (12)
};

// Class Engine.MaterialExpressionFunctionInput
class UMaterialExpressionFunctionInput : public UMaterialExpression {

public:

	struct FExpressionInput Preview; // 0x40 (12)
	struct FName InputName; // 0x54 (8)
	struct FString Description; // 0x60 (16)
	struct FGuid ID; // 0x70 (16)
	enum class EFunctionInputType InputType; // 0x80 (1)
	struct FVector4 PreviewValue; // 0x90 (16)
	char bUsePreviewValueAsDefault : 1; // 0xA0 (1)
	char pad_85_1 : 7; // 0x85 (1)
	int32_t SortPriority; // 0xA4 (4)
	char bCompilingFunctionPreview : 1; // 0xA8 (1)
};

// Class Engine.MaterialExpressionFunctionOutput
class UMaterialExpressionFunctionOutput : public UMaterialExpression {

public:

	struct FName OutputName; // 0x40 (8)
	struct FString Description; // 0x48 (16)
	int32_t SortPriority; // 0x58 (4)
	struct FExpressionInput A; // 0x5C (12)
	char bLastPreviewed : 1; // 0x70 (1)
	char pad_68_1 : 7; // 0x68 (1)
	struct FGuid ID; // 0x74 (16)
};

// Class Engine.MaterialExpressionGetMaterialAttributes
class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression {

public:

	struct FMaterialAttributesInput MaterialAttributes; // 0x40 (16)
	struct TArray<struct FGuid> AttributeGetTypes; // 0x58 (16)
};

// Class Engine.MaterialExpressionGIReplace
class UMaterialExpressionGIReplace : public UMaterialExpression {

public:

	struct FExpressionInput Default; // 0x40 (12)
	struct FExpressionInput StaticIndirect; // 0x54 (12)
	struct FExpressionInput DynamicIndirect; // 0x68 (12)
};

// Class Engine.MaterialExpressionIf
class UMaterialExpressionIf : public UMaterialExpression {

public:

	struct FExpressionInput A; // 0x40 (12)
	struct FExpressionInput B; // 0x54 (12)
	struct FExpressionInput AGreaterThanB; // 0x68 (12)
	struct FExpressionInput AEqualsB; // 0x7C (12)
	struct FExpressionInput ALessThanB; // 0x90 (12)
	float EqualsThreshold; // 0xA4 (4)
	float ConstB; // 0xA8 (4)
	float ConstAEqualsB; // 0xAC (4)
};

// Class Engine.MaterialExpressionLightmassReplace
class UMaterialExpressionLightmassReplace : public UMaterialExpression {

public:

	struct FExpressionInput Realtime; // 0x40 (12)
	struct FExpressionInput Lightmass; // 0x54 (12)
};

// Class Engine.MaterialExpressionLinearInterpolate
class UMaterialExpressionLinearInterpolate : public UMaterialExpression {

public:

	struct FExpressionInput A; // 0x40 (12)
	struct FExpressionInput B; // 0x54 (12)
	struct FExpressionInput Alpha; // 0x68 (12)
	float ConstA; // 0x7C (4)
	float ConstB; // 0x80 (4)
	float ConstAlpha; // 0x84 (4)
};

// Class Engine.MaterialExpressionLogarithm10
class UMaterialExpressionLogarithm10 : public UMaterialExpression {

public:

	struct FExpressionInput X; // 0x40 (12)
};

// Class Engine.MaterialExpressionLogarithm2
class UMaterialExpressionLogarithm2 : public UMaterialExpression {

public:

	struct FExpressionInput X; // 0x40 (12)
};

// Class Engine.MaterialExpressionMakeMaterialAttributes
class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression {

public:

	struct FExpressionInput BaseColor; // 0x40 (12)
	struct FExpressionInput Metallic; // 0x54 (12)
	struct FExpressionInput Specular; // 0x68 (12)
	struct FExpressionInput Roughness; // 0x7C (12)
	struct FExpressionInput Anisotropy; // 0x90 (12)
	struct FExpressionInput EmissiveColor; // 0xA4 (12)
	struct FExpressionInput Opacity; // 0xB8 (12)
	struct FExpressionInput OpacityMask; // 0xCC (12)
	struct FExpressionInput Normal; // 0xE0 (12)
	struct FExpressionInput Tangent; // 0xF4 (12)
	struct FExpressionInput WorldPositionOffset; // 0x108 (12)
	struct FExpressionInput WorldDisplacement; // 0x11C (12)
	struct FExpressionInput TessellationMultiplier; // 0x130 (12)
	struct FExpressionInput SubsurfaceColor; // 0x144 (12)
	struct FExpressionInput ClearCoat; // 0x158 (12)
	struct FExpressionInput ClearCoatRoughness; // 0x16C (12)
	struct FExpressionInput AmbientOcclusion; // 0x180 (12)
	struct FExpressionInput Refraction; // 0x194 (12)
	struct FExpressionInput CustomizedUVs[0x8]; // 0x1A8 (96)
	struct FExpressionInput PixelDepthOffset; // 0x248 (12)
	struct FExpressionInput ShadingModel; // 0x25C (12)
};

// Class Engine.MaterialExpressionMapARPassthroughCameraUV
class UMaterialExpressionMapARPassthroughCameraUV : public UMaterialExpression {

public:

	struct FExpressionInput Coordinates; // 0x40 (12)
};

// Class Engine.MaterialExpressionMaterialAttributeLayers
class UMaterialExpressionMaterialAttributeLayers : public UMaterialExpression {

public:

	struct FName ParameterName; // 0x40 (8)
	struct FGuid ExpressionGUID; // 0x48 (16)
	struct FMaterialAttributesInput Input; // 0x58 (16)
	struct FMaterialLayersFunctions DefaultLayers; // 0x70 (64)
	struct TArray<struct UMaterialExpressionMaterialFunctionCall> LayerCallers; // 0xB0 (16)
	int32_t NumActiveLayerCallers; // 0xC0 (4)
	struct TArray<struct UMaterialExpressionMaterialFunctionCall> BlendCallers; // 0xC8 (16)
	int32_t NumActiveBlendCallers; // 0xD8 (4)
	bool bIsLayerGraphBuilt; // 0xDC (1)
};

// Class Engine.MaterialExpressionMaterialFunctionCall
class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression {

public:

	struct UMaterialFunctionInterface MaterialFunction; // 0x40 (8)
	struct FMaterialParameterInfo FunctionParameterInfo; // 0x48 (16)
};

// Class Engine.MaterialExpressionMaterialProxyReplace
class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression {

public:

	struct FExpressionInput Realtime; // 0x40 (12)
	struct FExpressionInput MaterialProxy; // 0x54 (12)
};

// Class Engine.MaterialExpressionMax
class UMaterialExpressionMax : public UMaterialExpression {

public:

	struct FExpressionInput A; // 0x40 (12)
	struct FExpressionInput B; // 0x54 (12)
	float ConstA; // 0x68 (4)
	float ConstB; // 0x6C (4)
};

// Class Engine.MaterialExpressionMin
class UMaterialExpressionMin : public UMaterialExpression {

public:

	struct FExpressionInput A; // 0x40 (12)
	struct FExpressionInput B; // 0x54 (12)
	float ConstA; // 0x68 (4)
	float ConstB; // 0x6C (4)
};

// Class Engine.MaterialExpressionMultiply
class UMaterialExpressionMultiply : public UMaterialExpression {

public:

	struct FExpressionInput A; // 0x40 (12)
	struct FExpressionInput B; // 0x54 (12)
	float ConstA; // 0x68 (4)
	float ConstB; // 0x6C (4)
};

// Class Engine.MaterialExpressionNoise
class UMaterialExpressionNoise : public UMaterialExpression {

public:

	struct FExpressionInput Position; // 0x40 (12)
	struct FExpressionInput FilterWidth; // 0x54 (12)
	float Scale; // 0x68 (4)
	int32_t Quality; // 0x6C (4)
	enum class ENoiseFunction NoiseFunction; // 0x70 (1)
	char bTurbulence : 1; // 0x74 (1)
	char pad_61_1 : 7; // 0x61 (1)
	int32_t Levels; // 0x78 (4)
	float OutputMin; // 0x7C (4)
	float OutputMax; // 0x80 (4)
	float LevelScale; // 0x84 (4)
	char bTiling : 1; // 0x88 (1)
	char pad_72_1 : 7; // 0x72 (1)
	uint32_t RepeatSize; // 0x8C (4)
};

// Class Engine.MaterialExpressionNormalize
class UMaterialExpressionNormalize : public UMaterialExpression {

public:

	struct FExpressionInput VectorInput; // 0x40 (12)
};

// Class Engine.MaterialExpressionOneMinus
class UMaterialExpressionOneMinus : public UMaterialExpression {

public:

	struct FExpressionInput Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionPanner
class UMaterialExpressionPanner : public UMaterialExpression {

public:

	struct FExpressionInput Coordinate; // 0x40 (12)
	struct FExpressionInput Time; // 0x54 (12)
	struct FExpressionInput Speed; // 0x68 (12)
	float SpeedX; // 0x7C (4)
	float SpeedY; // 0x80 (4)
	uint32_t ConstCoordinate; // 0x84 (4)
	bool bFractionalPart; // 0x88 (1)
};

// Class Engine.MaterialExpressionParticleSubUV
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample {

public:

	char bBlend : 1; // 0xD0 (1)
};

// Class Engine.MaterialExpressionPerInstanceCustomData
class UMaterialExpressionPerInstanceCustomData : public UMaterialExpression {

public:

	struct FExpressionInput DefaultValue; // 0x40 (12)
	float ConstDefaultValue; // 0x54 (4)
	uint32_t DataIndex; // 0x58 (4)
};

// Class Engine.MaterialExpressionPower
class UMaterialExpressionPower : public UMaterialExpression {

public:

	struct FExpressionInput Base; // 0x40 (12)
	struct FExpressionInput Exponent; // 0x54 (12)
	float ConstExponent; // 0x68 (4)
};

// Class Engine.MaterialExpressionPreviousFrameSwitch
class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression {

public:

	struct FExpressionInput CurrentFrame; // 0x40 (12)
	struct FExpressionInput PreviousFrame; // 0x54 (12)
};

// Class Engine.MaterialExpressionQualitySwitch
class UMaterialExpressionQualitySwitch : public UMaterialExpression {

public:

	struct FExpressionInput Default; // 0x40 (12)
	struct FExpressionInput Inputs[0x3]; // 0x54 (36)
};

// Class Engine.MaterialExpressionRayTracingQualitySwitch
class UMaterialExpressionRayTracingQualitySwitch : public UMaterialExpression {

public:

	struct FExpressionInput Normal; // 0x40 (12)
	struct FExpressionInput RayTraced; // 0x54 (12)
};

// Class Engine.MaterialExpressionReflectionVectorWS
class UMaterialExpressionReflectionVectorWS : public UMaterialExpression {

public:

	struct FExpressionInput CustomWorldNormal; // 0x40 (12)
	char bNormalizeCustomWorldNormal : 1; // 0x54 (1)
};

// Class Engine.MaterialExpressionReroute
class UMaterialExpressionReroute : public UMaterialExpression {

public:

	struct FExpressionInput Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionRotateAboutAxis
class UMaterialExpressionRotateAboutAxis : public UMaterialExpression {

public:

	struct FExpressionInput NormalizedRotationAxis; // 0x40 (12)
	struct FExpressionInput RotationAngle; // 0x54 (12)
	struct FExpressionInput PivotPoint; // 0x68 (12)
	struct FExpressionInput Position; // 0x7C (12)
	float Period; // 0x90 (4)
};

// Class Engine.MaterialExpressionRotator
class UMaterialExpressionRotator : public UMaterialExpression {

public:

	struct FExpressionInput Coordinate; // 0x40 (12)
	struct FExpressionInput Time; // 0x54 (12)
	float CenterX; // 0x68 (4)
	float CenterY; // 0x6C (4)
	float Speed; // 0x70 (4)
	uint32_t ConstCoordinate; // 0x74 (4)
};

// Class Engine.MaterialExpressionRound
class UMaterialExpressionRound : public UMaterialExpression {

public:

	struct FExpressionInput Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionRuntimeVirtualTextureOutput
class UMaterialExpressionRuntimeVirtualTextureOutput : public UMaterialExpressionCustomOutput {

public:

	struct FExpressionInput BaseColor; // 0x40 (12)
	struct FExpressionInput Specular; // 0x54 (12)
	struct FExpressionInput Roughness; // 0x68 (12)
	struct FExpressionInput Normal; // 0x7C (12)
	struct FExpressionInput WorldHeight; // 0x90 (12)
	struct FExpressionInput Opacity; // 0xA4 (12)
	struct FExpressionInput Mask; // 0xB8 (12)
};

// Class Engine.MaterialExpressionRuntimeVirtualTextureReplace
class UMaterialExpressionRuntimeVirtualTextureReplace : public UMaterialExpression {

public:

	struct FExpressionInput Default; // 0x40 (12)
	struct FExpressionInput VirtualTextureOutput; // 0x54 (12)
};

// Class Engine.MaterialExpressionRuntimeVirtualTextureSample
class UMaterialExpressionRuntimeVirtualTextureSample : public UMaterialExpression {

public:

	struct FExpressionInput Coordinates; // 0x40 (12)
	struct FExpressionInput WorldPosition; // 0x54 (12)
	struct FExpressionInput MipValue; // 0x68 (12)
	struct URuntimeVirtualTexture VirtualTexture; // 0x80 (8)
	enum class ERuntimeVirtualTextureMaterialType MaterialType; // 0x88 (1)
	bool bSinglePhysicalSpace; // 0x89 (1)
	enum class ERuntimeVirtualTextureMipValueMode MipValueMode; // 0x8A (1)
};

// Class Engine.MaterialExpressionRuntimeVirtualTextureSampleParameter
class UMaterialExpressionRuntimeVirtualTextureSampleParameter : public UMaterialExpressionRuntimeVirtualTextureSample {

public:

	struct FName ParameterName; // 0x90 (8)
	struct FGuid ExpressionGUID; // 0x98 (16)
	struct FName Group; // 0xA8 (8)
};

// Class Engine.MaterialExpressionSaturate
class UMaterialExpressionSaturate : public UMaterialExpression {

public:

	struct FExpressionInput Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionSceneColor
class UMaterialExpressionSceneColor : public UMaterialExpression {

public:

	enum class EMaterialSceneAttributeInputMode InputMode; // 0x40 (1)
	struct FExpressionInput Input; // 0x44 (12)
	struct FExpressionInput OffsetFraction; // 0x58 (12)
	struct FVector2D ConstInput; // 0x6C (8)
};

// Class Engine.MaterialExpressionSceneDepth
class UMaterialExpressionSceneDepth : public UMaterialExpression {

public:

	enum class EMaterialSceneAttributeInputMode InputMode; // 0x40 (1)
	struct FExpressionInput Input; // 0x44 (12)
	struct FExpressionInput Coordinates; // 0x58 (12)
	struct FVector2D ConstInput; // 0x6C (8)
};

// Class Engine.MaterialExpressionSceneTexture
class UMaterialExpressionSceneTexture : public UMaterialExpression {

public:

	struct FExpressionInput Coordinates; // 0x40 (12)
	enum class ESceneTextureId SceneTextureId; // 0x54 (1)
	bool bFiltered; // 0x55 (1)
};

// Class Engine.MaterialExpressionSetMaterialAttributes
class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression {

public:

	struct TArray<struct FExpressionInput> Inputs; // 0x40 (16)
	struct TArray<struct FGuid> AttributeSetTypes; // 0x50 (16)
};

// Class Engine.MaterialExpressionShaderStageSwitch
class UMaterialExpressionShaderStageSwitch : public UMaterialExpression {

public:

	struct FExpressionInput PixelShader; // 0x40 (12)
	struct FExpressionInput VertexShader; // 0x54 (12)
};

// Class Engine.MaterialExpressionShadingModel
class UMaterialExpressionShadingModel : public UMaterialExpression {

public:

	enum class EMaterialShadingModel ShadingModel; // 0x40 (1)
};

// Class Engine.MaterialExpressionShadingPathSwitch
class UMaterialExpressionShadingPathSwitch : public UMaterialExpression {

public:

	struct FExpressionInput Default; // 0x40 (12)
	struct FExpressionInput Inputs[0x3]; // 0x54 (36)
};

// Class Engine.MaterialExpressionShadowReplace
class UMaterialExpressionShadowReplace : public UMaterialExpression {

public:

	struct FExpressionInput Default; // 0x40 (12)
	struct FExpressionInput Shadow; // 0x54 (12)
};

// Class Engine.MaterialExpressionSign
class UMaterialExpressionSign : public UMaterialExpression {

public:

	struct FExpressionInput Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionSine
class UMaterialExpressionSine : public UMaterialExpression {

public:

	struct FExpressionInput Input; // 0x40 (12)
	float Period; // 0x54 (4)
};

// Class Engine.MaterialExpressionSingleLayerWaterMaterialOutput
class UMaterialExpressionSingleLayerWaterMaterialOutput : public UMaterialExpressionCustomOutput {

public:

	struct FExpressionInput ScatteringCoefficients; // 0x40 (12)
	struct FExpressionInput AbsorptionCoefficients; // 0x54 (12)
	struct FExpressionInput PhaseG; // 0x68 (12)
};

// Class Engine.MaterialExpressionSkyAtmosphereLightDirection
class UMaterialExpressionSkyAtmosphereLightDirection : public UMaterialExpression {

public:

	int32_t LightIndex; // 0x40 (4)
};

// Class Engine.MaterialExpressionSkyAtmosphereLightIlluminance
class UMaterialExpressionSkyAtmosphereLightIlluminance : public UMaterialExpression {

public:

	int32_t LightIndex; // 0x40 (4)
	struct FExpressionInput WorldPosition; // 0x44 (12)
};

// Class Engine.MaterialExpressionSkyAtmosphereLightDiskLuminance
class UMaterialExpressionSkyAtmosphereLightDiskLuminance : public UMaterialExpression {

public:

	int32_t LightIndex; // 0x40 (4)
};

// Class Engine.MaterialExpressionSkyAtmosphereAerialPerspective
class UMaterialExpressionSkyAtmosphereAerialPerspective : public UMaterialExpression {

public:

	struct FExpressionInput WorldPosition; // 0x40 (12)
};

// Class Engine.MaterialExpressionSobol
class UMaterialExpressionSobol : public UMaterialExpression {

public:

	struct FExpressionInput Cell; // 0x40 (12)
	struct FExpressionInput Index; // 0x54 (12)
	struct FExpressionInput Seed; // 0x68 (12)
	uint32_t ConstIndex; // 0x7C (4)
	struct FVector2D ConstSeed; // 0x80 (8)
};

// Class Engine.MaterialExpressionSpeedTree
class UMaterialExpressionSpeedTree : public UMaterialExpression {

public:

	struct FExpressionInput GeometryInput; // 0x40 (12)
	struct FExpressionInput WindInput; // 0x54 (12)
	struct FExpressionInput LODInput; // 0x68 (12)
	struct FExpressionInput ExtraBendWS; // 0x7C (12)
	enum class ESpeedTreeGeometryType GeometryType; // 0x90 (1)
	enum class ESpeedTreeWindType WindType; // 0x91 (1)
	enum class ESpeedTreeLODType LODType; // 0x92 (1)
	float BillboardThreshold; // 0x94 (4)
	bool bAccurateWindVelocities; // 0x98 (1)
};

// Class Engine.MaterialExpressionSphereMask
class UMaterialExpressionSphereMask : public UMaterialExpression {

public:

	struct FExpressionInput A; // 0x40 (12)
	struct FExpressionInput B; // 0x54 (12)
	struct FExpressionInput Radius; // 0x68 (12)
	struct FExpressionInput Hardness; // 0x7C (12)
	float AttenuationRadius; // 0x90 (4)
	float HardnessPercent; // 0x94 (4)
};

// Class Engine.MaterialExpressionSphericalParticleOpacity
class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression {

public:

	struct FExpressionInput Density; // 0x40 (12)
	float ConstantDensity; // 0x54 (4)
};

// Class Engine.MaterialExpressionSquareRoot
class UMaterialExpressionSquareRoot : public UMaterialExpression {

public:

	struct FExpressionInput Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionStaticBool
class UMaterialExpressionStaticBool : public UMaterialExpression {

public:

	char Value : 1; // 0x40 (1)
};

// Class Engine.MaterialExpressionStaticBoolParameter
class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter {

public:

	char DefaultValue : 1; // 0x58 (1)
};

// Class Engine.MaterialExpressionStaticComponentMaskParameter
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter {

public:

	struct FExpressionInput Input; // 0x58 (12)
	char DefaultR : 1; // 0x6C (1)
	char pad_64_1 : 7; // 0x64 (1)
	char pad_65_0 : 1; // 0x65 (1)
	char DefaultG : 1; // 0x6C (1)
	char pad_65_2 : 6; // 0x65 (1)
	char pad_66_0 : 2; // 0x66 (1)
	char DefaultB : 1; // 0x6C (1)
	char pad_66_3 : 5; // 0x66 (1)
	char pad_67_0 : 3; // 0x67 (1)
	char DefaultA : 1; // 0x6C (1)
};

// Class Engine.MaterialExpressionStaticSwitch
class UMaterialExpressionStaticSwitch : public UMaterialExpression {

public:

	char DefaultValue : 1; // 0x40 (1)
	char pad_40_1 : 7; // 0x40 (1)
	struct FExpressionInput A; // 0x44 (12)
	struct FExpressionInput B; // 0x58 (12)
	struct FExpressionInput Value; // 0x6C (12)
};

// Class Engine.MaterialExpressionStaticSwitchParameter
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter {

public:

	struct FExpressionInput A; // 0x60 (12)
	struct FExpressionInput B; // 0x74 (12)
};

// Class Engine.MaterialExpressionSubtract
class UMaterialExpressionSubtract : public UMaterialExpression {

public:

	struct FExpressionInput A; // 0x40 (12)
	struct FExpressionInput B; // 0x54 (12)
	float ConstA; // 0x68 (4)
	float ConstB; // 0x6C (4)
};

// Class Engine.MaterialExpressionTangent
class UMaterialExpressionTangent : public UMaterialExpression {

public:

	struct FExpressionInput Input; // 0x40 (12)
	float Period; // 0x54 (4)
};

// Class Engine.MaterialExpressionTangentOutput
class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput {

public:

	struct FExpressionInput Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionTemporalSobol
class UMaterialExpressionTemporalSobol : public UMaterialExpression {

public:

	struct FExpressionInput Index; // 0x40 (12)
	struct FExpressionInput Seed; // 0x54 (12)
	uint32_t ConstIndex; // 0x68 (4)
	struct FVector2D ConstSeed; // 0x6C (8)
};

// Class Engine.MaterialExpressionTextureCoordinate
class UMaterialExpressionTextureCoordinate : public UMaterialExpression {

public:

	int32_t CoordinateIndex; // 0x40 (4)
	float UTiling; // 0x44 (4)
	float VTiling; // 0x48 (4)
	char UnMirrorU : 1; // 0x4C (1)
	char UnMirrorV : 1; // 0x4C (1)
};

// Class Engine.MaterialExpressionTextureProperty
class UMaterialExpressionTextureProperty : public UMaterialExpression {

public:

	struct FExpressionInput TextureObject; // 0x40 (12)
	enum class EMaterialExposedTextureProperty Property; // 0x54 (1)
};

// Class Engine.MaterialExpressionTextureSampleParameterSubUV
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D {

public:

	char bBlend : 1; // 0xF0 (1)
};

// Class Engine.MaterialExpressionThinTranslucentMaterialOutput
class UMaterialExpressionThinTranslucentMaterialOutput : public UMaterialExpressionCustomOutput {

public:

	struct FExpressionInput TransmittanceColor; // 0x40 (12)
};

// Class Engine.MaterialExpressionTime
class UMaterialExpressionTime : public UMaterialExpression {

public:

	char bIgnorePause : 1; // 0x40 (1)
	char bOverride_Period : 1; // 0x40 (1)
	char pad_40_2 : 6; // 0x40 (1)
	float Period; // 0x44 (4)
};

// Class Engine.MaterialExpressionTransform
class UMaterialExpressionTransform : public UMaterialExpression {

public:

	struct FExpressionInput Input; // 0x40 (12)
	enum class EMaterialVectorCoordTransformSource TransformSourceType; // 0x54 (1)
	enum class EMaterialVectorCoordTransform TransformType; // 0x55 (1)
};

// Class Engine.MaterialExpressionTransformPosition
class UMaterialExpressionTransformPosition : public UMaterialExpression {

public:

	struct FExpressionInput Input; // 0x40 (12)
	enum class EMaterialPositionTransformSource TransformSourceType; // 0x54 (1)
	enum class EMaterialPositionTransformSource TransformType; // 0x55 (1)
};

// Class Engine.MaterialExpressionTruncate
class UMaterialExpressionTruncate : public UMaterialExpression {

public:

	struct FExpressionInput Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionVectorNoise
class UMaterialExpressionVectorNoise : public UMaterialExpression {

public:

	struct FExpressionInput Position; // 0x40 (12)
	enum class EVectorNoiseFunction NoiseFunction; // 0x54 (1)
	int32_t Quality; // 0x58 (4)
	char bTiling : 1; // 0x5C (1)
	char pad_51_1 : 7; // 0x51 (1)
	uint32_t TileSize; // 0x60 (4)
};

// Class Engine.MaterialExpressionVertexInterpolator
class UMaterialExpressionVertexInterpolator : public UMaterialExpressionCustomOutput {

public:

	struct FExpressionInput Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionViewProperty
class UMaterialExpressionViewProperty : public UMaterialExpression {

public:

	enum class EMaterialExposedViewProperty Property; // 0x40 (1)
};

// Class Engine.MaterialExpressionVirtualTextureFeatureSwitch
class UMaterialExpressionVirtualTextureFeatureSwitch : public UMaterialExpression {

public:

	struct FExpressionInput No; // 0x40 (12)
	struct FExpressionInput Yes; // 0x54 (12)
};

// Class Engine.MaterialExpressionWorldPosition
class UMaterialExpressionWorldPosition : public UMaterialExpression {

public:

	enum class EWorldPositionIncludedOffsets WorldPositionShaderOffset; // 0x40 (1)
};

// Class Engine.MaterialFunctionInterface
class UMaterialFunctionInterface : public Object {

public:

	struct FGuid StateId; // 0x28 (16)
	enum class EMaterialFunctionUsage MaterialFunctionUsage; // 0x38 (1)
};

// Class Engine.MaterialFunction
class UMaterialFunction : public UMaterialFunctionInterface {

public:

	struct FString Description; // 0x40 (16)
	char bExposeToLibrary : 1; // 0x50 (1)
	char bPrefixParameterNames : 1; // 0x50 (1)
	char bReentrantFlag : 1; // 0x50 (1)
};

// Class Engine.MaterialFunctionInstance
class UMaterialFunctionInstance : public UMaterialFunctionInterface {

public:

	struct UMaterialFunctionInterface Parent; // 0x40 (8)
	struct UMaterialFunctionInterface Base; // 0x48 (8)
	struct TArray<struct FScalarParameterValue> ScalarParameterValues; // 0x50 (16)
	struct TArray<struct FVectorParameterValue> VectorParameterValues; // 0x60 (16)
	struct TArray<struct FTextureParameterValue> TextureParameterValues; // 0x70 (16)
	struct TArray<struct FFontParameterValue> FontParameterValues; // 0x80 (16)
	struct TArray<struct FStaticSwitchParameter> StaticSwitchParameterValues; // 0x90 (16)
	struct TArray<struct FStaticComponentMaskParameter> StaticComponentMaskParameterValues; // 0xA0 (16)
	struct TArray<struct FRuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues; // 0xB0 (16)
};

// Class Engine.MaterialInstanceActor
class AMaterialInstanceActor : public UActor {

public:

	struct TArray<struct UActor> TargetActors; // 0x220 (16)
};

// Class Engine.MaterialParameterCollection
class UMaterialParameterCollection : public Object {

public:

	struct FGuid StateId; // 0x28 (16)
	struct TArray<struct FCollectionScalarParameter> ScalarParameters; // 0x38 (16)
	struct TArray<struct FCollectionVectorParameter> VectorParameters; // 0x48 (16)
};

// Class Engine.MaterialParameterCollectionInstance
class UMaterialParameterCollectionInstance : public Object {

public:

	struct UMaterialParameterCollection Collection; // 0x30 (8)
};

// Class Engine.MatineeActor
class AMatineeActor : public UActor {

public:

	struct UInterpData MatineeData; // 0x220 (8)
	struct FName MatineeControllerName; // 0x228 (8)
	float PlayRate; // 0x230 (4)
	char bPlayOnLevelLoad : 1; // 0x234 (1)
	char bForceStartPos : 1; // 0x234 (1)
	char pad_234_2 : 6; // 0x234 (1)
	float ForceStartPosition; // 0x238 (4)
	char bLooping : 1; // 0x23C (1)
	char pad_239_1 : 7; // 0x239 (1)
	char pad_23A_0 : 1; // 0x23A (1)
	char bRewindOnPlay : 1; // 0x23C (1)
	char pad_23A_2 : 6; // 0x23A (1)
	char pad_23B_0 : 2; // 0x23B (1)
	char bNoResetOnRewind : 1; // 0x23C (1)
	char pad_23B_3 : 5; // 0x23B (1)
	char pad_23C_0 : 3; // 0x23C (1)
	char bRewindIfAlreadyPlaying : 1; // 0x23C (1)
	char bDisableRadioFilter : 1; // 0x23C (1)
	char bClientSideOnly : 1; // 0x23C (1)
	char bSkipUpdateIfNotVisible : 1; // 0x23C (1)
	char bIsSkippable : 1; // 0x23C (1)
	int32_t PreferredSplitScreenNum; // 0x240 (4)
	char bDisableMovementInput : 1; // 0x244 (1)
	char pad_241_1 : 7; // 0x241 (1)
	char pad_242_0 : 1; // 0x242 (1)
	char bDisableLookAtInput : 1; // 0x244 (1)
	char pad_242_2 : 6; // 0x242 (1)
	char pad_243_0 : 2; // 0x243 (1)
	char bHidePlayer : 1; // 0x244 (1)
	char pad_243_3 : 5; // 0x243 (1)
	char pad_244_0 : 3; // 0x244 (1)
	char bHideHud : 1; // 0x244 (1)
	char pad_244_4 : 4; // 0x244 (1)
	struct TArray<struct FInterpGroupActorInfo> GroupActorInfos; // 0x248 (16)
	char bShouldShowGore : 1; // 0x258 (1)
	char pad_255_1 : 7; // 0x255 (1)
	struct TArray<struct UInterpGroupInst> GroupInst; // 0x260 (16)
	struct TArray<struct FCameraCutInfo> CameraCuts; // 0x270 (16)
	char bIsPlaying : 1; // 0x280 (1)
	char pad_276_1 : 7; // 0x276 (1)
	char pad_277_0 : 1; // 0x277 (1)
	char bReversePlayback : 1; // 0x280 (1)
	char pad_277_2 : 6; // 0x277 (1)
	char pad_278_0 : 2; // 0x278 (1)
	char bPaused : 1; // 0x280 (1)
	char pad_278_3 : 5; // 0x278 (1)
	char pad_279_0 : 3; // 0x279 (1)
	char bPendingStop : 1; // 0x280 (1)
	char pad_279_4 : 4; // 0x279 (1)
	float InterpPosition; // 0x284 (4)
	char ReplicationForceIsPlaying; // 0x28C (1)
	struct FMulticastInlineDelegate OnPlay; // 0x290 (16)
	struct FMulticastInlineDelegate OnStop; // 0x2A0 (16)
	struct FMulticastInlineDelegate OnPause; // 0x2B0 (16)

	void Stop(); // Function Engine.MatineeActor.Stop(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33571C0>
	void SetPosition(float NewPosition, bool bJump); // Function Engine.MatineeActor.SetPosition(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3356F50>
	void SetLoopingState(bool bNewLooping); // Function Engine.MatineeActor.SetLoopingState(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3356EC0>
	void Reverse(); // Function Engine.MatineeActor.Reverse(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3356EA0>
	void Play(); // Function Engine.MatineeActor.Play(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32B36E0>
	void Pause(); // Function Engine.MatineeActor.Pause(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0xDD0CB0>
	void EnableGroupByName(struct FString GroupName, bool bEnable); // Function Engine.MatineeActor.EnableGroupByName(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3356A20>
	void ChangePlaybackDirection(); // Function Engine.MatineeActor.ChangePlaybackDirection(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3287740>
};

// Class Engine.MatineeActorCameraAnim
class AMatineeActorCameraAnim : public AMatineeActor {

public:

	struct UCameraAnim CameraAnim; // 0x2C8 (8)
};

// Class Engine.MeshSimplificationSettings
class UMeshSimplificationSettings : public UDeveloperSettings {

public:

	struct FName MeshReductionModuleName; // 0x38 (8)
};

// Class Engine.MicroTransactionBase
class UMicroTransactionBase : public UPlatformInterfaceBase {

public:

	struct TArray<struct FPurchaseInfo> AvailableProducts; // 0x38 (16)
	struct FString LastError; // 0x48 (16)
	struct FString LastErrorSolution; // 0x58 (16)
};

// Class Engine.ModelComponent
class UModelComponent : public UPrimitiveComponent {

public:

	struct UBodySetup ModelBodySetup; // 0x420 (8)
};

// Class Engine.MorphTarget
class UMorphTarget : public Object {

public:

	struct USkeletalMesh BaseSkelMesh; // 0x28 (8)
};

// Class Engine.NavCollisionBase
class UNavCollisionBase : public Object {

public:

	char bIsDynamicObstacle : 1; // 0x28 (1)
};

// Class Engine.NavigationDataChunk
class UNavigationDataChunk : public Object {

public:

	struct FName NavigationDataName; // 0x28 (8)
};

// Class Engine.NavigationObjectBase
class ANavigationObjectBase : public UActor {

public:

	struct UCapsuleComponent CapsuleComponent; // 0x228 (8)
	struct UBillboardComponent GoodSprite; // 0x230 (8)
	struct UBillboardComponent BadSprite; // 0x238 (8)
	char bIsPIEPlayerStart : 1; // 0x240 (1)
};

// Class Engine.NavigationSystemConfig
class UNavigationSystemConfig : public Object {

public:

	struct FSoftClassPath NavigationSystemClass; // 0x28 (24)
	struct FNavAgentSelector SupportedAgentsMask; // 0x40 (4)
	struct FName DefaultAgentName; // 0x44 (8)
	char bIsOverriden : 1; // 0x4C (1)
};

// Class Engine.NavLinkDefinition
class UNavLinkDefinition : public Object {

public:

	struct TArray<struct FNavigationLink> Links; // 0x28 (16)
	struct TArray<struct FNavigationSegmentLink> SegmentLinks; // 0x38 (16)
};

// Class Engine.NetworkSettings
class UNetworkSettings : public UDeveloperSettings {

public:

	char bVerifyPeer : 1; // 0x38 (1)
	char bEnableMultiplayerWorldOriginRebasing : 1; // 0x38 (1)
	char pad_38_2 : 6; // 0x38 (1)
	int32_t MaxRepArraySize; // 0x3C (4)
	int32_t MaxRepArrayMemory; // 0x40 (4)
	struct TArray<struct FNetworkEmulationProfileDescription> NetworkEmulationProfiles; // 0x48 (16)
};

// Class Engine.NodeMappingContainer
class UNodeMappingContainer : public Object {

public:

	struct TMap<struct FName, struct FNodeItem> SourceItems; // 0x28 (80)
	struct TMap<struct FName, struct FNodeItem> TargetItems; // 0x78 (80)
	struct TMap<struct FName, struct FName> SourceToTarget; // 0xC8 (80)
	struct TSoftObjectPtr<Object> SourceAsset; // 0x118 (40)
	struct TSoftObjectPtr<Object> TargetAsset; // 0x140 (40)
};

// Class Engine.ObjectLibrary
class UObjectLibrary : public Object {

public:

	struct UClass* ObjectBaseClass; // 0x28 (8)
	bool bHasBlueprintClasses; // 0x30 (1)
	struct TArray<struct Object> Objects; // 0x38 (16)
	struct TArray<struct TWeakObjectPtr<struct Object>> WeakObjects; // 0x48 (16)
	bool bUseWeakReferences; // 0x58 (1)
	bool bIsFullyLoaded; // 0x59 (1)
};

// Class Engine.ObjectReferencer
class UObjectReferencer : public Object {

public:

	struct TArray<struct Object> ReferencedObjects; // 0x28 (16)
};

// Class Engine.PainCausingVolume
class APainCausingVolume : public APhysicsVolume {

public:

	char bPainCausing : 1; // 0x268 (1)
	char pad_268_1 : 7; // 0x268 (1)
	float DamagePerSec; // 0x26C (4)
	struct UClass* DamageType; // 0x270 (8)
	float PainInterval; // 0x278 (4)
	char bEntryPain : 1; // 0x27C (1)
	char pad_279_1 : 7; // 0x279 (1)
	char pad_27A_0 : 1; // 0x27A (1)
	char BACKUP_bPainCausing : 1; // 0x27C (1)
	char pad_27A_2 : 6; // 0x27A (1)
	struct AController DamageInstigator; // 0x280 (8)
};

// Class Engine.ParticleEmitter
class UParticleEmitter : public Object {

public:

	struct FName EmitterName; // 0x28 (8)
	int32_t SubUVDataOffset; // 0x30 (4)
	enum class EEmitterRenderMode EmitterRenderMode; // 0x34 (1)
	enum class EParticleSignificanceLevel SignificanceLevel; // 0x35 (1)
	char bUseLegacySpawningBehavior : 1; // 0x37 (1)
	char pad_36_1 : 7; // 0x36 (1)
	char pad_37_0 : 4; // 0x37 (1)
	char ConvertedModules : 1; // 0x37 (1)
	char bIsSoloing : 1; // 0x37 (1)
	char bCookedOut : 1; // 0x37 (1)
	char bDisabledLODsKeepEmitterAlive : 1; // 0x37 (1)
	char bDisableWhenInsignficant : 1; // 0x38 (1)
	char pad_38_1 : 7; // 0x38 (1)
	struct TArray<struct UParticleLODLevel> LODLevels; // 0x40 (16)
	int32_t PeakActiveParticles; // 0x50 (4)
	int32_t InitialAllocationCount; // 0x54 (4)
	float QualityLevelSpawnRateScale; // 0x58 (4)
	uint32_t DetailModeBitmask; // 0x5C (4)
};

// Class Engine.ParticleLODLevel
class UParticleLODLevel : public Object {

public:

	int32_t Level; // 0x28 (4)
	char bEnabled : 1; // 0x2C (1)
	char pad_2C_1 : 7; // 0x2C (1)
	struct UParticleModuleRequired RequiredModule; // 0x30 (8)
	struct TArray<struct UParticleModule> Modules; // 0x38 (16)
	struct UParticleModuleTypeDataBase TypeDataModule; // 0x48 (8)
	struct UParticleModuleSpawn SpawnModule; // 0x50 (8)
	struct UParticleModuleEventGenerator EventGenerator; // 0x58 (8)
	struct TArray<struct UParticleModuleSpawnBase> SpawningModules; // 0x60 (16)
	struct TArray<struct UParticleModule> SpawnModules; // 0x70 (16)
	struct TArray<struct UParticleModule> UpdateModules; // 0x80 (16)
	struct TArray<struct UParticleModuleOrbit> OrbitModules; // 0x90 (16)
	struct TArray<struct UParticleModuleEventReceiverBase> EventReceiverModules; // 0xA0 (16)
	char ConvertedModules : 1; // 0xB0 (1)
	char pad_AD_1 : 7; // 0xAD (1)
	int32_t PeakActiveParticles; // 0xB4 (4)
};

// Class Engine.ParticleModuleAccelerationBase
class UParticleModuleAccelerationBase : public UParticleModule {

public:

	char bAlwaysInWorldSpace : 1; // 0x30 (1)
};

// Class Engine.ParticleModuleAcceleration
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase {

public:

	struct FRawDistributionVector Acceleration; // 0x38 (72)
	char bApplyOwnerScale : 1; // 0x80 (1)
};

// Class Engine.ParticleModuleAccelerationConstant
class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase {

public:

	struct FVector Acceleration; // 0x38 (12)
};

// Class Engine.ParticleModuleAccelerationDrag
class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase {

public:

	struct UDistributionFloat DragCoefficient; // 0x38 (8)
	struct FRawDistributionFloat DragCoefficientRaw; // 0x40 (48)
};

// Class Engine.ParticleModuleAccelerationDragScaleOverLife
class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase {

public:

	struct UDistributionFloat DragScale; // 0x38 (8)
	struct FRawDistributionFloat DragScaleRaw; // 0x40 (48)
};

// Class Engine.ParticleModuleAccelerationOverLifetime
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase {

public:

	struct FRawDistributionVector AccelOverLife; // 0x38 (72)
};

// Class Engine.ParticleModuleAttractorLine
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase {

public:

	struct FVector EndPoint0; // 0x30 (12)
	struct FVector EndPoint1; // 0x3C (12)
	struct FRawDistributionFloat Range; // 0x48 (48)
	struct FRawDistributionFloat Strength; // 0x78 (48)
};

// Class Engine.ParticleModuleAttractorParticle
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase {

public:

	struct FName EmitterName; // 0x30 (8)
	struct FRawDistributionFloat Range; // 0x38 (48)
	char bStrengthByDistance : 1; // 0x68 (1)
	char pad_68_1 : 7; // 0x68 (1)
	struct FRawDistributionFloat Strength; // 0x70 (48)
	char bAffectBaseVelocity : 1; // 0xA0 (1)
	char pad_99_1 : 7; // 0x99 (1)
	enum class EAttractorParticleSelectionMethod SelectionMethod; // 0xA4 (1)
	char bRenewSource : 1; // 0xA8 (1)
	char pad_9B_1 : 7; // 0x9B (1)
	char pad_9C_0 : 1; // 0x9C (1)
	char bInheritSourceVel : 1; // 0xA8 (1)
	char pad_9C_2 : 6; // 0x9C (1)
	int32_t LastSelIndex; // 0xAC (4)
};

// Class Engine.ParticleModuleAttractorPoint
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase {

public:

	struct FRawDistributionVector Position; // 0x30 (72)
	struct FRawDistributionFloat Range; // 0x78 (48)
	struct FRawDistributionFloat Strength; // 0xA8 (48)
	char StrengthByDistance : 1; // 0xD8 (1)
	char bAffectBaseVelocity : 1; // 0xD8 (1)
	char bOverrideVelocity : 1; // 0xD8 (1)
	char bUseWorldSpacePosition : 1; // 0xD8 (1)
	char Positive_X : 1; // 0xD8 (1)
	char Positive_Y : 1; // 0xD8 (1)
	char Positive_Z : 1; // 0xD8 (1)
	char Negative_X : 1; // 0xD8 (1)
	char Negative_Y : 1; // 0xD9 (1)
	char Negative_Z : 1; // 0xD9 (1)
};

// Class Engine.ParticleModuleAttractorPointGravity
class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase {

public:

	struct FVector Position; // 0x30 (12)
	float Radius; // 0x3C (4)
	struct UDistributionFloat Strength; // 0x40 (8)
	struct FRawDistributionFloat StrengthRaw; // 0x48 (48)
};

// Class Engine.ParticleModuleBeamModifier
class UParticleModuleBeamModifier : public UParticleModuleBeamBase {

public:

	enum class BeamModifierType ModifierType; // 0x30 (1)
	struct FBeamModifierOptions PositionOptions; // 0x34 (4)
	struct FRawDistributionVector Position; // 0x38 (72)
	struct FBeamModifierOptions TangentOptions; // 0x80 (4)
	struct FRawDistributionVector Tangent; // 0x88 (72)
	char bAbsoluteTangent : 1; // 0xD0 (1)
	char pad_C9_1 : 7; // 0xC9 (1)
	struct FBeamModifierOptions StrengthOptions; // 0xD4 (4)
	struct FRawDistributionFloat Strength; // 0xD8 (48)
};

// Class Engine.ParticleModuleBeamNoise
class UParticleModuleBeamNoise : public UParticleModuleBeamBase {

public:

	char bLowFreq_Enabled : 1; // 0x30 (1)
	char pad_30_1 : 7; // 0x30 (1)
	int32_t Frequency; // 0x34 (4)
	int32_t Frequency_LowRange; // 0x38 (4)
	struct FRawDistributionVector NoiseRange; // 0x40 (72)
	struct FRawDistributionFloat NoiseRangeScale; // 0x88 (48)
	char bNRScaleEmitterTime : 1; // 0xB8 (1)
	char pad_B1_1 : 7; // 0xB1 (1)
	struct FRawDistributionVector NoiseSpeed; // 0xC0 (72)
	char bSmooth : 1; // 0x108 (1)
	char pad_FA_1 : 7; // 0xFA (1)
	float NoiseLockRadius; // 0x10C (4)
	char bNoiseLock : 1; // 0x110 (1)
	char pad_FF_1 : 7; // 0xFF (1)
	char pad_100_0 : 1; // 0x100 (1)
	char bOscillate : 1; // 0x110 (1)
	char pad_100_2 : 6; // 0x100 (1)
	float NoiseLockTime; // 0x114 (4)
	float NoiseTension; // 0x118 (4)
	char bUseNoiseTangents : 1; // 0x11C (1)
	char pad_109_1 : 7; // 0x109 (1)
	struct FRawDistributionFloat NoiseTangentStrength; // 0x120 (48)
	int32_t NoiseTessellation; // 0x150 (4)
	char bTargetNoise : 1; // 0x154 (1)
	char pad_13E_1 : 7; // 0x13E (1)
	float FrequencyDistance; // 0x158 (4)
	char bApplyNoiseScale : 1; // 0x15C (1)
	char pad_143_1 : 7; // 0x143 (1)
	struct FRawDistributionFloat NoiseScale; // 0x160 (48)
};

// Class Engine.ParticleModuleBeamSource
class UParticleModuleBeamSource : public UParticleModuleBeamBase {

public:

	enum class Beam2SourceTargetMethod SourceMethod; // 0x30 (1)
	struct FName SourceName; // 0x34 (8)
	char bSourceAbsolute : 1; // 0x3C (1)
	char pad_39_1 : 7; // 0x39 (1)
	struct FRawDistributionVector Source; // 0x40 (72)
	char bLockSource : 1; // 0x88 (1)
	char pad_82_1 : 7; // 0x82 (1)
	enum class Beam2SourceTargetTangentMethod SourceTangentMethod; // 0x8C (1)
	struct FRawDistributionVector SourceTangent; // 0x90 (72)
	char bLockSourceTangent : 1; // 0xD8 (1)
	char pad_CC_1 : 7; // 0xCC (1)
	struct FRawDistributionFloat SourceStrength; // 0xE0 (48)
	char bLockSourceStength : 1; // 0x110 (1)
};

// Class Engine.ParticleModuleBeamTarget
class UParticleModuleBeamTarget : public UParticleModuleBeamBase {

public:

	enum class Beam2SourceTargetMethod TargetMethod; // 0x30 (1)
	struct FName TargetName; // 0x34 (8)
	struct FRawDistributionVector Target; // 0x40 (72)
	char bTargetAbsolute : 1; // 0x88 (1)
	char pad_81_1 : 7; // 0x81 (1)
	char pad_82_0 : 1; // 0x82 (1)
	char bLockTarget : 1; // 0x88 (1)
	char pad_82_2 : 6; // 0x82 (1)
	enum class Beam2SourceTargetTangentMethod TargetTangentMethod; // 0x8C (1)
	struct FRawDistributionVector TargetTangent; // 0x90 (72)
	char bLockTargetTangent : 1; // 0xD8 (1)
	char pad_CC_1 : 7; // 0xCC (1)
	struct FRawDistributionFloat TargetStrength; // 0xE0 (48)
	char bLockTargetStength : 1; // 0x110 (1)
	char pad_FD_1 : 7; // 0xFD (1)
	float LockRadius; // 0x114 (4)
};

// Class Engine.ParticleModuleCameraOffset
class UParticleModuleCameraOffset : public UParticleModuleCameraBase {

public:

	struct FRawDistributionFloat CameraOffset; // 0x30 (48)
	char bSpawnTimeOnly : 1; // 0x60 (1)
	char pad_60_1 : 7; // 0x60 (1)
	enum class EParticleCameraOffsetUpdateMethod UpdateMethod; // 0x64 (1)
};

// Class Engine.ParticleModuleCollisionGPU
class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase {

public:

	struct FRawDistributionFloat Resilience; // 0x30 (48)
	struct FRawDistributionFloat ResilienceScaleOverLife; // 0x60 (48)
	float Friction; // 0x90 (4)
	float RandomSpread; // 0x94 (4)
	float RandomDistribution; // 0x98 (4)
	float RadiusScale; // 0x9C (4)
	float RadiusBias; // 0xA0 (4)
	enum class EParticleCollisionResponse Response; // 0xA4 (1)
	enum class EParticleCollisionMode CollisionMode; // 0xA5 (1)
};

// Class Engine.ParticleModuleColor
class UParticleModuleColor : public UParticleModuleColorBase {

public:

	struct FRawDistributionVector StartColor; // 0x30 (72)
	struct FRawDistributionFloat StartAlpha; // 0x78 (48)
	char bClampAlpha : 1; // 0xA8 (1)
};

// Class Engine.ParticleModuleColor_Seeded
class UParticleModuleColor_Seeded : public UParticleModuleColor {

public:

	struct FParticleRandomSeedInfo RandomSeedInfo; // 0xB0 (32)
};

// Class Engine.ParticleModuleColorOverLife
class UParticleModuleColorOverLife : public UParticleModuleColorBase {

public:

	struct FRawDistributionVector ColorOverLife; // 0x30 (72)
	struct FRawDistributionFloat AlphaOverLife; // 0x78 (48)
	char bClampAlpha : 1; // 0xA8 (1)
};

// Class Engine.ParticleModuleColorScaleOverLife
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase {

public:

	struct FRawDistributionVector ColorScaleOverLife; // 0x30 (72)
	struct FRawDistributionFloat AlphaScaleOverLife; // 0x78 (48)
	char bEmitterTime : 1; // 0xA8 (1)
};

// Class Engine.ParticleModuleEventGenerator
class UParticleModuleEventGenerator : public UParticleModuleEventBase {

public:

	struct TArray<struct FParticleEvent_GenerateInfo> Events; // 0x30 (16)
};

// Class Engine.ParticleModuleEventReceiverBase
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase {

public:

	enum class EParticleEventType EventGeneratorType; // 0x30 (1)
	struct FName EventName; // 0x34 (8)
};

// Class Engine.ParticleModuleEventReceiverKillParticles
class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase {

public:

	char bStopSpawning : 1; // 0x40 (1)
};

// Class Engine.ParticleModuleEventReceiverSpawn
class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase {

public:

	struct FRawDistributionFloat SpawnCount; // 0x40 (48)
	char bUseParticleTime : 1; // 0x70 (1)
	char bUsePSysLocation : 1; // 0x70 (1)
	char bInheritVelocity : 1; // 0x70 (1)
	char pad_70_3 : 5; // 0x70 (1)
	struct FRawDistributionVector InheritVelocityScale; // 0x78 (72)
	struct TArray<struct UPhysicalMaterial> PhysicalMaterials; // 0xC0 (16)
	char bBanPhysicalMaterials : 1; // 0xD0 (1)
};

// Class Engine.ParticleModuleKillBox
class UParticleModuleKillBox : public UParticleModuleKillBase {

public:

	struct FRawDistributionVector LowerLeftCorner; // 0x30 (72)
	struct FRawDistributionVector UpperRightCorner; // 0x78 (72)
	char bAbsolute : 1; // 0xC0 (1)
	char bKillInside : 1; // 0xC0 (1)
	char bAxisAlignedAndFixedSize : 1; // 0xC0 (1)
};

// Class Engine.ParticleModuleKillHeight
class UParticleModuleKillHeight : public UParticleModuleKillBase {

public:

	struct FRawDistributionFloat Height; // 0x30 (48)
	char bAbsolute : 1; // 0x60 (1)
	char bFloor : 1; // 0x60 (1)
	char bApplyPSysScale : 1; // 0x60 (1)
};

// Class Engine.ParticleModuleLifetime
class UParticleModuleLifetime : public UParticleModuleLifetimeBase {

public:

	struct FRawDistributionFloat LifeTime; // 0x30 (48)
};

// Class Engine.ParticleModuleLifetime_Seeded
class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime {

public:

	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x60 (32)
};

// Class Engine.ParticleModuleLight
class UParticleModuleLight : public UParticleModuleLightBase {

public:

	bool bUseInverseSquaredFalloff; // 0x30 (1)
	bool bAffectsTranslucency; // 0x31 (1)
	bool bPreviewLightRadius; // 0x32 (1)
	float SpawnFraction; // 0x34 (4)
	struct FRawDistributionVector ColorScaleOverLife; // 0x38 (72)
	struct FRawDistributionFloat BrightnessOverLife; // 0x80 (48)
	struct FRawDistributionFloat RadiusScale; // 0xB0 (48)
	struct FRawDistributionFloat LightExponent; // 0xE0 (48)
	struct FLightingChannels LightingChannels; // 0x110 (1)
	float VolumetricScatteringIntensity; // 0x114 (4)
	bool bHighQualityLights; // 0x118 (1)
	bool bShadowCastingLights; // 0x119 (1)
};

// Class Engine.ParticleModuleLight_Seeded
class UParticleModuleLight_Seeded : public UParticleModuleLight {

public:

	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x120 (32)
};

// Class Engine.ParticleModuleLocation
class UParticleModuleLocation : public UParticleModuleLocationBase {

public:

	struct FRawDistributionVector StartLocation; // 0x30 (72)
	float DistributeOverNPoints; // 0x78 (4)
	float DistributeThreshold; // 0x7C (4)
};

// Class Engine.ParticleModuleLocation_Seeded
class UParticleModuleLocation_Seeded : public UParticleModuleLocation {

public:

	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x80 (32)
};

// Class Engine.ParticleModuleLocationBoneSocket
class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase {

public:

	enum class ELocationBoneSocketSource SourceType; // 0x30 (1)
	struct FVector UniversalOffset; // 0x34 (12)
	struct TArray<struct FLocationBoneSocketInfo> SourceLocations; // 0x40 (16)
	enum class ELocationBoneSocketSelectionMethod SelectionMethod; // 0x50 (1)
	char bUpdatePositionEachFrame : 1; // 0x54 (1)
	char pad_4E_1 : 7; // 0x4E (1)
	char pad_4F_0 : 1; // 0x4F (1)
	char bOrientMeshEmitters : 1; // 0x54 (1)
	char pad_4F_2 : 6; // 0x4F (1)
	char pad_50_0 : 2; // 0x50 (1)
	char bInheritBoneVelocity : 1; // 0x54 (1)
	char pad_50_3 : 5; // 0x50 (1)
	float InheritVelocityScale; // 0x58 (4)
	struct FName SkelMeshActorParamName; // 0x5C (8)
	int32_t NumPreSelectedIndices; // 0x64 (4)
};

// Class Engine.ParticleModuleLocationDirect
class UParticleModuleLocationDirect : public UParticleModuleLocationBase {

public:

	struct FRawDistributionVector Location; // 0x30 (72)
	struct FRawDistributionVector LocationOffset; // 0x78 (72)
	struct FRawDistributionVector ScaleFactor; // 0xC0 (72)
	struct FRawDistributionVector Direction; // 0x108 (72)
};

// Class Engine.ParticleModuleLocationEmitter
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase {

public:

	struct FName EmitterName; // 0x30 (8)
	enum class ELocationEmitterSelectionMethod SelectionMethod; // 0x38 (1)
	char InheritSourceVelocity : 1; // 0x3C (1)
	char pad_39_1 : 7; // 0x39 (1)
	float InheritSourceVelocityScale; // 0x40 (4)
	char bInheritSourceRotation : 1; // 0x44 (1)
	char pad_3E_1 : 7; // 0x3E (1)
	float InheritSourceRotationScale; // 0x48 (4)
};

// Class Engine.ParticleModuleLocationEmitterDirect
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase {

public:

	struct FName EmitterName; // 0x30 (8)
};

// Class Engine.ParticleModuleLocationPrimitiveBase
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase {

public:

	char Positive_X : 1; // 0x30 (1)
	char Positive_Y : 1; // 0x30 (1)
	char Positive_Z : 1; // 0x30 (1)
	char Negative_X : 1; // 0x30 (1)
	char Negative_Y : 1; // 0x30 (1)
	char Negative_Z : 1; // 0x30 (1)
	char SurfaceOnly : 1; // 0x30 (1)
	char Velocity : 1; // 0x30 (1)
	struct FRawDistributionFloat VelocityScale; // 0x38 (48)
	struct FRawDistributionVector StartLocation; // 0x68 (72)
};

// Class Engine.ParticleModuleLocationPrimitiveCylinder
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase {

public:

	char RadialVelocity : 1; // 0xB0 (1)
	char pad_B0_1 : 7; // 0xB0 (1)
	struct FRawDistributionFloat StartRadius; // 0xB8 (48)
	struct FRawDistributionFloat StartHeight; // 0xE8 (48)
	enum class CylinderHeightAxis HeightAxis; // 0x118 (1)
};

// Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder {

public:

	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x120 (32)
};

// Class Engine.ParticleModuleLocationPrimitiveSphere
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase {

public:

	struct FRawDistributionFloat StartRadius; // 0xB0 (48)
};

// Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded
class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere {

public:

	struct FParticleRandomSeedInfo RandomSeedInfo; // 0xE0 (32)
};

// Class Engine.ParticleModuleLocationPrimitiveTriangle
class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase {

public:

	struct FRawDistributionVector StartOffset; // 0x30 (72)
	struct FRawDistributionFloat Height; // 0x78 (48)
	struct FRawDistributionFloat Angle; // 0xA8 (48)
	struct FRawDistributionFloat Thickness; // 0xD8 (48)
};

// Class Engine.ParticleModuleLocationSkelVertSurface
class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase {

public:

	enum class ELocationSkelVertSurfaceSource SourceType; // 0x30 (1)
	struct FVector UniversalOffset; // 0x34 (12)
	char bUpdatePositionEachFrame : 1; // 0x40 (1)
	char pad_3D_1 : 7; // 0x3D (1)
	char pad_3E_0 : 1; // 0x3E (1)
	char bOrientMeshEmitters : 1; // 0x40 (1)
	char pad_3E_2 : 6; // 0x3E (1)
	char pad_3F_0 : 2; // 0x3F (1)
	char bInheritBoneVelocity : 1; // 0x40 (1)
	char pad_3F_3 : 5; // 0x3F (1)
	float InheritVelocityScale; // 0x44 (4)
	struct FName SkelMeshActorParamName; // 0x48 (8)
	struct TArray<struct FName> ValidAssociatedBones; // 0x50 (16)
	char bEnforceNormalCheck : 1; // 0x60 (1)
	char pad_5C_1 : 7; // 0x5C (1)
	struct FVector NormalToCompare; // 0x64 (12)
	float NormalCheckToleranceDegrees; // 0x70 (4)
	float NormalCheckTolerance; // 0x74 (4)
	struct TArray<int32_t> ValidMaterialIndices; // 0x78 (16)
	char bInheritVertexColor : 1; // 0x88 (1)
	char pad_81_1 : 7; // 0x81 (1)
	char pad_82_0 : 1; // 0x82 (1)
	char bInheritUV : 1; // 0x88 (1)
	char pad_82_2 : 6; // 0x82 (1)
	uint32_t InheritUVChannel; // 0x8C (4)
};

// Class Engine.ParticleModuleLocationWorldOffset_Seeded
class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset {

public:

	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x80 (32)
};

// Class Engine.ParticleModuleMeshMaterial
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase {

public:

	struct TArray<struct UMaterialInterface> MeshMaterials; // 0x30 (16)
};

// Class Engine.ParticleModuleMeshRotation
class UParticleModuleMeshRotation : public UParticleModuleRotationBase {

public:

	struct FRawDistributionVector StartRotation; // 0x30 (72)
	char bInheritParent : 1; // 0x78 (1)
};

// Class Engine.ParticleModuleMeshRotation_Seeded
class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation {

public:

	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x80 (32)
};

// Class Engine.ParticleModuleMeshRotationRate
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase {

public:

	struct FRawDistributionVector StartRotationRate; // 0x30 (72)
};

// Class Engine.ParticleModuleMeshRotationRate_Seeded
class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate {

public:

	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x78 (32)
};

// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase {

public:

	struct FRawDistributionVector LifeMultiplier; // 0x30 (72)
};

// Class Engine.ParticleModuleMeshRotationRateOverLife
class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase {

public:

	struct FRawDistributionVector RotRate; // 0x30 (72)
	char bScaleRotRate : 1; // 0x78 (1)
};

// Class Engine.ParticleModuleOrbitBase
class UParticleModuleOrbitBase : public UParticleModule {

public:

	char bUseEmitterTime : 1; // 0x30 (1)
};

// Class Engine.ParticleModuleOrbit
class UParticleModuleOrbit : public UParticleModuleOrbitBase {

public:

	enum class EOrbitChainMode ChainMode; // 0x38 (1)
	struct FRawDistributionVector OffsetAmount; // 0x40 (72)
	struct FOrbitOptions OffsetOptions; // 0x88 (4)
	struct FRawDistributionVector RotationAmount; // 0x90 (72)
	struct FOrbitOptions RotationOptions; // 0xD8 (4)
	struct FRawDistributionVector RotationRateAmount; // 0xE0 (72)
	struct FOrbitOptions RotationRateOptions; // 0x128 (4)
};

// Class Engine.ParticleModuleOrientationAxisLock
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase {

public:

	enum class EParticleAxisLock LockAxisFlags; // 0x30 (1)
};

// Class Engine.ParticleModuleParameterDynamic
class UParticleModuleParameterDynamic : public UParticleModuleParameterBase {

public:

	struct TArray<struct FEmitterDynamicParameter> DynamicParams; // 0x30 (16)
	int32_t UpdateFlags; // 0x40 (4)
	char bUsesVelocity : 1; // 0x44 (1)
};

// Class Engine.ParticleModuleParameterDynamic_Seeded
class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic {

public:

	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x48 (32)
};

// Class Engine.ParticleModulePivotOffset
class UParticleModulePivotOffset : public UParticleModuleLocationBase {

public:

	struct FVector2D PivotOffset; // 0x30 (8)
};

// Class Engine.ParticleModuleRequired
class UParticleModuleRequired : public UParticleModule {

public:

	struct UMaterialInterface Material; // 0x30 (8)
	float MinFacingCameraBlendDistance; // 0x38 (4)
	float MaxFacingCameraBlendDistance; // 0x3C (4)
	struct FVector EmitterOrigin; // 0x40 (12)
	struct FRotator EmitterRotation; // 0x4C (12)
	enum class EParticleScreenAlignment ScreenAlignment; // 0x58 (1)
	char bUseLocalSpace : 1; // 0x59 (1)
	char bKillOnDeactivate : 1; // 0x59 (1)
	char bKillOnCompleted : 1; // 0x59 (1)
	char pad_59_3 : 5; // 0x59 (1)
	enum class EParticleSortMode SortMode; // 0x5A (1)
	char bUseLegacyEmitterTime : 1; // 0x5B (1)
	char bRemoveHMDRoll : 1; // 0x5B (1)
	char bEmitterDurationUseRange : 1; // 0x5B (1)
	char pad_5B_3 : 5; // 0x5B (1)
	float EmitterDuration; // 0x5C (4)
	struct FRawDistributionFloat SpawnRate; // 0x60 (48)
	struct TArray<struct FParticleBurst> BurstList; // 0x90 (16)
	float EmitterDelay; // 0xA0 (4)
	float EmitterDelayLow; // 0xA4 (4)
	char bDelayFirstLoopOnly : 1; // 0xA8 (1)
	char pad_A8_1 : 7; // 0xA8 (1)
	enum class EParticleSubUVInterpMethod InterpolationMethod; // 0xA9 (1)
	char bScaleUV : 1; // 0xAA (1)
	char bEmitterDelayUseRange : 1; // 0xAA (1)
	char pad_AA_2 : 6; // 0xAA (1)
	enum class EParticleBurstMethod ParticleBurstMethod; // 0xAB (1)
	char bOverrideSystemMacroUV : 1; // 0xAC (1)
	char bUseMaxDrawCount : 1; // 0xAC (1)
	char pad_AC_2 : 6; // 0xAC (1)
	enum class EOpacitySourceMode OpacitySourceMode; // 0xAD (1)
	enum class EEmitterNormalsMode EmitterNormalsMode; // 0xAE (1)
	char bOrbitModuleAffectsVelocityAlignment : 1; // 0xAF (1)
	char pad_AF_1 : 7; // 0xAF (1)
	int32_t SubImages_Horizontal; // 0xB0 (4)
	int32_t SubImages_Vertical; // 0xB4 (4)
	float RandomImageTime; // 0xB8 (4)
	int32_t RandomImageChanges; // 0xBC (4)
	struct FVector MacroUVPosition; // 0xC0 (12)
	float MacroUVRadius; // 0xCC (4)
	enum class EParticleUVFlipMode UVFlippingMode; // 0xD0 (1)
	enum class ESubUVBoundingVertexCount BoundingMode; // 0xD1 (1)
	char bDurationRecalcEachLoop : 1; // 0xD2 (1)
	char pad_D2_1 : 7; // 0xD2 (1)
	struct FVector NormalsSphereCenter; // 0xD4 (12)
	float AlphaThreshold; // 0xE0 (4)
	int32_t EmitterLoops; // 0xE4 (4)
	struct UTexture2D CutoutTexture; // 0xE8 (8)
	int32_t MaxDrawCount; // 0xF0 (4)
	float EmitterDurationLow; // 0xF4 (4)
	struct FVector NormalsCylinderDirection; // 0xF8 (12)
	struct TArray<struct FName> NamedMaterialOverrides; // 0x108 (16)
};

// Class Engine.ParticleModuleRotation
class UParticleModuleRotation : public UParticleModuleRotationBase {

public:

	struct FRawDistributionFloat StartRotation; // 0x30 (48)
};

// Class Engine.ParticleModuleRotation_Seeded
class UParticleModuleRotation_Seeded : public UParticleModuleRotation {

public:

	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x60 (32)
};

// Class Engine.ParticleModuleRotationOverLifetime
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase {

public:

	struct FRawDistributionFloat RotationOverLife; // 0x30 (48)
	char Scale : 1; // 0x60 (1)
};

// Class Engine.ParticleModuleRotationRate
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase {

public:

	struct FRawDistributionFloat StartRotationRate; // 0x30 (48)
};

// Class Engine.ParticleModuleRotationRate_Seeded
class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate {

public:

	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x60 (32)
};

// Class Engine.ParticleModuleRotationRateMultiplyLife
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase {

public:

	struct FRawDistributionFloat LifeMultiplier; // 0x30 (48)
};

// Class Engine.ParticleModuleSize
class UParticleModuleSize : public UParticleModuleSizeBase {

public:

	struct FRawDistributionVector StartSize; // 0x30 (72)
};

// Class Engine.ParticleModuleSize_Seeded
class UParticleModuleSize_Seeded : public UParticleModuleSize {

public:

	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x78 (32)
};

// Class Engine.ParticleModuleSizeMultiplyLife
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase {

public:

	struct FRawDistributionVector LifeMultiplier; // 0x30 (72)
	char MultiplyX : 1; // 0x78 (1)
	char MultiplyY : 1; // 0x78 (1)
	char MultiplyZ : 1; // 0x78 (1)
};

// Class Engine.ParticleModuleSizeScale
class UParticleModuleSizeScale : public UParticleModuleSizeBase {

public:

	struct FRawDistributionVector SizeScale; // 0x30 (72)
	char EnableX : 1; // 0x78 (1)
	char EnableY : 1; // 0x78 (1)
	char EnableZ : 1; // 0x78 (1)
};

// Class Engine.ParticleModuleSizeScaleBySpeed
class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase {

public:

	struct FVector2D SpeedScale; // 0x30 (8)
	struct FVector2D MaxScale; // 0x38 (8)
};

// Class Engine.ParticleModuleSourceMovement
class UParticleModuleSourceMovement : public UParticleModuleLocationBase {

public:

	struct FRawDistributionVector SourceMovementScale; // 0x30 (72)
};

// Class Engine.ParticleModuleSpawnBase
class UParticleModuleSpawnBase : public UParticleModule {

public:

	char bProcessSpawnRate : 1; // 0x30 (1)
	char bProcessBurstList : 1; // 0x30 (1)
};

// Class Engine.ParticleModuleSpawn
class UParticleModuleSpawn : public UParticleModuleSpawnBase {

public:

	struct FRawDistributionFloat Rate; // 0x38 (48)
	struct FRawDistributionFloat RateScale; // 0x68 (48)
	enum class EParticleBurstMethod ParticleBurstMethod; // 0x98 (1)
	struct TArray<struct FParticleBurst> BurstList; // 0xA0 (16)
	struct FRawDistributionFloat BurstScale; // 0xB0 (48)
	char bApplyGlobalSpawnRateScale : 1; // 0xE0 (1)
};

// Class Engine.ParticleModuleSpawnPerUnit
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase {

public:

	float UnitScalar; // 0x38 (4)
	float MovementTolerance; // 0x3C (4)
	struct FRawDistributionFloat SpawnPerUnit; // 0x40 (48)
	float MaxFrameDistance; // 0x70 (4)
	char bIgnoreSpawnRateWhenMoving : 1; // 0x74 (1)
	char bIgnoreMovementAlongX : 1; // 0x74 (1)
	char bIgnoreMovementAlongY : 1; // 0x74 (1)
	char bIgnoreMovementAlongZ : 1; // 0x74 (1)
};

// Class Engine.ParticleModuleSubUV
class UParticleModuleSubUV : public UParticleModuleSubUVBase {

public:

	struct USubUVAnimation Animation; // 0x30 (8)
	struct FRawDistributionFloat SubImageIndex; // 0x38 (48)
	char bUseRealTime : 1; // 0x68 (1)
};

// Class Engine.ParticleModuleSubUVMovie
class UParticleModuleSubUVMovie : public UParticleModuleSubUV {

public:

	char bUseEmitterTime : 1; // 0x70 (1)
	char pad_70_1 : 7; // 0x70 (1)
	struct FRawDistributionFloat FrameRate; // 0x78 (48)
	int32_t StartingFrame; // 0xA8 (4)
};

// Class Engine.ParticleModuleTrailSource
class UParticleModuleTrailSource : public UParticleModuleTrailBase {

public:

	enum class ETrail2SourceMethod SourceMethod; // 0x30 (1)
	struct FName SourceName; // 0x34 (8)
	struct FRawDistributionFloat SourceStrength; // 0x40 (48)
	char bLockSourceStength : 1; // 0x70 (1)
	char pad_69_1 : 7; // 0x69 (1)
	int32_t SourceOffsetCount; // 0x74 (4)
	struct TArray<struct FVector> SourceOffsetDefaults; // 0x78 (16)
	enum class EParticleSourceSelectionMethod SelectionMethod; // 0x88 (1)
	char bInheritRotation : 1; // 0x8C (1)
};

// Class Engine.ParticleModuleTypeDataAnimTrail
class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase {

public:

	char bDeadTrailsOnDeactivate : 1; // 0x30 (1)
	char bEnablePreviousTangentRecalculation : 1; // 0x30 (1)
	char bTangentRecalculationEveryFrame : 1; // 0x30 (1)
	char pad_30_3 : 5; // 0x30 (1)
	float TilingDistance; // 0x34 (4)
	float DistanceTessellationStepSize; // 0x38 (4)
	float TangentTessellationStepSize; // 0x3C (4)
	float WidthTessellationStepSize; // 0x40 (4)
};

// Class Engine.ParticleModuleTypeDataBeam2
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase {

public:

	enum class EBeam2Method BeamMethod; // 0x30 (1)
	int32_t TextureTile; // 0x34 (4)
	float TextureTileDistance; // 0x38 (4)
	int32_t Sheets; // 0x3C (4)
	int32_t MaxBeamCount; // 0x40 (4)
	float Speed; // 0x44 (4)
	int32_t InterpolationPoints; // 0x48 (4)
	char bAlwaysOn : 1; // 0x4C (1)
	char pad_49_1 : 7; // 0x49 (1)
	int32_t UpVectorStepSize; // 0x50 (4)
	struct FName BranchParentName; // 0x54 (8)
	struct FRawDistributionFloat Distance; // 0x60 (48)
	enum class EBeamTaperMethod TaperMethod; // 0x90 (1)
	struct FRawDistributionFloat TaperFactor; // 0x98 (48)
	struct FRawDistributionFloat TaperScale; // 0xC8 (48)
	char RenderGeometry : 1; // 0xF8 (1)
	char pad_E7_1 : 7; // 0xE7 (1)
	char pad_E8_0 : 1; // 0xE8 (1)
	char RenderDirectLine : 1; // 0xF8 (1)
	char pad_E8_2 : 6; // 0xE8 (1)
	char pad_E9_0 : 2; // 0xE9 (1)
	char RenderLines : 1; // 0xF8 (1)
	char pad_E9_3 : 5; // 0xE9 (1)
	char pad_EA_0 : 3; // 0xEA (1)
	char RenderTessellation : 1; // 0xF8 (1)
};

// Class Engine.ParticleModuleTypeDataGpu
class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase {

public:

	struct FGPUSpriteEmitterInfo EmitterInfo; // 0x30 (640)
	struct FGPUSpriteResourceData ResourceData; // 0x2B0 (352)
	float CameraMotionBlurAmount; // 0x410 (4)
	char bClearExistingParticlesOnInit : 1; // 0x414 (1)
};

// Class Engine.ParticleModuleTypeDataMesh
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase {

public:

	struct UStaticMesh Mesh; // 0x30 (8)
	float LODSizeScale; // 0x40 (4)
	char bUseStaticMeshLODs : 1; // 0x44 (1)
	char pad_3C_1 : 7; // 0x3C (1)
	char pad_3D_0 : 1; // 0x3D (1)
	char CastShadows : 1; // 0x44 (1)
	char pad_3D_2 : 6; // 0x3D (1)
	char pad_3E_0 : 2; // 0x3E (1)
	char DoCollisions : 1; // 0x44 (1)
	char pad_3E_3 : 5; // 0x3E (1)
	enum class EMeshScreenAlignment MeshAlignment; // 0x45 (1)
	char bOverrideMaterial : 1; // 0x46 (1)
	char pad_40_1 : 7; // 0x40 (1)
	char pad_41_0 : 1; // 0x41 (1)
	char bOverrideDefaultMotionBlurSettings : 1; // 0x46 (1)
	char pad_41_2 : 6; // 0x41 (1)
	char pad_42_0 : 2; // 0x42 (1)
	char bEnableMotionBlur : 1; // 0x46 (1)
	char pad_42_3 : 5; // 0x42 (1)
	struct FRawDistributionVector RollPitchYawRange; // 0x48 (72)
	enum class EParticleAxisLock AxisLockOption; // 0x90 (1)
	char bCameraFacing : 1; // 0x91 (1)
	char pad_8C_1 : 7; // 0x8C (1)
	enum class EMeshCameraFacingUpAxis CameraFacingUpAxisOption; // 0x92 (1)
	enum class EMeshCameraFacingOptions CameraFacingOption; // 0x93 (1)
	char bApplyParticleRotationAsSpin : 1; // 0x94 (1)
	char pad_8F_1 : 7; // 0x8F (1)
	char pad_90_0 : 1; // 0x90 (1)
	char bFaceCameraDirectionRatherThanPosition : 1; // 0x94 (1)
	char pad_90_2 : 6; // 0x90 (1)
	char pad_91_0 : 2; // 0x91 (1)
	char bCollisionsConsiderPartilceSize : 1; // 0x94 (1)
};

// Class Engine.ParticleModuleTypeDataRibbon
class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase {

public:

	int32_t MaxTessellationBetweenParticles; // 0x30 (4)
	int32_t SheetsPerTrail; // 0x34 (4)
	int32_t MaxTrailCount; // 0x38 (4)
	int32_t MaxParticleInTrailCount; // 0x3C (4)
	char bDeadTrailsOnDeactivate : 1; // 0x40 (1)
	char bDeadTrailsOnSourceLoss : 1; // 0x40 (1)
	char bClipSourceSegement : 1; // 0x40 (1)
	char bEnablePreviousTangentRecalculation : 1; // 0x40 (1)
	char bTangentRecalculationEveryFrame : 1; // 0x40 (1)
	char bSpawnInitialParticle : 1; // 0x40 (1)
	char pad_40_6 : 2; // 0x40 (1)
	enum class ETrailsRenderAxisOption RenderAxis; // 0x44 (1)
	float TangentSpawningScalar; // 0x48 (4)
	char bRenderGeometry : 1; // 0x4C (1)
	char pad_46_1 : 7; // 0x46 (1)
	char pad_47_0 : 1; // 0x47 (1)
	char bRenderSpawnPoints : 1; // 0x4C (1)
	char pad_47_2 : 6; // 0x47 (1)
	char pad_48_0 : 2; // 0x48 (1)
	char bRenderTangents : 1; // 0x4C (1)
	char pad_48_3 : 5; // 0x48 (1)
	char pad_49_0 : 3; // 0x49 (1)
	char bRenderTessellation : 1; // 0x4C (1)
	char pad_49_4 : 4; // 0x49 (1)
	float TilingDistance; // 0x50 (4)
	float DistanceTessellationStepSize; // 0x54 (4)
	char bEnableTangentDiffInterpScale : 1; // 0x58 (1)
	char pad_52_1 : 7; // 0x52 (1)
	float TangentTessellationScalar; // 0x5C (4)
};

// Class Engine.ParticleModuleVectorFieldGlobal
class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase {

public:

	char bOverrideGlobalVectorFieldTightness : 1; // 0x30 (1)
	char pad_30_1 : 7; // 0x30 (1)
	float GlobalVectorFieldScale; // 0x34 (4)
	float GlobalVectorFieldTightness; // 0x38 (4)
};

// Class Engine.ParticleModuleVectorFieldLocal
class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase {

public:

	struct UVectorField VectorField; // 0x30 (8)
	struct FVector RelativeTranslation; // 0x38 (12)
	struct FRotator RelativeRotation; // 0x44 (12)
	struct FVector RelativeScale3D; // 0x50 (12)
	float Intensity; // 0x5C (4)
	float Tightness; // 0x60 (4)
	char bIgnoreComponentTransform : 1; // 0x64 (1)
	char bTileX : 1; // 0x64 (1)
	char bTileY : 1; // 0x64 (1)
	char bTileZ : 1; // 0x64 (1)
	char bUseFixDT : 1; // 0x64 (1)
};

// Class Engine.ParticleModuleVectorFieldRotation
class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase {

public:

	struct FVector MinInitialRotation; // 0x30 (12)
	struct FVector MaxInitialRotation; // 0x3C (12)
};

// Class Engine.ParticleModuleVectorFieldRotationRate
class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase {

public:

	struct FVector RotationRate; // 0x30 (12)
};

// Class Engine.ParticleModuleVectorFieldScale
class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase {

public:

	struct UDistributionFloat VectorFieldScale; // 0x30 (8)
	struct FRawDistributionFloat VectorFieldScaleRaw; // 0x38 (48)
};

// Class Engine.ParticleModuleVectorFieldScaleOverLife
class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase {

public:

	struct UDistributionFloat VectorFieldScaleOverLife; // 0x30 (8)
	struct FRawDistributionFloat VectorFieldScaleOverLifeRaw; // 0x38 (48)
};

// Class Engine.ParticleModuleVelocityBase
class UParticleModuleVelocityBase : public UParticleModule {

public:

	char bInWorldSpace : 1; // 0x30 (1)
	char bApplyOwnerScale : 1; // 0x30 (1)
};

// Class Engine.ParticleModuleVelocity
class UParticleModuleVelocity : public UParticleModuleVelocityBase {

public:

	struct FRawDistributionVector StartVelocity; // 0x38 (72)
	struct FRawDistributionFloat StartVelocityRadial; // 0x80 (48)
};

// Class Engine.ParticleModuleVelocity_Seeded
class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity {

public:

	struct FParticleRandomSeedInfo RandomSeedInfo; // 0xB0 (32)
};

// Class Engine.ParticleModuleVelocityCone
class UParticleModuleVelocityCone : public UParticleModuleVelocityBase {

public:

	struct FRawDistributionFloat Angle; // 0x38 (48)
	struct FRawDistributionFloat Velocity; // 0x68 (48)
	struct FVector Direction; // 0x98 (12)
};

// Class Engine.ParticleModuleVelocityInheritParent
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase {

public:

	struct FRawDistributionVector Scale; // 0x38 (72)
};

// Class Engine.ParticleModuleVelocityOverLifetime
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase {

public:

	struct FRawDistributionVector VelOverLife; // 0x38 (72)
	char Absolute : 1; // 0x80 (1)
};

// Class Engine.ParticleSystem
class UParticleSystem : public UFXSystemAsset {

public:

	float UpdateTime_FPS; // 0x30 (4)
	float UpdateTime_Delta; // 0x34 (4)
	float WarmupTime; // 0x38 (4)
	float WarmupTickRate; // 0x3C (4)
	struct TArray<struct UParticleEmitter> Emitters; // 0x40 (16)
	struct UParticleSystemComponent PreviewComponent; // 0x50 (8)
	struct UInterpCurveEdSetup CurveEdSetup; // 0x58 (8)
	float LODDistanceCheckTime; // 0x60 (4)
	float MacroUVRadius; // 0x64 (4)
	struct TArray<float> LODDistances; // 0x68 (16)
	struct TArray<struct FParticleSystemLOD> LODSettings; // 0x78 (16)
	struct FBox FixedRelativeBoundingBox; // 0x88 (28)
	float SecondsBeforeInactive; // 0xA4 (4)
	float Delay; // 0xA8 (4)
	float DelayLow; // 0xAC (4)
	char bOrientZAxisTowardCamera : 1; // 0xB0 (1)
	char bUseFixedRelativeBoundingBox : 1; // 0xB0 (1)
	char bShouldResetPeakCounts : 1; // 0xB0 (1)
	char bHasPhysics : 1; // 0xB0 (1)
	char bUseRealtimeThumbnail : 1; // 0xB0 (1)
	char ThumbnailImageOutOfDate : 1; // 0xB0 (1)
	char pad_B0_6 : 2; // 0xB0 (1)
	char bUseDelayRange : 1; // 0xB1 (1)
	char bAllowManagedTicking : 1; // 0xB1 (1)
	char bAutoDeactivate : 1; // 0xB1 (1)
	char bRegenerateLODDuplicate : 1; // 0xB1 (1)
	char pad_B1_4 : 4; // 0xB1 (1)
	enum class EParticleSystemUpdateMode SystemUpdateMode; // 0xB2 (1)
	enum class ParticleSystemLODMethod LODMethod; // 0xB3 (1)
	enum class EParticleSystemInsignificanceReaction InsignificantReaction; // 0xB4 (1)
	enum class EParticleSystemOcclusionBoundsMethod OcclusionBoundsMethod; // 0xB5 (1)
	enum class EParticleSignificanceLevel MaxSignificanceLevel; // 0xB7 (1)
	uint32_t MinTimeBetweenTicks; // 0xB8 (4)
	float InsignificanceDelay; // 0xBC (4)
	struct FVector MacroUVPosition; // 0xC0 (12)
	struct FBox CustomOcclusionBounds; // 0xCC (28)
	struct TArray<struct FLODSoloTrack> SoloTracking; // 0xE8 (16)
	struct TArray<struct FNamedEmitterMaterial> NamedMaterialSlots; // 0xF8 (16)

	bool ContainsEmitterType(struct UClass* TypeData); // Function Engine.ParticleSystem.ContainsEmitterType(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x336A1A0>
};

// Class Engine.ParticleSystemComponent
class UParticleSystemComponent : public UFXSystemComponent {

public:

	struct UParticleSystem Template; // 0x408 (8)
	struct TArray<struct UMaterialInterface> EmitterMaterials; // 0x410 (16)
	struct TArray<struct USkeletalMeshComponent> SkelMeshComponents; // 0x420 (16)
	char bResetOnDetach : 1; // 0x431 (1)
	char bUpdateOnDedicatedServer : 1; // 0x431 (1)
	char pad_438_2 : 2; // 0x438 (1)
	char bAllowRecycling : 1; // 0x431 (1)
	char bAutoManageAttachment : 1; // 0x431 (1)
	char bAutoAttachWeldSimulatedBodies : 1; // 0x431 (1)
	char bWarmingUp : 1; // 0x432 (1)
	char pad_439_0 : 2; // 0x439 (1)
	char bOverrideLODMethod : 1; // 0x432 (1)
	char bSkipUpdateDynamicDataDuringTick : 1; // 0x432 (1)
	char pad_439_4 : 4; // 0x439 (1)
	enum class ParticleSystemLODMethod LODMethod; // 0x43D (1)
	enum class EParticleSignificanceLevel RequiredSignificance; // 0x43E (1)
	struct TArray<struct FParticleSysParam> InstanceParameters; // 0x440 (16)
	struct FMulticastInlineDelegate OnParticleSpawn; // 0x450 (16)
	struct FMulticastInlineDelegate OnParticleBurst; // 0x460 (16)
	struct FMulticastInlineDelegate OnParticleDeath; // 0x470 (16)
	struct FMulticastInlineDelegate OnParticleCollide; // 0x480 (16)
	bool bOldPositionValid; // 0x490 (1)
	struct FVector OldPosition; // 0x494 (12)
	struct FVector PartSysVelocity; // 0x4A0 (12)
	float WarmupTime; // 0x4AC (4)
	float WarmupTickRate; // 0x4B0 (4)
	float SecondsBeforeInactive; // 0x4B8 (4)
	float MaxTimeBeforeForceUpdateTransform; // 0x4C0 (4)
	struct TArray<struct UParticleSystemReplay> ReplayClips; // 0x4E0 (16)
	float CustomTimeDilation; // 0x4F8 (4)
	struct TWeakObjectPtr<struct USceneComponent> AutoAttachParent; // 0x550 (8)
	struct FName AutoAttachSocketName; // 0x558 (8)
	enum class EAttachmentRule AutoAttachLocationRule; // 0x560 (1)
	enum class EAttachmentRule AutoAttachRotationRule; // 0x561 (1)
	enum class EAttachmentRule AutoAttachScaleRule; // 0x562 (1)
	struct FMulticastInlineDelegate OnSystemFinished; // 0x590 (16)

	void SetTrailSourceData(struct FName InFirstSocketName, struct FName InSecondSocketName, enum class ETrailWidthMode InWidthMode, float InWidth); // Function Engine.ParticleSystemComponent.SetTrailSourceData(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x336E1C0>
	void SetTemplate(struct UParticleSystem NewTemplate); // Function Engine.ParticleSystemComponent.SetTemplate(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x336E140>
	void SetMaterialParameter(struct FName ParameterName, struct UMaterialInterface Param); // Function Engine.ParticleSystemComponent.SetMaterialParameter(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x336E080>
	void SetBeamTargetTangent(int32_t EmitterIndex, struct FVector NewTangentPoint, int32_t TargetIndex); // Function Engine.ParticleSystemComponent.SetBeamTargetTangent(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x336DB60>
	void SetBeamTargetStrength(int32_t EmitterIndex, float NewTargetStrength, int32_t TargetIndex); // Function Engine.ParticleSystemComponent.SetBeamTargetStrength(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x336DA60>
	void SetBeamTargetPoint(int32_t EmitterIndex, struct FVector NewTargetPoint, int32_t TargetIndex); // Function Engine.ParticleSystemComponent.SetBeamTargetPoint(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x336D950>
	void SetBeamSourceTangent(int32_t EmitterIndex, struct FVector NewTangentPoint, int32_t SourceIndex); // Function Engine.ParticleSystemComponent.SetBeamSourceTangent(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x336D840>
	void SetBeamSourceStrength(int32_t EmitterIndex, float NewSourceStrength, int32_t SourceIndex); // Function Engine.ParticleSystemComponent.SetBeamSourceStrength(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x336D740>
	void SetBeamSourcePoint(int32_t EmitterIndex, struct FVector NewSourcePoint, int32_t SourceIndex); // Function Engine.ParticleSystemComponent.SetBeamSourcePoint(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x336D630>
	void SetBeamEndPoint(int32_t EmitterIndex, struct FVector NewEndPoint); // Function Engine.ParticleSystemComponent.SetBeamEndPoint(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x336D560>
	void SetAutoAttachParams(struct USceneComponent Parent, struct FName SocketName, enum class EAttachLocation LocationType); // Function Engine.ParticleSystemComponent.SetAutoAttachParams(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x336D2C0>
	int32_t GetNumActiveParticles(); // Function Engine.ParticleSystemComponent.GetNumActiveParticles(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x336CDC0>
	struct UMaterialInterface GetNamedMaterial(struct FName InName); // Function Engine.ParticleSystemComponent.GetNamedMaterial(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x336CCD0>
	bool GetBeamTargetTangent(int32_t EmitterIndex, int32_t TargetIndex, struct FVector& OutTangentPoint); // Function Engine.ParticleSystemComponent.GetBeamTargetTangent(Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x336CA70>
	bool GetBeamTargetStrength(int32_t EmitterIndex, int32_t TargetIndex, float& OutTargetStrength); // Function Engine.ParticleSystemComponent.GetBeamTargetStrength(Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x336C950>
	bool GetBeamTargetPoint(int32_t EmitterIndex, int32_t TargetIndex, struct FVector& OutTargetPoint); // Function Engine.ParticleSystemComponent.GetBeamTargetPoint(Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x336C840>
	bool GetBeamSourceTangent(int32_t EmitterIndex, int32_t SourceIndex, struct FVector& OutTangentPoint); // Function Engine.ParticleSystemComponent.GetBeamSourceTangent(Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x336C730>
	bool GetBeamSourceStrength(int32_t EmitterIndex, int32_t SourceIndex, float& OutSourceStrength); // Function Engine.ParticleSystemComponent.GetBeamSourceStrength(Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x336C610>
	bool GetBeamSourcePoint(int32_t EmitterIndex, int32_t SourceIndex, struct FVector& OutSourcePoint); // Function Engine.ParticleSystemComponent.GetBeamSourcePoint(Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x336C500>
	bool GetBeamEndPoint(int32_t EmitterIndex, struct FVector& OutEndPoint); // Function Engine.ParticleSystemComponent.GetBeamEndPoint(Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x336C420>
	void GenerateParticleEvent(struct FName InEventName, float InEmitterTime, struct FVector InLocation, struct FVector InDirection, struct FVector InVelocity); // Function Engine.ParticleSystemComponent.GenerateParticleEvent(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x336C230>
	void EndTrails(); // Function Engine.ParticleSystemComponent.EndTrails(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x336C210>
	struct UMaterialInstanceDynamic CreateNamedDynamicMaterialInstance(struct FName InName, struct UMaterialInterface SourceMaterial); // Function Engine.ParticleSystemComponent.CreateNamedDynamicMaterialInstance(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x336C120>
	void BeginTrails(struct FName InFirstSocketName, struct FName InSecondSocketName, enum class ETrailWidthMode InWidthMode, float InWidth); // Function Engine.ParticleSystemComponent.BeginTrails(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x336BF90>
};

// Class Engine.ParticleSystemReplay
class UParticleSystemReplay : public Object {

public:

	int32_t ClipIDNumber; // 0x28 (4)
};

// Class Engine.PawnNoiseEmitterComponent
class UPawnNoiseEmitterComponent : public UActorComponent {

public:

	char bAIPerceptionSystemCompatibilityMode : 1; // 0xB0 (1)
	char pad_B0_1 : 7; // 0xB0 (1)
	struct FVector LastRemoteNoisePosition; // 0xB4 (12)
	float NoiseLifetime; // 0xC0 (4)
	float LastRemoteNoiseVolume; // 0xC4 (4)
	float LastRemoteNoiseTime; // 0xC8 (4)
	float LastLocalNoiseVolume; // 0xCC (4)
	float LastLocalNoiseTime; // 0xD0 (4)

	void MakeNoise(struct UActor NoiseMaker, float Loudness, struct FVector& NoiseLocation); // Function Engine.PawnNoiseEmitterComponent.MakeNoise(BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3370E20>
};

// Class Engine.PhysicalAnimationComponent
class UPhysicalAnimationComponent : public UActorComponent {

public:

	float StrengthMultiplyer; // 0xB0 (4)
	struct USkeletalMeshComponent SkeletalMeshComponent; // 0xB8 (8)

	void SetStrengthMultiplyer(float InStrengthMultiplyer); // Function Engine.PhysicalAnimationComponent.SetStrengthMultiplyer(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3372650>
	void SetSkeletalMeshComponent(struct USkeletalMeshComponent InSkeletalMeshComponent); // Function Engine.PhysicalAnimationComponent.SetSkeletalMeshComponent(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33725D0>
	struct FTransform GetBodyTargetTransform(struct FName BodyName); // Function Engine.PhysicalAnimationComponent.GetBodyTargetTransform(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3370AE0>
	void ApplyPhysicalAnimationSettingsBelow(struct FName BodyName, struct FPhysicalAnimationData& PhysicalAnimationData, bool bIncludeSelf); // Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettingsBelow(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3370950>
	void ApplyPhysicalAnimationSettings(struct FName BodyName, struct FPhysicalAnimationData& PhysicalAnimationData); // Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettings(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3370870>
	void ApplyPhysicalAnimationProfileBelow(struct FName BodyName, struct FName ProfileName, bool bIncludeSelf, bool bClearNotFound); // Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationProfileBelow(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3370720>
};

// Class Engine.PhysicalMaterial
class UPhysicalMaterial : public Object {

public:

	float Friction; // 0x28 (4)
	enum class EFrictionCombineMode FrictionCombineMode; // 0x2C (1)
	bool bOverrideFrictionCombineMode; // 0x2D (1)
	float Restitution; // 0x30 (4)
	enum class EFrictionCombineMode RestitutionCombineMode; // 0x34 (1)
	bool bOverrideRestitutionCombineMode; // 0x35 (1)
	float Density; // 0x38 (4)
	float RaiseMassToPower; // 0x3C (4)
	float DestructibleDamageThresholdScale; // 0x40 (4)
	struct UPhysicalMaterialPropertyBase PhysicalMaterialProperty; // 0x48 (8)
	enum class EPhysicalSurface SurfaceType; // 0x50 (1)
	float TireFrictionScale; // 0x54 (4)
	struct TArray<struct FTireFrictionScalePair> TireFrictionScales; // 0x58 (16)
};

// Class Engine.PhysicalMaterialMask
class UPhysicalMaterialMask : public Object {

public:

	int32_t UVChannelIndex; // 0x28 (4)
	enum class TextureAddress AddressX; // 0x2C (1)
	enum class TextureAddress AddressY; // 0x2D (1)
};

// Class Engine.PhysicsAsset
class UPhysicsAsset : public Object {

public:

	struct TArray<int32_t> BoundsBodies; // 0x30 (16)
	struct TArray<struct USkeletalBodySetup> SkeletalBodySetups; // 0x40 (16)
	struct TArray<struct UPhysicsConstraintTemplate> ConstraintSetup; // 0x50 (16)
	struct FSolverIterations SolverIterations; // 0x60 (24)
	char bNotForDedicatedServer : 1; // 0x78 (1)
	char pad_70_1 : 7; // 0x70 (1)
	struct UThumbnailInfo ThumbnailInfo; // 0x120 (8)
	struct TArray<struct UBodySetup> BodySetup; // 0x128 (16)
};

// Class Engine.SkeletalBodySetup
class USkeletalBodySetup : public UBodySetup {

public:

	bool bSkipScaleFromAnimation; // 0x270 (1)
	struct TArray<struct FPhysicalAnimationProfile> PhysicalAnimationData; // 0x278 (16)
};

// Class Engine.PhysicsCollisionHandler
class UPhysicsCollisionHandler : public Object {

public:

	float ImpactThreshold; // 0x28 (4)
	float ImpactReFireDelay; // 0x2C (4)
	struct USoundBase DefaultImpactSound; // 0x30 (8)
	float LastImpactSoundTime; // 0x38 (4)
};

// Class Engine.PhysicsConstraintActor
class APhysicsConstraintActor : public ARigidBodyBase {

public:

	struct UPhysicsConstraintComponent ConstraintComp; // 0x220 (8)
	struct UActor ConstraintActor1; // 0x228 (8)
	struct UActor ConstraintActor2; // 0x230 (8)
	char bDisableCollision : 1; // 0x238 (1)
};

// Class Engine.PhysicsConstraintComponent
class UPhysicsConstraintComponent : public USceneComponent {

public:

	struct UActor ConstraintActor1; // 0x1F0 (8)
	struct FConstrainComponentPropName ComponentName1; // 0x1F8 (8)
	struct UActor ConstraintActor2; // 0x200 (8)
	struct FConstrainComponentPropName ComponentName2; // 0x208 (8)
	struct UPhysicsConstraintTemplate ConstraintSetup; // 0x220 (8)
	struct FMulticastInlineDelegate OnConstraintBroken; // 0x228 (16)
	struct FConstraintInstance ConstraintInstance; // 0x238 (440)

	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive); // Function Engine.PhysicsConstraintComponent.SetOrientationDriveTwistAndSwing(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3372500>
	void SetOrientationDriveSLERP(bool bEnableSLERP); // Function Engine.PhysicsConstraintComponent.SetOrientationDriveSLERP(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3372470>
	void SetLinearZLimit(enum class ELinearConstraintMotion ConstraintType, float LimitSize); // Function Engine.PhysicsConstraintComponent.SetLinearZLimit(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33723B0>
	void SetLinearYLimit(enum class ELinearConstraintMotion ConstraintType, float LimitSize); // Function Engine.PhysicsConstraintComponent.SetLinearYLimit(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33722F0>
	void SetLinearXLimit(enum class ELinearConstraintMotion ConstraintType, float LimitSize); // Function Engine.PhysicsConstraintComponent.SetLinearXLimit(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3372230>
	void SetLinearVelocityTarget(struct FVector& InVelTarget); // Function Engine.PhysicsConstraintComponent.SetLinearVelocityTarget(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33721A0>
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ); // Function Engine.PhysicsConstraintComponent.SetLinearVelocityDrive(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3372080>
	void SetLinearPositionTarget(struct FVector& InPosTarget); // Function Engine.PhysicsConstraintComponent.SetLinearPositionTarget(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3371FF0>
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ); // Function Engine.PhysicsConstraintComponent.SetLinearPositionDrive(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3371ED0>
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit); // Function Engine.PhysicsConstraintComponent.SetLinearDriveParams(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3371DC0>
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold); // Function Engine.PhysicsConstraintComponent.SetLinearBreakable(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3371CF0>
	void SetDisableCollision(bool bDisableCollision); // Function Engine.PhysicsConstraintComponent.SetDisableCollision(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3371C60>
	void SetConstraintReferencePosition(enum class EConstraintFrame Frame, struct FVector& RefPosition); // Function Engine.PhysicsConstraintComponent.SetConstraintReferencePosition(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3371B90>
	void SetConstraintReferenceOrientation(enum class EConstraintFrame Frame, struct FVector& PriAxis, struct FVector& SecAxis); // Function Engine.PhysicsConstraintComponent.SetConstraintReferenceOrientation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3371A70>
	void SetConstraintReferenceFrame(enum class EConstraintFrame Frame, struct FTransform& RefFrame); // Function Engine.PhysicsConstraintComponent.SetConstraintReferenceFrame(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3371950>
	void SetConstrainedComponents(struct UPrimitiveComponent Component1, struct FName BoneName1, struct UPrimitiveComponent Component2, struct FName BoneName2); // Function Engine.PhysicsConstraintComponent.SetConstrainedComponents(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3371800>
	void SetAngularVelocityTarget(struct FVector& InVelTarget); // Function Engine.PhysicsConstraintComponent.SetAngularVelocityTarget(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3371770>
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive); // Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveTwistAndSwing(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33716A0>
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP); // Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveSLERP(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3371610>
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive); // Function Engine.PhysicsConstraintComponent.SetAngularVelocityDrive(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3371540>
	void SetAngularTwistLimit(enum class EAngularConstraintMotion ConstraintType, float TwistLimitAngle); // Function Engine.PhysicsConstraintComponent.SetAngularTwistLimit(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3371480>
	void SetAngularSwing2Limit(enum class EAngularConstraintMotion MotionType, float Swing2LimitAngle); // Function Engine.PhysicsConstraintComponent.SetAngularSwing2Limit(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33713C0>
	void SetAngularSwing1Limit(enum class EAngularConstraintMotion MotionType, float Swing1LimitAngle); // Function Engine.PhysicsConstraintComponent.SetAngularSwing1Limit(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3371300>
	void SetAngularOrientationTarget(struct FRotator& InPosTarget); // Function Engine.PhysicsConstraintComponent.SetAngularOrientationTarget(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3371270>
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive); // Function Engine.PhysicsConstraintComponent.SetAngularOrientationDrive(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33711A0>
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit); // Function Engine.PhysicsConstraintComponent.SetAngularDriveParams(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3371090>
	void SetAngularDriveMode(enum class EAngularDriveMode DriveMode); // Function Engine.PhysicsConstraintComponent.SetAngularDriveMode(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3371010>
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold); // Function Engine.PhysicsConstraintComponent.SetAngularBreakable(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3370F40>
	bool IsBroken(); // Function Engine.PhysicsConstraintComponent.IsBroken(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3370DC0>
	float GetCurrentTwist(); // Function Engine.PhysicsConstraintComponent.GetCurrentTwist(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3370CE0>
	float GetCurrentSwing2(); // Function Engine.PhysicsConstraintComponent.GetCurrentSwing2(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3370CB0>
	float GetCurrentSwing1(); // Function Engine.PhysicsConstraintComponent.GetCurrentSwing1(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3370C80>
	void GetConstraintForce(struct FVector& OutLinearForce, struct FVector& OutAngularForce); // Function Engine.PhysicsConstraintComponent.GetConstraintForce(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3370BA0>
	void BreakConstraint(); // Function Engine.PhysicsConstraintComponent.BreakConstraint(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3370A80>
};

// Class Engine.PhysicsConstraintTemplate
class UPhysicsConstraintTemplate : public Object {

public:

	struct FConstraintInstance DefaultInstance; // 0x28 (440)
	struct TArray<struct FPhysicsConstraintProfileHandle> ProfileHandles; // 0x1E0 (16)
	struct FConstraintProfileProperties DefaultProfile; // 0x1F0 (260)
};

// Class Engine.PhysicsHandleComponent
class UPhysicsHandleComponent : public UActorComponent {

public:

	struct UPrimitiveComponent GrabbedComponent; // 0xB0 (8)
	char pad_B8_0 : 1; // 0xB8 (1)
	char bSoftAngularConstraint : 1; // 0xC0 (1)
	char pad_B8_2 : 6; // 0xB8 (1)
	char pad_B9_0 : 2; // 0xB9 (1)
	char bSoftLinearConstraint : 1; // 0xC0 (1)
	char pad_B9_3 : 5; // 0xB9 (1)
	char pad_BA_0 : 3; // 0xBA (1)
	char bInterpolateTarget : 1; // 0xC0 (1)
	char pad_BA_4 : 4; // 0xBA (1)
	float LinearDamping; // 0xC4 (4)
	float LinearStiffness; // 0xC8 (4)
	float AngularDamping; // 0xCC (4)
	float AngularStiffness; // 0xD0 (4)
	float InterpolationSpeed; // 0x140 (4)

	void SetTargetRotation(struct FRotator NewRotation); // Function Engine.PhysicsHandleComponent.SetTargetRotation(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3374FE0>
	void SetTargetLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation); // Function Engine.PhysicsHandleComponent.SetTargetLocationAndRotation(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3374F00>
	void SetTargetLocation(struct FVector NewLocation); // Function Engine.PhysicsHandleComponent.SetTargetLocation(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3374E70>
	void SetLinearStiffness(float NewLinearStiffness); // Function Engine.PhysicsHandleComponent.SetLinearStiffness(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3374DF0>
	void SetLinearDamping(float NewLinearDamping); // Function Engine.PhysicsHandleComponent.SetLinearDamping(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3374D70>
	void SetInterpolationSpeed(float NewInterpolationSpeed); // Function Engine.PhysicsHandleComponent.SetInterpolationSpeed(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3374CF0>
	void SetAngularStiffness(float NewAngularStiffness); // Function Engine.PhysicsHandleComponent.SetAngularStiffness(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3374C70>
	void SetAngularDamping(float NewAngularDamping); // Function Engine.PhysicsHandleComponent.SetAngularDamping(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3374BF0>
	void ReleaseComponent(); // Function Engine.PhysicsHandleComponent.ReleaseComponent(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3374BD0>
	void GrabComponentAtLocationWithRotation(struct UPrimitiveComponent Component, struct FName InBoneName, struct FVector Location, struct FRotator Rotation); // Function Engine.PhysicsHandleComponent.GrabComponentAtLocationWithRotation(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3374960>
	void GrabComponentAtLocation(struct UPrimitiveComponent Component, struct FName InBoneName, struct FVector GrabLocation); // Function Engine.PhysicsHandleComponent.GrabComponentAtLocation(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3374850>
	void GrabComponent(struct UPrimitiveComponent Component, struct FName InBoneName, struct FVector GrabLocation, bool bConstrainRotation); // Function Engine.PhysicsHandleComponent.GrabComponent(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3374700>
	void GetTargetLocationAndRotation(struct FVector& TargetLocation, struct FRotator& TargetRotation); // Function Engine.PhysicsHandleComponent.GetTargetLocationAndRotation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3374620>
	struct UPrimitiveComponent GetGrabbedComponent(); // Function Engine.PhysicsHandleComponent.GetGrabbedComponent(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x25EB2D0>
};

// Class Engine.PhysicsSettings
class UPhysicsSettings : public UDeveloperSettings {

public:

	float DefaultGravityZ; // 0x38 (4)
	float DefaultTerminalVelocity; // 0x3C (4)
	float DefaultFluidFriction; // 0x40 (4)
	int32_t SimulateScratchMemorySize; // 0x44 (4)
	int32_t RagdollAggregateThreshold; // 0x48 (4)
	float TriangleMeshTriangleMinAreaThreshold; // 0x4C (4)
	bool bEnableShapeSharing; // 0x50 (1)
	bool bEnablePCM; // 0x51 (1)
	bool bEnableStabilization; // 0x52 (1)
	bool bWarnMissingLocks; // 0x53 (1)
	bool bEnable2DPhysics; // 0x54 (1)
	struct FRigidBodyErrorCorrection PhysicErrorCorrection; // 0x58 (52)
	enum class ESettingsLockedAxis LockedAxis; // 0x8C (1)
	enum class ESettingsDOF DefaultDegreesOfFreedom; // 0x8D (1)
	float BounceThresholdVelocity; // 0x90 (4)
	enum class EFrictionCombineMode FrictionCombineMode; // 0x94 (1)
	enum class EFrictionCombineMode RestitutionCombineMode; // 0x95 (1)
	float MaxAngularVelocity; // 0x98 (4)
	float MaxDepenetrationVelocity; // 0x9C (4)
	float ContactOffsetMultiplier; // 0xA0 (4)
	float MinContactOffset; // 0xA4 (4)
	float MaxContactOffset; // 0xA8 (4)
	bool bSimulateSkeletalMeshOnDedicatedServer; // 0xAC (1)
	enum class ECollisionTraceFlag DefaultShapeComplexity; // 0xAD (1)
	bool bDefaultHasComplexCollision; // 0xAE (1)
	bool bSuppressFaceRemapTable; // 0xAF (1)
	bool bSupportUVFromHitResults; // 0xB0 (1)
	bool bDisableActiveActors; // 0xB1 (1)
	bool bDisableKinematicStaticPairs; // 0xB2 (1)
	bool bDisableKinematicKinematicPairs; // 0xB3 (1)
	bool bDisableCCD; // 0xB4 (1)
	bool bEnableEnhancedDeterminism; // 0xB5 (1)
	float AnimPhysicsMinDeltaTime; // 0xB8 (4)
	bool bSimulateAnimPhysicsAfterReset; // 0xBC (1)
	float MaxPhysicsDeltaTime; // 0xC0 (4)
	bool bSubstepping; // 0xC4 (1)
	bool bSubsteppingAsync; // 0xC5 (1)
	float MaxSubstepDeltaTime; // 0xC8 (4)
	int32_t MaxSubsteps; // 0xCC (4)
	float SyncSceneSmoothingFactor; // 0xD0 (4)
	float InitialAverageFrameRate; // 0xD4 (4)
	int32_t PhysXTreeRebuildRate; // 0xD8 (4)
	struct TArray<struct FPhysicalSurfaceName> PhysicalSurfaces; // 0xE0 (16)
	struct FBroadphaseSettings DefaultBroadphaseSettings; // 0xF0 (64)
	struct FChaosPhysicsSettings ChaosSettings; // 0x130 (3)
};

// Class Engine.PhysicsSpringComponent
class UPhysicsSpringComponent : public USceneComponent {

public:

	float SpringStiffness; // 0x1F0 (4)
	float SpringDamping; // 0x1F4 (4)
	float SpringLengthAtRest; // 0x1F8 (4)
	float SpringRadius; // 0x1FC (4)
	enum class ECollisionChannel SpringChannel; // 0x200 (1)
	bool bIgnoreSelf; // 0x201 (1)
	float SpringCompression; // 0x204 (4)

	struct FVector GetSpringRestingPoint(); // Function Engine.PhysicsSpringComponent.GetSpringRestingPoint(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33745E0>
	struct FVector GetSpringDirection(); // Function Engine.PhysicsSpringComponent.GetSpringDirection(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33745A0>
	struct FVector GetSpringCurrentEndPoint(); // Function Engine.PhysicsSpringComponent.GetSpringCurrentEndPoint(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3374560>
	float GetNormalizedCompressionScalar(); // Function Engine.PhysicsSpringComponent.GetNormalizedCompressionScalar(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3374530>
};

// Class Engine.PhysicsThruster
class APhysicsThruster : public ARigidBodyBase {

public:

	struct UPhysicsThrusterComponent ThrusterComponent; // 0x220 (8)
};

// Class Engine.PhysicsThrusterComponent
class UPhysicsThrusterComponent : public USceneComponent {

public:

	float ThrustStrength; // 0x1F0 (4)
};

// Class Engine.SceneCapture
class ASceneCapture : public UActor {

public:

	struct UStaticMeshComponent MeshComp; // 0x220 (8)
	struct USceneComponent SceneComponent; // 0x228 (8)
};

// Class Engine.PlanarReflection
class APlanarReflection : public ASceneCapture {

public:

	struct UPlanarReflectionComponent PlanarReflectionComponent; // 0x230 (8)
	bool bShowPreviewPlane; // 0x238 (1)

	void OnInterpToggle(bool bEnable); // Function Engine.PlanarReflection.OnInterpToggle(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3374B40>
};

// Class Engine.SceneCaptureComponent
class USceneCaptureComponent : public USceneComponent {

public:

	enum class ESceneCapturePrimitiveRenderMode PrimitiveRenderMode; // 0x1F0 (1)
	enum class ESceneCaptureSource CaptureSource; // 0x1F1 (1)
	char bCaptureEveryFrame : 1; // 0x1F2 (1)
	char bCaptureOnMovement : 1; // 0x1F2 (1)
	char pad_1F2_2 : 6; // 0x1F2 (1)
	bool bAlwaysPersistRenderingState; // 0x1F3 (1)
	struct TArray<struct TWeakObjectPtr<struct UPrimitiveComponent>> HiddenComponents; // 0x1F8 (16)
	struct TArray<struct UActor> HiddenActors; // 0x208 (16)
	struct TArray<struct TWeakObjectPtr<struct UPrimitiveComponent>> ShowOnlyComponents; // 0x218 (16)
	struct TArray<struct UActor> ShowOnlyActors; // 0x228 (16)
	float LODDistanceFactor; // 0x238 (4)
	float MaxViewDistanceOverride; // 0x23C (4)
	int32_t CaptureSortPriority; // 0x240 (4)
	bool bUseRayTracingIfEnabled; // 0x244 (1)
	struct TArray<struct FEngineShowFlagsSetting> ShowFlagSettings; // 0x248 (16)
	struct FString ProfilingEventName; // 0x268 (16)

	void ShowOnlyComponent(struct UPrimitiveComponent InComponent); // Function Engine.SceneCaptureComponent.ShowOnlyComponent(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x339AB90>
	void ShowOnlyActorComponents(struct UActor InActor, bool bIncludeFromChildActors); // Function Engine.SceneCaptureComponent.ShowOnlyActorComponents(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x339AAC0>
	void SetCaptureSortPriority(int32_t NewCaptureSortPriority); // Function Engine.SceneCaptureComponent.SetCaptureSortPriority(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x339A670>
	void RemoveShowOnlyComponent(struct UPrimitiveComponent InComponent); // Function Engine.SceneCaptureComponent.RemoveShowOnlyComponent(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x339A4B0>
	void RemoveShowOnlyActorComponents(struct UActor InActor, bool bIncludeFromChildActors); // Function Engine.SceneCaptureComponent.RemoveShowOnlyActorComponents(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x339A3E0>
	void HideComponent(struct UPrimitiveComponent InComponent); // Function Engine.SceneCaptureComponent.HideComponent(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3397FA0>
	void HideActorComponents(struct UActor InActor, bool bIncludeFromChildActors); // Function Engine.SceneCaptureComponent.HideActorComponents(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3397ED0>
	void ClearShowOnlyComponents(); // Function Engine.SceneCaptureComponent.ClearShowOnlyComponents(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33975B0>
	void ClearHiddenComponents(); // Function Engine.SceneCaptureComponent.ClearHiddenComponents(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3397590>
};

// Class Engine.PlanarReflectionComponent
class UPlanarReflectionComponent : public USceneCaptureComponent {

public:

	struct UBoxComponent PreviewBox; // 0x288 (8)
	float NormalDistortionStrength; // 0x290 (4)
	float PrefilterRoughness; // 0x294 (4)
	float PrefilterRoughnessDistance; // 0x298 (4)
	int32_t ScreenPercentage; // 0x29C (4)
	float ExtraFOV; // 0x2A0 (4)
	float DistanceFromPlaneFadeStart; // 0x2A4 (4)
	float DistanceFromPlaneFadeEnd; // 0x2A8 (4)
	float DistanceFromPlaneFadeoutStart; // 0x2AC (4)
	float DistanceFromPlaneFadeoutEnd; // 0x2B0 (4)
	float AngleFromPlaneFadeStart; // 0x2B4 (4)
	float AngleFromPlaneFadeEnd; // 0x2B8 (4)
	bool bShowPreviewPlane; // 0x2BC (1)
	bool bRenderSceneTwoSided; // 0x2BD (1)
};

// Class Engine.PlaneReflectionCaptureComponent
class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent {

public:

	float InfluenceRadiusScale; // 0x268 (4)
	struct UDrawSphereComponent PreviewInfluenceRadius; // 0x270 (8)
	struct UBoxComponent PreviewCaptureBox; // 0x278 (8)
};

// Class Engine.PlatformEventsComponent
class UPlatformEventsComponent : public UActorComponent {

public:

	struct FMulticastInlineDelegate PlatformChangedToLaptopModeDelegate; // 0xB0 (16)
	struct FMulticastInlineDelegate PlatformChangedToTabletModeDelegate; // 0xC0 (16)

	bool SupportsConvertibleLaptops(); // Function Engine.PlatformEventsComponent.SupportsConvertibleLaptops(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3375070>
	void PlatformEventDelegate__DelegateSignature(); // DelegateFunction Engine.PlatformEventsComponent.PlatformEventDelegate__DelegateSignature(MulticastDelegate|Public|Delegate) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	bool IsInTabletMode(); // Function Engine.PlatformEventsComponent.IsInTabletMode(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3374B10>
	bool IsInLaptopMode(); // Function Engine.PlatformEventsComponent.IsInLaptopMode(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3374AE0>
};

// Class Engine.PlatformInterfaceWebResponse
class UPlatformInterfaceWebResponse : public Object {

public:

	struct FString OriginalURL; // 0x28 (16)
	int32_t ResponseCode; // 0x38 (4)
	int32_t Tag; // 0x3C (4)
	struct FString StringResponse; // 0x40 (16)
	struct TArray<char> BinaryResponse; // 0x50 (16)

	int32_t GetNumHeaders(); // Function Engine.PlatformInterfaceWebResponse.GetNumHeaders(Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x116F080>
	struct FString GetHeaderValue(struct FString HeaderName); // Function Engine.PlatformInterfaceWebResponse.GetHeaderValue(Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x337C760>
	void GetHeader(int32_t HeaderIndex, struct FString& Header, struct FString& Value); // Function Engine.PlatformInterfaceWebResponse.GetHeader(Native|Public|HasOutParms) // <VeiledExperts-Win64-Shipping.exe+0x337C600>
};

// Class Engine.PlayerCameraManager
class APlayerCameraManager : public UActor {

public:

	struct APlayerController PCOwner; // 0x220 (8)
	struct USceneComponent TransformComponent; // 0x228 (8)
	float DefaultFOV; // 0x238 (4)
	float DefaultOrthoWidth; // 0x240 (4)
	float DefaultAspectRatio; // 0x248 (4)
	struct FCameraCacheEntry CameraCache; // 0x290 (1536)
	struct FCameraCacheEntry LastFrameCameraCache; // 0x890 (1536)
	struct FTViewTarget ViewTarget; // 0xE90 (1552)
	struct FTViewTarget PendingViewTarget; // 0x14A0 (1552)
	struct FCameraCacheEntry CameraCachePrivate; // 0x1AE0 (1536)
	struct FCameraCacheEntry LastFrameCameraCachePrivate; // 0x20E0 (1536)
	struct TArray<struct UCameraModifier> ModifierList; // 0x26E0 (16)
	struct TArray<struct UClass*> DefaultModifiers; // 0x26F0 (16)
	float FreeCamDistance; // 0x2700 (4)
	struct FVector FreeCamOffset; // 0x2704 (12)
	struct FVector ViewTargetOffset; // 0x2710 (12)
	struct TArray<struct AEmitterCameraLensEffectBase> CameraLensEffects; // 0x2730 (16)
	struct UCameraModifier_CameraShake CachedCameraShakeMod; // 0x2740 (8)
	struct UCameraAnimInst AnimInstPool[0x8]; // 0x2748 (64)
	struct TArray<struct FPostProcessSettings> PostProcessBlendCache; // 0x2788 (16)
	struct TArray<struct UCameraAnimInst> ActiveAnims; // 0x27A8 (16)
	struct TArray<struct UCameraAnimInst> FreeAnims; // 0x27B8 (16)
	struct ACameraActor AnimCameraActor; // 0x27C8 (8)
	char bIsOrthographic : 1; // 0x27D0 (1)
	char pad_2728_1 : 7; // 0x2728 (1)
	char pad_2729_0 : 1; // 0x2729 (1)
	char bDefaultConstrainAspectRatio : 1; // 0x27D0 (1)
	char pad_2729_2 : 6; // 0x2729 (1)
	char pad_272A_0 : 6; // 0x272A (1)
	char bClientSimulatingViewTarget : 1; // 0x27D0 (1)
	char pad_272A_7 : 1; // 0x272A (1)
	char pad_272B_0 : 7; // 0x272B (1)
	char bUseClientSideCameraUpdates : 1; // 0x27D0 (1)
	char pad_272C_0 : 2; // 0x272C (1)
	char bGameCameraCutThisFrame : 1; // 0x27D1 (1)
	char pad_272C_3 : 5; // 0x272C (1)
	float ViewPitchMin; // 0x27D4 (4)
	float ViewPitchMax; // 0x27D8 (4)
	float ViewYawMin; // 0x27DC (4)
	float ViewYawMax; // 0x27E0 (4)
	float ViewRollMin; // 0x27E4 (4)
	float ViewRollMax; // 0x27E8 (4)
	float ServerUpdateCameraTimeout; // 0x27F0 (4)

	void StopCameraShake(struct UCameraShake ShakeInstance, bool bImmediately); // Function Engine.PlayerCameraManager.StopCameraShake(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3380E00>
	void StopCameraFade(); // Function Engine.PlayerCameraManager.StopCameraFade(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3380DE0>
	void StopCameraAnimInst(struct UCameraAnimInst AnimInst, bool bImmediate); // Function Engine.PlayerCameraManager.StopCameraAnimInst(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3380D10>
	void StopAllInstancesOfCameraShakeFromSource(struct UCameraShakeSourceComponent SourceComponent, bool bImmediately); // Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShakeFromSource(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3380C40>
	void StopAllInstancesOfCameraShake(struct UClass* Shake, bool bImmediately); // Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShake(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3380B70>
	void StopAllInstancesOfCameraAnim(struct UCameraAnim Anim, bool bImmediate); // Function Engine.PlayerCameraManager.StopAllInstancesOfCameraAnim(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3380AA0>
	void StopAllCameraShakes(bool bImmediately); // Function Engine.PlayerCameraManager.StopAllCameraShakes(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3380A10>
	void StopAllCameraAnims(bool bImmediate); // Function Engine.PlayerCameraManager.StopAllCameraAnims(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3380980>
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, struct FLinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished); // Function Engine.PlayerCameraManager.StartCameraFade(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3380730>
	void SetManualCameraFade(float InFadeAmount, struct FLinearColor Color, bool bInFadeAudio); // Function Engine.PlayerCameraManager.SetManualCameraFade(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33801E0>
	void SetGameCameraCutThisFrame(); // Function Engine.PlayerCameraManager.SetGameCameraCutThisFrame(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33800C0>
	bool RemoveCameraModifier(struct UCameraModifier ModifierToRemove); // Function Engine.PlayerCameraManager.RemoveCameraModifier(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x337EB30>
	void RemoveCameraLensEffect(struct AEmitterCameraLensEffectBase Emitter); // Function Engine.PlayerCameraManager.RemoveCameraLensEffect(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32C9470>
	struct UCameraShake PlayCameraShakeFromSource(struct UClass* ShakeClass, struct UCameraShakeSourceComponent SourceComponent); // Function Engine.PlayerCameraManager.PlayCameraShakeFromSource(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x337E560>
	struct UCameraShake PlayCameraShake(struct UClass* ShakeClass, float Scale, enum class ECameraAnimPlaySpace PlaySpace, struct FRotator UserPlaySpaceRot); // Function Engine.PlayerCameraManager.PlayCameraShake(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x337E3F0>
	struct UCameraAnimInst PlayCameraAnim(struct UCameraAnim Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, enum class ECameraAnimPlaySpace PlaySpace, struct FRotator UserPlaySpaceRot); // Function Engine.PlayerCameraManager.PlayCameraAnim(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x337E110>
	void PhotographyCameraModify(struct FVector NewCameraLocation, struct FVector PreviousCameraLocation, struct FVector OriginalCameraLocation, struct FVector& ResultCameraLocation); // Function Engine.PlayerCameraManager.PhotographyCameraModify(BlueprintCosmetic|Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x337DF90>
	void OnPhotographySessionStart(); // Function Engine.PlayerCameraManager.OnPhotographySessionStart(BlueprintCosmetic|Native|Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x3356EA0>
	void OnPhotographySessionEnd(); // Function Engine.PlayerCameraManager.OnPhotographySessionEnd(BlueprintCosmetic|Native|Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x33571C0>
	void OnPhotographyMultiPartCaptureStart(); // Function Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureStart(BlueprintCosmetic|Native|Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x32B36E0>
	void OnPhotographyMultiPartCaptureEnd(); // Function Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureEnd(BlueprintCosmetic|Native|Event|Public|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x32BE150>
	struct APlayerController GetOwningPlayerController(); // Function Engine.PlayerCameraManager.GetOwningPlayerController(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x337DA70>
	float GetFOVAngle(); // Function Engine.PlayerCameraManager.GetFOVAngle(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x337C550>
	struct FRotator GetCameraRotation(); // Function Engine.PlayerCameraManager.GetCameraRotation(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x337C510>
	struct FVector GetCameraLocation(); // Function Engine.PlayerCameraManager.GetCameraLocation(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x337C4D0>
	struct UCameraModifier FindCameraModifierByClass(struct UClass* ModifierClass); // Function Engine.PlayerCameraManager.FindCameraModifierByClass(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x337C430>
	void ClearCameraLensEffects(); // Function Engine.PlayerCameraManager.ClearCameraLensEffects(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x329D3F0>
	bool BlueprintUpdateCamera(struct UActor CameraTarget, struct FVector& NewCameraLocation, struct FRotator& NewCameraRotation, float& NewCameraFOV); // Function Engine.PlayerCameraManager.BlueprintUpdateCamera(BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	struct UCameraModifier AddNewCameraModifier(struct UClass* ModifierClass); // Function Engine.PlayerCameraManager.AddNewCameraModifier(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33793F0>
	struct AEmitterCameraLensEffectBase AddCameraLensEffect(struct UClass* LensEffectEmitterClass); // Function Engine.PlayerCameraManager.AddCameraLensEffect(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3379350>
};

// Class Engine.PlayerInput
class UPlayerInput : public Object {

public:

	struct TArray<struct FKeyBind> DebugExecBindings; // 0x120 (16)
	struct TArray<struct FName> InvertedAxis; // 0x160 (16)

	void SetMouseSensitivity(float Sensitivity); // Function Engine.PlayerInput.SetMouseSensitivity(Final|Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x338C700>
	void SetBind(struct FName BindName, struct FString Command); // Function Engine.PlayerInput.SetBind(Final|Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x338AF20>
	void InvertAxisKey(struct FKey AxisKey); // Function Engine.PlayerInput.InvertAxisKey(Final|Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x3389910>
	void InvertAxis(struct FName AxisName); // Function Engine.PlayerInput.InvertAxis(Final|Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x3389890>
	void ClearSmoothing(); // Function Engine.PlayerInput.ClearSmoothing(Final|Exec|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x3388340>
};

// Class Engine.PlayerStart
class APlayerStart : public ANavigationObjectBase {

public:

	struct FName PlayerStartTag; // 0x248 (8)
};

// Class Engine.PlayerState
class APlayerState : public AInfo {

public:

	float Score; // 0x220 (4)
	int32_t PlayerId; // 0x224 (4)
	char Ping; // 0x228 (1)
	char bShouldUpdateReplicatedPing : 1; // 0x22A (1)
	char pad_229_1 : 7; // 0x229 (1)
	char pad_22A_0 : 1; // 0x22A (1)
	char bIsSpectator : 1; // 0x22A (1)
	char bOnlySpectator : 1; // 0x22A (1)
	char bIsABot : 1; // 0x22A (1)
	char pad_22A_4 : 1; // 0x22A (1)
	char bIsInactive : 1; // 0x22A (1)
	char bFromPreviousLevel : 1; // 0x22A (1)
	char pad_22A_7 : 1; // 0x22A (1)
	int32_t StartTime; // 0x22C (4)
	struct UClass* EngineMessageClass; // 0x230 (8)
	struct FString SavedNetworkAddress; // 0x240 (16)
	struct FUniqueNetIdRepl UniqueId; // 0x250 (40)
	struct APawn PawnPrivate; // 0x280 (8)
	struct FString PlayerNamePrivate; // 0x300 (16)

	void ReceiveOverrideWith(struct APlayerState OldPlayerState); // Function Engine.PlayerState.ReceiveOverrideWith(Event|Protected|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void ReceiveCopyProperties(struct APlayerState NewPlayerState); // Function Engine.PlayerState.ReceiveCopyProperties(Event|Protected|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void OnRep_UniqueId(); // Function Engine.PlayerState.OnRep_UniqueId(Native|Public) // <VeiledExperts-Win64-Shipping.exe+0xDD0CB0>
	void OnRep_Score(); // Function Engine.PlayerState.OnRep_Score(Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32BE150>
	void OnRep_PlayerName(); // Function Engine.PlayerState.OnRep_PlayerName(Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32B36E0>
	void OnRep_PlayerId(); // Function Engine.PlayerState.OnRep_PlayerId(Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x3356EA0>
	void OnRep_bIsInactive(); // Function Engine.PlayerState.OnRep_bIsInactive(Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x33571C0>
	struct FString GetPlayerName(); // Function Engine.PlayerState.GetPlayerName(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3389640>
};

// Class Engine.PointLight
class APointLight : public ALight {

public:

	struct UPointLightComponent PointLightComponent; // 0x230 (8)

	void SetRadius(float NewRadius); // Function Engine.PointLight.SetRadius(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338CF70>
	void SetLightFalloffExponent(float NewLightFalloffExponent); // Function Engine.PointLight.SetLightFalloffExponent(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338C0F0>
};

// Class Engine.PointLightComponent
class UPointLightComponent : public ULocalLightComponent {

public:

	char bUseInverseSquaredFalloff : 1; // 0x338 (1)
	float LightFalloffExponent; // 0x33C (4)
	float SourceRadius; // 0x340 (4)
	float SoftSourceRadius; // 0x344 (4)
	float SourceLength; // 0x348 (4)

	void SetSourceRadius(float bNewValue); // Function Engine.PointLightComponent.SetSourceRadius(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338D450>
	void SetSourceLength(float NewValue); // Function Engine.PointLightComponent.SetSourceLength(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338D3D0>
	void SetSoftSourceRadius(float bNewValue); // Function Engine.PointLightComponent.SetSoftSourceRadius(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338D350>
	void SetLightFalloffExponent(float NewLightFalloffExponent); // Function Engine.PointLightComponent.SetLightFalloffExponent(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338C170>
};

// Class Engine.PoseAsset
class UPoseAsset : public UAnimationAsset {

public:

	struct FPoseDataContainer PoseContainer; // 0x80 (144)
	bool bAdditivePose; // 0x110 (1)
	int32_t BasePoseIndex; // 0x114 (4)
	struct FName RetargetSource; // 0x118 (8)
};

// Class Engine.PoseWatch
class UPoseWatch : public Object {

public:

	struct UEdGraphNode Node; // 0x28 (8)
	struct FColor PoseWatchColour; // 0x30 (4)
};

// Class Engine.PostProcessComponent
class UPostProcessComponent : public USceneComponent {

public:

	struct FPostProcessSettings Settings; // 0x200 (1376)
	float Priority; // 0x760 (4)
	float BlendRadius; // 0x764 (4)
	float BlendWeight; // 0x768 (4)
	char bEnabled : 1; // 0x76C (1)
	char pad_75C_1 : 7; // 0x75C (1)
	char pad_75D_0 : 1; // 0x75D (1)
	char bUnbound : 1; // 0x76C (1)

	void AddOrUpdateBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight); // Function Engine.PostProcessComponent.AddOrUpdateBlendable(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3387B70>
};

// Class Engine.PostProcessVolume
class APostProcessVolume : public AVolume {

public:

	struct FPostProcessSettings Settings; // 0x260 (1376)
	float Priority; // 0x7C0 (4)
	float BlendRadius; // 0x7C4 (4)
	float BlendWeight; // 0x7C8 (4)
	char bEnabled : 1; // 0x7CC (1)
	char pad_7C4_1 : 7; // 0x7C4 (1)
	char pad_7C5_0 : 1; // 0x7C5 (1)
	char bUnbound : 1; // 0x7CC (1)

	void AddOrUpdateBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight); // Function Engine.PostProcessVolume.AddOrUpdateBlendable(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3387A80>
};

// Class Engine.PrecomputedVisibilityOverrideVolume
class APrecomputedVisibilityOverrideVolume : public AVolume {

public:

	struct TArray<struct UActor> OverrideVisibleActors; // 0x258 (16)
	struct TArray<struct UActor> OverrideInvisibleActors; // 0x268 (16)
	struct TArray<struct FName> OverrideInvisibleLevels; // 0x278 (16)
};

// Class Engine.PreviewMeshCollection
class UPreviewMeshCollection : public UDataAsset {

public:

	struct USkeleton Skeleton; // 0x38 (8)
	struct TArray<struct FPreviewMeshCollectionEntry> SkeletalMeshes; // 0x40 (16)
};

// Class Engine.PrimaryAssetLabel
class UPrimaryAssetLabel : public UPrimaryDataAsset {

public:

	struct FPrimaryAssetRules Rules; // 0x30 (12)
	char bLabelAssetsInMyDirectory : 1; // 0x3C (1)
	char bIsRuntimeLabel : 1; // 0x3C (1)
	char pad_3C_2 : 6; // 0x3C (1)
	struct TArray<struct TSoftObjectPtr<Object>> ExplicitAssets; // 0x40 (16)
	struct TArray<struct TSoftClassPtr<UObject>> ExplicitBlueprints; // 0x50 (16)
	struct FCollectionReference AssetCollection; // 0x60 (8)
};

// Class Engine.ProjectileMovementComponent
class UProjectileMovementComponent : public UMovementComponent {

public:

	float InitialSpeed; // 0xF0 (4)
	float MaxSpeed; // 0xF4 (4)
	char bRotationFollowsVelocity : 1; // 0xF8 (1)
	char bRotationRemainsVertical : 1; // 0xF8 (1)
	char bShouldBounce : 1; // 0xF8 (1)
	char bInitialVelocityInLocalSpace : 1; // 0xF8 (1)
	char bForceSubStepping : 1; // 0xF8 (1)
	char bSimulationEnabled : 1; // 0xF8 (1)
	char bSweepCollision : 1; // 0xF8 (1)
	char bIsHomingProjectile : 1; // 0xF8 (1)
	char bBounceAngleAffectsFriction : 1; // 0xF9 (1)
	char bIsSliding : 1; // 0xF9 (1)
	char bInterpMovement : 1; // 0xF9 (1)
	char bInterpRotation : 1; // 0xF9 (1)
	char pad_F9_4 : 4; // 0xF9 (1)
	float PreviousHitTime; // 0xFC (4)
	struct FVector PreviousHitNormal; // 0x100 (12)
	float ProjectileGravityScale; // 0x10C (4)
	float Buoyancy; // 0x110 (4)
	float Bounciness; // 0x114 (4)
	float Friction; // 0x118 (4)
	float BounceVelocityStopSimulatingThreshold; // 0x11C (4)
	float MinFrictionFraction; // 0x120 (4)
	struct FMulticastInlineDelegate OnProjectileBounce; // 0x128 (16)
	struct FMulticastInlineDelegate OnProjectileStop; // 0x138 (16)
	float HomingAccelerationMagnitude; // 0x148 (4)
	struct TWeakObjectPtr<struct USceneComponent> HomingTargetComponent; // 0x14C (8)
	float MaxSimulationTimeStep; // 0x154 (4)
	int32_t MaxSimulationIterations; // 0x158 (4)
	int32_t BounceAdditionalIterations; // 0x15C (4)
	float InterpLocationTime; // 0x160 (4)
	float InterpRotationTime; // 0x164 (4)
	float InterpLocationMaxLagDistance; // 0x168 (4)
	float InterpLocationSnapToTargetDistance; // 0x16C (4)

	void StopSimulating(struct FHitResult& HitResult); // Function Engine.ProjectileMovementComponent.StopSimulating(Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338F8A0>
	void SetVelocityInLocalSpace(struct FVector NewVelocity); // Function Engine.ProjectileMovementComponent.SetVelocityInLocalSpace(Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338F810>
	void SetInterpolatedComponent(struct USceneComponent Component); // Function Engine.ProjectileMovementComponent.SetInterpolatedComponent(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338F680>
	void ResetInterpolation(); // Function Engine.ProjectileMovementComponent.ResetInterpolation(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338F560>
	void OnProjectileStopDelegate__DelegateSignature(struct FHitResult& ImpactResult); // DelegateFunction Engine.ProjectileMovementComponent.OnProjectileStopDelegate__DelegateSignature(MulticastDelegate|Public|Delegate|HasOutParms) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void OnProjectileBounceDelegate__DelegateSignature(struct FHitResult& ImpactResult, struct FVector& ImpactVelocity); // DelegateFunction Engine.ProjectileMovementComponent.OnProjectileBounceDelegate__DelegateSignature(MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // <VeiledExperts-Win64-Shipping.exe+0x1B72D40>
	void MoveInterpolationTarget(struct FVector& NewLocation, struct FRotator& NewRotation); // Function Engine.ProjectileMovementComponent.MoveInterpolationTarget(Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338F3F0>
	struct FVector LimitVelocity(struct FVector NewVelocity); // Function Engine.ProjectileMovementComponent.LimitVelocity(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x338F340>
	bool IsVelocityUnderSimulationThreshold(); // Function Engine.ProjectileMovementComponent.IsVelocityUnderSimulationThreshold(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x338F2E0>
	bool IsInterpolationComplete(); // Function Engine.ProjectileMovementComponent.IsInterpolationComplete(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x338F2B0>
};

// Class Engine.ProxyLODMeshSimplificationSettings
class UProxyLODMeshSimplificationSettings : public UDeveloperSettings {

public:

	struct FName ProxyLODMeshReductionModuleName; // 0x38 (8)
};

// Class Engine.RadialForceActor
class ARadialForceActor : public ARigidBodyBase {

public:

	struct URadialForceComponent ForceComponent; // 0x220 (8)

	void ToggleForce(); // Function Engine.RadialForceActor.ToggleForce(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3356EA0>
	void FireImpulse(); // Function Engine.RadialForceActor.FireImpulse(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32BE150>
	void EnableForce(); // Function Engine.RadialForceActor.EnableForce(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x32B36E0>
	void DisableForce(); // Function Engine.RadialForceActor.DisableForce(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33571C0>
};

// Class Engine.RadialForceComponent
class URadialForceComponent : public USceneComponent {

public:

	float Radius; // 0x1F0 (4)
	enum class ERadialImpulseFalloff Falloff; // 0x1F4 (1)
	float ImpulseStrength; // 0x1F8 (4)
	char bImpulseVelChange : 1; // 0x1FC (1)
	char pad_1F9_1 : 7; // 0x1F9 (1)
	char pad_1FA_0 : 1; // 0x1FA (1)
	char bIgnoreOwningActor : 1; // 0x1FC (1)
	char pad_1FA_2 : 6; // 0x1FA (1)
	float ForceStrength; // 0x200 (4)
	float DestructibleDamage; // 0x204 (4)
	struct TArray<enum class EObjectTypeQuery> ObjectTypesToAffect; // 0x208 (16)

	void RemoveObjectTypeToAffect(enum class EObjectTypeQuery ObjectType); // Function Engine.RadialForceComponent.RemoveObjectTypeToAffect(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338F4E0>
	void FireImpulse(); // Function Engine.RadialForceComponent.FireImpulse(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338F290>
	void AddObjectTypeToAffect(enum class EObjectTypeQuery ObjectType); // Function Engine.RadialForceComponent.AddObjectTypeToAffect(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338F210>
};

// Class Engine.RectLight
class ARectLight : public ALight {

public:

	struct URectLightComponent RectLightComponent; // 0x230 (8)
};

// Class Engine.RectLightComponent
class URectLightComponent : public ULocalLightComponent {

public:

	float SourceWidth; // 0x338 (4)
	float SourceHeight; // 0x33C (4)
	float BarnDoorAngle; // 0x340 (4)
	float BarnDoorLength; // 0x344 (4)
	struct UTexture SourceTexture; // 0x348 (8)

	void SetSourceWidth(float bNewValue); // Function Engine.RectLightComponent.SetSourceWidth(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338F790>
	void SetSourceTexture(struct UTexture bNewValue); // Function Engine.RectLightComponent.SetSourceTexture(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338F710>
	void SetSourceHeight(float NewValue); // Function Engine.RectLightComponent.SetSourceHeight(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338C170>
	void SetBarnDoorLength(float NewValue); // Function Engine.RectLightComponent.SetBarnDoorLength(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338F600>
	void SetBarnDoorAngle(float NewValue); // Function Engine.RectLightComponent.SetBarnDoorAngle(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x338F580>
};

// Class Engine.RendererSettings
class URendererSettings : public UDeveloperSettings {

public:

	char bMobileDisableVertexFog : 1; // 0x38 (1)
	char pad_38_1 : 7; // 0x38 (1)
	int32_t MaxMobileCascades; // 0x3C (4)
	enum class EMobileMSAASampleCount MobileMSAASampleCount; // 0x40 (1)
	char bMobileUseLegacyShadingModel : 1; // 0x44 (1)
	char pad_3E_1 : 7; // 0x3E (1)
	char pad_3F_0 : 1; // 0x3F (1)
	char bMobileAllowDitheredLODTransition : 1; // 0x44 (1)
	char pad_3F_2 : 6; // 0x3F (1)
	char pad_40_0 : 2; // 0x40 (1)
	char bMobileAllowSoftwareOcclusionCulling : 1; // 0x44 (1)
	char pad_40_3 : 5; // 0x40 (1)
	char pad_41_0 : 3; // 0x41 (1)
	char bMobileVirtualTextures : 1; // 0x44 (1)
	char pad_41_4 : 4; // 0x41 (1)
	char pad_42_0 : 4; // 0x42 (1)
	char bDiscardUnusedQualityLevels : 1; // 0x44 (1)
	char pad_42_5 : 3; // 0x42 (1)
	char pad_43_0 : 5; // 0x43 (1)
	char bOcclusionCulling : 1; // 0x44 (1)
	char pad_43_6 : 2; // 0x43 (1)
	float MinScreenRadiusForLights; // 0x48 (4)
	float MinScreenRadiusForEarlyZPass; // 0x4C (4)
	float MinScreenRadiusForCSMdepth; // 0x50 (4)
	char bPrecomputedVisibilityWarning : 1; // 0x54 (1)
	char pad_50_1 : 7; // 0x50 (1)
	char pad_51_0 : 1; // 0x51 (1)
	char bTextureStreaming : 1; // 0x54 (1)
	char pad_51_2 : 6; // 0x51 (1)
	char pad_52_0 : 2; // 0x52 (1)
	char bUseDXT5NormalMaps : 1; // 0x54 (1)
	char pad_52_3 : 5; // 0x52 (1)
	char pad_53_0 : 3; // 0x53 (1)
	char bVirtualTextures : 1; // 0x54 (1)
	char pad_53_4 : 4; // 0x53 (1)
	char pad_54_0 : 4; // 0x54 (1)
	char bVirtualTexturedLightmaps : 1; // 0x54 (1)
	char pad_54_5 : 3; // 0x54 (1)
	uint32_t VirtualTextureTileSize; // 0x58 (4)
	uint32_t VirtualTextureTileBorderSize; // 0x5C (4)
	uint32_t VirtualTextureFeedbackFactor; // 0x60 (4)
	char bVirtualTextureEnableCompressZlib : 1; // 0x64 (1)
	char pad_61_1 : 7; // 0x61 (1)
	char pad_62_0 : 1; // 0x62 (1)
	char bVirtualTextureEnableCompressCrunch : 1; // 0x64 (1)
	char pad_62_2 : 6; // 0x62 (1)
	char pad_63_0 : 2; // 0x63 (1)
	char bClearCoatEnableSecondNormal : 1; // 0x64 (1)
	char pad_63_3 : 5; // 0x63 (1)
	char pad_64_0 : 3; // 0x64 (1)
	char bAnisotropicBRDF : 1; // 0x64 (1)
	char pad_64_4 : 4; // 0x64 (1)
	int32_t ReflectionCaptureResolution; // 0x68 (4)
	char ReflectionEnvironmentLightmapMixBasedOnRoughness : 1; // 0x6C (1)
	char pad_69_1 : 7; // 0x69 (1)
	char pad_6A_0 : 1; // 0x6A (1)
	char bForwardShading : 1; // 0x6C (1)
	char pad_6A_2 : 6; // 0x6A (1)
	char pad_6B_0 : 2; // 0x6B (1)
	char bVertexFoggingForOpaque : 1; // 0x6C (1)
	char pad_6B_3 : 5; // 0x6B (1)
	char pad_6C_0 : 3; // 0x6C (1)
	char bAllowStaticLighting : 1; // 0x6C (1)
	char bUseNormalMapsForStaticLighting : 1; // 0x6C (1)
	char bGenerateMeshDistanceFields : 1; // 0x6C (1)
	char bEightBitMeshDistanceFields : 1; // 0x6C (1)
	char bGenerateLandscapeGIData : 1; // 0x6C (1)
	char bCompressMeshDistanceFields : 1; // 0x6D (1)
	char pad_6D_1 : 7; // 0x6D (1)
	float TessellationAdaptivePixelsPerTriangle; // 0x70 (4)
	char bSeparateTranslucency : 1; // 0x74 (1)
	char pad_72_1 : 7; // 0x72 (1)
	enum class ETranslucentSortPolicy TranslucentSortPolicy; // 0x78 (1)
	struct FVector TranslucentSortAxis; // 0x7C (12)
	enum class ECustomDepthStencil CustomDepthStencil; // 0x88 (1)
	char bCustomDepthTaaJitter : 1; // 0x8C (1)
	char pad_81_1 : 7; // 0x81 (1)
	enum class EAlphaChannelMode bEnableAlphaChannelInPostProcessing; // 0x90 (1)
	char bDefaultFeatureBloom : 1; // 0x94 (1)
	char pad_83_1 : 7; // 0x83 (1)
	char pad_84_0 : 1; // 0x84 (1)
	char bDefaultFeatureAmbientOcclusion : 1; // 0x94 (1)
	char pad_84_2 : 6; // 0x84 (1)
	char pad_85_0 : 2; // 0x85 (1)
	char bDefaultFeatureAmbientOcclusionStaticFraction : 1; // 0x94 (1)
	char pad_85_3 : 5; // 0x85 (1)
	char pad_86_0 : 3; // 0x86 (1)
	char bDefaultFeatureAutoExposure : 1; // 0x94 (1)
	char pad_86_4 : 4; // 0x86 (1)
	enum class EAutoExposureMethodUI DefaultFeatureAutoExposure; // 0x98 (1)
	float DefaultFeatureAutoExposureBias; // 0x9C (4)
	char bExtendDefaultLuminanceRangeInAutoExposureSettings : 1; // 0xA0 (1)
	char pad_8C_1 : 7; // 0x8C (1)
	char pad_8D_0 : 1; // 0x8D (1)
	char bUsePreExposure : 1; // 0xA0 (1)
	char pad_8D_2 : 6; // 0x8D (1)
	char pad_8E_0 : 2; // 0x8E (1)
	char bEnablePreExposureOnlyInTheEditor : 1; // 0xA0 (1)
	char pad_8E_3 : 5; // 0x8E (1)
	char pad_8F_0 : 3; // 0x8F (1)
	char bDefaultFeatureMotionBlur : 1; // 0xA0 (1)
	char pad_8F_4 : 4; // 0x8F (1)
	char pad_90_0 : 4; // 0x90 (1)
	char bDefaultFeatureLensFlare : 1; // 0xA0 (1)
	char pad_90_5 : 3; // 0x90 (1)
	char pad_91_0 : 5; // 0x91 (1)
	char bTemporalUpsampling : 1; // 0xA0 (1)
	char pad_91_6 : 2; // 0x91 (1)
	char pad_92_0 : 6; // 0x92 (1)
	char bSSGI : 1; // 0xA0 (1)
	char pad_92_7 : 1; // 0x92 (1)
	enum class EAntiAliasingMethod DefaultFeatureAntiAliasing; // 0xA4 (1)
	enum class ELightUnits DefaultLightUnits; // 0xA5 (1)
	enum class EDefaultBackBufferPixelFormat DefaultBackBufferPixelFormat; // 0xA6 (1)
	char bRenderUnbuiltPreviewShadowsInGame : 1; // 0xA8 (1)
	char pad_96_1 : 7; // 0x96 (1)
	char pad_97_0 : 1; // 0x97 (1)
	char bStencilForLODDither : 1; // 0xA8 (1)
	char pad_97_2 : 6; // 0x97 (1)
	enum class EEarlyZPass EarlyZPass; // 0xAC (1)
	char bEarlyZPassOnlyMaterialMasking : 1; // 0xB0 (1)
	char pad_99_1 : 7; // 0x99 (1)
	char pad_9A_0 : 1; // 0x9A (1)
	char bDBuffer : 1; // 0xB0 (1)
	char pad_9A_2 : 6; // 0x9A (1)
	enum class EClearSceneOptions ClearSceneMethod; // 0xB4 (1)
	char bBasePassOutputsVelocity : 1; // 0xB8 (1)
	char pad_9C_1 : 7; // 0x9C (1)
	char pad_9D_0 : 1; // 0x9D (1)
	char bVertexDeformationOutputsVelocity : 1; // 0xB8 (1)
	char pad_9D_2 : 6; // 0x9D (1)
	char pad_9E_0 : 2; // 0x9E (1)
	char bSelectiveBasePassOutputs : 1; // 0xB8 (1)
	char pad_9E_3 : 5; // 0x9E (1)
	char pad_9F_0 : 3; // 0x9F (1)
	char bDefaultParticleCutouts : 1; // 0xB8 (1)
	char pad_9F_4 : 4; // 0x9F (1)
	int32_t GPUSimulationTextureSizeX; // 0xBC (4)
	int32_t GPUSimulationTextureSizeY; // 0xC0 (4)
	char bGlobalClipPlane : 1; // 0xC4 (1)
	char pad_A8_1 : 7; // 0xA8 (1)
	enum class EGBufferFormat GBufferFormat; // 0xC8 (1)
	char bUseGPUMorphTargets : 1; // 0xCC (1)
	char pad_AA_1 : 7; // 0xAA (1)
	char pad_AB_0 : 1; // 0xAB (1)
	char bNvidiaAftermathEnabled : 1; // 0xCC (1)
	char pad_AB_2 : 6; // 0xAB (1)
	char pad_AC_0 : 2; // 0xAC (1)
	char bMultiView : 1; // 0xCC (1)
	char pad_AC_3 : 5; // 0xAC (1)
	char pad_AD_0 : 3; // 0xAD (1)
	char bMobilePostProcessing : 1; // 0xCC (1)
	char pad_AD_4 : 4; // 0xAD (1)
	char pad_AE_0 : 4; // 0xAE (1)
	char bMobileMultiView : 1; // 0xCC (1)
	char pad_AE_5 : 3; // 0xAE (1)
	char pad_AF_0 : 5; // 0xAF (1)
	char bMobileUseHWsRGBEncoding : 1; // 0xCC (1)
	char pad_AF_6 : 2; // 0xAF (1)
	char pad_B0_0 : 6; // 0xB0 (1)
	char bRoundRobinOcclusion : 1; // 0xCC (1)
	char pad_B0_7 : 1; // 0xB0 (1)
	char pad_B1_0 : 7; // 0xB1 (1)
	char bODSCapture : 1; // 0xCC (1)
	char bMeshStreaming : 1; // 0xCD (1)
	char pad_B2_1 : 7; // 0xB2 (1)
	float WireframeCullThreshold; // 0xD0 (4)
	char bEnableRayTracing : 1; // 0xD4 (1)
	char pad_B7_1 : 7; // 0xB7 (1)
	char pad_B8_0 : 1; // 0xB8 (1)
	char bEnableRayTracingTextureLOD : 1; // 0xD4 (1)
	char pad_B8_2 : 6; // 0xB8 (1)
	char pad_B9_0 : 2; // 0xB9 (1)
	char bSupportStationarySkylight : 1; // 0xD4 (1)
	char pad_B9_3 : 5; // 0xB9 (1)
	char pad_BA_0 : 3; // 0xBA (1)
	char bSupportLowQualityLightmaps : 1; // 0xD4 (1)
	char pad_BA_4 : 4; // 0xBA (1)
	char pad_BB_0 : 4; // 0xBB (1)
	char bSupportPointLightWholeSceneShadows : 1; // 0xD4 (1)
	char pad_BB_5 : 3; // 0xBB (1)
	char pad_BC_0 : 5; // 0xBC (1)
	char bSupportAtmosphericFog : 1; // 0xD4 (1)
	char pad_BC_6 : 2; // 0xBC (1)
	char pad_BD_0 : 6; // 0xBD (1)
	char bSupportSkyAtmosphere : 1; // 0xD4 (1)
	char pad_BD_7 : 1; // 0xBD (1)
	char pad_BE_0 : 7; // 0xBE (1)
	char bSupportSkyAtmosphereAffectsHeightFog : 1; // 0xD4 (1)
	char bSupportSkinCacheShaders : 1; // 0xD5 (1)
	char pad_BF_1 : 7; // 0xBF (1)
	enum class ESkinCacheDefaultBehavior DefaultSkinCacheBehavior; // 0xD8 (1)
	float SkinCacheSceneMemoryLimitInMB; // 0xDC (4)
	char bMobileEnableStaticAndCSMShadowReceivers : 1; // 0xE0 (1)
	char pad_C5_1 : 7; // 0xC5 (1)
	char pad_C6_0 : 1; // 0xC6 (1)
	char bMobileEnableMovableLightCSMShaderCulling : 1; // 0xE0 (1)
	char pad_C6_2 : 6; // 0xC6 (1)
	char pad_C7_0 : 2; // 0xC7 (1)
	char bMobileAllowDistanceFieldShadows : 1; // 0xE0 (1)
	char pad_C7_3 : 5; // 0xC7 (1)
	char pad_C8_0 : 3; // 0xC8 (1)
	char bMobileAllowMovableDirectionalLights : 1; // 0xE0 (1)
	char pad_C8_4 : 4; // 0xC8 (1)
	uint32_t MobileNumDynamicPointLights; // 0xE4 (4)
	char bMobileDynamicPointLightsUseStaticBranch : 1; // 0xE8 (1)
	char pad_CD_1 : 7; // 0xCD (1)
	char pad_CE_0 : 1; // 0xCE (1)
	char bMobileAllowMovableSpotlights : 1; // 0xE8 (1)
	char pad_CE_2 : 6; // 0xCE (1)
	char pad_CF_0 : 2; // 0xCF (1)
	char bSupport16BitBoneIndex : 1; // 0xE8 (1)
	char pad_CF_3 : 5; // 0xCF (1)
	char pad_D0_0 : 3; // 0xD0 (1)
	char bGPUSkinLimit2BoneInfluences : 1; // 0xE8 (1)
	char pad_D0_4 : 4; // 0xD0 (1)
	char pad_D1_0 : 4; // 0xD1 (1)
	char bSupportDepthOnlyIndexBuffers : 1; // 0xE8 (1)
	char pad_D1_5 : 3; // 0xD1 (1)
	char pad_D2_0 : 5; // 0xD2 (1)
	char bSupportReversedIndexBuffers : 1; // 0xE8 (1)
	char pad_D2_6 : 2; // 0xD2 (1)
	char pad_D3_0 : 6; // 0xD3 (1)
	char bSupportMaterialLayers : 1; // 0xE8 (1)
	char pad_D3_7 : 1; // 0xD3 (1)
	char pad_D4_0 : 7; // 0xD4 (1)
	char bLPV : 1; // 0xE8 (1)
};

// Class Engine.RendererOverrideSettings
class URendererOverrideSettings : public UDeveloperSettings {

public:

	char bSupportAllShaderPermutations : 1; // 0x38 (1)
	char bForceRecomputeTangents : 1; // 0x38 (1)
};

// Class Engine.ReverbEffect
class UReverbEffect : public Object {

public:

	float Density; // 0x28 (4)
	float Diffusion; // 0x2C (4)
	float Gain; // 0x30 (4)
	float GainHF; // 0x34 (4)
	float DecayTime; // 0x38 (4)
	float DecayHFRatio; // 0x3C (4)
	float ReflectionsGain; // 0x40 (4)
	float ReflectionsDelay; // 0x44 (4)
	float LateGain; // 0x48 (4)
	float LateDelay; // 0x4C (4)
	float AirAbsorptionGainHF; // 0x50 (4)
	float RoomRolloffFactor; // 0x54 (4)
};

// Class Engine.Rig
class URig : public Object {

public:

	struct TArray<struct FTransformBase> TransformBases; // 0x30 (16)
	struct TArray<struct FNode> Nodes; // 0x40 (16)
};

// Class Engine.RotatingMovementComponent
class URotatingMovementComponent : public UMovementComponent {

public:

	struct FRotator RotationRate; // 0xF0 (12)
	struct FVector PivotTranslation; // 0xFC (12)
	char bRotationInLocalSpace : 1; // 0x108 (1)
};

// Class Engine.RuntimeVirtualTexture
class URuntimeVirtualTexture : public Object {

public:

	enum class ERuntimeVirtualTextureMaterialType MaterialType; // 0x28 (1)
	bool bCompressTextures; // 0x29 (1)
	bool bEnable; // 0x2A (1)
	bool bClearTextures; // 0x2B (1)
	bool bSinglePhysicalSpace; // 0x2C (1)
	bool bPrivateSpace; // 0x2D (1)
	bool bEnableScalability; // 0x2E (1)
	int32_t Size; // 0x30 (4)
	int32_t TileCount; // 0x34 (4)
	int32_t TileSize; // 0x38 (4)
	int32_t TileBorderSize; // 0x3C (4)
	int32_t StreamLowMips; // 0x40 (4)
	struct URuntimeVirtualTextureStreamingProxy StreamingTexture; // 0x48 (8)
	bool bEnableCompressCrunch; // 0x50 (1)
	int32_t RemoveLowMips; // 0x54 (4)

	int32_t GetTileSize(); // Function Engine.RuntimeVirtualTexture.GetTileSize(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3395050>
	int32_t GetTileCount(); // Function Engine.RuntimeVirtualTexture.GetTileCount(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3395010>
	int32_t GetTileBorderSize(); // Function Engine.RuntimeVirtualTexture.GetTileBorderSize(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3394FD0>
	int32_t GetSize(); // Function Engine.RuntimeVirtualTexture.GetSize(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x3394F60>
};

// Class Engine.RuntimeVirtualTextureComponent
class URuntimeVirtualTextureComponent : public USceneComponent {

public:

	struct URuntimeVirtualTexture VirtualTexture; // 0x1F0 (8)
	bool bUseStreamingLowMipsInEditor; // 0x1F8 (1)
	struct UActor BoundsSourceActor; // 0x200 (8)

	struct FTransform GetVirtualTextureTransform(); // Function Engine.RuntimeVirtualTextureComponent.GetVirtualTextureTransform(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33950A0>
};

// Class Engine.RuntimeVirtualTextureStreamingProxy
class URuntimeVirtualTextureStreamingProxy : public UTexture2D {

public:

	struct FVirtualTextureBuildSettings Settings; // 0xE8 (12)
	bool bSinglePhysicalSpace; // 0xF4 (1)
	uint32_t BuildHash; // 0xF8 (4)
};

// Class Engine.RuntimeVirtualTextureVolume
class ARuntimeVirtualTextureVolume : public UActor {

public:

	struct URuntimeVirtualTextureComponent VirtualTextureComponent; // 0x220 (8)
};

// Class Engine.SceneCapture2D
class ASceneCapture2D : public ASceneCapture {

public:

	struct USceneCaptureComponent2D CaptureComponent2D; // 0x230 (8)

	void OnInterpToggle(bool bEnable); // Function Engine.SceneCapture2D.OnInterpToggle(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3374B40>
};

// Class Engine.SceneCaptureComponent2D
class USceneCaptureComponent2D : public USceneCaptureComponent {

public:

	enum class ECameraProjectionMode ProjectionType; // 0x288 (1)
	float FOVAngle; // 0x28C (4)
	float OrthoWidth; // 0x290 (4)
	struct UTextureRenderTarget2D TextureTarget; // 0x298 (8)
	enum class ESceneCaptureCompositeMode CompositeMode; // 0x2A0 (1)
	struct FPostProcessSettings PostProcessSettings; // 0x2B0 (1376)
	float PostProcessBlendWeight; // 0x810 (4)
	char bOverride_CustomNearClippingPlane : 1; // 0x814 (1)
	char pad_806_1 : 7; // 0x806 (1)
	float CustomNearClippingPlane; // 0x818 (4)
	bool bUseCustomProjectionMatrix; // 0x81C (1)
	struct FMatrix CustomProjectionMatrix; // 0x820 (64)
	bool bEnableClipPlane; // 0x860 (1)
	struct FVector ClipPlaneBase; // 0x864 (12)
	struct FVector ClipPlaneNormal; // 0x870 (12)
	char bCameraCutThisFrame : 1; // 0x87C (1)
	char pad_865_1 : 7; // 0x865 (1)
	char pad_866_0 : 1; // 0x866 (1)
	char bConsiderUnrenderedOpaquePixelAsFullyTranslucent : 1; // 0x87C (1)
	char pad_866_2 : 6; // 0x866 (1)
	bool bDisableFlipCopyGLES; // 0x880 (1)

	void CaptureScene(); // Function Engine.SceneCaptureComponent2D.CaptureScene(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3397570>
	void AddOrUpdateBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight); // Function Engine.SceneCaptureComponent2D.AddOrUpdateBlendable(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3397420>
};

// Class Engine.SceneCaptureComponentCube
class USceneCaptureComponentCube : public USceneCaptureComponent {

public:

	struct UTextureRenderTargetCube TextureTarget; // 0x288 (8)
	bool bCaptureRotation; // 0x290 (1)
	struct UTextureRenderTargetCube TextureTargetLeft; // 0x298 (8)
	struct UTextureRenderTargetCube TextureTargetRight; // 0x2A0 (8)
	struct UTextureRenderTarget2D TextureTargetODS; // 0x2A8 (8)
	float IPD; // 0x2B0 (4)

	void CaptureScene(); // Function Engine.SceneCaptureComponentCube.CaptureScene(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3397570>
};

// Class Engine.SceneCaptureCube
class ASceneCaptureCube : public ASceneCapture {

public:

	struct USceneCaptureComponentCube CaptureComponentCube; // 0x230 (8)

	void OnInterpToggle(bool bEnable); // Function Engine.SceneCaptureCube.OnInterpToggle(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x3374B40>
};

// Class Engine.SCS_Node
class USCS_Node : public Object {

public:

	struct UClass* ComponentClass; // 0x28 (8)
	struct UActorComponent ComponentTemplate; // 0x30 (8)
	struct FBlueprintCookedComponentInstancingData CookedComponentInstancingData; // 0x38 (72)
	struct FName AttachToName; // 0x80 (8)
	struct FName ParentComponentOrVariableName; // 0x88 (8)
	struct FName ParentComponentOwnerClassName; // 0x90 (8)
	bool bIsParentComponentNative; // 0x98 (1)
	struct TArray<struct USCS_Node> ChildNodes; // 0xA0 (16)
	struct TArray<struct FBPVariableMetaDataEntry> MetaDataArray; // 0xB0 (16)
	struct FGuid VariableGuid; // 0xC0 (16)
	struct FName InternalVariableName; // 0xD0 (8)
};

// Class Engine.ServerStatReplicator
class AServerStatReplicator : public AInfo {

public:

	bool bUpdateStatNet; // 0x220 (1)
	bool bOverwriteClientStats; // 0x221 (1)
	uint32_t Channels; // 0x224 (4)
	uint32_t InRate; // 0x228 (4)
	uint32_t OutRate; // 0x22C (4)
	uint32_t MaxPacketOverhead; // 0x234 (4)
	uint32_t InRateClientMax; // 0x238 (4)
	uint32_t InRateClientMin; // 0x23C (4)
	uint32_t InRateClientAvg; // 0x240 (4)
	uint32_t InPacketsClientMax; // 0x244 (4)
	uint32_t InPacketsClientMin; // 0x248 (4)
	uint32_t InPacketsClientAvg; // 0x24C (4)
	uint32_t OutRateClientMax; // 0x250 (4)
	uint32_t OutRateClientMin; // 0x254 (4)
	uint32_t OutRateClientAvg; // 0x258 (4)
	uint32_t OutPacketsClientMax; // 0x25C (4)
	uint32_t OutPacketsClientMin; // 0x260 (4)
	uint32_t OutPacketsClientAvg; // 0x264 (4)
	uint32_t NetNumClients; // 0x268 (4)
	uint32_t InPackets; // 0x26C (4)
	uint32_t OutPackets; // 0x270 (4)
	uint32_t InBunches; // 0x274 (4)
	uint32_t OutBunches; // 0x278 (4)
	uint32_t OutLoss; // 0x27C (4)
	uint32_t InLoss; // 0x280 (4)
	uint32_t VoiceBytesSent; // 0x284 (4)
	uint32_t VoiceBytesRecv; // 0x288 (4)
	uint32_t VoicePacketsSent; // 0x28C (4)
	uint32_t VoicePacketsRecv; // 0x290 (4)
	uint32_t PercentInVoice; // 0x294 (4)
	uint32_t PercentOutVoice; // 0x298 (4)
	uint32_t NumActorChannels; // 0x29C (4)
	uint32_t NumConsideredActors; // 0x2A0 (4)
	uint32_t PrioritizedActors; // 0x2A4 (4)
	uint32_t NumRelevantActors; // 0x2A8 (4)
	uint32_t NumRelevantDeletedActors; // 0x2AC (4)
	uint32_t NumReplicatedActorAttempts; // 0x2B0 (4)
	uint32_t NumReplicatedActors; // 0x2B4 (4)
	uint32_t NumActors; // 0x2B8 (4)
	uint32_t NumNetActors; // 0x2BC (4)
	uint32_t NumDormantActors; // 0x2C0 (4)
	uint32_t NumInitiallyDormantActors; // 0x2C4 (4)
	uint32_t NumNetGUIDsAckd; // 0x2C8 (4)
	uint32_t NumNetGUIDsPending; // 0x2CC (4)
	uint32_t NumNetGUIDsUnAckd; // 0x2D0 (4)
	uint32_t ObjPathBytes; // 0x2D4 (4)
	uint32_t NetGUIDOutRate; // 0x2D8 (4)
	uint32_t NetGUIDInRate; // 0x2DC (4)
	uint32_t NetSaturated; // 0x2E0 (4)
};

// Class Engine.ShadowMapTexture2D
class UShadowMapTexture2D : public UTexture2D {

public:

	enum class EShadowMapFlags ShadowmapFlags; // 0xE8 (1)
};

// Class Engine.SimpleConstructionScript
class USimpleConstructionScript : public Object {

public:

	struct TArray<struct USCS_Node> RootNodes; // 0x28 (16)
	struct TArray<struct USCS_Node> AllNodes; // 0x38 (16)
	struct USCS_Node DefaultSceneRootNode; // 0x48 (8)
};

// Class Engine.SkeletalMeshActor
class ASkeletalMeshActor : public UActor {

public:

	char bShouldDoAnimNotifies : 1; // 0x228 (1)
	char pad_220_1 : 7; // 0x220 (1)
	char pad_221_0 : 1; // 0x221 (1)
	char bWakeOnLevelStart : 1; // 0x228 (1)
	char pad_221_2 : 6; // 0x221 (1)
	struct USkeletalMeshComponent SkeletalMeshComponent; // 0x230 (8)
	struct USkeletalMesh ReplicatedMesh; // 0x238 (8)
	struct UPhysicsAsset ReplicatedPhysAsset; // 0x240 (8)
	struct UMaterialInterface ReplicatedMaterial0; // 0x248 (8)
	struct UMaterialInterface ReplicatedMaterial1; // 0x250 (8)

	void OnRep_ReplicatedPhysAsset(); // Function Engine.SkeletalMeshActor.OnRep_ReplicatedPhysAsset(Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32B36E0>
	void OnRep_ReplicatedMesh(); // Function Engine.SkeletalMeshActor.OnRep_ReplicatedMesh(Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32BE150>
	void OnRep_ReplicatedMaterial1(); // Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial1(Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x3356EA0>
	void OnRep_ReplicatedMaterial0(); // Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial0(Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x33571C0>
};

// Class Engine.SkeletalMeshLODSettings
class USkeletalMeshLODSettings : public UDataAsset {

public:

	struct FPerPlatformInt MinLOD; // 0x30 (4)
	struct FPerPlatformBool DisableBelowMinLodStripping; // 0x34 (1)
	struct FPerPlatformBool bSupportLODStreaming; // 0x35 (1)
	struct FPerPlatformInt MaxNumStreamedLODs; // 0x38 (4)
	struct FPerPlatformInt MaxNumOptionalLODs; // 0x3C (4)
	struct TArray<struct FSkeletalMeshLODGroupSettings> LODGroups; // 0x40 (16)
};

// Class Engine.SkeletalMeshSimplificationSettings
class USkeletalMeshSimplificationSettings : public UDeveloperSettings {

public:

	struct FName SkeletalMeshReductionModuleName; // 0x38 (8)
};

// Class Engine.SkeletalMeshSocket
class USkeletalMeshSocket : public Object {

public:

	struct FName SocketName; // 0x28 (8)
	struct FName BoneName; // 0x30 (8)
	struct FVector RelativeLocation; // 0x38 (12)
	struct FRotator RelativeRotation; // 0x44 (12)
	struct FVector RelativeScale; // 0x50 (12)
	bool bForceAlwaysAnimated; // 0x5C (1)

	void InitializeSocketFromLocation(struct USkeletalMeshComponent SkelComp, struct FVector WorldLocation, struct FVector WorldNormal); // Function Engine.SkeletalMeshSocket.InitializeSocketFromLocation(Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33A78B0>
	struct FVector GetSocketLocation(struct USkeletalMeshComponent SkelComp); // Function Engine.SkeletalMeshSocket.GetSocketLocation(Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33A7630>
};

// Class Engine.SkyAtmosphereComponent
class USkyAtmosphereComponent : public USceneComponent {

public:

	enum class ESkyAtmosphereTransformMode TransformMode; // 0x1F0 (1)
	float BottomRadius; // 0x1F4 (4)
	struct FColor GroundAlbedo; // 0x1F8 (4)
	float AtmosphereHeight; // 0x1FC (4)
	float MultiScatteringFactor; // 0x200 (4)
	float RayleighScatteringScale; // 0x204 (4)
	struct FLinearColor RayleighScattering; // 0x208 (16)
	float RayleighExponentialDistribution; // 0x218 (4)
	float MieScatteringScale; // 0x21C (4)
	struct FLinearColor MieScattering; // 0x220 (16)
	float MieAbsorptionScale; // 0x230 (4)
	struct FLinearColor MieAbsorption; // 0x234 (16)
	float MieAnisotropy; // 0x244 (4)
	float MieExponentialDistribution; // 0x248 (4)
	float OtherAbsorptionScale; // 0x24C (4)
	struct FLinearColor OtherAbsorption; // 0x250 (16)
	struct FTentDistribution OtherTentDistribution; // 0x260 (12)
	struct FLinearColor SkyLuminanceFactor; // 0x26C (16)
	float AerialPespectiveViewDistanceScale; // 0x27C (4)
	float HeightFogContribution; // 0x280 (4)
	float TransmittanceMinLightElevationAngle; // 0x284 (4)
	struct FGuid bStaticLightingBuiltGUID; // 0x2AC (16)

	void SetSkyLuminanceFactor(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetSkyLuminanceFactor(Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33AC130>
	void SetRayleighScatteringScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetRayleighScatteringScale(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33AC0B0>
	void SetRayleighScattering(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetRayleighScattering(Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33AC030>
	void SetRayleighExponentialDistribution(float NewValue); // Function Engine.SkyAtmosphereComponent.SetRayleighExponentialDistribution(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33ABFB0>
	void SetOtherAbsorptionScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetOtherAbsorptionScale(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33ABF30>
	void SetOtherAbsorption(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetOtherAbsorption(Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33ABEB0>
	void SetMieScatteringScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMieScatteringScale(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33ABC20>
	void SetMieScattering(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetMieScattering(Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33ABBA0>
	void SetMieExponentialDistribution(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMieExponentialDistribution(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333F100>
	void SetMieAnisotropy(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMieAnisotropy(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x333F080>
	void SetMieAbsorptionScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMieAbsorptionScale(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33ABB20>
	void SetMieAbsorption(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetMieAbsorption(Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33ABAA0>
	void SetHeightFogContribution(float NewValue); // Function Engine.SkyAtmosphereComponent.SetHeightFogContribution(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33AB810>
	void SetAerialPespectiveViewDistanceScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetAerialPespectiveViewDistanceScale(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33AB600>
	void OverrideAtmosphereLightDirection(int32_t AtmosphereLightIndex, struct FVector& LightDirection); // Function Engine.SkyAtmosphereComponent.OverrideAtmosphereLightDirection(Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33AB510>
};

// Class Engine.SkyAtmosphere
class ASkyAtmosphere : public AInfo {

public:

	struct USkyAtmosphereComponent SkyAtmosphereComponent; // 0x220 (8)
};

// Class Engine.SkyLightComponent
class USkyLightComponent : public ULightComponentBase {

public:

	enum class ESkyLightSourceType SourceType; // 0x220 (1)
	struct UTextureCube Cubemap; // 0x228 (8)
	float SourceCubemapAngle; // 0x230 (4)
	int32_t CubemapResolution; // 0x234 (4)
	float SkyDistanceThreshold; // 0x238 (4)
	bool bCaptureEmissiveOnly; // 0x23C (1)
	bool bLowerHemisphereIsBlack; // 0x23D (1)
	struct FLinearColor LowerHemisphereColor; // 0x240 (16)
	float OcclusionMaxDistance; // 0x250 (4)
	float Contrast; // 0x254 (4)
	float OcclusionExponent; // 0x258 (4)
	float MinOcclusion; // 0x25C (4)
	struct FColor OcclusionTint; // 0x260 (4)
	enum class EOcclusionCombineMode OcclusionCombineMode; // 0x264 (1)
	struct UTextureCube BlendDestinationCubemap; // 0x318 (8)

	void SetVolumetricScatteringIntensity(float NewIntensity); // Function Engine.SkyLightComponent.SetVolumetricScatteringIntensity(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33AC1B0>
	void SetOcclusionTint(struct FColor& InTint); // Function Engine.SkyLightComponent.SetOcclusionTint(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33ABE20>
	void SetOcclusionExponent(float InOcclusionExponent); // Function Engine.SkyLightComponent.SetOcclusionExponent(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33ABDA0>
	void SetOcclusionContrast(float InOcclusionContrast); // Function Engine.SkyLightComponent.SetOcclusionContrast(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33ABD20>
	void SetMinOcclusion(float InMinOcclusion); // Function Engine.SkyLightComponent.SetMinOcclusion(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33ABCA0>
	void SetLowerHemisphereColor(struct FLinearColor& InLowerHemisphereColor); // Function Engine.SkyLightComponent.SetLowerHemisphereColor(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33ABA10>
	void SetLightColor(struct FLinearColor NewLightColor); // Function Engine.SkyLightComponent.SetLightColor(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33AB990>
	void SetIntensity(float NewIntensity); // Function Engine.SkyLightComponent.SetIntensity(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33AB910>
	void SetIndirectLightingIntensity(float NewIntensity); // Function Engine.SkyLightComponent.SetIndirectLightingIntensity(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33AB890>
	void SetCubemapBlend(struct UTextureCube SourceCubemap, struct UTextureCube DestinationCubemap, float InBlendFraction); // Function Engine.SkyLightComponent.SetCubemapBlend(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33AB700>
	void SetCubemap(struct UTextureCube NewCubemap); // Function Engine.SkyLightComponent.SetCubemap(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33AB680>
	void RecaptureSky(); // Function Engine.SkyLightComponent.RecaptureSky(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33AB5E0>
};

// Class Engine.SlateBrushAsset
class USlateBrushAsset : public Object {

public:

	struct FSlateBrush Brush; // 0x28 (136)
};

// Class Engine.SoundAttenuation
class USoundAttenuation : public Object {

public:

	struct FSoundAttenuationSettings Attenuation; // 0x28 (928)
};

// Class Engine.SoundClass
class USoundClass : public Object {

public:

	struct FSoundClassProperties Properties; // 0x28 (88)
	struct TArray<struct USoundClass> ChildClasses; // 0x80 (16)
	struct TArray<struct FPassiveSoundMixModifier> PassiveSoundMixModifiers; // 0x90 (16)
	struct FSoundModulation Modulation; // 0xA0 (16)
	struct USoundClass ParentClass; // 0xB0 (8)
};

// Class Engine.SoundConcurrency
class USoundConcurrency : public Object {

public:

	struct FSoundConcurrencySettings Concurrency; // 0x28 (32)
};

// Class Engine.SoundCue
class USoundCue : public USoundBase {

public:

	char bPrimeOnLoad : 1; // 0x160 (1)
	char pad_160_1 : 7; // 0x160 (1)
	struct USoundNode FirstNode; // 0x168 (8)
	float VolumeMultiplier; // 0x170 (4)
	float PitchMultiplier; // 0x174 (4)
	struct FSoundAttenuationSettings AttenuationOverrides; // 0x178 (928)
	float SubtitlePriority; // 0x518 (4)
	char bOverrideAttenuation : 1; // 0x520 (1)
	char pad_515_1 : 7; // 0x515 (1)
	char pad_516_0 : 1; // 0x516 (1)
	char bExcludeFromRandomNodeBranchCulling : 1; // 0x520 (1)
	char pad_516_2 : 6; // 0x516 (1)
	int32_t CookedQualityIndex; // 0x524 (4)
	char bHasPlayWhenSilent : 1; // 0x528 (1)
};

// Class Engine.SoundEffectSourcePresetChain
class USoundEffectSourcePresetChain : public Object {

public:

	struct TArray<struct FSourceEffectChainEntry> Chain; // 0x28 (16)
	char bPlayEffectChainTails : 1; // 0x38 (1)
};

// Class Engine.SoundGroups
class USoundGroups : public Object {

public:

	struct TArray<struct FSoundGroup> SoundGroupProfiles; // 0x28 (16)
};

// Class Engine.SoundMix
class USoundMix : public Object {

public:

	char bApplyEQ : 1; // 0x28 (1)
	char pad_28_1 : 7; // 0x28 (1)
	float EQPriority; // 0x2C (4)
	struct FAudioEQEffect EQSettings; // 0x30 (64)
	struct TArray<struct FSoundClassAdjuster> SoundClassEffects; // 0x70 (16)
	float InitialDelay; // 0x80 (4)
	float FadeInTime; // 0x84 (4)
	float Duration; // 0x88 (4)
	float FadeOutTime; // 0x8C (4)
};

// Class Engine.SoundNode
class USoundNode : public Object {

public:

	struct TArray<struct USoundNode> ChildNodes; // 0x28 (16)
};

// Class Engine.SoundNodeAttenuation
class USoundNodeAttenuation : public USoundNode {

public:

	struct USoundAttenuation AttenuationSettings; // 0x48 (8)
	struct FSoundAttenuationSettings AttenuationOverrides; // 0x50 (928)
	char bOverrideAttenuation : 1; // 0x3F0 (1)
};

// Class Engine.SoundNodeBranch
class USoundNodeBranch : public USoundNode {

public:

	struct FName BoolParameterName; // 0x48 (8)
};

// Class Engine.SoundNodeConcatenator
class USoundNodeConcatenator : public USoundNode {

public:

	struct TArray<float> InputVolume; // 0x48 (16)
};

// Class Engine.SoundNodeDelay
class USoundNodeDelay : public USoundNode {

public:

	float DelayMin; // 0x48 (4)
	float DelayMax; // 0x4C (4)
};

// Class Engine.SoundNodeDialoguePlayer
class USoundNodeDialoguePlayer : public USoundNode {

public:

	struct FDialogueWaveParameter DialogueWaveParameter; // 0x48 (32)
	char bLooping : 1; // 0x68 (1)
};

// Class Engine.SoundNodeDistanceCrossFade
class USoundNodeDistanceCrossFade : public USoundNode {

public:

	struct TArray<struct FDistanceDatum> CrossFadeInput; // 0x48 (16)
};

// Class Engine.SoundNodeDoppler
class USoundNodeDoppler : public USoundNode {

public:

	float DopplerIntensity; // 0x48 (4)
	bool bUseSmoothing; // 0x4C (1)
	float SmoothingInterpSpeed; // 0x50 (4)
};

// Class Engine.SoundNodeEnveloper
class USoundNodeEnveloper : public USoundNode {

public:

	float LoopStart; // 0x48 (4)
	float LoopEnd; // 0x4C (4)
	float DurationAfterLoop; // 0x50 (4)
	int32_t LoopCount; // 0x54 (4)
	char bLoopIndefinitely : 1; // 0x58 (1)
	char bLoop : 1; // 0x58 (1)
	char pad_58_2 : 6; // 0x58 (1)
	struct UDistributionFloatConstantCurve VolumeInterpCurve; // 0x60 (8)
	struct UDistributionFloatConstantCurve PitchInterpCurve; // 0x68 (8)
	struct FRuntimeFloatCurve VolumeCurve; // 0x70 (136)
	struct FRuntimeFloatCurve PitchCurve; // 0xF8 (136)
	float PitchMin; // 0x180 (4)
	float PitchMax; // 0x184 (4)
	float VolumeMin; // 0x188 (4)
	float VolumeMax; // 0x18C (4)
};

// Class Engine.SoundNodeGroupControl
class USoundNodeGroupControl : public USoundNode {

public:

	struct TArray<int32_t> GroupSizes; // 0x48 (16)
};

// Class Engine.SoundNodeLooping
class USoundNodeLooping : public USoundNode {

public:

	int32_t LoopCount; // 0x48 (4)
	char bLoopIndefinitely : 1; // 0x4C (1)
};

// Class Engine.SoundNodeMixer
class USoundNodeMixer : public USoundNode {

public:

	struct TArray<float> InputVolume; // 0x48 (16)
};

// Class Engine.SoundNodeModulator
class USoundNodeModulator : public USoundNode {

public:

	float PitchMin; // 0x48 (4)
	float PitchMax; // 0x4C (4)
	float VolumeMin; // 0x50 (4)
	float VolumeMax; // 0x54 (4)
};

// Class Engine.SoundNodeModulatorContinuous
class USoundNodeModulatorContinuous : public USoundNode {

public:

	struct FModulatorContinuousParams PitchModulationParams; // 0x48 (32)
	struct FModulatorContinuousParams VolumeModulationParams; // 0x68 (32)
};

// Class Engine.SoundNodeOscillator
class USoundNodeOscillator : public USoundNode {

public:

	char bModulateVolume : 1; // 0x48 (1)
	char bModulatePitch : 1; // 0x48 (1)
	char pad_48_2 : 6; // 0x48 (1)
	float AmplitudeMin; // 0x4C (4)
	float AmplitudeMax; // 0x50 (4)
	float FrequencyMin; // 0x54 (4)
	float FrequencyMax; // 0x58 (4)
	float OffsetMin; // 0x5C (4)
	float OffsetMax; // 0x60 (4)
	float CenterMin; // 0x64 (4)
	float CenterMax; // 0x68 (4)
};

// Class Engine.SoundNodeParamCrossFade
class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade {

public:

	struct FName ParamName; // 0x58 (8)
};

// Class Engine.SoundNodeRandom
class USoundNodeRandom : public USoundNode {

public:

	struct TArray<float> Weights; // 0x48 (16)
	struct TArray<bool> HasBeenUsed; // 0x58 (16)
	int32_t NumRandomUsed; // 0x68 (4)
	int32_t PreselectAtLevelLoad; // 0x6C (4)
	char bShouldExcludeFromBranchCulling : 1; // 0x70 (1)
	char bSoundCueExcludedFromBranchCulling : 1; // 0x70 (1)
	char bRandomizeWithoutReplacement : 1; // 0x70 (1)
};

// Class Engine.SoundNodeSoundClass
class USoundNodeSoundClass : public USoundNode {

public:

	struct USoundClass SoundClassOverride; // 0x48 (8)
};

// Class Engine.SoundNodeSwitch
class USoundNodeSwitch : public USoundNode {

public:

	struct FName IntParameterName; // 0x48 (8)
};

// Class Engine.SoundNodeWaveParam
class USoundNodeWaveParam : public USoundNode {

public:

	struct FName WaveParameterName; // 0x48 (8)
};

// Class Engine.SoundNodeWavePlayer
class USoundNodeWavePlayer : public USoundNodeAssetReferencer {

public:

	struct TSoftObjectPtr<USoundWave> SoundWaveAssetPtr; // 0x48 (40)
	struct USoundWave SoundWave; // 0x70 (8)
	char pad_78_0 : 1; // 0x78 (1)
	char bLooping : 1; // 0x78 (1)
};

// Class Engine.SoundSourceBus
class USoundSourceBus : public USoundWave {

public:

	enum class ESourceBusChannels SourceBusChannels; // 0x308 (1)
	float SourceBusDuration; // 0x30C (4)
	char bAutoDeactivateWhenSilent : 1; // 0x310 (1)
};

// Class Engine.SoundSubmixBase
class USoundSubmixBase : public Object {

public:

	struct TArray<struct USoundSubmixBase> ChildSubmixes; // 0x28 (16)
};

// Class Engine.SoundSubmixWithParentBase
class USoundSubmixWithParentBase : public USoundSubmixBase {

public:

	struct USoundSubmixBase ParentSubmix; // 0x38 (8)
};

// Class Engine.SoundSubmix
class USoundSubmix : public USoundSubmixWithParentBase {

public:

	char bMuteWhenBackgrounded : 1; // 0x40 (1)
	char pad_40_1 : 7; // 0x40 (1)
	struct TArray<struct USoundEffectSubmixPreset> SubmixEffectChain; // 0x48 (16)
	struct USoundfieldEncodingSettingsBase AmbisonicsPluginSettings; // 0x58 (8)
	int32_t EnvelopeFollowerAttackTime; // 0x60 (4)
	int32_t EnvelopeFollowerReleaseTime; // 0x64 (4)
	float OutputVolume; // 0x68 (4)
	struct FMulticastInlineDelegate OnSubmixRecordedFileDone; // 0x70 (16)

	void StopRecordingOutput(struct Object WorldContextObject, enum class EAudioRecordingExportType ExportType, struct FString Name, struct FString Path, struct USoundWave ExistingSoundWaveToOverwrite); // Function Engine.SoundSubmix.StopRecordingOutput(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33B8E30>
	void StopEnvelopeFollowing(struct Object WorldContextObject); // Function Engine.SoundSubmix.StopEnvelopeFollowing(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33B8DB0>
	void StartRecordingOutput(struct Object WorldContextObject, float ExpectedDuration); // Function Engine.SoundSubmix.StartRecordingOutput(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33B8CE0>
	void StartEnvelopeFollowing(struct Object WorldContextObject); // Function Engine.SoundSubmix.StartEnvelopeFollowing(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33B8C60>
	void SetSubmixOutputVolume(struct Object WorldContextObject, float InOutputVolume); // Function Engine.SoundSubmix.SetSubmixOutputVolume(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33B8630>
	void AddEnvelopeFollowerDelegate(struct Object WorldContextObject, struct FDelegate& OnSubmixEnvelopeBP); // Function Engine.SoundSubmix.AddEnvelopeFollowerDelegate(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33B3930>
};

// Class Engine.SoundfieldSubmix
class USoundfieldSubmix : public USoundSubmixWithParentBase {

public:

	struct FName SoundfieldEncodingFormat; // 0x40 (8)
	struct USoundfieldEncodingSettingsBase EncodingSettings; // 0x48 (8)
	struct TArray<struct USoundfieldEffectBase> SoundfieldEffectChain; // 0x50 (16)
	struct UClass* EncodingSettingsClass; // 0x60 (8)
};

// Class Engine.EndpointSubmix
class UEndpointSubmix : public USoundSubmixBase {

public:

	struct FName EndpointType; // 0x38 (8)
	struct UClass* EndpointSettingsClass; // 0x40 (8)
	struct UAudioEndpointSettingsBase EndpointSettings; // 0x48 (8)
};

// Class Engine.SoundfieldEndpointSubmix
class USoundfieldEndpointSubmix : public USoundSubmixBase {

public:

	struct FName SoundfieldEndpointType; // 0x38 (8)
	struct UClass* EndpointSettingsClass; // 0x40 (8)
	struct USoundfieldEndpointSettingsBase EndpointSettings; // 0x48 (8)
	struct UClass* EncodingSettingsClass; // 0x50 (8)
	struct USoundfieldEncodingSettingsBase EncodingSettings; // 0x58 (8)
	struct TArray<struct USoundfieldEffectBase> SoundfieldEffectChain; // 0x60 (16)
};

// Class Engine.SpectatorPawnMovement
class USpectatorPawnMovement : public UFloatingPawnMovement {

public:

	char bIgnoreTimeDilation : 1; // 0x150 (1)
};

// Class Engine.SphereReflectionCapture
class ASphereReflectionCapture : public AReflectionCapture {

public:

	struct UDrawSphereComponent DrawCaptureRadius; // 0x228 (8)
};

// Class Engine.SphereReflectionCaptureComponent
class USphereReflectionCaptureComponent : public UReflectionCaptureComponent {

public:

	float InfluenceRadius; // 0x268 (4)
	float CaptureDistanceScale; // 0x26C (4)
	struct UDrawSphereComponent PreviewInfluenceRadius; // 0x270 (8)
};

// Class Engine.SplineMeshActor
class ASplineMeshActor : public UActor {

public:

	struct USplineMeshComponent SplineMeshComponent; // 0x220 (8)
};

// Class Engine.SplineMeshComponent
class USplineMeshComponent : public UStaticMeshComponent {

public:

	struct FSplineMeshParams SplineParams; // 0x4A0 (88)
	struct FVector SplineUpDir; // 0x4F8 (12)
	float SplineBoundaryMin; // 0x504 (4)
	struct FGuid CachedMeshBodySetupGuid; // 0x508 (16)
	struct UBodySetup BodySetup; // 0x518 (8)
	float SplineBoundaryMax; // 0x520 (4)
	char bAllowSplineEditingPerInstance : 1; // 0x524 (1)
	char bSmoothInterpRollScale : 1; // 0x524 (1)
	char bMeshDirty : 1; // 0x524 (1)
	char pad_524_3 : 5; // 0x524 (1)
	enum class ESplineMeshAxis ForwardAxis; // 0x525 (1)
	float VirtualTextureMainPassMaxDrawDistance; // 0x528 (4)

	void UpdateMesh(); // Function Engine.SplineMeshComponent.UpdateMesh(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33BC8C0>
	void SetStartTangent(struct FVector StartTangent, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartTangent(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33BC7E0>
	void SetStartScale(struct FVector2D StartScale, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartScale(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33BC720>
	void SetStartRoll(float StartRoll, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartRoll(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33BC650>
	void SetStartPosition(struct FVector StartPos, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartPosition(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33BC570>
	void SetStartOffset(struct FVector2D StartOffset, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartOffset(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33BC4B0>
	void SetStartAndEnd(struct FVector StartPos, struct FVector StartTangent, struct FVector EndPos, struct FVector EndTangent, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartAndEnd(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33BC2F0>
	void SetSplineUpDir(struct FVector& InSplineUpDir, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetSplineUpDir(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33BC210>
	void SetForwardAxis(enum class ESplineMeshAxis InForwardAxis, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetForwardAxis(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33BBF40>
	void SetEndTangent(struct FVector EndTangent, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndTangent(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33BBE60>
	void SetEndScale(struct FVector2D EndScale, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndScale(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33BBDA0>
	void SetEndRoll(float EndRoll, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndRoll(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33BBCD0>
	void SetEndPosition(struct FVector EndPos, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndPosition(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33BBBF0>
	void SetEndOffset(struct FVector2D EndOffset, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndOffset(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33BBB30>
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetBoundaryMin(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33BBA60>
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetBoundaryMax(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33BB990>
	struct FVector GetStartTangent(); // Function Engine.SplineMeshComponent.GetStartTangent(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33BB860>
	struct FVector2D GetStartScale(); // Function Engine.SplineMeshComponent.GetStartScale(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33BB820>
	float GetStartRoll(); // Function Engine.SplineMeshComponent.GetStartRoll(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33BB7F0>
	struct FVector GetStartPosition(); // Function Engine.SplineMeshComponent.GetStartPosition(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33BB7B0>
	struct FVector2D GetStartOffset(); // Function Engine.SplineMeshComponent.GetStartOffset(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33BB770>
	struct FVector GetSplineUpDir(); // Function Engine.SplineMeshComponent.GetSplineUpDir(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33BB730>
	enum class ESplineMeshAxis GetForwardAxis(); // Function Engine.SplineMeshComponent.GetForwardAxis(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33BB380>
	struct FVector GetEndTangent(); // Function Engine.SplineMeshComponent.GetEndTangent(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33BB340>
	struct FVector2D GetEndScale(); // Function Engine.SplineMeshComponent.GetEndScale(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33BB300>
	float GetEndRoll(); // Function Engine.SplineMeshComponent.GetEndRoll(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33BB2D0>
	struct FVector GetEndPosition(); // Function Engine.SplineMeshComponent.GetEndPosition(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33BB290>
	struct FVector2D GetEndOffset(); // Function Engine.SplineMeshComponent.GetEndOffset(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33BB250>
	float GetBoundaryMin(); // Function Engine.SplineMeshComponent.GetBoundaryMin(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33BB180>
	float GetBoundaryMax(); // Function Engine.SplineMeshComponent.GetBoundaryMax(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33BB150>
};

// Class Engine.SpotLightComponent
class USpotLightComponent : public UPointLightComponent {

public:

	float InnerConeAngle; // 0x350 (4)
	float OuterConeAngle; // 0x354 (4)
	float LightShaftConeAngle; // 0x358 (4)

	void SetOuterConeAngle(float NewOuterConeAngle); // Function Engine.SpotLightComponent.SetOuterConeAngle(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33BC190>
	void SetInnerConeAngle(float NewInnerConeAngle); // Function Engine.SpotLightComponent.SetInnerConeAngle(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33BC090>
};

// Class Engine.StaticMesh
class UStaticMesh : public UStreamableRenderAsset {

public:

	struct FPerPlatformInt MinLOD; // 0x60 (4)
	float LpvBiasMultiplier; // 0x64 (4)
	struct TArray<struct FStaticMaterial> StaticMaterials; // 0x68 (16)
	float LightmapUVDensity; // 0x78 (4)
	int32_t LightMapResolution; // 0x7C (4)
	int32_t LightMapCoordinateIndex; // 0x80 (4)
	float DistanceFieldSelfShadowBias; // 0x84 (4)
	struct UBodySetup BodySetup; // 0x88 (8)
	int32_t LODForCollision; // 0x90 (4)
	char bGenerateMeshDistanceField : 1; // 0x94 (1)
	char pad_74_1 : 7; // 0x74 (1)
	char pad_75_0 : 1; // 0x75 (1)
	char bStripComplexCollisionForConsole : 1; // 0x94 (1)
	char pad_75_2 : 6; // 0x75 (1)
	char pad_76_0 : 2; // 0x76 (1)
	char bHasNavigationData : 1; // 0x94 (1)
	char pad_76_3 : 5; // 0x76 (1)
	char pad_77_0 : 3; // 0x77 (1)
	char bSupportUniformlyDistributedSampling : 1; // 0x94 (1)
	char pad_77_4 : 4; // 0x77 (1)
	char pad_78_0 : 4; // 0x78 (1)
	char bSupportPhysicalMaterialMasks : 1; // 0x94 (1)
	char pad_78_5 : 3; // 0x78 (1)
	char pad_79_0 : 5; // 0x79 (1)
	char bIsBuiltAtRuntime : 1; // 0x94 (1)
	char pad_79_6 : 2; // 0x79 (1)
	char pad_7A_0 : 7; // 0x7A (1)
	char bAllowCPUAccess : 1; // 0x94 (1)
	char bSupportGpuUniformlyDistributedSampling : 1; // 0x95 (1)
	char pad_7B_1 : 7; // 0x7B (1)
	struct TArray<struct UStaticMeshSocket> Sockets; // 0xB8 (16)
	struct FVector PositiveBoundsExtension; // 0xD8 (12)
	struct FVector NegativeBoundsExtension; // 0xE4 (12)
	struct FBoxSphereBounds ExtendedBounds; // 0xF0 (28)
	int32_t ElementToIgnoreForTexFactor; // 0x10C (4)
	struct TArray<struct UAssetUserData> AssetUserData; // 0x110 (16)
	struct Object EditableMesh; // 0x128 (8)
	struct UNavCollisionBase NavCollision; // 0x130 (8)

	void RemoveSocket(struct UStaticMeshSocket Socket); // Function Engine.StaticMesh.RemoveSocket(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33BB910>
	int32_t GetNumSections(int32_t InLOD); // Function Engine.StaticMesh.GetNumSections(Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33BB6A0>
	int32_t GetNumLODs(); // Function Engine.StaticMesh.GetNumLODs(Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33BB670>
	void GetMinimumLODForPlatforms(struct TMap<struct FName, int32_t>& PlatformMinimumLODs); // Function Engine.StaticMesh.GetMinimumLODForPlatforms(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33BB550>
	int32_t GetMinimumLODForPlatform(struct FName& PlatformName); // Function Engine.StaticMesh.GetMinimumLODForPlatform(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33BB4D0>
	int32_t GetMaterialIndex(struct FName MaterialSlotName); // Function Engine.StaticMesh.GetMaterialIndex(Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33BB440>
	struct UMaterialInterface GetMaterial(int32_t MaterialIndex); // Function Engine.StaticMesh.GetMaterial(Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33BB3B0>
	struct FBoxSphereBounds GetBounds(); // Function Engine.StaticMesh.GetBounds(Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33BB200>
	struct FBox GetBoundingBox(); // Function Engine.StaticMesh.GetBoundingBox(Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33BB1B0>
	struct UStaticMeshSocket FindSocket(struct FName InSocketName); // Function Engine.StaticMesh.FindSocket(Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33BB0C0>
	struct UStaticMeshDescription CreateStaticMeshDescription(struct Object Outer); // Function Engine.StaticMesh.CreateStaticMeshDescription(Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33BB040>
	void BuildFromStaticMeshDescriptions(struct TArray<struct UStaticMeshDescription>& StaticMeshDescriptions, bool bBuildSimpleCollision); // Function Engine.StaticMesh.BuildFromStaticMeshDescriptions(Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33BAF40>
	void AddSocket(struct UStaticMeshSocket Socket); // Function Engine.StaticMesh.AddSocket(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33BAEC0>
	struct FName AddMaterial(struct UMaterialInterface Material); // Function Engine.StaticMesh.AddMaterial(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33BAE30>
};

// Class Engine.StaticMeshSocket
class UStaticMeshSocket : public Object {

public:

	struct FName SocketName; // 0x28 (8)
	struct FVector RelativeLocation; // 0x30 (12)
	struct FRotator RelativeRotation; // 0x3C (12)
	struct FVector RelativeScale; // 0x48 (12)
	struct FString Tag; // 0x58 (16)
};

// Class Engine.StereoLayerComponent
class UStereoLayerComponent : public USceneComponent {

public:

	char bLiveTexture : 1; // 0x1F0 (1)
	char bSupportsDepth : 1; // 0x1F0 (1)
	char bNoAlphaChannel : 1; // 0x1F0 (1)
	char pad_1F0_3 : 5; // 0x1F0 (1)
	struct UTexture Texture; // 0x1F8 (8)
	struct UTexture LeftTexture; // 0x200 (8)
	char bQuadPreserveTextureRatio : 1; // 0x208 (1)
	char pad_201_1 : 7; // 0x201 (1)
	struct FVector2D QuadSize; // 0x20C (8)
	struct FBox2D UVRect; // 0x214 (20)
	float CylinderRadius; // 0x228 (4)
	float CylinderOverlayArc; // 0x22C (4)
	int32_t CylinderHeight; // 0x230 (4)
	struct FEquirectProps EquirectProps; // 0x234 (72)
	enum class EStereoLayerType StereoLayerType; // 0x27C (1)
	enum class EStereoLayerShape StereoLayerShape; // 0x27D (1)
	struct UStereoLayerShape Shape; // 0x280 (8)
	int32_t Priority; // 0x288 (4)

	void SetUVRect(struct FBox2D InUVRect); // Function Engine.StereoLayerComponent.SetUVRect(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C06C0>
	void SetTexture(struct UTexture InTexture); // Function Engine.StereoLayerComponent.SetTexture(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C0640>
	void SetQuadSize(struct FVector2D InQuadSize); // Function Engine.StereoLayerComponent.SetQuadSize(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C0310>
	void SetPriority(int32_t InPriority); // Function Engine.StereoLayerComponent.SetPriority(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C0290>
	void SetLeftTexture(struct UTexture InTexture); // Function Engine.StereoLayerComponent.SetLeftTexture(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C0110>
	void SetEquirectProps(struct FEquirectProps InScaleBiases); // Function Engine.StereoLayerComponent.SetEquirectProps(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33BFE10>
	void MarkTextureForUpdate(); // Function Engine.StereoLayerComponent.MarkTextureForUpdate(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33BFCF0>
	struct FBox2D GetUVRect(); // Function Engine.StereoLayerComponent.GetUVRect(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33BFCC0>
	struct UTexture GetTexture(); // Function Engine.StereoLayerComponent.GetTexture(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33BFCA0>
	struct FVector2D GetQuadSize(); // Function Engine.StereoLayerComponent.GetQuadSize(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33BFC70>
	int32_t GetPriority(); // Function Engine.StereoLayerComponent.GetPriority(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33BFC50>
	struct UTexture GetLeftTexture(); // Function Engine.StereoLayerComponent.GetLeftTexture(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33BFB50>
};

// Class Engine.StereoLayerShapeCylinder
class UStereoLayerShapeCylinder : public UStereoLayerShape {

public:

	float Radius; // 0x28 (4)
	float OverlayArc; // 0x2C (4)
	int32_t Height; // 0x30 (4)

	void SetRadius(float InRadius); // Function Engine.StereoLayerShapeCylinder.SetRadius(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C0390>
	void SetOverlayArc(float InOverlayArc); // Function Engine.StereoLayerShapeCylinder.SetOverlayArc(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C0210>
	void SetHeight(int32_t InHeight); // Function Engine.StereoLayerShapeCylinder.SetHeight(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C0090>
};

// Class Engine.StereoLayerShapeEquirect
class UStereoLayerShapeEquirect : public UStereoLayerShape {

public:

	struct FBox2D LeftUVRect; // 0x28 (20)
	struct FBox2D RightUVRect; // 0x3C (20)
	struct FVector2D LeftScale; // 0x50 (8)
	struct FVector2D RightScale; // 0x58 (8)
	struct FVector2D LeftBias; // 0x60 (8)
	struct FVector2D RightBias; // 0x68 (8)

	void SetEquirectProps(struct FEquirectProps InScaleBiases); // Function Engine.StereoLayerShapeEquirect.SetEquirectProps(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33BFF10>
};

// Class Engine.SubsurfaceProfile
class USubsurfaceProfile : public Object {

public:

	struct FSubsurfaceProfileStruct Settings; // 0x28 (140)
};

// Class Engine.SubUVAnimation
class USubUVAnimation : public Object {

public:

	struct UTexture2D SubUVTexture; // 0x28 (8)
	int32_t SubImages_Horizontal; // 0x30 (4)
	int32_t SubImages_Vertical; // 0x34 (4)
	enum class ESubUVBoundingVertexCount BoundingMode; // 0x38 (1)
	enum class EOpacitySourceMode OpacitySourceMode; // 0x39 (1)
	float AlphaThreshold; // 0x3C (4)
};

// Class Engine.TimecodeProvider
class UTimecodeProvider : public Object {

public:

	float FrameDelay; // 0x28 (4)

	struct FTimecode GetTimecode(); // Function Engine.TimecodeProvider.GetTimecode(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33C6470>
	enum class ETimecodeProviderSynchronizationState GetSynchronizationState(); // Function Engine.TimecodeProvider.GetSynchronizationState(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33C6440>
	struct FQualifiedFrameTime GetQualifiedFrameTime(); // Function Engine.TimecodeProvider.GetQualifiedFrameTime(Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33C6400>
	struct FFrameRate GetFrameRate(); // Function Engine.TimecodeProvider.GetFrameRate(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33C6330>
	struct FTimecode GetDelayedTimecode(); // Function Engine.TimecodeProvider.GetDelayedTimecode(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33C62F0>
	struct FQualifiedFrameTime GetDelayedQualifiedFrameTime(); // Function Engine.TimecodeProvider.GetDelayedQualifiedFrameTime(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33C62B0>
};

// Class Engine.SystemTimeTimecodeProvider
class USystemTimeTimecodeProvider : public UTimecodeProvider {

public:

	struct FFrameRate FrameRate; // 0x30 (8)
	bool bGenerateFullFrame; // 0x38 (1)
	bool bUseHighPerformanceClock; // 0x39 (1)
};

// Class Engine.TextPropertyTestObject
class UTextPropertyTestObject : public Object {

public:

	struct FText DefaultedText; // 0x28 (24)
	struct FText UndefaultedText; // 0x40 (24)
	struct FText TransientText; // 0x58 (24)
};

// Class Engine.TextRenderActor
class ATextRenderActor : public UActor {

public:

	struct UTextRenderComponent TextRender; // 0x220 (8)
};

// Class Engine.TextRenderComponent
class UTextRenderComponent : public UPrimitiveComponent {

public:

	struct FText Text; // 0x408 (24)
	struct UMaterialInterface TextMaterial; // 0x420 (8)
	struct UFont Font; // 0x428 (8)
	enum class EHorizTextAligment HorizontalAlignment; // 0x430 (1)
	enum class EVerticalTextAligment VerticalAlignment; // 0x431 (1)
	struct FColor TextRenderColor; // 0x434 (4)
	float XScale; // 0x438 (4)
	float YScale; // 0x43C (4)
	float WorldSize; // 0x440 (4)
	float InvDefaultSize; // 0x444 (4)
	float HorizSpacingAdjust; // 0x448 (4)
	float VertSpacingAdjust; // 0x44C (4)
	char bAlwaysRenderAsText : 1; // 0x450 (1)

	void SetYScale(float Value); // Function Engine.TextRenderComponent.SetYScale(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0xF23500>
	void SetXScale(float Value); // Function Engine.TextRenderComponent.SetXScale(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C3610>
	void SetWorldSize(float Value); // Function Engine.TextRenderComponent.SetWorldSize(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C3590>
	void SetVertSpacingAdjust(float Value); // Function Engine.TextRenderComponent.SetVertSpacingAdjust(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C3490>
	void SetVerticalAlignment(enum class EVerticalTextAligment Value); // Function Engine.TextRenderComponent.SetVerticalAlignment(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C3510>
	void SetTextRenderColor(struct FColor Value); // Function Engine.TextRenderComponent.SetTextRenderColor(Final|Native|Public|HasDefaults|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C3420>
	void SetTextMaterial(struct UMaterialInterface Material); // Function Engine.TextRenderComponent.SetTextMaterial(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C33A0>
	void SetText(struct FString Value); // Function Engine.TextRenderComponent.SetText(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C3300>
	void SetHorizSpacingAdjust(float Value); // Function Engine.TextRenderComponent.SetHorizSpacingAdjust(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C3200>
	void SetHorizontalAlignment(enum class EHorizTextAligment Value); // Function Engine.TextRenderComponent.SetHorizontalAlignment(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C3280>
	void SetFont(struct UFont Value); // Function Engine.TextRenderComponent.SetFont(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C3180>
	void K2_SetText(struct FText& Value); // Function Engine.TextRenderComponent.K2_SetText(Final|Native|Public|HasOutParms|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C30B0>
	struct FVector GetTextWorldSize(); // Function Engine.TextRenderComponent.GetTextWorldSize(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33C2FB0>
	struct FVector GetTextLocalSize(); // Function Engine.TextRenderComponent.GetTextLocalSize(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33C2F70>
};

// Class Engine.TextureLightProfile
class UTextureLightProfile : public UTexture2D {

public:

	float Brightness; // 0xE8 (4)
	float TextureMultiplier; // 0xEC (4)
};

// Class Engine.TextureRenderTargetCube
class UTextureRenderTargetCube : public UTextureRenderTarget {

public:

	int32_t SizeX; // 0xC0 (4)
	struct FLinearColor ClearColor; // 0xC4 (16)
	enum class EPixelFormat OverrideFormat; // 0xD4 (1)
	char bHDR : 1; // 0xD5 (1)
	char bForceLinearGamma : 1; // 0xD5 (1)
};

// Class Engine.TimelineComponent
class UTimelineComponent : public UActorComponent {

public:

	struct FTimeline TheTimeline; // 0xB0 (152)
	char bIgnoreTimeDilation : 1; // 0x148 (1)

	void Stop(); // Function Engine.TimelineComponent.Stop(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C6C80>
	void SetVectorCurve(struct UCurveVector NewVectorCurve, struct FName VectorTrackName); // Function Engine.TimelineComponent.SetVectorCurve(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C6BC0>
	void SetTimelineLengthMode(enum class ETimelineLengthMode NewLengthMode); // Function Engine.TimelineComponent.SetTimelineLengthMode(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C6B40>
	void SetTimelineLength(float NewLength); // Function Engine.TimelineComponent.SetTimelineLength(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C6AC0>
	void SetPlayRate(float NewRate); // Function Engine.TimelineComponent.SetPlayRate(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C6930>
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate); // Function Engine.TimelineComponent.SetPlaybackPosition(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C69B0>
	void SetNewTime(float NewTime); // Function Engine.TimelineComponent.SetNewTime(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C68B0>
	void SetLooping(bool bNewLooping); // Function Engine.TimelineComponent.SetLooping(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C6820>
	void SetLinearColorCurve(struct UCurveLinearColor NewLinearColorCurve, struct FName LinearColorTrackName); // Function Engine.TimelineComponent.SetLinearColorCurve(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C6760>
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation); // Function Engine.TimelineComponent.SetIgnoreTimeDilation(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C66D0>
	void SetFloatCurve(struct UCurveFloat NewFloatCurve, struct FName FloatTrackName); // Function Engine.TimelineComponent.SetFloatCurve(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C6610>
	void ReverseFromEnd(); // Function Engine.TimelineComponent.ReverseFromEnd(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C65F0>
	void Reverse(); // Function Engine.TimelineComponent.Reverse(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C65D0>
	void PlayFromStart(); // Function Engine.TimelineComponent.PlayFromStart(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C65B0>
	void Play(); // Function Engine.TimelineComponent.Play(Final|RequiredAPI|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33C6590>
	void OnRep_Timeline(); // Function Engine.TimelineComponent.OnRep_Timeline(Final|Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x33C6570>
	bool IsReversing(); // Function Engine.TimelineComponent.IsReversing(Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33C6540>
	bool IsPlaying(); // Function Engine.TimelineComponent.IsPlaying(Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33C6510>
	bool IsLooping(); // Function Engine.TimelineComponent.IsLooping(Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33C64E0>
	float GetTimelineLength(); // Function Engine.TimelineComponent.GetTimelineLength(Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33C64B0>
	float GetPlayRate(); // Function Engine.TimelineComponent.GetPlayRate(Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33C63A0>
	float GetPlaybackPosition(); // Function Engine.TimelineComponent.GetPlaybackPosition(Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33C63D0>
	bool GetIgnoreTimeDilation(); // Function Engine.TimelineComponent.GetIgnoreTimeDilation(Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // <VeiledExperts-Win64-Shipping.exe+0x33C6370>
};

// Class Engine.TimelineTemplate
class UTimelineTemplate : public Object {

public:

	float TimelineLength; // 0x28 (4)
	enum class ETimelineLengthMode LengthMode; // 0x2C (1)
	char bAutoPlay : 1; // 0x2D (1)
	char bLoop : 1; // 0x2D (1)
	char bReplicated : 1; // 0x2D (1)
	char bIgnoreTimeDilation : 1; // 0x2D (1)
	char pad_2D_4 : 4; // 0x2D (1)
	struct TArray<struct FTTEventTrack> EventTracks; // 0x30 (16)
	struct TArray<struct FTTFloatTrack> FloatTracks; // 0x40 (16)
	struct TArray<struct FTTVectorTrack> VectorTracks; // 0x50 (16)
	struct TArray<struct FTTLinearColorTrack> LinearColorTracks; // 0x60 (16)
	struct TArray<struct FBPVariableMetaDataEntry> MetaDataArray; // 0x70 (16)
	struct FGuid TimelineGuid; // 0x80 (16)
	struct FName VariableName; // 0x90 (8)
	struct FName DirectionPropertyName; // 0x98 (8)
	struct FName UpdateFunctionName; // 0xA0 (8)
	struct FName FinishedFunctionName; // 0xA8 (8)
};

// Class Engine.TireType
class UTireType : public UDataAsset {

public:

	float FrictionScale; // 0x30 (4)
};

// Class Engine.TouchInterface
class UTouchInterface : public Object {

public:

	struct TArray<struct FTouchInputControl> Controls; // 0x28 (16)
	float ActiveOpacity; // 0x38 (4)
	float InactiveOpacity; // 0x3C (4)
	float TimeUntilDeactive; // 0x40 (4)
	float TimeUntilReset; // 0x44 (4)
	float ActivationDelay; // 0x48 (4)
	bool bPreventRecenter; // 0x4C (1)
	float StartupDelay; // 0x50 (4)
};

// Class Engine.UserDefinedEnum
class UUserDefinedEnum : public UEnum {

public:

	struct TMap<struct FName, struct FText> DisplayNameMap; // 0x60 (80)
};

// Class Engine.UserDefinedStruct
class UUserDefinedStruct : public UScriptStruct {

public:

	enum class EUserDefinedStructureStatus Status; // 0xC0 (1)
	struct FGuid Guid; // 0xC4 (16)
};

// Class Engine.UserInterfaceSettings
class UUserInterfaceSettings : public UDeveloperSettings {

public:

	enum class ERenderFocusRule RenderFocusRule; // 0x38 (1)
	struct TMap<enum class EMouseCursor, struct FHardwareCursorReference> HardwareCursors; // 0x40 (80)
	struct TMap<enum class EMouseCursor, struct FSoftClassPath> SoftwareCursors; // 0x90 (80)
	struct FSoftClassPath DefaultCursor; // 0xE0 (24)
	struct FSoftClassPath TextEditBeamCursor; // 0xF8 (24)
	struct FSoftClassPath CrosshairsCursor; // 0x110 (24)
	struct FSoftClassPath HandCursor; // 0x128 (24)
	struct FSoftClassPath GrabHandCursor; // 0x140 (24)
	struct FSoftClassPath GrabHandClosedCursor; // 0x158 (24)
	struct FSoftClassPath SlashedCircleCursor; // 0x170 (24)
	float ApplicationScale; // 0x188 (4)
	enum class EUIScalingRule UIScaleRule; // 0x18C (1)
	struct FSoftClassPath CustomScalingRuleClass; // 0x190 (24)
	struct FRuntimeFloatCurve UIScaleCurve; // 0x1A8 (136)
	bool bAllowHighDPIInGameMode; // 0x230 (1)
	bool bLoadWidgetsOnDedicatedServer; // 0x231 (1)
	struct TArray<struct Object> CursorClasses; // 0x238 (16)
	struct UClass* CustomScalingRuleClassInstance; // 0x248 (8)
	struct UDPICustomScalingRule CustomScalingRule; // 0x250 (8)
};

// Class Engine.VectorField
class UVectorField : public Object {

public:

	struct FBox Bounds; // 0x28 (28)
	float Intensity; // 0x44 (4)
};

// Class Engine.VectorFieldAnimated
class UVectorFieldAnimated : public UVectorField {

public:

	struct UTexture2D Texture; // 0x48 (8)
	enum class EVectorFieldConstructionOp ConstructionOp; // 0x50 (1)
	int32_t VolumeSizeX; // 0x54 (4)
	int32_t VolumeSizeY; // 0x58 (4)
	int32_t VolumeSizeZ; // 0x5C (4)
	int32_t SubImagesX; // 0x60 (4)
	int32_t SubImagesY; // 0x64 (4)
	int32_t FrameCount; // 0x68 (4)
	float FramesPerSecond; // 0x6C (4)
	char bLoop : 1; // 0x70 (1)
	char pad_6D_1 : 7; // 0x6D (1)
	struct UVectorFieldStatic NoiseField; // 0x78 (8)
	float NoiseScale; // 0x80 (4)
	float NoiseMax; // 0x84 (4)
};

// Class Engine.VectorFieldComponent
class UVectorFieldComponent : public UPrimitiveComponent {

public:

	struct UVectorField VectorField; // 0x408 (8)
	float Intensity; // 0x410 (4)
	float Tightness; // 0x414 (4)
	char bPreviewVectorField : 1; // 0x418 (1)

	void SetIntensity(float NewIntensity); // Function Engine.VectorFieldComponent.SetIntensity(Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33CAB70>
};

// Class Engine.VectorFieldStatic
class UVectorFieldStatic : public UVectorField {

public:

	int32_t SizeX; // 0x48 (4)
	int32_t SizeY; // 0x4C (4)
	int32_t SizeZ; // 0x50 (4)
	bool bAllowCPUAccess; // 0x54 (1)
	struct TArray<struct FVector4> CPUData; // 0x80 (16)
};

// Class Engine.VectorFieldVolume
class AVectorFieldVolume : public UActor {

public:

	struct UVectorFieldComponent VectorFieldComponent; // 0x220 (8)
};

// Class Engine.LightMapVirtualTexture2D
class ULightMapVirtualTexture2D : public UTexture2D {

public:

	struct TArray<int8_t> TypeToLayer; // 0xE8 (16)
};

// Class Engine.VirtualTexturePoolConfig
class UVirtualTexturePoolConfig : public Object {

public:

	int32_t DefaultSizeInMegabyte; // 0x28 (4)
	struct TArray<struct FVirtualTextureSpacePoolConfig> Pools; // 0x30 (16)
};

// Class Engine.VOIPTalker
class UVOIPTalker : public UActorComponent {

public:

	struct FVoiceSettings Settings; // 0xB0 (24)

	void RegisterWithPlayerState(struct APlayerState OwningState); // Function Engine.VOIPTalker.RegisterWithPlayerState(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33CAAF0>
	float GetVoiceLevel(); // Function Engine.VOIPTalker.GetVoiceLevel(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33CA1E0>
	struct UVOIPTalker CreateTalkerForPlayer(struct APlayerState OwningState); // Function Engine.VOIPTalker.CreateTalkerForPlayer(Final|Native|Static|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33CA050>
	void BPOnTalkingEnd(); // Function Engine.VOIPTalker.BPOnTalkingEnd(Native|Event|Protected|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x33CA030>
	void BPOnTalkingBegin(struct UAudioComponent AudioComponent); // Function Engine.VOIPTalker.BPOnTalkingBegin(Native|Event|Protected|BlueprintEvent) // <VeiledExperts-Win64-Shipping.exe+0x33C9FA0>
};

// Class Engine.VolumetricLightmapDensityVolume
class AVolumetricLightmapDensityVolume : public AVolume {

public:

	struct FInt32Interval AllowedMipLevelRange; // 0x258 (8)
};

// Class Engine.WindDirectionalSource
class AWindDirectionalSource : public AInfo {

public:

	struct UWindDirectionalSourceComponent Component; // 0x220 (8)
};

// Class Engine.WindDirectionalSourceComponent
class UWindDirectionalSourceComponent : public USceneComponent {

public:

	float Strength; // 0x1F0 (4)
	float Speed; // 0x1F4 (4)
	float MinGustAmount; // 0x1F8 (4)
	float MaxGustAmount; // 0x1FC (4)
	float Radius; // 0x200 (4)
	char bPointWind : 1; // 0x204 (1)

	void SetWindType(enum class EWindSourceType InNewType); // Function Engine.WindDirectionalSourceComponent.SetWindType(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33CAEE0>
	void SetStrength(float InNewStrength); // Function Engine.WindDirectionalSourceComponent.SetStrength(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33CAE60>
	void SetSpeed(float InNewSpeed); // Function Engine.WindDirectionalSourceComponent.SetSpeed(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33CADE0>
	void SetRadius(float InNewRadius); // Function Engine.WindDirectionalSourceComponent.SetRadius(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33CAD60>
	void SetMinimumGustAmount(float InNewMinGust); // Function Engine.WindDirectionalSourceComponent.SetMinimumGustAmount(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33CACE0>
	void SetMaximumGustAmount(float InNewMaxGust); // Function Engine.WindDirectionalSourceComponent.SetMaximumGustAmount(Final|Native|Public|BlueprintCallable) // <VeiledExperts-Win64-Shipping.exe+0x33CABF0>
};

// Class Engine.WorldComposition
class UWorldComposition : public Object {

public:

	struct TArray<struct ULevelStreaming> TilesStreaming; // 0x48 (16)
	double TilesStreamingTimeThreshold; // 0x58 (8)
	bool bLoadAllTilesDuringCinematic; // 0x60 (1)
	bool bRebaseOriginIn3DSpace; // 0x61 (1)
	float RebaseOriginDistance; // 0x64 (4)
};

// Class Engine.HierarchicalLODSetup
class UHierarchicalLODSetup : public Object {

public:

	struct TArray<struct FHierarchicalSimplification> HierarchicalLODSetup; // 0x28 (16)
	struct TSoftObjectPtr<UMaterialInterface> OverrideBaseMaterial; // 0x38 (40)
};

// Class Engine.WorldSettings
class AWorldSettings : public AInfo {

public:

	int32_t VisibilityCellSize; // 0x228 (4)
	enum class EVisibilityAggressiveness VisibilityAggressiveness; // 0x22C (1)
	char bPrecomputeVisibility : 1; // 0x22D (1)
	char pad_225_1 : 7; // 0x225 (1)
	char pad_226_0 : 1; // 0x226 (1)
	char bPlaceCellsOnlyAlongCameraTracks : 1; // 0x22D (1)
	char pad_226_2 : 6; // 0x226 (1)
	char pad_227_0 : 2; // 0x227 (1)
	char bEnableWorldBoundsChecks : 1; // 0x22D (1)
	char pad_227_3 : 5; // 0x227 (1)
	char pad_228_0 : 3; // 0x228 (1)
	char bEnableNavigationSystem : 1; // 0x22D (1)
	char pad_228_4 : 4; // 0x228 (1)
	char pad_229_0 : 4; // 0x229 (1)
	char bEnableAISystem : 1; // 0x22D (1)
	char pad_229_5 : 3; // 0x229 (1)
	char pad_22A_0 : 5; // 0x22A (1)
	char bEnableWorldComposition : 1; // 0x22D (1)
	char pad_22A_6 : 2; // 0x22A (1)
	char pad_22B_0 : 6; // 0x22B (1)
	char bUseClientSideLevelStreamingVolumes : 1; // 0x22D (1)
	char pad_22B_7 : 1; // 0x22B (1)
	char pad_22C_0 : 7; // 0x22C (1)
	char bEnableWorldOriginRebasing : 1; // 0x22D (1)
	char bWorldGravitySet : 1; // 0x22E (1)
	char pad_22D_1 : 7; // 0x22D (1)
	char pad_22E_0 : 1; // 0x22E (1)
	char bGlobalGravitySet : 1; // 0x22E (1)
	char bMinimizeBSPSections : 1; // 0x22E (1)
	char bForceNoPrecomputedLighting : 1; // 0x22E (1)
	char bHighPriorityLoading : 1; // 0x22E (1)
	char bHighPriorityLoadingLocal : 1; // 0x22E (1)
	char bOverrideDefaultBroadphaseSettings : 1; // 0x22E (1)
	char pad_22E_7 : 1; // 0x22E (1)
	struct UNavigationSystemConfig NavigationSystemConfig; // 0x230 (8)
	struct UNavigationSystemConfig NavigationSystemConfigOverride; // 0x238 (8)
	float WorldToMeters; // 0x240 (4)
	float KillZ; // 0x244 (4)
	struct UClass* KillZDamageType; // 0x248 (8)
	float WorldGravityZ; // 0x250 (4)
	float GlobalGravityZ; // 0x254 (4)
	struct UClass* DefaultPhysicsVolumeClass; // 0x258 (8)
	struct UClass* PhysicsCollisionHandlerClass; // 0x260 (8)
	struct UClass* DefaultGameMode; // 0x268 (8)
	struct UClass* GameNetworkManagerClass; // 0x270 (8)
	int32_t PackedLightAndShadowMapTextureSize; // 0x278 (4)
	struct FVector DefaultColorScale; // 0x27C (12)
	float DefaultMaxDistanceFieldOcclusionDistance; // 0x288 (4)
	float GlobalDistanceFieldViewDistance; // 0x28C (4)
	float DynamicIndirectShadowsSelfShadowingIntensity; // 0x290 (4)
	struct FReverbSettings DefaultReverbSettings; // 0x298 (32)
	struct FInteriorSettings DefaultAmbientZoneSettings; // 0x2B8 (36)
	float MonoCullingDistance; // 0x2DC (4)
	struct USoundMix DefaultBaseSoundMix; // 0x2E0 (8)
	float TimeDilation; // 0x2E8 (4)
	float MatineeTimeDilation; // 0x2EC (4)
	float DemoPlayTimeDilation; // 0x2F0 (4)
	float MinGlobalTimeDilation; // 0x2F4 (4)
	float MaxGlobalTimeDilation; // 0x2F8 (4)
	float MinUndilatedFrameTime; // 0x2FC (4)
	float MaxUndilatedFrameTime; // 0x300 (4)
	struct FBroadphaseSettings BroadphaseSettings; // 0x304 (64)
	struct APlayerState Pauser; // 0x348 (8)
	struct TArray<struct FNetViewer> ReplicationViewers; // 0x350 (16)
	struct TArray<struct UAssetUserData> AssetUserData; // 0x360 (16)
	struct APlayerState PauserPlayerState; // 0x370 (8)
	int32_t MaxNumberOfBookmarks; // 0x378 (4)
	struct UClass* DefaultBookmarkClass; // 0x380 (8)
	struct TArray<struct UBookmarkBase> BookmarkArray; // 0x388 (16)
	struct UClass* LastBookmarkClass; // 0x398 (8)

	void OnRep_WorldGravityZ(); // Function Engine.WorldSettings.OnRep_WorldGravityZ(Native|Public) // <VeiledExperts-Win64-Shipping.exe+0x32BE150>
};

// ScriptStruct Engine.DistributionLookupTable
struct FDistributionLookupTable {
	float TimeScale; // 0x0 (4)
	float TimeBias; // 0x4 (4)
	struct TArray<float> Values; // 0x8 (16)
	char Op; // 0x18 (1)
	char EntryCount; // 0x19 (1)
	char EntryStride; // 0x1A (1)
	char SubEntryStride; // 0x1B (1)
	char LockFlag; // 0x1C (1)
};

// ScriptStruct Engine.RawDistribution
struct FRawDistribution {
	struct FDistributionLookupTable Table; // 0x0 (32)
};

// ScriptStruct Engine.FloatDistribution
struct FFloatDistribution {
	struct FDistributionLookupTable Table; // 0x0 (32)
};

// ScriptStruct Engine.VectorDistribution
struct FVectorDistribution {
	struct FDistributionLookupTable Table; // 0x0 (32)
};

// ScriptStruct Engine.Vector4Distribution
struct FVector4Distribution {
	struct FDistributionLookupTable Table; // 0x0 (32)
};

// ScriptStruct Engine.FloatRK4SpringInterpolator
struct FFloatRK4SpringInterpolator {
	float StiffnessConstant; // 0x0 (4)
	float DampeningRatio; // 0x4 (4)
};

// ScriptStruct Engine.VectorRK4SpringInterpolator
struct FVectorRK4SpringInterpolator {
	float StiffnessConstant; // 0x0 (4)
	float DampeningRatio; // 0x4 (4)
};

// ScriptStruct Engine.FormatArgumentData
struct FFormatArgumentData {
	struct FString ArgumentName; // 0x0 (16)
	enum class EFormatArgumentType ArgumentValueType; // 0x10 (1)
	struct FText ArgumentValue; // 0x18 (24)
	int32_t ArgumentValueInt; // 0x30 (4)
	float ArgumentValueFloat; // 0x34 (4)
	enum class ETextGender ArgumentValueGender; // 0x38 (1)
};

// ScriptStruct Engine.ExpressionInput
struct FExpressionInput {
	int32_t OutputIndex; // 0x0 (4)
	struct FName ExpressionName; // 0x4 (8)
};

// ScriptStruct Engine.MaterialAttributesInput
struct FMaterialAttributesInput : FExpressionInput {
	int32_t PropertyConnectedBitmask; // 0xC (4)
};

// ScriptStruct Engine.ExpressionOutput
struct FExpressionOutput {
	struct FName OutputName; // 0x0 (8)
};

// ScriptStruct Engine.MaterialInput
struct FMaterialInput {
	int32_t OutputIndex; // 0x0 (4)
	struct FName ExpressionName; // 0x4 (8)
};

// ScriptStruct Engine.HitResult
struct FHitResult {
	char bBlockingHit : 1; // 0x0 (1)
	char bStartPenetrating : 1; // 0x0 (1)
	char pad_0_2 : 6; // 0x0 (1)
	int32_t FaceIndex; // 0x4 (4)
	float Time; // 0x8 (4)
	float Distance; // 0xC (4)
	struct FVector_NetQuantize Location; // 0x10 (12)
	struct FVector_NetQuantize ImpactPoint; // 0x1C (12)
	struct FVector_NetQuantizeNormal Normal; // 0x28 (12)
	struct FVector_NetQuantizeNormal ImpactNormal; // 0x34 (12)
	struct FVector_NetQuantize TraceStart; // 0x40 (12)
	struct FVector_NetQuantize TraceEnd; // 0x4C (12)
	float PenetrationDepth; // 0x58 (4)
	int32_t Item; // 0x5C (4)
	struct TWeakObjectPtr<struct UPhysicalMaterial> PhysMaterial; // 0x60 (8)
	struct TWeakObjectPtr<struct UActor> Actor; // 0x68 (8)
	struct TWeakObjectPtr<struct UPrimitiveComponent> Component; // 0x70 (8)
	struct FName BoneName; // 0x78 (8)
	struct FName MyBoneName; // 0x80 (8)
};

// ScriptStruct Engine.SimpleMemberReference
struct FSimpleMemberReference {
	struct Object MemberParent; // 0x0 (8)
	struct FName MemberName; // 0x8 (8)
	struct FGuid MemberGuid; // 0x10 (16)
};

// ScriptStruct Engine.TickFunction
struct FTickFunction {
	enum class ETickingGroup TickGroup; // 0x8 (1)
	enum class ETickingGroup EndTickGroup; // 0x9 (1)
	char bTickEvenWhenPaused : 1; // 0xA (1)
	char pad_2_1 : 7; // 0x2 (1)
	char pad_3_0 : 1; // 0x3 (1)
	char bCanEverTick : 1; // 0xA (1)
	char pad_3_2 : 6; // 0x3 (1)
	char pad_4_0 : 2; // 0x4 (1)
	char bStartWithTickEnabled : 1; // 0xA (1)
	char pad_4_3 : 5; // 0x4 (1)
	char pad_5_0 : 3; // 0x5 (1)
	char bAllowTickOnDedicatedServer : 1; // 0xA (1)
	char pad_5_4 : 4; // 0x5 (1)
	float TickInterval; // 0xC (4)
};

// ScriptStruct Engine.SubtitleCue
struct FSubtitleCue {
	struct FText Text; // 0x0 (24)
	float Time; // 0x18 (4)
};

// ScriptStruct Engine.InterpControlPoint
struct FInterpControlPoint {
	struct FVector PositionControlPoint; // 0x0 (12)
	bool bPositionIsRelative; // 0xC (1)
};

// ScriptStruct Engine.PlatformInterfaceDelegateResult
struct FPlatformInterfaceDelegateResult {
	bool bSuccessful; // 0x0 (1)
	struct FPlatformInterfaceData Data; // 0x8 (48)
};

// ScriptStruct Engine.PlatformInterfaceData
struct FPlatformInterfaceData {
	struct FName DataName; // 0x0 (8)
	enum class EPlatformInterfaceDataType Type; // 0x8 (1)
	int32_t IntValue; // 0xC (4)
	float FloatValue; // 0x10 (4)
	struct FString StringValue; // 0x18 (16)
	struct Object ObjectValue; // 0x28 (8)
};

// ScriptStruct Engine.DebugFloatHistory
struct FDebugFloatHistory {
	struct TArray<float> Samples; // 0x0 (16)
	float MaxSamples; // 0x10 (4)
	float MinValue; // 0x14 (4)
	float MaxValue; // 0x18 (4)
	bool bAutoAdjustMinMax; // 0x1C (1)
};

// ScriptStruct Engine.LatentActionInfo
struct FLatentActionInfo {
	int32_t Linkage; // 0x0 (4)
	int32_t UUID; // 0x4 (4)
	struct FName ExecutionFunction; // 0x8 (8)
	struct Object CallbackTarget; // 0x10 (8)
};

// ScriptStruct Engine.TimerHandle
struct FTimerHandle {
	uint64_t Handle; // 0x0 (8)
};

// ScriptStruct Engine.CollisionProfileName
struct FCollisionProfileName {
	struct FName Name; // 0x0 (8)
};

// ScriptStruct Engine.GenericStruct
struct FGenericStruct {
	int32_t Data; // 0x0 (4)
};

// ScriptStruct Engine.UserActivity
struct FUserActivity {
	struct FString ActionName; // 0x0 (16)
};

// ScriptStruct Engine.WalkableSlopeOverride
struct FWalkableSlopeOverride {
	enum class EWalkableSlopeBehavior WalkableSlopeBehavior; // 0x0 (1)
	float WalkableSlopeAngle; // 0x4 (4)
};

// ScriptStruct Engine.BodyInstance
struct FBodyInstance {
	enum class ECollisionChannel ObjectType; // 0x6 (1)
	enum class ECollisionEnabled CollisionEnabled; // 0x8 (1)
	enum class ESleepFamily SleepFamily; // 0xA (1)
	enum class EDOFMode DOFMode; // 0xB (1)
	char bUseCCD : 1; // 0xC (1)
	char pad_4_1 : 7; // 0x4 (1)
	char pad_5_0 : 1; // 0x5 (1)
	char bIgnoreAnalyticCollisions : 1; // 0xC (1)
	char pad_5_2 : 6; // 0x5 (1)
	char pad_6_0 : 2; // 0x6 (1)
	char bNotifyRigidBodyCollision : 1; // 0xC (1)
	char pad_6_3 : 5; // 0x6 (1)
	char pad_7_0 : 4; // 0x7 (1)
	char bSimulatePhysics : 1; // 0xC (1)
	char pad_7_5 : 3; // 0x7 (1)
	char pad_8_0 : 5; // 0x8 (1)
	char bOverrideMass : 1; // 0xC (1)
	char pad_8_6 : 2; // 0x8 (1)
	char pad_9_0 : 6; // 0x9 (1)
	char bEnableGravity : 1; // 0xC (1)
	char pad_9_7 : 1; // 0x9 (1)
	char pad_A_0 : 7; // 0xA (1)
	char bAutoWeld : 1; // 0xC (1)
	char bStartAwake : 1; // 0xD (1)
	char pad_B_1 : 7; // 0xB (1)
	char pad_C_0 : 1; // 0xC (1)
	char bGenerateWakeEvents : 1; // 0xD (1)
	char pad_C_2 : 6; // 0xC (1)
	char pad_D_0 : 2; // 0xD (1)
	char bUpdateMassWhenScaleChanges : 1; // 0xD (1)
	char bLockTranslation : 1; // 0xD (1)
	char bLockRotation : 1; // 0xD (1)
	char bLockXTranslation : 1; // 0xD (1)
	char bLockYTranslation : 1; // 0xD (1)
	char bLockZTranslation : 1; // 0xD (1)
	char bLockXRotation : 1; // 0xE (1)
	char bLockYRotation : 1; // 0xE (1)
	char bLockZRotation : 1; // 0xE (1)
	char bOverrideMaxAngularVelocity : 1; // 0xE (1)
	char pad_E_4 : 2; // 0xE (1)
	char bOverrideMaxDepenetrationVelocity : 1; // 0xE (1)
	char bOverrideWalkableSlopeOnInstance : 1; // 0xE (1)
	char bInterpolateWhenSubStepping : 1; // 0xF (1)
	char pad_F_1 : 7; // 0xF (1)
	struct FName CollisionProfileName; // 0x1C (8)
	char PositionSolverIterationCount; // 0x24 (1)
	char VelocitySolverIterationCount; // 0x25 (1)
	struct FCollisionResponse CollisionResponses; // 0x28 (48)
	float MaxDepenetrationVelocity; // 0x58 (4)
	float MassInKgOverride; // 0x5C (4)
	float LinearDamping; // 0x68 (4)
	float AngularDamping; // 0x6C (4)
	struct FVector CustomDOFPlaneNormal; // 0x70 (12)
	struct FVector COMNudge; // 0x7C (12)
	float MassScale; // 0x88 (4)
	struct FVector InertiaTensorScale; // 0x8C (12)
	struct FWalkableSlopeOverride WalkableSlopeOverride; // 0xA8 (16)
	struct UPhysicalMaterial PhysMaterialOverride; // 0xB8 (8)
	float MaxAngularVelocity; // 0xC0 (4)
	float CustomSleepThresholdMultiplier; // 0xC4 (4)
	float StabilizationThresholdMultiplier; // 0xC8 (4)
	float PhysicsBlendWeight; // 0xCC (4)
};

// ScriptStruct Engine.CollisionResponse
struct FCollisionResponse {
	struct FCollisionResponseContainer ResponseToChannels; // 0x0 (32)
	struct TArray<struct FResponseChannel> ResponseArray; // 0x20 (16)
};

// ScriptStruct Engine.ResponseChannel
struct FResponseChannel {
	struct FName Channel; // 0x0 (8)
	enum class ECollisionResponse Response; // 0x8 (1)
};

// ScriptStruct Engine.CollisionResponseContainer
struct FCollisionResponseContainer {
	enum class ECollisionResponse WorldStatic; // 0x0 (1)
	enum class ECollisionResponse WorldDynamic; // 0x1 (1)
	enum class ECollisionResponse Pawn; // 0x2 (1)
	enum class ECollisionResponse Visibility; // 0x3 (1)
	enum class ECollisionResponse Camera; // 0x4 (1)
	enum class ECollisionResponse PhysicsBody; // 0x5 (1)
	enum class ECollisionResponse Vehicle; // 0x6 (1)
	enum class ECollisionResponse Destructible; // 0x7 (1)
	enum class ECollisionResponse EngineTraceChannel1; // 0x8 (1)
	enum class ECollisionResponse EngineTraceChannel2; // 0x9 (1)
	enum class ECollisionResponse EngineTraceChannel3; // 0xA (1)
	enum class ECollisionResponse EngineTraceChannel4; // 0xB (1)
	enum class ECollisionResponse EngineTraceChannel5; // 0xC (1)
	enum class ECollisionResponse EngineTraceChannel6; // 0xD (1)
	enum class ECollisionResponse GameTraceChannel1; // 0xE (1)
	enum class ECollisionResponse GameTraceChannel2; // 0xF (1)
	enum class ECollisionResponse GameTraceChannel3; // 0x10 (1)
	enum class ECollisionResponse GameTraceChannel4; // 0x11 (1)
	enum class ECollisionResponse GameTraceChannel5; // 0x12 (1)
	enum class ECollisionResponse GameTraceChannel6; // 0x13 (1)
	enum class ECollisionResponse GameTraceChannel7; // 0x14 (1)
	enum class ECollisionResponse GameTraceChannel8; // 0x15 (1)
	enum class ECollisionResponse GameTraceChannel9; // 0x16 (1)
	enum class ECollisionResponse GameTraceChannel10; // 0x17 (1)
	enum class ECollisionResponse GameTraceChannel11; // 0x18 (1)
	enum class ECollisionResponse GameTraceChannel12; // 0x19 (1)
	enum class ECollisionResponse GameTraceChannel13; // 0x1A (1)
	enum class ECollisionResponse GameTraceChannel14; // 0x1B (1)
	enum class ECollisionResponse GameTraceChannel15; // 0x1C (1)
	enum class ECollisionResponse GameTraceChannel16; // 0x1D (1)
	enum class ECollisionResponse GameTraceChannel17; // 0x1E (1)
	enum class ECollisionResponse GameTraceChannel18; // 0x1F (1)
};

// ScriptStruct Engine.CustomPrimitiveData
struct FCustomPrimitiveData {
	struct TArray<float> Data; // 0x0 (16)
};

// ScriptStruct Engine.LightingChannels
struct FLightingChannels {
	char bChannel0 : 1; // 0x0 (1)
	char bChannel1 : 1; // 0x0 (1)
	char bChannel2 : 1; // 0x0 (1)
};

// ScriptStruct Engine.PoseLinkBase
struct FPoseLinkBase {
	int32_t LinkID; // 0x0 (4)
};

// ScriptStruct Engine.InputScaleBiasClamp
struct FInputScaleBiasClamp {
	bool bMapRange; // 0x0 (1)
	bool bClampResult; // 0x1 (1)
	bool bInterpResult; // 0x2 (1)
	struct FInputRange InRange; // 0x4 (8)
	struct FInputRange OutRange; // 0xC (8)
	float Scale; // 0x14 (4)
	float Bias; // 0x18 (4)
	float ClampMin; // 0x1C (4)
	float ClampMax; // 0x20 (4)
	float InterpSpeedIncreasing; // 0x24 (4)
	float InterpSpeedDecreasing; // 0x28 (4)
};

// ScriptStruct Engine.InputRange
struct FInputRange {
	float Min; // 0x0 (4)
	float Max; // 0x4 (4)
};

// ScriptStruct Engine.InputAlphaBoolBlend
struct FInputAlphaBoolBlend {
	float BlendInTime; // 0x0 (4)
	float BlendOutTime; // 0x4 (4)
	enum class EAlphaBlendOption BlendOption; // 0x8 (1)
	bool bInitialized; // 0x9 (1)
	struct UCurveFloat CustomCurve; // 0x10 (8)
	struct FAlphaBlend AlphaBlend; // 0x18 (48)
};

// ScriptStruct Engine.AlphaBlend
struct FAlphaBlend {
	struct UCurveFloat CustomCurve; // 0x0 (8)
	float BlendTime; // 0x8 (4)
	enum class EAlphaBlendOption BlendOption; // 0x24 (1)
};

// ScriptStruct Engine.InputScaleBias
struct FInputScaleBias {
	float Scale; // 0x0 (4)
	float Bias; // 0x4 (4)
};

// ScriptStruct Engine.UniqueNetIdRepl
struct FUniqueNetIdRepl : FUniqueNetIdWrapper {
	struct TArray<char> ReplicationBytes; // 0x18 (16)
};

// ScriptStruct Engine.PerPlatformFloat
struct FPerPlatformFloat {
	float Default; // 0x0 (4)
};

// ScriptStruct Engine.PerPlatformInt
struct FPerPlatformInt {
	int32_t Default; // 0x0 (4)
};

// ScriptStruct Engine.PerPlatformBool
struct FPerPlatformBool {
	bool Default; // 0x0 (1)
};

// ScriptStruct Engine.RepAttachment
struct FRepAttachment {
	struct UActor AttachParent; // 0x0 (8)
	struct FVector_NetQuantize100 LocationOffset; // 0x8 (12)
	struct FVector_NetQuantize100 RelativeScale3D; // 0x14 (12)
	struct FRotator RotationOffset; // 0x20 (12)
	struct FName AttachSocket; // 0x2C (8)
	struct USceneComponent AttachComponent; // 0x38 (8)
};

// ScriptStruct Engine.RepMovement
struct FRepMovement {
	struct FVector LinearVelocity; // 0x0 (12)
	struct FVector AngularVelocity; // 0xC (12)
	struct FVector Location; // 0x18 (12)
	struct FRotator Rotation; // 0x24 (12)
	char bSimulatedPhysicSleep : 1; // 0x30 (1)
	char bRepPhysics : 1; // 0x30 (1)
	char pad_30_2 : 6; // 0x30 (1)
	enum class EVectorQuantization LocationQuantizationLevel; // 0x31 (1)
	enum class EVectorQuantization VelocityQuantizationLevel; // 0x32 (1)
	enum class ERotatorQuantization RotationQuantizationLevel; // 0x33 (1)
};

// ScriptStruct Engine.RuntimeFloatCurve
struct FRuntimeFloatCurve {
	struct FRichCurve EditorCurveData; // 0x0 (128)
	struct UCurveFloat ExternalCurve; // 0x80 (8)
};

// ScriptStruct Engine.IndexedCurve
struct FIndexedCurve {
	struct FKeyHandleMap KeyHandlesToIndices; // 0x8 (96)
};

// ScriptStruct Engine.RealCurve
struct FRealCurve : FIndexedCurve {
	float DefaultValue; // 0x68 (4)
	enum class ERichCurveExtrapolation PreInfinityExtrap; // 0x6C (1)
	enum class ERichCurveExtrapolation PostInfinityExtrap; // 0x6D (1)
};

// ScriptStruct Engine.RichCurve
struct FRichCurve : FRealCurve {
	struct TArray<struct FRichCurveKey> Keys; // 0x70 (16)
};

// ScriptStruct Engine.RichCurveKey
struct FRichCurveKey {
	enum class ERichCurveInterpMode InterpMode; // 0x0 (1)
	enum class ERichCurveTangentMode TangentMode; // 0x1 (1)
	enum class ERichCurveTangentWeightMode TangentWeightMode; // 0x2 (1)
	float Time; // 0x4 (4)
	float Value; // 0x8 (4)
	float ArriveTangent; // 0xC (4)
	float ArriveTangentWeight; // 0x10 (4)
	float LeaveTangent; // 0x14 (4)
	float LeaveTangentWeight; // 0x18 (4)
};

// ScriptStruct Engine.DamageEvent
struct FDamageEvent {
	struct UClass* DamageTypeClass; // 0x8 (8)
};

// ScriptStruct Engine.RadialDamageEvent
struct FRadialDamageEvent : FDamageEvent {
	struct FRadialDamageParams Params; // 0x10 (20)
	struct FVector Origin; // 0x24 (12)
	struct TArray<struct FHitResult> ComponentHits; // 0x30 (16)
};

// ScriptStruct Engine.RadialDamageParams
struct FRadialDamageParams {
	float BaseDamage; // 0x0 (4)
	float MinimumDamage; // 0x4 (4)
	float InnerRadius; // 0x8 (4)
	float OuterRadius; // 0xC (4)
	float DamageFalloff; // 0x10 (4)
};

// ScriptStruct Engine.PointDamageEvent
struct FPointDamageEvent : FDamageEvent {
	float Damage; // 0x10 (4)
	struct FVector_NetQuantizeNormal ShotDirection; // 0x14 (12)
	struct FHitResult HitInfo; // 0x20 (136)
};

// ScriptStruct Engine.BoneReference
struct FBoneReference {
	struct FName BoneName; // 0x0 (8)
};

// ScriptStruct Engine.AnimNode_AssetPlayerBase
struct FAnimNode_AssetPlayerBase : FAnimNode_Base {
	int32_t GroupIndex; // 0x10 (4)
	enum class EAnimGroupRole GroupRole; // 0x14 (1)
	bool bIgnoreForRelevancyTest; // 0x15 (1)
	float BlendWeight; // 0x18 (4)
	float InternalTimeAccumulator; // 0x1C (4)
};

// ScriptStruct Engine.PerBoneBlendWeight
struct FPerBoneBlendWeight {
	int32_t SourceIndex; // 0x0 (4)
	float BlendWeight; // 0x4 (4)
};

// ScriptStruct Engine.InputBlendPose
struct FInputBlendPose {
	struct TArray<struct FBranchFilter> BranchFilters; // 0x0 (16)
};

// ScriptStruct Engine.BranchFilter
struct FBranchFilter {
	struct FName BoneName; // 0x0 (8)
	int32_t BlendDepth; // 0x8 (4)
};

// ScriptStruct Engine.PoseSnapshot
struct FPoseSnapshot {
	struct TArray<struct FTransform> LocalTransforms; // 0x0 (16)
	struct TArray<struct FName> BoneNames; // 0x10 (16)
	struct FName SkeletalMeshName; // 0x20 (8)
	struct FName SnapshotName; // 0x28 (8)
	bool bIsValid; // 0x30 (1)
};

// ScriptStruct Engine.SolverIterations
struct FSolverIterations {
	int32_t SolverIterations; // 0x0 (4)
	int32_t JointIterations; // 0x4 (4)
	int32_t CollisionIterations; // 0x8 (4)
	int32_t SolverPushOutIterations; // 0xC (4)
	int32_t JointPushOutIterations; // 0x10 (4)
	int32_t CollisionPushOutIterations; // 0x14 (4)
};

// ScriptStruct Engine.AnimNode_Root
struct FAnimNode_Root : FAnimNode_Base {
	struct FPoseLink Result; // 0x10 (16)
	struct FName Name; // 0x20 (8)
	struct FName Group; // 0x28 (8)
};

// ScriptStruct Engine.AnimCurveParam
struct FAnimCurveParam {
	struct FName Name; // 0x0 (8)
};

// ScriptStruct Engine.ActorComponentInstanceData
struct FActorComponentInstanceData {
	struct Object SourceComponentTemplate; // 0x8 (8)
	enum class EComponentCreationMethod SourceComponentCreationMethod; // 0x10 (1)
	int32_t SourceComponentTypeSerializedIndex; // 0x14 (4)
	struct TArray<char> SavedProperties; // 0x18 (16)
	struct TArray<struct FActorComponentDuplicatedObjectData> DuplicatedObjects; // 0x28 (16)
	struct TArray<struct Object> ReferencedObjects; // 0x38 (16)
	struct TArray<struct FName> ReferencedNames; // 0x48 (16)
};

// ScriptStruct Engine.SceneComponentInstanceData
struct FSceneComponentInstanceData : FActorComponentInstanceData {
	struct TMap<struct USceneComponent, struct FTransform> AttachedInstanceComponents; // 0x58 (80)
};

// ScriptStruct Engine.DirectoryPath
struct FDirectoryPath {
	struct FString Path; // 0x0 (16)
};

// ScriptStruct Engine.KAggregateGeom
struct FKAggregateGeom {
	struct TArray<struct FKSphereElem> SphereElems; // 0x0 (16)
	struct TArray<struct FKBoxElem> BoxElems; // 0x10 (16)
	struct TArray<struct FKSphylElem> SphylElems; // 0x20 (16)
	struct TArray<struct FKConvexElem> ConvexElems; // 0x30 (16)
	struct TArray<struct FKTaperedCapsuleElem> TaperedCapsuleElems; // 0x40 (16)
};

// ScriptStruct Engine.KShapeElem
struct FKShapeElem {
	float RestOffset; // 0x8 (4)
	struct FName Name; // 0xC (8)
	char bContributeToMass : 1; // 0x18 (1)
};

// ScriptStruct Engine.KTaperedCapsuleElem
struct FKTaperedCapsuleElem : FKShapeElem {
	struct FVector Center; // 0x30 (12)
	struct FRotator Rotation; // 0x3C (12)
	float Radius0; // 0x48 (4)
	float Radius1; // 0x4C (4)
	float Length; // 0x50 (4)
};

// ScriptStruct Engine.KConvexElem
struct FKConvexElem : FKShapeElem {
	struct TArray<struct FVector> VertexData; // 0x30 (16)
	struct TArray<int32_t> IndexData; // 0x40 (16)
	struct FBox ElemBox; // 0x50 (28)
	struct FTransform Transform; // 0x70 (48)
};

// ScriptStruct Engine.KSphylElem
struct FKSphylElem : FKShapeElem {
	struct FVector Center; // 0x30 (12)
	struct FRotator Rotation; // 0x3C (12)
	float Radius; // 0x48 (4)
	float Length; // 0x4C (4)
};

// ScriptStruct Engine.KBoxElem
struct FKBoxElem : FKShapeElem {
	struct FVector Center; // 0x30 (12)
	struct FRotator Rotation; // 0x3C (12)
	float X; // 0x48 (4)
	float Y; // 0x4C (4)
	float Z; // 0x50 (4)
};

// ScriptStruct Engine.KSphereElem
struct FKSphereElem : FKShapeElem {
	struct FVector Center; // 0x30 (12)
	float Radius; // 0x3C (4)
};

// ScriptStruct Engine.AnimationGroupReference
struct FAnimationGroupReference {
	struct FName GroupName; // 0x0 (8)
	enum class EAnimGroupRole GroupRole; // 0x8 (1)
};

// ScriptStruct Engine.RootMotionMovementParams
struct FRootMotionMovementParams {
	bool bHasRootMotion; // 0x0 (1)
	float BlendWeight; // 0x4 (4)
	struct FTransform RootMotionTransform; // 0x10 (48)
};

// ScriptStruct Engine.AnimTickRecord
struct FAnimTickRecord {
	struct UAnimationAsset SourceAsset; // 0x0 (8)
};

// ScriptStruct Engine.MarkerSyncAnimPosition
struct FMarkerSyncAnimPosition {
	struct FName PreviousMarkerName; // 0x0 (8)
	struct FName NextMarkerName; // 0x8 (8)
	float PositionBetweenMarkers; // 0x10 (4)
};

// ScriptStruct Engine.BlendSampleData
struct FBlendSampleData {
	int32_t SampleDataIndex; // 0x0 (4)
	struct UAnimSequence Animation; // 0x8 (8)
	float TotalWeight; // 0x10 (4)
	float Time; // 0x14 (4)
	float PreviousTime; // 0x18 (4)
	float SamplePlayRate; // 0x1C (4)
};

// ScriptStruct Engine.AnimationRecordingSettings
struct FAnimationRecordingSettings {
	bool bRecordInWorldSpace; // 0x0 (1)
	bool bRemoveRootAnimation; // 0x1 (1)
	bool bAutoSaveAsset; // 0x2 (1)
	float SampleRate; // 0x4 (4)
	float Length; // 0x8 (4)
	enum class ERichCurveInterpMode InterpMode; // 0xC (1)
	enum class ERichCurveTangentMode TangentMode; // 0xD (1)
};

// ScriptStruct Engine.ComponentSpacePose
struct FComponentSpacePose {
	struct TArray<struct FTransform> Transforms; // 0x0 (16)
	struct TArray<struct FName> Names; // 0x10 (16)
};

// ScriptStruct Engine.LocalSpacePose
struct FLocalSpacePose {
	struct TArray<struct FTransform> Transforms; // 0x0 (16)
	struct TArray<struct FName> Names; // 0x10 (16)
};

// ScriptStruct Engine.NamedTransform
struct FNamedTransform {
	struct FTransform Value; // 0x0 (48)
	struct FName Name; // 0x30 (8)
};

// ScriptStruct Engine.NamedColor
struct FNamedColor {
	struct FColor Value; // 0x0 (4)
	struct FName Name; // 0x4 (8)
};

// ScriptStruct Engine.NamedVector
struct FNamedVector {
	struct FVector Value; // 0x0 (12)
	struct FName Name; // 0xC (8)
};

// ScriptStruct Engine.NamedFloat
struct FNamedFloat {
	float Value; // 0x0 (4)
	struct FName Name; // 0x4 (8)
};

// ScriptStruct Engine.AnimParentNodeAssetOverride
struct FAnimParentNodeAssetOverride {
	struct UAnimationAsset NewAsset; // 0x0 (8)
	struct FGuid ParentNodeGuid; // 0x8 (16)
};

// ScriptStruct Engine.AnimGroupInfo
struct FAnimGroupInfo {
	struct FName Name; // 0x0 (8)
	struct FLinearColor Color; // 0x8 (16)
};

// ScriptStruct Engine.AnimBlueprintFunctionData
struct FAnimBlueprintFunctionData {
	struct TFieldPath<FNone> OutputPoseNodeProperty; // 0x0 (32)
	struct TArray<struct TFieldPath<FNone>> InputPoseNodeProperties; // 0x20 (16)
	struct TArray<struct TFieldPath<FNone>> InputProperties; // 0x30 (16)
};

// ScriptStruct Engine.AnimGraphBlendOptions
struct FAnimGraphBlendOptions {
	float BlendInTime; // 0x0 (4)
	float BlendOutTime; // 0x4 (4)
};

// ScriptStruct Engine.GraphAssetPlayerInformation
struct FGraphAssetPlayerInformation {
	struct TArray<int32_t> PlayerNodeIndices; // 0x0 (16)
};

// ScriptStruct Engine.CachedPoseIndices
struct FCachedPoseIndices {
	struct TArray<int32_t> OrderedSavedPoseNodeIndices; // 0x0 (16)
};

// ScriptStruct Engine.AnimBlueprintFunction
struct FAnimBlueprintFunction {
	struct FName Name; // 0x0 (8)
	struct FName Group; // 0x8 (8)
	int32_t OutputPoseNodeIndex; // 0x10 (4)
	struct TArray<struct FName> InputPoseNames; // 0x18 (16)
	struct TArray<int32_t> InputPoseNodeIndices; // 0x28 (16)
	bool bImplemented; // 0x60 (1)
};

// ScriptStruct Engine.AnimTrack
struct FAnimTrack {
	struct TArray<struct FAnimSegment> AnimSegments; // 0x0 (16)
};

// ScriptStruct Engine.AnimSegment
struct FAnimSegment {
	struct UAnimSequenceBase AnimReference; // 0x0 (8)
	float StartPos; // 0x8 (4)
	float AnimStartTime; // 0xC (4)
	float AnimEndTime; // 0x10 (4)
	float AnimPlayRate; // 0x14 (4)
	int32_t LoopingCount; // 0x18 (4)
};

// ScriptStruct Engine.RootMotionExtractionStep
struct FRootMotionExtractionStep {
	struct UAnimSequence AnimSequence; // 0x0 (8)
	float StartPosition; // 0x8 (4)
	float EndPosition; // 0xC (4)
};

// ScriptStruct Engine.RawCurveTracks
struct FRawCurveTracks {
	struct TArray<struct FFloatCurve> FloatCurves; // 0x0 (16)
};

// ScriptStruct Engine.AnimCurveBase
struct FAnimCurveBase {
	struct FName LastObservedName; // 0x0 (8)
	struct FSmartName Name; // 0x8 (12)
	int32_t CurveTypeFlags; // 0x14 (4)
};

// ScriptStruct Engine.SmartName
struct FSmartName {
	struct FName DisplayName; // 0x0 (8)
};

// ScriptStruct Engine.FloatCurve
struct FFloatCurve : FAnimCurveBase {
	struct FRichCurve FloatCurve; // 0x18 (128)
};

// ScriptStruct Engine.TransformCurve
struct FTransformCurve : FAnimCurveBase {
	struct FVectorCurve TranslationCurve; // 0x18 (408)
	struct FVectorCurve RotationCurve; // 0x1B0 (408)
	struct FVectorCurve ScaleCurve; // 0x348 (408)
};

// ScriptStruct Engine.VectorCurve
struct FVectorCurve : FAnimCurveBase {
	struct FRichCurve FloatCurves[0x3]; // 0x18 (384)
};

// ScriptStruct Engine.SlotEvaluationPose
struct FSlotEvaluationPose {
	enum class EAdditiveAnimationType AdditiveType; // 0x0 (1)
	float Weight; // 0x4 (4)
};

// ScriptStruct Engine.A2Pose
struct FA2Pose {
	struct TArray<struct FTransform> Bones; // 0x0 (16)
};

// ScriptStruct Engine.A2CSPose
struct FA2CSPose : FA2Pose {
	struct TArray<char> ComponentSpaceFlags; // 0x18 (16)
};

// ScriptStruct Engine.QueuedDrawDebugItem
struct FQueuedDrawDebugItem {
	enum class EDrawDebugItemType ItemType; // 0x0 (1)
	struct FVector StartLoc; // 0x4 (12)
	struct FVector EndLoc; // 0x10 (12)
	struct FVector Center; // 0x1C (12)
	struct FRotator Rotation; // 0x28 (12)
	float Radius; // 0x34 (4)
	float Size; // 0x38 (4)
	int32_t Segments; // 0x3C (4)
	struct FColor Color; // 0x40 (4)
	bool bPersistentLines; // 0x44 (1)
	float LifeTime; // 0x48 (4)
	float Thickness; // 0x4C (4)
	struct FString Message; // 0x50 (16)
	struct FVector2D TextScale; // 0x60 (8)
};

// ScriptStruct Engine.AnimLinkableElement
struct FAnimLinkableElement {
	struct UAnimMontage LinkedMontage; // 0x8 (8)
	int32_t SlotIndex; // 0x10 (4)
	int32_t SegmentIndex; // 0x14 (4)
	enum class EAnimLinkMethod LinkMethod; // 0x18 (1)
	enum class EAnimLinkMethod CachedLinkMethod; // 0x19 (1)
	float SegmentBeginTime; // 0x1C (4)
	float SegmentLength; // 0x20 (4)
	float LinkValue; // 0x24 (4)
	struct UAnimSequenceBase LinkedSequence; // 0x28 (8)
};

// ScriptStruct Engine.AnimMontageInstance
struct FAnimMontageInstance {
	struct UAnimMontage Montage; // 0x0 (8)
	bool bPlaying; // 0x28 (1)
	float DefaultBlendTimeMultiplier; // 0x2C (4)
	struct TArray<int32_t> NextSections; // 0xE8 (16)
	struct TArray<int32_t> PrevSections; // 0xF8 (16)
	struct TArray<struct FAnimNotifyEvent> ActiveStateBranchingPoints; // 0x118 (16)
	float Position; // 0x128 (4)
	float PlayRate; // 0x12C (4)
	struct FAlphaBlend Blend; // 0x130 (48)
	int32_t DisableRootMotionCount; // 0x188 (4)
};

// ScriptStruct Engine.AnimNotifyEvent
struct FAnimNotifyEvent : FAnimLinkableElement {
	float DisplayTime; // 0x30 (4)
	float TriggerTimeOffset; // 0x34 (4)
	float EndTriggerTimeOffset; // 0x38 (4)
	float TriggerWeightThreshold; // 0x3C (4)
	struct FName NotifyName; // 0x40 (8)
	struct UAnimNotify Notify; // 0x48 (8)
	struct UAnimNotifyState NotifyStateClass; // 0x50 (8)
	float Duration; // 0x58 (4)
	struct FAnimLinkableElement EndLink; // 0x60 (48)
	bool bConvertedFromBranchingPoint; // 0x90 (1)
	enum class EMontageNotifyTickType MontageTickType; // 0x91 (1)
	float NotifyTriggerChance; // 0x94 (4)
	enum class ENotifyFilterType NotifyFilterType; // 0x98 (1)
	int32_t NotifyFilterLOD; // 0x9C (4)
	bool bTriggerOnDedicatedServer; // 0xA0 (1)
	bool bTriggerOnFollower; // 0xA1 (1)
	int32_t TrackIndex; // 0xA4 (4)
};

// ScriptStruct Engine.BranchingPointMarker
struct FBranchingPointMarker {
	int32_t NotifyIndex; // 0x0 (4)
	float TriggerTime; // 0x4 (4)
	enum class EAnimNotifyEventType NotifyEventType; // 0x8 (1)
};

// ScriptStruct Engine.BranchingPoint
struct FBranchingPoint : FAnimLinkableElement {
	struct FName EventName; // 0x30 (8)
	float DisplayTime; // 0x38 (4)
	float TriggerTimeOffset; // 0x3C (4)
};

// ScriptStruct Engine.SlotAnimationTrack
struct FSlotAnimationTrack {
	struct FName SlotName; // 0x0 (8)
	struct FAnimTrack AnimTrack; // 0x8 (16)
};

// ScriptStruct Engine.CompositeSection
struct FCompositeSection : FAnimLinkableElement {
	struct FName SectionName; // 0x30 (8)
	float StartTime; // 0x38 (4)
	struct FName NextSectionName; // 0x3C (8)
	struct TArray<struct UAnimMetaData> MetaData; // 0x48 (16)
};

// ScriptStruct Engine.AnimNode_ApplyMeshSpaceAdditive
struct FAnimNode_ApplyMeshSpaceAdditive : FAnimNode_Base {
	struct FPoseLink Base; // 0x10 (16)
	struct FPoseLink Additive; // 0x20 (16)
	enum class EAnimAlphaInputType AlphaInputType; // 0x30 (1)
	float Alpha; // 0x34 (4)
	char bAlphaBoolEnabled : 1; // 0x38 (1)
	char pad_35_1 : 7; // 0x35 (1)
	struct FInputAlphaBoolBlend AlphaBoolBlend; // 0x40 (72)
	struct FName AlphaCurveName; // 0x88 (8)
	struct FInputScaleBias AlphaScaleBias; // 0x90 (8)
	struct FInputScaleBiasClamp AlphaScaleBiasClamp; // 0x98 (48)
	int32_t LODThreshold; // 0xC8 (4)
};

// ScriptStruct Engine.AnimNode_CustomProperty
struct FAnimNode_CustomProperty : FAnimNode_Base {
	struct TArray<struct FName> SourcePropertyNames; // 0x10 (16)
	struct TArray<struct FName> DestPropertyNames; // 0x20 (16)
	struct Object TargetInstance; // 0x30 (8)
};

// ScriptStruct Engine.AnimNode_Inertialization
struct FAnimNode_Inertialization : FAnimNode_Base {
	struct FPoseLink Source; // 0x10 (16)
};

// ScriptStruct Engine.AnimNode_LinkedAnimGraph
struct FAnimNode_LinkedAnimGraph : FAnimNode_CustomProperty {
	struct TArray<struct FPoseLink> InputPoses; // 0x58 (16)
	struct TArray<struct FName> InputPoseNames; // 0x68 (16)
	struct UClass* InstanceClass; // 0x78 (8)
	struct FName Tag; // 0x80 (8)
	char bReceiveNotifiesFromLinkedInstances : 1; // 0x98 (1)
	char pad_88_1 : 7; // 0x88 (1)
	char pad_89_0 : 1; // 0x89 (1)
	char bPropagateNotifiesToLinkedInstances : 1; // 0x98 (1)
};

// ScriptStruct Engine.AnimNode_LinkedAnimLayer
struct FAnimNode_LinkedAnimLayer : FAnimNode_LinkedAnimGraph {
	struct UClass* Interface; // 0xA0 (8)
	struct FName Layer; // 0xA8 (8)
};

// ScriptStruct Engine.AnimNode_LinkedInputPose
struct FAnimNode_LinkedInputPose : FAnimNode_Base {
	struct FName Name; // 0x10 (8)
	struct FName Graph; // 0x18 (8)
	struct FPoseLink InputPose; // 0x20 (16)
};

// ScriptStruct Engine.AnimNode_SaveCachedPose
struct FAnimNode_SaveCachedPose : FAnimNode_Base {
	struct FPoseLink Pose; // 0x10 (16)
	struct FName CachePoseName; // 0x20 (8)
};

// ScriptStruct Engine.AnimNode_SequencePlayer
struct FAnimNode_SequencePlayer : FAnimNode_AssetPlayerBase {
	struct UAnimSequenceBase Sequence; // 0x30 (8)
	float PlayRateBasis; // 0x38 (4)
	float PlayRate; // 0x3C (4)
	struct FInputScaleBiasClamp PlayRateScaleBiasClamp; // 0x40 (48)
	float StartPosition; // 0x70 (4)
	bool bLoopAnimation; // 0x74 (1)
};

// ScriptStruct Engine.AnimNode_StateMachine
struct FAnimNode_StateMachine : FAnimNode_Base {
	int32_t StateMachineIndexInClass; // 0x10 (4)
	int32_t MaxTransitionsPerFrame; // 0x14 (4)
	bool bSkipFirstUpdateTransition; // 0x18 (1)
	bool bReinitializeOnBecomingRelevant; // 0x19 (1)
};

// ScriptStruct Engine.AnimationActiveTransitionEntry
struct FAnimationActiveTransitionEntry {
	struct UBlendProfile BlendProfile; // 0xB8 (8)
};

// ScriptStruct Engine.AnimNode_TransitionPoseEvaluator
struct FAnimNode_TransitionPoseEvaluator : FAnimNode_Base {
	int32_t FramesToCachePose; // 0x48 (4)
	enum class EEvaluatorDataSource DataSource; // 0x50 (1)
	enum class EEvaluatorMode EvaluatorMode; // 0x51 (1)
};

// ScriptStruct Engine.AnimNode_TransitionResult
struct FAnimNode_TransitionResult : FAnimNode_Base {
	bool bCanEnterTransition; // 0x10 (1)
};

// ScriptStruct Engine.AnimNode_UseCachedPose
struct FAnimNode_UseCachedPose : FAnimNode_Base {
	struct FPoseLink LinkToCachingNode; // 0x10 (16)
	struct FName CachePoseName; // 0x20 (8)
};

// ScriptStruct Engine.ExposedValueHandler
struct FExposedValueHandler {
	struct FName BoundFunction; // 0x0 (8)
	struct TArray<struct FExposedValueCopyRecord> CopyRecords; // 0x8 (16)
	struct UFunction Function; // 0x18 (8)
	struct TFieldPath<FNone> ValueHandlerNodeProperty; // 0x20 (32)
};

// ScriptStruct Engine.ExposedValueCopyRecord
struct FExposedValueCopyRecord {
	struct FName SourcePropertyName; // 0x0 (8)
	struct FName SourceSubPropertyName; // 0x8 (8)
	int32_t SourceArrayIndex; // 0x10 (4)
	bool bInstanceIsTarget; // 0x14 (1)
	enum class EPostCopyOperation PostCopyOperation; // 0x15 (1)
	enum class ECopyType CopyType; // 0x16 (1)
	struct TFieldPath<FNone> DestProperty; // 0x18 (32)
	int32_t DestArrayIndex; // 0x38 (4)
	int32_t Size; // 0x3C (4)
	struct TFieldPath<FNone> CachedSourceProperty; // 0x40 (32)
	struct TFieldPath<FNone> CachedSourceStructSubProperty; // 0x60 (32)
};

// ScriptStruct Engine.AnimNode_ConvertLocalToComponentSpace
struct FAnimNode_ConvertLocalToComponentSpace : FAnimNode_Base {
	struct FPoseLink LocalPose; // 0x10 (16)
};

// ScriptStruct Engine.AnimNode_ConvertComponentToLocalSpace
struct FAnimNode_ConvertComponentToLocalSpace : FAnimNode_Base {
	struct FComponentSpacePoseLink ComponentPose; // 0x10 (16)
};

// ScriptStruct Engine.AnimNotifyQueue
struct FAnimNotifyQueue {
	struct TArray<struct FAnimNotifyEventReference> AnimNotifies; // 0x10 (16)
	struct TMap<struct FName, struct FAnimNotifyArray> UnfilteredMontageAnimNotifies; // 0x20 (80)
};

// ScriptStruct Engine.AnimNotifyArray
struct FAnimNotifyArray {
	struct TArray<struct FAnimNotifyEventReference> Notifies; // 0x0 (16)
};

// ScriptStruct Engine.AnimNotifyEventReference
struct FAnimNotifyEventReference {
	struct Object NotifySource; // 0x8 (8)
};

// ScriptStruct Engine.CompressedTrack
struct FCompressedTrack {
	struct TArray<char> ByteStream; // 0x0 (16)
	struct TArray<float> Times; // 0x10 (16)
	float Mins[0x3]; // 0x20 (12)
	float Ranges[0x3]; // 0x2C (12)
};

// ScriptStruct Engine.CurveTrack
struct FCurveTrack {
	struct FName CurveName; // 0x0 (8)
	struct TArray<float> CurveWeights; // 0x8 (16)
};

// ScriptStruct Engine.ScaleTrack
struct FScaleTrack {
	struct TArray<struct FVector> ScaleKeys; // 0x0 (16)
	struct TArray<float> Times; // 0x10 (16)
};

// ScriptStruct Engine.RotationTrack
struct FRotationTrack {
	struct TArray<struct FQuat> RotKeys; // 0x0 (16)
	struct TArray<float> Times; // 0x10 (16)
};

// ScriptStruct Engine.TranslationTrack
struct FTranslationTrack {
	struct TArray<struct FVector> PosKeys; // 0x0 (16)
	struct TArray<float> Times; // 0x10 (16)
};

// ScriptStruct Engine.AnimSequenceTrackContainer
struct FAnimSequenceTrackContainer {
	struct TArray<struct FRawAnimSequenceTrack> AnimationTracks; // 0x0 (16)
	struct TArray<struct FName> TrackNames; // 0x10 (16)
};

// ScriptStruct Engine.RawAnimSequenceTrack
struct FRawAnimSequenceTrack {
	struct TArray<struct FVector> PosKeys; // 0x0 (16)
	struct TArray<struct FQuat> RotKeys; // 0x10 (16)
	struct TArray<struct FVector> ScaleKeys; // 0x20 (16)
};

// ScriptStruct Engine.AnimSetMeshLinkup
struct FAnimSetMeshLinkup {
	struct TArray<int32_t> BoneToTrackTable; // 0x0 (16)
};

// ScriptStruct Engine.AnimNode_SingleNode
struct FAnimNode_SingleNode : FAnimNode_Base {
	struct FPoseLink SourcePose; // 0x10 (16)
};

// ScriptStruct Engine.BakedAnimationStateMachine
struct FBakedAnimationStateMachine {
	struct FName MachineName; // 0x0 (8)
	int32_t InitialState; // 0x8 (4)
	struct TArray<struct FBakedAnimationState> States; // 0x10 (16)
	struct TArray<struct FAnimationTransitionBetweenStates> Transitions; // 0x20 (16)
};

// ScriptStruct Engine.AnimationStateBase
struct FAnimationStateBase {
	struct FName StateName; // 0x0 (8)
};

// ScriptStruct Engine.AnimationTransitionBetweenStates
struct FAnimationTransitionBetweenStates : FAnimationStateBase {
	int32_t PreviousState; // 0x8 (4)
	int32_t NextState; // 0xC (4)
	float CrossfadeDuration; // 0x10 (4)
	int32_t StartNotify; // 0x14 (4)
	int32_t EndNotify; // 0x18 (4)
	int32_t InterruptNotify; // 0x1C (4)
	enum class EAlphaBlendOption BlendMode; // 0x20 (1)
	struct UCurveFloat CustomCurve; // 0x28 (8)
	struct UBlendProfile BlendProfile; // 0x30 (8)
	enum class ETransitionLogicType LogicType; // 0x38 (1)
};

// ScriptStruct Engine.BakedAnimationState
struct FBakedAnimationState {
	struct FName StateName; // 0x0 (8)
	struct TArray<struct FBakedStateExitTransition> Transitions; // 0x8 (16)
	int32_t StateRootNodeIndex; // 0x18 (4)
	int32_t StartNotify; // 0x1C (4)
	int32_t EndNotify; // 0x20 (4)
	int32_t FullyBlendedNotify; // 0x24 (4)
	bool bIsAConduit; // 0x28 (1)
	int32_t EntryRuleNodeIndex; // 0x2C (4)
	struct TArray<int32_t> PlayerNodeIndices; // 0x30 (16)
	struct TArray<int32_t> LayerNodeIndices; // 0x40 (16)
	bool bAlwaysResetOnEntry; // 0x50 (1)
};

// ScriptStruct Engine.BakedStateExitTransition
struct FBakedStateExitTransition {
	int32_t CanTakeDelegateIndex; // 0x0 (4)
	int32_t CustomResultNodeIndex; // 0x4 (4)
	int32_t TransitionIndex; // 0x8 (4)
	bool bDesiredTransitionReturnValue; // 0xC (1)
	bool bAutomaticRemainingTimeRule; // 0xD (1)
	struct TArray<int32_t> PoseEvaluatorLinks; // 0x10 (16)
};

// ScriptStruct Engine.AnimationState
struct FAnimationState : FAnimationStateBase {
	struct TArray<struct FAnimationTransitionRule> Transitions; // 0x8 (16)
	int32_t StateRootNodeIndex; // 0x18 (4)
	int32_t StartNotify; // 0x1C (4)
	int32_t EndNotify; // 0x20 (4)
	int32_t FullyBlendedNotify; // 0x24 (4)
};

// ScriptStruct Engine.AnimationTransitionRule
struct FAnimationTransitionRule {
	struct FName RuleToExecute; // 0x0 (8)
	bool TransitionReturnVal; // 0x8 (1)
	int32_t TransitionIndex; // 0xC (4)
};

// ScriptStruct Engine.TrackToSkeletonMap
struct FTrackToSkeletonMap {
	int32_t BoneTreeIndex; // 0x0 (4)
};

// ScriptStruct Engine.MarkerSyncData
struct FMarkerSyncData {
	struct TArray<struct FAnimSyncMarker> AuthoredSyncMarkers; // 0x0 (16)
};

// ScriptStruct Engine.AnimSyncMarker
struct FAnimSyncMarker {
	struct FName MarkerName; // 0x0 (8)
	float Time; // 0x8 (4)
};

// ScriptStruct Engine.AnimNotifyTrack
struct FAnimNotifyTrack {
	struct FName TrackName; // 0x0 (8)
	struct FLinearColor TrackColor; // 0x8 (16)
};

// ScriptStruct Engine.PerBoneBlendWeights
struct FPerBoneBlendWeights {
	struct TArray<struct FPerBoneBlendWeight> BoneBlendWeights; // 0x0 (16)
};

// ScriptStruct Engine.PrimaryAssetRulesCustomOverride
struct FPrimaryAssetRulesCustomOverride {
	struct FPrimaryAssetType PrimaryAssetType; // 0x0 (8)
	struct FDirectoryPath FilterDirectory; // 0x8 (16)
	struct FString FilterString; // 0x18 (16)
	struct FPrimaryAssetRules Rules; // 0x28 (12)
};

// ScriptStruct Engine.PrimaryAssetRules
struct FPrimaryAssetRules {
	int32_t Priority; // 0x0 (4)
	int32_t ChunkId; // 0x4 (4)
	bool bApplyRecursively; // 0x8 (1)
	enum class EPrimaryAssetCookRule CookRule; // 0x9 (1)
};

// ScriptStruct Engine.PrimaryAssetRulesOverride
struct FPrimaryAssetRulesOverride {
	struct FPrimaryAssetId PrimaryAssetId; // 0x0 (16)
	struct FPrimaryAssetRules Rules; // 0x10 (12)
};

// ScriptStruct Engine.AssetManagerRedirect
struct FAssetManagerRedirect {
	struct FString Old; // 0x0 (16)
	struct FString New; // 0x10 (16)
};

// ScriptStruct Engine.PrimaryAssetTypeInfo
struct FPrimaryAssetTypeInfo {
	struct FName PrimaryAssetType; // 0x0 (8)
	struct TSoftClassPtr<UObject> AssetBaseClass; // 0x8 (40)
	struct UClass* AssetBaseClassLoaded; // 0x30 (8)
	bool bHasBlueprintClasses; // 0x38 (1)
	bool bIsEditorOnly; // 0x39 (1)
	struct TArray<struct FDirectoryPath> Directories; // 0x40 (16)
	struct TArray<struct FSoftObjectPath> SpecificAssets; // 0x50 (16)
	struct FPrimaryAssetRules Rules; // 0x60 (12)
	struct TArray<struct FString> AssetScanPaths; // 0x70 (16)
	bool bIsDynamicAsset; // 0x80 (1)
	int32_t NumberOfAssets; // 0x84 (4)
};

// ScriptStruct Engine.AssetMapping
struct FAssetMapping {
	struct UAnimationAsset SourceAsset; // 0x0 (8)
	struct UAnimationAsset TargetAsset; // 0x8 (8)
};

// ScriptStruct Engine.AtmospherePrecomputeParameters
struct FAtmospherePrecomputeParameters {
	float DensityHeight; // 0x0 (4)
	float DecayHeight; // 0x4 (4)
	int32_t MaxScatteringOrder; // 0x8 (4)
	int32_t TransmittanceTexWidth; // 0xC (4)
	int32_t TransmittanceTexHeight; // 0x10 (4)
	int32_t IrradianceTexWidth; // 0x14 (4)
	int32_t IrradianceTexHeight; // 0x18 (4)
	int32_t InscatterAltitudeSampleNum; // 0x1C (4)
	int32_t InscatterMuNum; // 0x20 (4)
	int32_t InscatterMuSNum; // 0x24 (4)
	int32_t InscatterNuNum; // 0x28 (4)
};

// ScriptStruct Engine.BaseAttenuationSettings
struct FBaseAttenuationSettings {
	enum class EAttenuationDistanceModel DistanceAlgorithm; // 0x8 (1)
	enum class EAttenuationShape AttenuationShape; // 0x9 (1)
	float dBAttenuationAtMax; // 0xC (4)
	enum class ENaturalSoundFalloffMode FalloffMode; // 0x10 (1)
	struct FVector AttenuationShapeExtents; // 0x14 (12)
	float ConeOffset; // 0x20 (4)
	float FalloffDistance; // 0x24 (4)
	struct FRuntimeFloatCurve CustomAttenuationCurve; // 0x28 (136)
};

// ScriptStruct Engine.AudioComponentParam
struct FAudioComponentParam {
	struct FName ParamName; // 0x0 (8)
	float FloatParam; // 0x8 (4)
	bool BoolParam; // 0xC (1)
	int32_t IntParam; // 0x10 (4)
	struct USoundWave SoundWaveParam; // 0x18 (8)
};

// ScriptStruct Engine.AudioQualitySettings
struct FAudioQualitySettings {
	struct FText DisplayName; // 0x0 (24)
	int32_t MaxChannels; // 0x18 (4)
};

// ScriptStruct Engine.InteriorSettings
struct FInteriorSettings {
	bool bIsWorldSettings; // 0x0 (1)
	float ExteriorVolume; // 0x4 (4)
	float ExteriorTime; // 0x8 (4)
	float ExteriorLPF; // 0xC (4)
	float ExteriorLPFTime; // 0x10 (4)
	float InteriorVolume; // 0x14 (4)
	float InteriorTime; // 0x18 (4)
	float InteriorLPF; // 0x1C (4)
	float InteriorLPFTime; // 0x20 (4)
};

// ScriptStruct Engine.LaunchOnTestSettings
struct FLaunchOnTestSettings {
	struct FFilePath LaunchOnTestmap; // 0x0 (16)
	struct FString DeviceID; // 0x10 (16)
};

// ScriptStruct Engine.FilePath
struct FFilePath {
	struct FString FilePath; // 0x0 (16)
};

// ScriptStruct Engine.EditorMapPerformanceTestDefinition
struct FEditorMapPerformanceTestDefinition {
	struct FSoftObjectPath PerformanceTestmap; // 0x0 (24)
	int32_t TestTimer; // 0x18 (4)
};

// ScriptStruct Engine.BuildPromotionTestSettings
struct FBuildPromotionTestSettings {
	struct FFilePath DefaultStaticMeshAsset; // 0x0 (16)
	struct FBuildPromotionImportWorkflowSettings ImportWorkflow; // 0x10 (336)
	struct FBuildPromotionOpenAssetSettings OpenAssets; // 0x160 (96)
	struct FBuildPromotionNewProjectSettings NewProjectSettings; // 0x1C0 (32)
	struct FFilePath SourceControlMaterial; // 0x1E0 (16)
};

// ScriptStruct Engine.BuildPromotionNewProjectSettings
struct FBuildPromotionNewProjectSettings {
	struct FDirectoryPath NewProjectFolderOverride; // 0x0 (16)
	struct FString NewProjectNameOverride; // 0x10 (16)
};

// ScriptStruct Engine.BuildPromotionOpenAssetSettings
struct FBuildPromotionOpenAssetSettings {
	struct FFilePath BlueprintAsset; // 0x0 (16)
	struct FFilePath MaterialAsset; // 0x10 (16)
	struct FFilePath ParticleSystemAsset; // 0x20 (16)
	struct FFilePath SkeletalMeshAsset; // 0x30 (16)
	struct FFilePath StaticMeshAsset; // 0x40 (16)
	struct FFilePath TextureAsset; // 0x50 (16)
};

// ScriptStruct Engine.BuildPromotionImportWorkflowSettings
struct FBuildPromotionImportWorkflowSettings {
	struct FEditorImportWorkflowDefinition Diffuse; // 0x0 (32)
	struct FEditorImportWorkflowDefinition Normal; // 0x20 (32)
	struct FEditorImportWorkflowDefinition StaticMesh; // 0x40 (32)
	struct FEditorImportWorkflowDefinition ReimportStaticMesh; // 0x60 (32)
	struct FEditorImportWorkflowDefinition BlendShapeMesh; // 0x80 (32)
	struct FEditorImportWorkflowDefinition MorphMesh; // 0xA0 (32)
	struct FEditorImportWorkflowDefinition SkeletalMesh; // 0xC0 (32)
	struct FEditorImportWorkflowDefinition Animation; // 0xE0 (32)
	struct FEditorImportWorkflowDefinition Sound; // 0x100 (32)
	struct FEditorImportWorkflowDefinition SurroundSound; // 0x120 (32)
	struct TArray<struct FEditorImportWorkflowDefinition> OtherAssetsToImport; // 0x140 (16)
};

// ScriptStruct Engine.EditorImportWorkflowDefinition
struct FEditorImportWorkflowDefinition {
	struct FFilePath ImportFilePath; // 0x0 (16)
	struct TArray<struct FImportFactorySettingValues> FactorySettings; // 0x10 (16)
};

// ScriptStruct Engine.ImportFactorySettingValues
struct FImportFactorySettingValues {
	struct FString SettingName; // 0x0 (16)
	struct FString Value; // 0x10 (16)
};

// ScriptStruct Engine.BlueprintEditorPromotionSettings
struct FBlueprintEditorPromotionSettings {
	struct FFilePath FirstMeshPath; // 0x0 (16)
	struct FFilePath SecondMeshPath; // 0x10 (16)
	struct FFilePath DefaultParticleAsset; // 0x20 (16)
};

// ScriptStruct Engine.ParticleEditorPromotionSettings
struct FParticleEditorPromotionSettings {
	struct FFilePath DefaultParticleAsset; // 0x0 (16)
};

// ScriptStruct Engine.MaterialEditorPromotionSettings
struct FMaterialEditorPromotionSettings {
	struct FFilePath DefaultMaterialAsset; // 0x0 (16)
	struct FFilePath DefaultDiffuseTexture; // 0x10 (16)
	struct FFilePath DefaultNormalTexture; // 0x20 (16)
};

// ScriptStruct Engine.EditorImportExportTestDefinition
struct FEditorImportExportTestDefinition {
	struct FFilePath ImportFilePath; // 0x0 (16)
	struct FString ExportFileExtension; // 0x10 (16)
	bool bSkipExport; // 0x20 (1)
	struct TArray<struct FImportFactorySettingValues> FactorySettings; // 0x28 (16)
};

// ScriptStruct Engine.ExternalToolDefinition
struct FExternalToolDefinition {
	struct FString ToolName; // 0x0 (16)
	struct FFilePath ExecutablePath; // 0x10 (16)
	struct FString CommandLineOptions; // 0x20 (16)
	struct FDirectoryPath WorkingDirectory; // 0x30 (16)
	struct FString ScriptExtension; // 0x40 (16)
	struct FDirectoryPath ScriptDirectory; // 0x50 (16)
};

// ScriptStruct Engine.BandwidthTestGenerator
struct FBandwidthTestGenerator {
	struct TArray<struct FBandwidthTestItem> ReplicatedBuffers; // 0x0 (16)
};

// ScriptStruct Engine.BandwidthTestItem
struct FBandwidthTestItem {
	struct TArray<char> Kilobyte; // 0x0 (16)
};

// ScriptStruct Engine.BlendProfileBoneEntry
struct FBlendProfileBoneEntry {
	struct FBoneReference BoneReference; // 0x0 (16)
	float BlendScale; // 0x10 (4)
};

// ScriptStruct Engine.PerBoneInterpolation
struct FPerBoneInterpolation {
	struct FBoneReference BoneReference; // 0x0 (16)
	float InterpolationSpeedPerSec; // 0x10 (4)
};

// ScriptStruct Engine.GridBlendSample
struct FGridBlendSample {
	struct FEditorElement GridElement; // 0x0 (24)
	float BlendWeight; // 0x18 (4)
};

// ScriptStruct Engine.EditorElement
struct FEditorElement {
	int32_t Indices[0x3]; // 0x0 (12)
	float Weights[0x3]; // 0xC (12)
};

// ScriptStruct Engine.BlendSample
struct FBlendSample {
	struct UAnimSequence Animation; // 0x0 (8)
	struct FVector SampleValue; // 0x8 (12)
	float RateScale; // 0x14 (4)
};

// ScriptStruct Engine.BlendParameter
struct FBlendParameter {
	struct FString DisplayName; // 0x0 (16)
	float Min; // 0x10 (4)
	float Max; // 0x14 (4)
	int32_t GridNum; // 0x18 (4)
};

// ScriptStruct Engine.InterpolationParameter
struct FInterpolationParameter {
	float InterpolationTime; // 0x0 (4)
	enum class EFilterInterpolationType InterpolationType; // 0x4 (1)
};

// ScriptStruct Engine.BPEditorBookmarkNode
struct FBPEditorBookmarkNode {
	struct FGuid NodeGuid; // 0x0 (16)
	struct FGuid ParentGuid; // 0x10 (16)
	struct FText DisplayName; // 0x20 (24)
};

// ScriptStruct Engine.EditedDocumentInfo
struct FEditedDocumentInfo {
	struct FSoftObjectPath EditedObjectPath; // 0x0 (24)
	struct FVector2D SavedViewOffset; // 0x18 (8)
	float SavedZoomAmount; // 0x20 (4)
	struct Object EditedObject; // 0x28 (8)
};

// ScriptStruct Engine.BPInterfaceDescription
struct FBPInterfaceDescription {
	struct UClass* Interface; // 0x0 (8)
	struct TArray<struct UEdGraph> Graphs; // 0x8 (16)
};

// ScriptStruct Engine.BPVariableDescription
struct FBPVariableDescription {
	struct FName VarName; // 0x0 (8)
	struct FGuid VarGuid; // 0x8 (16)
	struct FEdGraphPinType VarType; // 0x18 (88)
	struct FString FriendlyName; // 0x70 (16)
	struct FText Category; // 0x80 (24)
	uint64_t PropertyFlags; // 0x98 (8)
	struct FName RepNotifyFunc; // 0xA0 (8)
	enum class ELifetimeCondition ReplicationCondition; // 0xA8 (1)
	struct TArray<struct FBPVariableMetaDataEntry> MetaDataArray; // 0xB0 (16)
	struct FString DefaultValue; // 0xC0 (16)
};

// ScriptStruct Engine.BPVariableMetaDataEntry
struct FBPVariableMetaDataEntry {
	struct FName DataKey; // 0x0 (8)
	struct FString DataValue; // 0x8 (16)
};

// ScriptStruct Engine.EdGraphPinType
struct FEdGraphPinType {
	struct FName PinCategory; // 0x0 (8)
	struct FName PinSubCategory; // 0x8 (8)
	struct TWeakObjectPtr<struct Object> PinSubCategoryObject; // 0x10 (8)
	struct FSimpleMemberReference PinSubCategoryMemberReference; // 0x18 (32)
	struct FEdGraphTerminalType PinValueType; // 0x38 (28)
	enum class EPinContainerType ContainerType; // 0x54 (1)
	char bIsArray : 1; // 0x55 (1)
	char bIsReference : 1; // 0x55 (1)
	char bIsConst : 1; // 0x55 (1)
	char bIsWeakPointer : 1; // 0x55 (1)
};

// ScriptStruct Engine.EdGraphTerminalType
struct FEdGraphTerminalType {
	struct FName TerminalCategory; // 0x0 (8)
	struct FName TerminalSubCategory; // 0x8 (8)
	struct TWeakObjectPtr<struct Object> TerminalSubCategoryObject; // 0x10 (8)
	bool bTerminalIsConst; // 0x18 (1)
	bool bTerminalIsWeakPointer; // 0x19 (1)
};

// ScriptStruct Engine.CompilerNativizationOptions
struct FCompilerNativizationOptions {
	struct FName PlatformName; // 0x0 (8)
	bool ServerOnlyPlatform; // 0x8 (1)
	bool ClientOnlyPlatform; // 0x9 (1)
	bool bExcludeMonolithicHeaders; // 0xA (1)
	struct TArray<struct FName> ExcludedModules; // 0x10 (16)
	struct TSet<struct FSoftObjectPath> ExcludedAssets; // 0x20 (80)
	struct TArray<struct FString> ExcludedFolderPaths; // 0x70 (16)
};

// ScriptStruct Engine.BPComponentClassOverride
struct FBPComponentClassOverride {
	struct FName ComponentName; // 0x0 (8)
	struct UClass* ComponentClass; // 0x8 (8)
};

// ScriptStruct Engine.BlueprintCookedComponentInstancingData
struct FBlueprintCookedComponentInstancingData {
	struct TArray<struct FBlueprintComponentChangedPropertyInfo> ChangedPropertyList; // 0x0 (16)
	bool bHasValidCookedData; // 0x21 (1)
};

// ScriptStruct Engine.BlueprintComponentChangedPropertyInfo
struct FBlueprintComponentChangedPropertyInfo {
	struct FName PropertyName; // 0x0 (8)
	int32_t ArrayIndex; // 0x8 (4)
	struct UStruct PropertyScope; // 0x10 (8)
};

// ScriptStruct Engine.EventGraphFastCallPair
struct FEventGraphFastCallPair {
	struct UFunction FunctionToPatch; // 0x0 (8)
	int32_t EventGraphCallOffset; // 0x8 (4)
};

// ScriptStruct Engine.GeomSelection
struct FGeomSelection {
	int32_t Type; // 0x0 (4)
	int32_t Index; // 0x4 (4)
	int32_t SelectionIndex; // 0x8 (4)
};

// ScriptStruct Engine.BuilderPoly
struct FBuilderPoly {
	struct TArray<int32_t> VertexIndices; // 0x0 (16)
	int32_t Direction; // 0x10 (4)
	struct FName ItemName; // 0x14 (8)
	int32_t PolyFlags; // 0x1C (4)
};

// ScriptStruct Engine.CachedAnimTransitionData
struct FCachedAnimTransitionData {
	struct FName StateMachineName; // 0x0 (8)
	struct FName FromStateName; // 0x8 (8)
	struct FName ToStateName; // 0x10 (8)
};

// ScriptStruct Engine.CachedAnimRelevancyData
struct FCachedAnimRelevancyData {
	struct FName StateMachineName; // 0x0 (8)
	struct FName StateName; // 0x8 (8)
};

// ScriptStruct Engine.CachedAnimAssetPlayerData
struct FCachedAnimAssetPlayerData {
	struct FName StateMachineName; // 0x0 (8)
	struct FName StateName; // 0x8 (8)
};

// ScriptStruct Engine.CachedAnimStateArray
struct FCachedAnimStateArray {
	struct TArray<struct FCachedAnimStateData> States; // 0x0 (16)
};

// ScriptStruct Engine.CachedAnimStateData
struct FCachedAnimStateData {
	struct FName StateMachineName; // 0x0 (8)
	struct FName StateName; // 0x8 (8)
};

// ScriptStruct Engine.ActiveCameraShakeInfo
struct FActiveCameraShakeInfo {
	struct UCameraShake ShakeInstance; // 0x0 (8)
	struct TWeakObjectPtr<struct UCameraShakeSourceComponent> ShakeSource; // 0x8 (8)
};

// ScriptStruct Engine.PooledCameraShakes
struct FPooledCameraShakes {
	struct TArray<struct UCameraShake> PooledShakes; // 0x0 (16)
};

// ScriptStruct Engine.VOscillator
struct FVOscillator {
	struct FFOscillator X; // 0x0 (12)
	struct FFOscillator Y; // 0xC (12)
	struct FFOscillator Z; // 0x18 (12)
};

// ScriptStruct Engine.FOscillator
struct FFOscillator {
	float Amplitude; // 0x0 (4)
	float Frequency; // 0x4 (4)
	enum class EInitialOscillatorOffset InitialOffset; // 0x8 (1)
	enum class EOscillatorWaveform Waveform; // 0x9 (1)
};

// ScriptStruct Engine.ROscillator
struct FROscillator {
	struct FFOscillator Pitch; // 0x0 (12)
	struct FFOscillator Yaw; // 0xC (12)
	struct FFOscillator Roll; // 0x18 (12)
};

// ScriptStruct Engine.MinimalViewInfo
struct FMinimalViewInfo {
	struct FVector Location; // 0x0 (12)
	struct FRotator Rotation; // 0xC (12)
	float FOV; // 0x18 (4)
	float DesiredFOV; // 0x1C (4)
	float OrthoWidth; // 0x20 (4)
	float OrthoNearClipPlane; // 0x24 (4)
	float OrthoFarClipPlane; // 0x28 (4)
	float AspectRatio; // 0x2C (4)
	char bConstrainAspectRatio : 1; // 0x30 (1)
	char bUseFieldOfViewForLOD : 1; // 0x30 (1)
	char pad_30_2 : 6; // 0x30 (1)
	enum class ECameraProjectionMode ProjectionMode; // 0x34 (1)
	float PostProcessBlendWeight; // 0x38 (4)
	struct FPostProcessSettings PostProcessSettings; // 0x40 (1376)
	struct FVector2D OffCenterProjectionOffset; // 0x5A0 (8)
};

// ScriptStruct Engine.PostProcessSettings
struct FPostProcessSettings {
	char bOverride_WhiteTemp : 1; // 0x0 (1)
	char bOverride_WhiteTint : 1; // 0x0 (1)
	char bOverride_ColorSaturation : 1; // 0x0 (1)
	char bOverride_ColorContrast : 1; // 0x0 (1)
	char bOverride_ColorGamma : 1; // 0x0 (1)
	char bOverride_ColorGain : 1; // 0x0 (1)
	char bOverride_ColorOffset : 1; // 0x0 (1)
	char bOverride_ColorSaturationShadows : 1; // 0x0 (1)
	char bOverride_ColorContrastShadows : 1; // 0x1 (1)
	char bOverride_ColorGammaShadows : 1; // 0x1 (1)
	char bOverride_ColorGainShadows : 1; // 0x1 (1)
	char bOverride_ColorOffsetShadows : 1; // 0x1 (1)
	char bOverride_ColorSaturationMidtones : 1; // 0x1 (1)
	char bOverride_ColorContrastMidtones : 1; // 0x1 (1)
	char bOverride_ColorGammaMidtones : 1; // 0x1 (1)
	char bOverride_ColorGainMidtones : 1; // 0x1 (1)
	char bOverride_ColorOffsetMidtones : 1; // 0x2 (1)
	char bOverride_ColorSaturationHighlights : 1; // 0x2 (1)
	char bOverride_ColorContrastHighlights : 1; // 0x2 (1)
	char bOverride_ColorGammaHighlights : 1; // 0x2 (1)
	char bOverride_ColorGainHighlights : 1; // 0x2 (1)
	char bOverride_ColorOffsetHighlights : 1; // 0x2 (1)
	char bOverride_ColorCorrectionShadowsMax : 1; // 0x2 (1)
	char bOverride_ColorCorrectionHighlightsMin : 1; // 0x2 (1)
	char bOverride_BlueCorrection : 1; // 0x3 (1)
	char bOverride_ExpandGamut : 1; // 0x3 (1)
	char bOverride_FilmWhitePoint : 1; // 0x3 (1)
	char bOverride_FilmSaturation : 1; // 0x3 (1)
	char bOverride_FilmChannelMixerRed : 1; // 0x3 (1)
	char bOverride_FilmChannelMixerGreen : 1; // 0x3 (1)
	char bOverride_FilmChannelMixerBlue : 1; // 0x3 (1)
	char bOverride_FilmContrast : 1; // 0x3 (1)
	char bOverride_FilmDynamicRange : 1; // 0x4 (1)
	char bOverride_FilmHealAmount : 1; // 0x4 (1)
	char bOverride_FilmToeAmount : 1; // 0x4 (1)
	char bOverride_FilmShadowTint : 1; // 0x4 (1)
	char bOverride_FilmShadowTintBlend : 1; // 0x4 (1)
	char bOverride_FilmShadowTintAmount : 1; // 0x4 (1)
	char bOverride_FilmSlope : 1; // 0x4 (1)
	char bOverride_FilmToe : 1; // 0x4 (1)
	char bOverride_FilmShoulder : 1; // 0x5 (1)
	char bOverride_FilmBlackClip : 1; // 0x5 (1)
	char bOverride_FilmWhiteClip : 1; // 0x5 (1)
	char bOverride_SceneColorTint : 1; // 0x5 (1)
	char bOverride_SceneFringeIntensity : 1; // 0x5 (1)
	char bOverride_ChromaticAberrationStartOffset : 1; // 0x5 (1)
	char bOverride_AmbientCubemapTint : 1; // 0x5 (1)
	char bOverride_AmbientCubemapIntensity : 1; // 0x5 (1)
	char bOverride_BloomMethod : 1; // 0x6 (1)
	char bOverride_BloomIntensity : 1; // 0x6 (1)
	char bOverride_BloomThreshold : 1; // 0x6 (1)
	char bOverride_Bloom1Tint : 1; // 0x6 (1)
	char bOverride_Bloom1Size : 1; // 0x6 (1)
	char bOverride_Bloom2Size : 1; // 0x6 (1)
	char bOverride_Bloom2Tint : 1; // 0x6 (1)
	char bOverride_Bloom3Tint : 1; // 0x6 (1)
	char bOverride_Bloom3Size : 1; // 0x7 (1)
	char bOverride_Bloom4Tint : 1; // 0x7 (1)
	char bOverride_Bloom4Size : 1; // 0x7 (1)
	char bOverride_Bloom5Tint : 1; // 0x7 (1)
	char bOverride_Bloom5Size : 1; // 0x7 (1)
	char bOverride_Bloom6Tint : 1; // 0x7 (1)
	char bOverride_Bloom6Size : 1; // 0x7 (1)
	char bOverride_BloomSizeScale : 1; // 0x7 (1)
	char bOverride_BloomConvolutionTexture : 1; // 0x8 (1)
	char bOverride_BloomConvolutionSize : 1; // 0x8 (1)
	char bOverride_BloomConvolutionCenterUV : 1; // 0x8 (1)
	char bOverride_BloomConvolutionPreFilter : 1; // 0x8 (1)
	char bOverride_BloomConvolutionPreFilterMin : 1; // 0x8 (1)
	char bOverride_BloomConvolutionPreFilterMax : 1; // 0x8 (1)
	char bOverride_BloomConvolutionPreFilterMult : 1; // 0x8 (1)
	char bOverride_BloomConvolutionBufferScale : 1; // 0x8 (1)
	char bOverride_BloomDirtMaskIntensity : 1; // 0x9 (1)
	char bOverride_BloomDirtMaskTint : 1; // 0x9 (1)
	char bOverride_BloomDirtMask : 1; // 0x9 (1)
	char bOverride_CameraShutterSpeed : 1; // 0x9 (1)
	char bOverride_CameraISO : 1; // 0x9 (1)
	char bOverride_AutoExposureMethod : 1; // 0x9 (1)
	char bOverride_AutoExposureLowPercent : 1; // 0x9 (1)
	char bOverride_AutoExposureHighPercent : 1; // 0x9 (1)
	char bOverride_AutoExposureMinBrightness : 1; // 0xA (1)
	char bOverride_AutoExposureMaxBrightness : 1; // 0xA (1)
	char bOverride_AutoExposureCalibrationConstant : 1; // 0xA (1)
	char bOverride_AutoExposureSpeedUp : 1; // 0xA (1)
	char bOverride_AutoExposureSpeedDown : 1; // 0xA (1)
	char bOverride_AutoExposureBias : 1; // 0xA (1)
	char bOverride_AutoExposureBiasCurve : 1; // 0xA (1)
	char bOverride_AutoExposureMeterMask : 1; // 0xA (1)
	char bOverride_AutoExposureApplyPhysicalCameraExposure : 1; // 0xB (1)
	char bOverride_HistogramLogMin : 1; // 0xB (1)
	char bOverride_HistogramLogMax : 1; // 0xB (1)
	char bOverride_LensFlareIntensity : 1; // 0xB (1)
	char bOverride_LensFlareTint : 1; // 0xB (1)
	char bOverride_LensFlareTints : 1; // 0xB (1)
	char bOverride_LensFlareBokehSize : 1; // 0xB (1)
	char bOverride_LensFlareBokehShape : 1; // 0xB (1)
	char bOverride_LensFlareThreshold : 1; // 0xC (1)
	char bOverride_VignetteIntensity : 1; // 0xC (1)
	char bOverride_GrainIntensity : 1; // 0xC (1)
	char bOverride_GrainJitter : 1; // 0xC (1)
	char bOverride_AmbientOcclusionIntensity : 1; // 0xC (1)
	char bOverride_AmbientOcclusionStaticFraction : 1; // 0xC (1)
	char bOverride_AmbientOcclusionRadius : 1; // 0xC (1)
	char bOverride_AmbientOcclusionFadeDistance : 1; // 0xC (1)
	char bOverride_AmbientOcclusionFadeRadius : 1; // 0xD (1)
	char bOverride_AmbientOcclusionDistance : 1; // 0xD (1)
	char bOverride_AmbientOcclusionRadiusInWS : 1; // 0xD (1)
	char bOverride_AmbientOcclusionPower : 1; // 0xD (1)
	char bOverride_AmbientOcclusionBias : 1; // 0xD (1)
	char bOverride_AmbientOcclusionQuality : 1; // 0xD (1)
	char bOverride_AmbientOcclusionMipBlend : 1; // 0xD (1)
	char bOverride_AmbientOcclusionMipScale : 1; // 0xD (1)
	char bOverride_AmbientOcclusionMipThreshold : 1; // 0xE (1)
	char pad_E_1 : 7; // 0xE (1)
	char bOverride_RayTracingAO : 1; // 0x10 (1)
	char pad_F_1 : 7; // 0xF (1)
	char pad_10_0 : 1; // 0x10 (1)
	char bOverride_RayTracingAOSamplesPerPixel : 1; // 0x10 (1)
	char pad_10_2 : 6; // 0x10 (1)
	char bOverride_LPVIntensity : 1; // 0x14 (1)
	char pad_11_1 : 7; // 0x11 (1)
	char pad_12_0 : 1; // 0x12 (1)
	char bOverride_LPVDirectionalOcclusionIntensity : 1; // 0x14 (1)
	char pad_12_2 : 6; // 0x12 (1)
	char pad_13_0 : 2; // 0x13 (1)
	char bOverride_LPVDirectionalOcclusionRadius : 1; // 0x14 (1)
	char pad_13_3 : 5; // 0x13 (1)
	char pad_14_0 : 3; // 0x14 (1)
	char bOverride_LPVDiffuseOcclusionExponent : 1; // 0x14 (1)
	char bOverride_LPVSpecularOcclusionExponent : 1; // 0x14 (1)
	char bOverride_LPVDiffuseOcclusionIntensity : 1; // 0x14 (1)
	char bOverride_LPVSpecularOcclusionIntensity : 1; // 0x14 (1)
	char bOverride_LPVSize : 1; // 0x14 (1)
	char bOverride_LPVSecondaryOcclusionIntensity : 1; // 0x15 (1)
	char bOverride_LPVSecondaryBounceIntensity : 1; // 0x15 (1)
	char bOverride_LPVGeometryVolumeBias : 1; // 0x15 (1)
	char bOverride_LPVVplInjectionBias : 1; // 0x15 (1)
	char bOverride_LPVEmissiveInjectionIntensity : 1; // 0x15 (1)
	char bOverride_LPVFadeRange : 1; // 0x15 (1)
	char bOverride_LPVDirectionalOcclusionFadeRange : 1; // 0x15 (1)
	char bOverride_IndirectLightingColor : 1; // 0x15 (1)
	char bOverride_IndirectLightingIntensity : 1; // 0x16 (1)
	char bOverride_ColorGradingIntensity : 1; // 0x16 (1)
	char bOverride_ColorGradingLUT : 1; // 0x16 (1)
	char bOverride_DepthOfFieldFocalDistance : 1; // 0x16 (1)
	char bOverride_DepthOfFieldFstop : 1; // 0x16 (1)
	char bOverride_DepthOfFieldMinFstop : 1; // 0x16 (1)
	char bOverride_DepthOfFieldBladeCount : 1; // 0x16 (1)
	char bOverride_DepthOfFieldSensorWidth : 1; // 0x16 (1)
	char bOverride_DepthOfFieldDepthBlurRadius : 1; // 0x17 (1)
	char bOverride_DOFNearStart : 1; // 0x17 (1)
	char bOverride_DOFNearEnd : 1; // 0x17 (1)
	char bOverride_DOFFarStart : 1; // 0x17 (1)
	char bOverride_DOFFarEnd : 1; // 0x17 (1)
	char bOverride_DOFExcludedSize : 1; // 0x17 (1)
	char bOverride_DOFPower : 1; // 0x17 (1)
	char bOverride_DepthOfFieldDepthBlurAmount : 1; // 0x17 (1)
	char bOverride_DepthOfFieldFocalRegion : 1; // 0x18 (1)
	char bOverride_DepthOfFieldNearTransitionRegion : 1; // 0x18 (1)
	char bOverride_DepthOfFieldFarTransitionRegion : 1; // 0x18 (1)
	char bOverride_DepthOfFieldScale : 1; // 0x18 (1)
	char bOverride_DepthOfFieldNearBlurSize : 1; // 0x18 (1)
	char bOverride_DepthOfFieldFarBlurSize : 1; // 0x18 (1)
	char bOverride_MobileHQGaussian : 1; // 0x18 (1)
	char bOverride_DepthOfFieldOcclusion : 1; // 0x18 (1)
	char bOverride_DepthOfFieldSkyFocusDistance : 1; // 0x19 (1)
	char bOverride_DepthOfFieldVignetteSize : 1; // 0x19 (1)
	char bOverride_MotionBlurAmount : 1; // 0x19 (1)
	char bOverride_MotionBlurMax : 1; // 0x19 (1)
	char bOverride_MotionBlurTargetFPS : 1; // 0x19 (1)
	char bOverride_MotionBlurPerObjectSize : 1; // 0x19 (1)
	char bOverride_ScreenPercentage : 1; // 0x19 (1)
	char bOverride_ScreenSpaceReflectionIntensity : 1; // 0x19 (1)
	char bOverride_ScreenSpaceReflectionQuality : 1; // 0x1A (1)
	char bOverride_ScreenSpaceReflectionMaxRoughness : 1; // 0x1A (1)
	char bOverride_ScreenSpaceReflectionRoughnessScale : 1; // 0x1A (1)
	char pad_1A_3 : 5; // 0x1A (1)
	char bOverride_ReflectionsType : 1; // 0x1C (1)
	char pad_1B_1 : 7; // 0x1B (1)
	char pad_1C_0 : 1; // 0x1C (1)
	char bOverride_RayTracingReflectionsMaxRoughness : 1; // 0x1C (1)
	char bOverride_RayTracingReflectionsMaxBounces : 1; // 0x1C (1)
	char bOverride_RayTracingReflectionsSamplesPerPixel : 1; // 0x1C (1)
	char bOverride_RayTracingReflectionsShadows : 1; // 0x1C (1)
	char bOverride_RayTracingReflectionsTranslucency : 1; // 0x1C (1)
	char bOverride_TranslucencyType : 1; // 0x1C (1)
	char bOverride_RayTracingTranslucencyMaxRoughness : 1; // 0x1C (1)
	char bOverride_RayTracingTranslucencyRefractionRays : 1; // 0x1D (1)
	char bOverride_RayTracingTranslucencySamplesPerPixel : 1; // 0x1D (1)
	char bOverride_RayTracingTranslucencyShadows : 1; // 0x1D (1)
	char bOverride_RayTracingTranslucencyRefraction : 1; // 0x1D (1)
	char bOverride_RayTracingGI : 1; // 0x1D (1)
	char bOverride_RayTracingGIMaxBounces : 1; // 0x1D (1)
	char bOverride_RayTracingGISamplesPerPixel : 1; // 0x1D (1)
	char bOverride_PathTracingMaxBounces : 1; // 0x1D (1)
	char bOverride_PathTracingSamplesPerPixel : 1; // 0x1E (1)
	char pad_1E_1 : 7; // 0x1E (1)
	char bMobileHQGaussian : 1; // 0x20 (1)
	char pad_1F_1 : 7; // 0x1F (1)
	enum class EBloomMethod BloomMethod; // 0x21 (1)
	enum class EAutoExposureMethod AutoExposureMethod; // 0x22 (1)
	float WhiteTemp; // 0x24 (4)
	float WhiteTint; // 0x28 (4)
	struct FVector4 ColorSaturation; // 0x30 (16)
	struct FVector4 ColorContrast; // 0x40 (16)
	struct FVector4 ColorGamma; // 0x50 (16)
	struct FVector4 ColorGain; // 0x60 (16)
	struct FVector4 ColorOffset; // 0x70 (16)
	struct FVector4 ColorSaturationShadows; // 0x80 (16)
	struct FVector4 ColorContrastShadows; // 0x90 (16)
	struct FVector4 ColorGammaShadows; // 0xA0 (16)
	struct FVector4 ColorGainShadows; // 0xB0 (16)
	struct FVector4 ColorOffsetShadows; // 0xC0 (16)
	struct FVector4 ColorSaturationMidtones; // 0xD0 (16)
	struct FVector4 ColorContrastMidtones; // 0xE0 (16)
	struct FVector4 ColorGammaMidtones; // 0xF0 (16)
	struct FVector4 ColorGainMidtones; // 0x100 (16)
	struct FVector4 ColorOffsetMidtones; // 0x110 (16)
	struct FVector4 ColorSaturationHighlights; // 0x120 (16)
	struct FVector4 ColorContrastHighlights; // 0x130 (16)
	struct FVector4 ColorGammaHighlights; // 0x140 (16)
	struct FVector4 ColorGainHighlights; // 0x150 (16)
	struct FVector4 ColorOffsetHighlights; // 0x160 (16)
	float ColorCorrectionHighlightsMin; // 0x170 (4)
	float ColorCorrectionShadowsMax; // 0x174 (4)
	float BlueCorrection; // 0x178 (4)
	float ExpandGamut; // 0x17C (4)
	float FilmSlope; // 0x180 (4)
	float FilmToe; // 0x184 (4)
	float FilmShoulder; // 0x188 (4)
	float FilmBlackClip; // 0x18C (4)
	float FilmWhiteClip; // 0x190 (4)
	struct FLinearColor FilmWhitePoint; // 0x194 (16)
	struct FLinearColor FilmShadowTint; // 0x1A4 (16)
	float FilmShadowTintBlend; // 0x1B4 (4)
	float FilmShadowTintAmount; // 0x1B8 (4)
	float FilmSaturation; // 0x1BC (4)
	struct FLinearColor FilmChannelMixerRed; // 0x1C0 (16)
	struct FLinearColor FilmChannelMixerGreen; // 0x1D0 (16)
	struct FLinearColor FilmChannelMixerBlue; // 0x1E0 (16)
	float FilmContrast; // 0x1F0 (4)
	float FilmToeAmount; // 0x1F4 (4)
	float FilmHealAmount; // 0x1F8 (4)
	float FilmDynamicRange; // 0x1FC (4)
	struct FLinearColor SceneColorTint; // 0x200 (16)
	float SceneFringeIntensity; // 0x210 (4)
	float ChromaticAberrationStartOffset; // 0x214 (4)
	float BloomIntensity; // 0x218 (4)
	float BloomThreshold; // 0x21C (4)
	float BloomSizeScale; // 0x220 (4)
	float Bloom1Size; // 0x224 (4)
	float Bloom2Size; // 0x228 (4)
	float Bloom3Size; // 0x22C (4)
	float Bloom4Size; // 0x230 (4)
	float Bloom5Size; // 0x234 (4)
	float Bloom6Size; // 0x238 (4)
	struct FLinearColor Bloom1Tint; // 0x23C (16)
	struct FLinearColor Bloom2Tint; // 0x24C (16)
	struct FLinearColor Bloom3Tint; // 0x25C (16)
	struct FLinearColor Bloom4Tint; // 0x26C (16)
	struct FLinearColor Bloom5Tint; // 0x27C (16)
	struct FLinearColor Bloom6Tint; // 0x28C (16)
	float BloomConvolutionSize; // 0x29C (4)
	struct UTexture2D BloomConvolutionTexture; // 0x2A0 (8)
	struct FVector2D BloomConvolutionCenterUV; // 0x2A8 (8)
	float BloomConvolutionPreFilterMin; // 0x2B0 (4)
	float BloomConvolutionPreFilterMax; // 0x2B4 (4)
	float BloomConvolutionPreFilterMult; // 0x2B8 (4)
	float BloomConvolutionBufferScale; // 0x2BC (4)
	struct UTexture BloomDirtMask; // 0x2C0 (8)
	float BloomDirtMaskIntensity; // 0x2C8 (4)
	struct FLinearColor BloomDirtMaskTint; // 0x2CC (16)
	struct FLinearColor AmbientCubemapTint; // 0x2DC (16)
	float AmbientCubemapIntensity; // 0x2EC (4)
	struct UTextureCube AmbientCubemap; // 0x2F0 (8)
	float CameraShutterSpeed; // 0x2F8 (4)
	float CameraISO; // 0x2FC (4)
	float DepthOfFieldFstop; // 0x300 (4)
	float DepthOfFieldMinFstop; // 0x304 (4)
	int32_t DepthOfFieldBladeCount; // 0x308 (4)
	float AutoExposureBias; // 0x30C (4)
	float AutoExposureBiasBackup; // 0x310 (4)
	char bOverride_AutoExposureBiasBackup : 1; // 0x314 (1)
	char pad_30E_1 : 7; // 0x30E (1)
	char AutoExposureApplyPhysicalCameraExposure : 1; // 0x318 (1)
	char pad_30F_1 : 7; // 0x30F (1)
	struct UCurveFloat AutoExposureBiasCurve; // 0x320 (8)
	struct UTexture AutoExposureMeterMask; // 0x328 (8)
	float AutoExposureLowPercent; // 0x330 (4)
	float AutoExposureHighPercent; // 0x334 (4)
	float AutoExposureMinBrightness; // 0x338 (4)
	float AutoExposureMaxBrightness; // 0x33C (4)
	float AutoExposureSpeedUp; // 0x340 (4)
	float AutoExposureSpeedDown; // 0x344 (4)
	float HistogramLogMin; // 0x348 (4)
	float HistogramLogMax; // 0x34C (4)
	float AutoExposureCalibrationConstant; // 0x350 (4)
	float LensFlareIntensity; // 0x354 (4)
	struct FLinearColor LensFlareTint; // 0x358 (16)
	float LensFlareBokehSize; // 0x368 (4)
	float LensFlareThreshold; // 0x36C (4)
	struct UTexture LensFlareBokehShape; // 0x370 (8)
	struct FLinearColor LensFlareTints[0x8]; // 0x378 (128)
	float VignetteIntensity; // 0x3F8 (4)
	float GrainJitter; // 0x3FC (4)
	float GrainIntensity; // 0x400 (4)
	float AmbientOcclusionIntensity; // 0x404 (4)
	float AmbientOcclusionStaticFraction; // 0x408 (4)
	float AmbientOcclusionRadius; // 0x40C (4)
	char AmbientOcclusionRadiusInWS : 1; // 0x410 (1)
	char pad_400_1 : 7; // 0x400 (1)
	float AmbientOcclusionFadeDistance; // 0x414 (4)
	float AmbientOcclusionFadeRadius; // 0x418 (4)
	float AmbientOcclusionDistance; // 0x41C (4)
	float AmbientOcclusionPower; // 0x420 (4)
	float AmbientOcclusionBias; // 0x424 (4)
	float AmbientOcclusionQuality; // 0x428 (4)
	float AmbientOcclusionMipBlend; // 0x42C (4)
	float AmbientOcclusionMipScale; // 0x430 (4)
	float AmbientOcclusionMipThreshold; // 0x434 (4)
	char RayTracingAO : 1; // 0x438 (1)
	char pad_425_1 : 7; // 0x425 (1)
	int32_t RayTracingAOSamplesPerPixel; // 0x43C (4)
	struct FLinearColor IndirectLightingColor; // 0x440 (16)
	float IndirectLightingIntensity; // 0x450 (4)
	enum class ERayTracingGlobalIlluminationType RayTracingGIType; // 0x454 (1)
	int32_t RayTracingGIMaxBounces; // 0x458 (4)
	int32_t RayTracingGISamplesPerPixel; // 0x45C (4)
	float ColorGradingIntensity; // 0x460 (4)
	struct UTexture ColorGradingLUT; // 0x468 (8)
	float DepthOfFieldSensorWidth; // 0x470 (4)
	float DepthOfFieldFocalDistance; // 0x474 (4)
	float DepthOfFieldDepthBlurAmount; // 0x478 (4)
	float DepthOfFieldDepthBlurRadius; // 0x47C (4)
	float DOFNearStart; // 0x480 (4)
	float DOFNearEnd; // 0x484 (4)
	float DOFFarStart; // 0x488 (4)
	float DOFFarEnd; // 0x48C (4)
	float DOFExcludedSize; // 0x490 (4)
	float DOFPower; // 0x494 (4)
	float DepthOfFieldFocalRegion; // 0x498 (4)
	float DepthOfFieldNearTransitionRegion; // 0x49C (4)
	float DepthOfFieldFarTransitionRegion; // 0x4A0 (4)
	float DepthOfFieldScale; // 0x4A4 (4)
	float DepthOfFieldNearBlurSize; // 0x4A8 (4)
	float DepthOfFieldFarBlurSize; // 0x4AC (4)
	float DepthOfFieldOcclusion; // 0x4B0 (4)
	float DepthOfFieldSkyFocusDistance; // 0x4B4 (4)
	float DepthOfFieldVignetteSize; // 0x4B8 (4)
	float MotionBlurAmount; // 0x4BC (4)
	float MotionBlurMax; // 0x4C0 (4)
	int32_t MotionBlurTargetFPS; // 0x4C4 (4)
	float MotionBlurPerObjectSize; // 0x4C8 (4)
	float LPVIntensity; // 0x4CC (4)
	float LPVVplInjectionBias; // 0x4D0 (4)
	float LPVSize; // 0x4D4 (4)
	float LPVSecondaryOcclusionIntensity; // 0x4D8 (4)
	float LPVSecondaryBounceIntensity; // 0x4DC (4)
	float LPVGeometryVolumeBias; // 0x4E0 (4)
	float LPVEmissiveInjectionIntensity; // 0x4E4 (4)
	float LPVDirectionalOcclusionIntensity; // 0x4E8 (4)
	float LPVDirectionalOcclusionRadius; // 0x4EC (4)
	float LPVDiffuseOcclusionExponent; // 0x4F0 (4)
	float LPVSpecularOcclusionExponent; // 0x4F4 (4)
	float LPVDiffuseOcclusionIntensity; // 0x4F8 (4)
	float LPVSpecularOcclusionIntensity; // 0x4FC (4)
	enum class EReflectionsType ReflectionsType; // 0x500 (1)
	float ScreenSpaceReflectionIntensity; // 0x504 (4)
	float ScreenSpaceReflectionQuality; // 0x508 (4)
	float ScreenSpaceReflectionMaxRoughness; // 0x50C (4)
	float RayTracingReflectionsMaxRoughness; // 0x510 (4)
	int32_t RayTracingReflectionsMaxBounces; // 0x514 (4)
	int32_t RayTracingReflectionsSamplesPerPixel; // 0x518 (4)
	enum class EReflectedAndRefractedRayTracedShadows RayTracingReflectionsShadows; // 0x51C (1)
	char RayTracingReflectionsTranslucency : 1; // 0x51D (1)
	char pad_4FD_1 : 7; // 0x4FD (1)
	enum class ETranslucencyType TranslucencyType; // 0x51E (1)
	float RayTracingTranslucencyMaxRoughness; // 0x520 (4)
	int32_t RayTracingTranslucencyRefractionRays; // 0x524 (4)
	int32_t RayTracingTranslucencySamplesPerPixel; // 0x528 (4)
	enum class EReflectedAndRefractedRayTracedShadows RayTracingTranslucencyShadows; // 0x52C (1)
	char RayTracingTranslucencyRefraction : 1; // 0x52D (1)
	char pad_50C_1 : 7; // 0x50C (1)
	int32_t PathTracingMaxBounces; // 0x530 (4)
	int32_t PathTracingSamplesPerPixel; // 0x534 (4)
	float LPVFadeRange; // 0x538 (4)
	float LPVDirectionalOcclusionFadeRange; // 0x53C (4)
	float ScreenPercentage; // 0x540 (4)
	struct FWeightedBlendables WeightedBlendables; // 0x548 (16)
};

// ScriptStruct Engine.WeightedBlendables
struct FWeightedBlendables {
	struct TArray<struct FWeightedBlendable> Array; // 0x0 (16)
};

// ScriptStruct Engine.WeightedBlendable
struct FWeightedBlendable {
	float Weight; // 0x0 (4)
	struct Object Object; // 0x8 (8)
};

// ScriptStruct Engine.CanvasIcon
struct FCanvasIcon {
	struct UTexture Texture; // 0x0 (8)
	float U; // 0x8 (4)
	float V; // 0xC (4)
	float UL; // 0x10 (4)
	float VL; // 0x14 (4)
};

// ScriptStruct Engine.WrappedStringElement
struct FWrappedStringElement {
	struct FString Value; // 0x0 (16)
	struct FVector2D LineExtent; // 0x10 (8)
};

// ScriptStruct Engine.TextSizingParameters
struct FTextSizingParameters {
	float DrawX; // 0x0 (4)
	float DrawY; // 0x4 (4)
	float DrawXL; // 0x8 (4)
	float DrawYL; // 0xC (4)
	struct FVector2D Scaling; // 0x10 (8)
	struct UFont DrawFont; // 0x18 (8)
	struct FVector2D SpacingAdjust; // 0x20 (8)
};

// ScriptStruct Engine.BasedMovementInfo
struct FBasedMovementInfo {
	struct UPrimitiveComponent MovementBase; // 0x0 (8)
	struct FName BoneName; // 0x8 (8)
	struct FVector_NetQuantize100 Location; // 0x10 (12)
	struct FRotator Rotation; // 0x1C (12)
	bool bServerHasBaseComponent; // 0x28 (1)
	bool bRelativeRotation; // 0x29 (1)
	bool bServerHasVelocity; // 0x2A (1)
};

// ScriptStruct Engine.SimulatedRootMotionReplicatedMove
struct FSimulatedRootMotionReplicatedMove {
	float Time; // 0x0 (4)
	struct FRepRootMotionMontage RootMotion; // 0x8 (152)
};

// ScriptStruct Engine.RepRootMotionMontage
struct FRepRootMotionMontage {
	bool bIsActive; // 0x0 (1)
	struct UAnimMontage AnimMontage; // 0x8 (8)
	float Position; // 0x10 (4)
	struct FVector_NetQuantize100 Location; // 0x14 (12)
	struct FRotator Rotation; // 0x20 (12)
	struct UPrimitiveComponent MovementBase; // 0x30 (8)
	struct FName MovementBaseBoneName; // 0x38 (8)
	bool bRelativePosition; // 0x40 (1)
	bool bRelativeRotation; // 0x41 (1)
	struct FRootMotionSourceGroup AuthoritativeRootMotion; // 0x48 (56)
	struct FVector_NetQuantize10 Acceleration; // 0x80 (12)
	struct FVector_NetQuantize10 LinearVelocity; // 0x8C (12)
};

// ScriptStruct Engine.RootMotionSourceGroup
struct FRootMotionSourceGroup {
	char bHasAdditiveSources : 1; // 0x28 (1)
	char pad_0_1 : 7; // 0x0 (1)
	char pad_1_0 : 1; // 0x1 (1)
	char bHasOverrideSources : 1; // 0x28 (1)
	char pad_1_2 : 6; // 0x1 (1)
	char pad_2_0 : 2; // 0x2 (1)
	char bHasOverrideSourcesWithIgnoreZAccumulate : 1; // 0x28 (1)
	char pad_2_3 : 5; // 0x2 (1)
	char pad_3_0 : 3; // 0x3 (1)
	char bIsAdditiveVelocityApplied : 1; // 0x28 (1)
	char pad_3_4 : 4; // 0x3 (1)
	struct FRootMotionSourceSettings LastAccumulatedSettings; // 0x29 (1)
	struct FVector_NetQuantize10 LastPreAdditiveVelocity; // 0x2C (12)
};

// ScriptStruct Engine.RootMotionSourceSettings
struct FRootMotionSourceSettings {
	char Flags; // 0x0 (1)
};

// ScriptStruct Engine.FindFloorResult
struct FFindFloorResult {
	char bBlockingHit : 1; // 0x0 (1)
	char bWalkableFloor : 1; // 0x0 (1)
	char bLineTrace : 1; // 0x0 (1)
	char pad_0_3 : 5; // 0x0 (1)
	float FloorDist; // 0x4 (4)
	float LineDist; // 0x8 (4)
	struct FHitResult HitResult; // 0xC (136)
};

// ScriptStruct Engine.ChildActorComponentInstanceData
struct FChildActorComponentInstanceData : FSceneComponentInstanceData {
	struct UClass* ChildActorClass; // 0xA8 (8)
	struct FName ChildActorName; // 0xB0 (8)
	struct TArray<struct FChildActorAttachedActorInfo> AttachedActors; // 0xB8 (16)
};

// ScriptStruct Engine.ChildActorAttachedActorInfo
struct FChildActorAttachedActorInfo {
	struct TWeakObjectPtr<struct UActor> Actor; // 0x0 (8)
	struct FName SocketName; // 0x8 (8)
	struct FTransform RelativeTransform; // 0x10 (48)
};

// ScriptStruct Engine.CustomProfile
struct FCustomProfile {
	struct FName Name; // 0x0 (8)
	struct TArray<struct FResponseChannel> CustomResponses; // 0x8 (16)
};

// ScriptStruct Engine.CustomChannelSetup
struct FCustomChannelSetup {
	enum class ECollisionChannel Channel; // 0x0 (1)
	enum class ECollisionResponse DefaultResponse; // 0x1 (1)
	bool bTraceType; // 0x2 (1)
	bool bStaticObject; // 0x3 (1)
	struct FName Name; // 0x4 (8)
};

// ScriptStruct Engine.CollisionResponseTemplate
struct FCollisionResponseTemplate {
	struct FName Name; // 0x0 (8)
	enum class ECollisionEnabled CollisionEnabled; // 0x8 (1)
	bool bCanModify; // 0xA (1)
	struct FName ObjectTypeName; // 0x2C (8)
	struct TArray<struct FResponseChannel> CustomResponses; // 0x38 (16)
};

// ScriptStruct Engine.BlueprintComponentDelegateBinding
struct FBlueprintComponentDelegateBinding {
	struct FName ComponentPropertyName; // 0x0 (8)
	struct FName DelegatePropertyName; // 0x8 (8)
	struct FName FunctionNameToBind; // 0x10 (8)
};

// ScriptStruct Engine.MeshUVChannelInfo
struct FMeshUVChannelInfo {
	bool bInitialized; // 0x0 (1)
	bool bOverrideDensities; // 0x1 (1)
	float LocalUVDensities[0x4]; // 0x4 (16)
};

// ScriptStruct Engine.AutoCompleteNode
struct FAutoCompleteNode {
	int32_t IndexChar; // 0x0 (4)
	struct TArray<int32_t> AutoCompleteListIndices; // 0x8 (16)
};

// ScriptStruct Engine.AngularDriveConstraint
struct FAngularDriveConstraint {
	struct FConstraintDrive TwistDrive; // 0x0 (16)
	struct FConstraintDrive SwingDrive; // 0x10 (16)
	struct FConstraintDrive SlerpDrive; // 0x20 (16)
	struct FRotator OrientationTarget; // 0x30 (12)
	struct FVector AngularVelocityTarget; // 0x3C (12)
	enum class EAngularDriveMode AngularDriveMode; // 0x48 (1)
};

// ScriptStruct Engine.ConstraintDrive
struct FConstraintDrive {
	float Stiffness; // 0x0 (4)
	float Damping; // 0x4 (4)
	float MaxForce; // 0x8 (4)
	char bEnablePositionDrive : 1; // 0xC (1)
	char bEnableVelocityDrive : 1; // 0xC (1)
};

// ScriptStruct Engine.LinearDriveConstraint
struct FLinearDriveConstraint {
	struct FVector PositionTarget; // 0x0 (12)
	struct FVector VelocityTarget; // 0xC (12)
	struct FConstraintDrive XDrive; // 0x18 (16)
	struct FConstraintDrive YDrive; // 0x28 (16)
	struct FConstraintDrive ZDrive; // 0x38 (16)
	char bEnablePositionDrive : 1; // 0x48 (1)
};

// ScriptStruct Engine.ConstraintInstance
struct FConstraintInstance {
	struct FName JointName; // 0x18 (8)
	struct FName ConstraintBone1; // 0x20 (8)
	struct FName ConstraintBone2; // 0x28 (8)
	struct FVector Pos1; // 0x30 (12)
	struct FVector PriAxis1; // 0x3C (12)
	struct FVector SecAxis1; // 0x48 (12)
	struct FVector Pos2; // 0x54 (12)
	struct FVector PriAxis2; // 0x60 (12)
	struct FVector SecAxis2; // 0x6C (12)
	struct FRotator AngularRotationOffset; // 0x78 (12)
	char bScaleLinearLimits : 1; // 0x84 (1)
	char pad_6C_1 : 7; // 0x6C (1)
	struct FConstraintProfileProperties ProfileInstance; // 0x8C (260)
};

// ScriptStruct Engine.ConstraintProfileProperties
struct FConstraintProfileProperties {
	float ProjectionLinearTolerance; // 0x0 (4)
	float ProjectionAngularTolerance; // 0x4 (4)
	float LinearBreakThreshold; // 0x8 (4)
	float AngularBreakThreshold; // 0xC (4)
	struct FLinearConstraint LinearLimit; // 0x10 (28)
	struct FConeConstraint ConeLimit; // 0x2C (32)
	struct FTwistConstraint TwistLimit; // 0x4C (28)
	struct FLinearDriveConstraint LinearDrive; // 0x68 (76)
	struct FAngularDriveConstraint AngularDrive; // 0xB4 (76)
	char bDisableCollision : 1; // 0x100 (1)
	char bParentDominates : 1; // 0x100 (1)
	char bEnableProjection : 1; // 0x100 (1)
	char bAngularBreakable : 1; // 0x100 (1)
	char bLinearBreakable : 1; // 0x100 (1)
};

// ScriptStruct Engine.ConstraintBaseParams
struct FConstraintBaseParams {
	float Stiffness; // 0x0 (4)
	float Damping; // 0x4 (4)
	float Restitution; // 0x8 (4)
	float ContactDistance; // 0xC (4)
	char bSoftConstraint : 1; // 0x10 (1)
};

// ScriptStruct Engine.TwistConstraint
struct FTwistConstraint : FConstraintBaseParams {
	float TwistLimitDegrees; // 0x14 (4)
	enum class EAngularConstraintMotion TwistMotion; // 0x18 (1)
};

// ScriptStruct Engine.ConeConstraint
struct FConeConstraint : FConstraintBaseParams {
	float Swing1LimitDegrees; // 0x14 (4)
	float Swing2LimitDegrees; // 0x18 (4)
	enum class EAngularConstraintMotion Swing1Motion; // 0x1C (1)
	enum class EAngularConstraintMotion Swing2Motion; // 0x1D (1)
};

// ScriptStruct Engine.LinearConstraint
struct FLinearConstraint : FConstraintBaseParams {
	float Limit; // 0x14 (4)
	enum class ELinearConstraintMotion XMotion; // 0x18 (1)
	enum class ELinearConstraintMotion YMotion; // 0x19 (1)
	enum class ELinearConstraintMotion ZMotion; // 0x1A (1)
};

// ScriptStruct Engine.CullDistanceSizePair
struct FCullDistanceSizePair {
	float Size; // 0x0 (4)
	float CullDistance; // 0x4 (4)
};

// ScriptStruct Engine.RuntimeCurveLinearColor
struct FRuntimeCurveLinearColor {
	struct FRichCurve ColorCurves[0x4]; // 0x0 (512)
	struct UCurveLinearColor ExternalCurve; // 0x200 (8)
};

// ScriptStruct Engine.NamedCurveValue
struct FNamedCurveValue {
	struct FName Name; // 0x0 (8)
	float Value; // 0x8 (4)
};

// ScriptStruct Engine.CurveTableRowHandle
struct FCurveTableRowHandle {
	struct UCurveTable CurveTable; // 0x0 (8)
	struct FName RowName; // 0x8 (8)
};

// ScriptStruct Engine.DataTableCategoryHandle
struct FDataTableCategoryHandle {
	struct UDataTable DataTable; // 0x0 (8)
	struct FName ColumnName; // 0x8 (8)
	struct FName RowContents; // 0x10 (8)
};

// ScriptStruct Engine.DataTableRowHandle
struct FDataTableRowHandle {
	struct UDataTable DataTable; // 0x0 (8)
	struct FName RowName; // 0x8 (8)
};

// ScriptStruct Engine.DebugCameraControllerSettingsViewModeIndex
struct FDebugCameraControllerSettingsViewModeIndex {
	enum class EViewModeIndex ViewModeIndex; // 0x8 (1)
};

// ScriptStruct Engine.DebugDisplayProperty
struct FDebugDisplayProperty {
	struct Object Obj; // 0x0 (8)
	struct UClass* WithinClass; // 0x8 (8)
};

// ScriptStruct Engine.DebugTextInfo
struct FDebugTextInfo {
	struct UActor SrcActor; // 0x0 (8)
	struct FVector SrcActorOffset; // 0x8 (12)
	struct FVector SrcActorDesiredOffset; // 0x14 (12)
	struct FString DebugText; // 0x20 (16)
	float TimeRemaining; // 0x30 (4)
	float Duration; // 0x34 (4)
	struct FColor TextColor; // 0x38 (4)
	char bAbsoluteLocation : 1; // 0x3C (1)
	char bKeepAttachedToActor : 1; // 0x3C (1)
	char bDrawShadow : 1; // 0x3C (1)
	char pad_3C_3 : 5; // 0x3C (1)
	struct FVector OrigActorLocation; // 0x40 (12)
	struct UFont Font; // 0x50 (8)
	float FontScale; // 0x58 (4)
};

// ScriptStruct Engine.MulticastRecordOptions
struct FMulticastRecordOptions {
	struct FString FuncPathName; // 0x0 (16)
	bool bServerSkip; // 0x10 (1)
	bool bClientSkip; // 0x11 (1)
};

// ScriptStruct Engine.RollbackNetStartupActorInfo
struct FRollbackNetStartupActorInfo {
	struct Object Archetype; // 0x8 (8)
	struct ULevel Level; // 0x38 (8)
	struct TArray<struct Object> ObjReferences; // 0xA0 (16)
};

// ScriptStruct Engine.LevelNameAndTime
struct FLevelNameAndTime {
	struct FString LevelName; // 0x0 (16)
	uint32_t LevelChangeTimeInMS; // 0x10 (4)
};

// ScriptStruct Engine.DialogueWaveParameter
struct FDialogueWaveParameter {
	struct UDialogueWave DialogueWave; // 0x0 (8)
	struct FDialogueContext Context; // 0x8 (24)
};

// ScriptStruct Engine.DialogueContext
struct FDialogueContext {
	struct UDialogueVoice Speaker; // 0x0 (8)
	struct TArray<struct UDialogueVoice> Targets; // 0x8 (16)
};

// ScriptStruct Engine.DialogueContextMapping
struct FDialogueContextMapping {
	struct FDialogueContext Context; // 0x0 (24)
	struct USoundWave SoundWave; // 0x18 (8)
	struct FString LocalizationKeyFormat; // 0x20 (16)
	struct UDialogueSoundWaveProxy Proxy; // 0x30 (8)
};

// ScriptStruct Engine.RawDistributionFloat
struct FRawDistributionFloat : FRawDistribution {
	float MinValue; // 0x20 (4)
	float MaxValue; // 0x24 (4)
	struct UDistributionFloat Distribution; // 0x28 (8)
};

// ScriptStruct Engine.RawDistributionVector
struct FRawDistributionVector : FRawDistribution {
	float MinValue; // 0x20 (4)
	float MaxValue; // 0x24 (4)
	struct FVector MinValueVec; // 0x28 (12)
	struct FVector MaxValueVec; // 0x34 (12)
	struct UDistributionVector Distribution; // 0x40 (8)
};

// ScriptStruct Engine.GraphReference
struct FGraphReference {
	struct UEdGraph MacroGraph; // 0x0 (8)
	struct UBlueprint GraphBlueprint; // 0x8 (8)
	struct FGuid GraphGuid; // 0x10 (16)
};

// ScriptStruct Engine.EdGraphPinReference
struct FEdGraphPinReference {
	struct TWeakObjectPtr<struct UEdGraphNode> OwningNode; // 0x0 (8)
	struct FGuid PinID; // 0x8 (16)
};

// ScriptStruct Engine.EdGraphSchemaAction
struct FEdGraphSchemaAction {
	struct FText MenuDescription; // 0x8 (24)
	struct FText TooltipDescription; // 0x20 (24)
	struct FText Category; // 0x38 (24)
	struct FText Keywords; // 0x50 (24)
	int32_t Grouping; // 0x68 (4)
	int32_t SectionID; // 0x6C (4)
	struct TArray<struct FString> MenuDescriptionArray; // 0x70 (16)
	struct TArray<struct FString> FullSearchTitlesArray; // 0x80 (16)
	struct TArray<struct FString> FullSearchKeywordsArray; // 0x90 (16)
	struct TArray<struct FString> FullSearchCategoryArray; // 0xA0 (16)
	struct TArray<struct FString> LocalizedMenuDescriptionArray; // 0xB0 (16)
	struct TArray<struct FString> LocalizedFullSearchTitlesArray; // 0xC0 (16)
	struct TArray<struct FString> LocalizedFullSearchKeywordsArray; // 0xD0 (16)
	struct TArray<struct FString> LocalizedFullSearchCategoryArray; // 0xE0 (16)
	struct FString SearchText; // 0xF0 (16)
};

// ScriptStruct Engine.EdGraphSchemaAction_NewNode
struct FEdGraphSchemaAction_NewNode : FEdGraphSchemaAction {
	struct UEdGraphNode NodeTemplate; // 0x100 (8)
};

// ScriptStruct Engine.PluginRedirect
struct FPluginRedirect {
	struct FString OldPluginName; // 0x0 (16)
	struct FString NewPluginName; // 0x10 (16)
};

// ScriptStruct Engine.StructRedirect
struct FStructRedirect {
	struct FName OldStructName; // 0x0 (8)
	struct FName NewStructName; // 0x8 (8)
};

// ScriptStruct Engine.ClassRedirect
struct FClassRedirect {
	struct FName ObjectName; // 0x0 (8)
	struct FName OldClassName; // 0x8 (8)
	struct FName NewClassName; // 0x10 (8)
	struct FName OldSubobjName; // 0x18 (8)
	struct FName NewSubobjName; // 0x20 (8)
	struct FName NewClassClass; // 0x28 (8)
	struct FName NewClassPackage; // 0x30 (8)
	bool InstanceOnly; // 0x38 (1)
};

// ScriptStruct Engine.GameNameRedirect
struct FGameNameRedirect {
	struct FName OldGameName; // 0x0 (8)
	struct FName NewGameName; // 0x8 (8)
};

// ScriptStruct Engine.ScreenMessageString
struct FScreenMessageString {
	uint64_t Key; // 0x0 (8)
	struct FString ScreenMessage; // 0x8 (16)
	struct FColor DisplayColor; // 0x18 (4)
	float TimeToDisplay; // 0x1C (4)
	float CurrentTimeDisplayed; // 0x20 (4)
	struct FVector2D TextScale; // 0x24 (8)
};

// ScriptStruct Engine.DropNoteInfo
struct FDropNoteInfo {
	struct FVector Location; // 0x0 (12)
	struct FRotator Rotation; // 0xC (12)
	struct FString Comment; // 0x18 (16)
};

// ScriptStruct Engine.StatColorMapping
struct FStatColorMapping {
	struct FString StatName; // 0x0 (16)
	struct TArray<struct FStatColorMapEntry> ColorMap; // 0x10 (16)
	char DisableBlend : 1; // 0x20 (1)
};

// ScriptStruct Engine.StatColorMapEntry
struct FStatColorMapEntry {
	float In; // 0x0 (4)
	struct FColor Out; // 0x4 (4)
};

// ScriptStruct Engine.WorldContext
struct FWorldContext {
	struct FURL LastURL; // 0xD0 (104)
	struct FURL LastRemoteURL; // 0x138 (104)
	struct UPendingNetGame PendingNetGame; // 0x1A0 (8)
	struct TArray<struct FFullyLoadedPackagesInfo> PackagesToFullyLoad; // 0x1A8 (16)
	struct TArray<struct ULevel> LoadedLevelsForPendingMapChange; // 0x1C8 (16)
	struct TArray<struct UObjectReferencer> ObjectReferencers; // 0x1F0 (16)
	struct TArray<struct FLevelStreamingStatus> PendingLevelStreamingStatusUpdates; // 0x200 (16)
	struct UGameViewportClient GameViewport; // 0x210 (8)
	struct UGameInstance OwningGameInstance; // 0x218 (8)
	struct TArray<struct FNamedNetDriver> ActiveNetDrivers; // 0x220 (16)
};

// ScriptStruct Engine.NamedNetDriver
struct FNamedNetDriver {
	struct UNetDriver NetDriver; // 0x0 (8)
};

// ScriptStruct Engine.LevelStreamingStatus
struct FLevelStreamingStatus {
	struct FName PackageName; // 0x0 (8)
	char bShouldBeLoaded : 1; // 0x8 (1)
	char bShouldBeVisible : 1; // 0x8 (1)
	char pad_8_2 : 6; // 0x8 (1)
	uint32_t LODIndex; // 0xC (4)
};

// ScriptStruct Engine.FullyLoadedPackagesInfo
struct FFullyLoadedPackagesInfo {
	enum class EFullyLoadPackageType FullyLoadType; // 0x0 (1)
	struct FString Tag; // 0x8 (16)
	struct TArray<struct FName> PackagesToLoad; // 0x18 (16)
	struct TArray<struct Object> LoadedObjects; // 0x28 (16)
};

// ScriptStruct Engine.URL
struct FURL {
	struct FString Protocol; // 0x0 (16)
	struct FString Host; // 0x10 (16)
	int32_t Port; // 0x20 (4)
	int32_t Valid; // 0x24 (4)
	struct FString Map; // 0x28 (16)
	struct FString RedirectURL; // 0x38 (16)
	struct TArray<struct FString> Op; // 0x48 (16)
	struct FString Portal; // 0x58 (16)
};

// ScriptStruct Engine.NetDriverDefinition
struct FNetDriverDefinition {
	struct FName DefName; // 0x0 (8)
	struct FName DriverClassName; // 0x8 (8)
	struct FName DriverClassNameFallback; // 0x10 (8)
};

// ScriptStruct Engine.ExposureSettings
struct FExposureSettings {
	float FixedEV100; // 0x0 (4)
	bool bFixed; // 0x4 (1)
};

// ScriptStruct Engine.CanvasUVTri
struct FCanvasUVTri {
	struct FVector2D V0_Pos; // 0x0 (8)
	struct FVector2D V0_UV; // 0x8 (8)
	struct FLinearColor V0_Color; // 0x10 (16)
	struct FVector2D V1_Pos; // 0x20 (8)
	struct FVector2D V1_UV; // 0x28 (8)
	struct FLinearColor V1_Color; // 0x30 (16)
	struct FVector2D V2_Pos; // 0x40 (8)
	struct FVector2D V2_UV; // 0x48 (8)
	struct FLinearColor V2_Color; // 0x50 (16)
};

// ScriptStruct Engine.FontRenderInfo
struct FFontRenderInfo {
	char bClipText : 1; // 0x0 (1)
	char bEnableShadow : 1; // 0x0 (1)
	char pad_0_2 : 6; // 0x0 (1)
	struct FDepthFieldGlowInfo GlowInfo; // 0x4 (36)
};

// ScriptStruct Engine.DepthFieldGlowInfo
struct FDepthFieldGlowInfo {
	char bEnableGlow : 1; // 0x0 (1)
	char pad_0_1 : 7; // 0x0 (1)
	struct FLinearColor GlowColor; // 0x4 (16)
	struct FVector2D GlowOuterRadius; // 0x14 (8)
	struct FVector2D GlowInnerRadius; // 0x1C (8)
};

// ScriptStruct Engine.Redirector
struct FRedirector {
	struct FName OldName; // 0x0 (8)
	struct FName NewName; // 0x8 (8)
};

// ScriptStruct Engine.CollectionReference
struct FCollectionReference {
	struct FName CollectionName; // 0x0 (8)
};

// ScriptStruct Engine.ComponentReference
struct FComponentReference {
	struct UActor OtherActor; // 0x0 (8)
	struct FName ComponentProperty; // 0x8 (8)
	struct FString PathToComponent; // 0x10 (16)
};

// ScriptStruct Engine.ConstrainComponentPropName
struct FConstrainComponentPropName {
	struct FName ComponentName; // 0x0 (8)
};

// ScriptStruct Engine.SkeletalMeshBuildSettings
struct FSkeletalMeshBuildSettings {
	char bRecomputeNormals : 1; // 0x0 (1)
	char bRecomputeTangents : 1; // 0x0 (1)
	char bUseMikkTSpace : 1; // 0x0 (1)
	char bComputeWeightedNormals : 1; // 0x0 (1)
	char bRemoveDegenerates : 1; // 0x0 (1)
	char bUseHighPrecisionTangentBasis : 1; // 0x0 (1)
	char bUseFullPrecisionUVs : 1; // 0x0 (1)
	char bBuildAdjacencyBuffer : 1; // 0x0 (1)
	float ThresholdPosition; // 0x4 (4)
	float ThresholdTangentNormal; // 0x8 (4)
	float ThresholdUV; // 0xC (4)
	float MorphThresholdPosition; // 0x10 (4)
};

// ScriptStruct Engine.MeshBuildSettings
struct FMeshBuildSettings {
	char bUseMikkTSpace : 1; // 0x0 (1)
	char bRecomputeNormals : 1; // 0x0 (1)
	char bRecomputeTangents : 1; // 0x0 (1)
	char bComputeWeightedNormals : 1; // 0x0 (1)
	char bRemoveDegenerates : 1; // 0x0 (1)
	char bBuildAdjacencyBuffer : 1; // 0x0 (1)
	char bBuildReversedIndexBuffer : 1; // 0x0 (1)
	char bUseHighPrecisionTangentBasis : 1; // 0x0 (1)
	char bUseFullPrecisionUVs : 1; // 0x1 (1)
	char bGenerateLightmapUVs : 1; // 0x1 (1)
	char bGenerateDistanceFieldAsIfTwoSided : 1; // 0x1 (1)
	char bSupportFaceRemap : 1; // 0x1 (1)
	char pad_1_4 : 4; // 0x1 (1)
	int32_t MinLightmapResolution; // 0x4 (4)
	int32_t SrcLightmapIndex; // 0x8 (4)
	int32_t DstLightmapIndex; // 0xC (4)
	float BuildScale; // 0x10 (4)
	struct FVector BuildScale3D; // 0x14 (12)
	float DistanceFieldResolutionScale; // 0x20 (4)
	struct UStaticMesh DistanceFieldReplacementMesh; // 0x28 (8)
};

// ScriptStruct Engine.POV
struct FPOV {
	struct FVector Location; // 0x0 (12)
	struct FRotator Rotation; // 0xC (12)
	float FOV; // 0x18 (4)
};

// ScriptStruct Engine.AnimUpdateRateParameters
struct FAnimUpdateRateParameters {
	enum class EUpdateRateShiftBucket ShiftBucket; // 0x1 (1)
	char bInterpolateSkippedFrames : 1; // 0x2 (1)
	char pad_1_1 : 7; // 0x1 (1)
	char pad_2_0 : 1; // 0x2 (1)
	char bShouldUseLodMap : 1; // 0x2 (1)
	char bShouldUseMinLod : 1; // 0x2 (1)
	char bSkipUpdate : 1; // 0x2 (1)
	char bSkipEvaluation : 1; // 0x2 (1)
	char pad_2_5 : 3; // 0x2 (1)
	int32_t UpdateRate; // 0x4 (4)
	int32_t EvaluationRate; // 0x8 (4)
	float TickedPoseOffestTime; // 0xC (4)
	float AdditionalTime; // 0x10 (4)
	int32_t BaseNonRenderedUpdateRate; // 0x18 (4)
	int32_t MaxEvalRateForInterpolation; // 0x1C (4)
	struct TArray<float> BaseVisibleDistanceFactorThesholds; // 0x20 (16)
	struct TMap<int32_t, int32_t> LODToFrameSkipMap; // 0x30 (80)
	int32_t SkippedUpdateFrames; // 0x80 (4)
	int32_t SkippedEvalFrames; // 0x84 (4)
};

// ScriptStruct Engine.AnimSlotDesc
struct FAnimSlotDesc {
	struct FName SlotName; // 0x0 (8)
	int32_t NumChannels; // 0x8 (4)
};

// ScriptStruct Engine.AnimSlotInfo
struct FAnimSlotInfo {
	struct FName SlotName; // 0x0 (8)
	struct TArray<float> ChannelWeights; // 0x8 (16)
};

// ScriptStruct Engine.MTDResult
struct FMTDResult {
	struct FVector Direction; // 0x0 (12)
	float Distance; // 0xC (4)
};

// ScriptStruct Engine.OverlapResult
struct FOverlapResult {
	struct TWeakObjectPtr<struct UActor> Actor; // 0x0 (8)
	struct TWeakObjectPtr<struct UPrimitiveComponent> Component; // 0x8 (8)
	char bBlockingHit : 1; // 0x14 (1)
};

// ScriptStruct Engine.PrimitiveMaterialRef
struct FPrimitiveMaterialRef {
	struct UPrimitiveComponent Primitive; // 0x0 (8)
	struct UDecalComponent decal; // 0x8 (8)
	int32_t ElementIndex; // 0x10 (4)
};

// ScriptStruct Engine.SwarmDebugOptions
struct FSwarmDebugOptions {
	char bDistributionEnabled : 1; // 0x0 (1)
	char bForceContentExport : 1; // 0x0 (1)
	char bInitialized : 1; // 0x0 (1)
};

// ScriptStruct Engine.LightmassDebugOptions
struct FLightmassDebugOptions {
	char bDebugMode : 1; // 0x0 (1)
	char bStatsEnabled : 1; // 0x0 (1)
	char bGatherBSPSurfacesAcrossComponents : 1; // 0x0 (1)
	char pad_0_3 : 5; // 0x0 (1)
	float CoplanarTolerance; // 0x4 (4)
	char bUseImmediateImport : 1; // 0x8 (1)
	char pad_5_1 : 7; // 0x5 (1)
	char pad_6_0 : 1; // 0x6 (1)
	char bImmediateProcessMappings : 1; // 0x8 (1)
	char pad_6_2 : 6; // 0x6 (1)
	char pad_7_0 : 2; // 0x7 (1)
	char bSortMappings : 1; // 0x8 (1)
	char pad_7_3 : 5; // 0x7 (1)
	char pad_8_0 : 3; // 0x8 (1)
	char bDumpBinaryFiles : 1; // 0x8 (1)
	char bDebugMaterials : 1; // 0x8 (1)
	char bPadMappings : 1; // 0x8 (1)
	char bDebugPaddings : 1; // 0x8 (1)
	char bOnlyCalcDebugTexelMappings : 1; // 0x8 (1)
	char bUseRandomColors : 1; // 0x9 (1)
	char bColorBordersGreen : 1; // 0x9 (1)
	char bColorByExecutionTime : 1; // 0x9 (1)
	char pad_9_3 : 5; // 0x9 (1)
	float ExecutionTimeDivisor; // 0xC (4)
};

// ScriptStruct Engine.LightmassPrimitiveSettings
struct FLightmassPrimitiveSettings {
	char bUseTwoSidedLighting : 1; // 0x0 (1)
	char bShadowIndirectOnly : 1; // 0x0 (1)
	char bUseEmissiveForStaticLighting : 1; // 0x0 (1)
	char bUseVertexNormalForHemisphereGather : 1; // 0x0 (1)
	char pad_0_4 : 4; // 0x0 (1)
	float EmissiveLightFalloffExponent; // 0x4 (4)
	float EmissiveLightExplicitInfluenceRadius; // 0x8 (4)
	float EmissiveBoost; // 0xC (4)
	float DiffuseBoost; // 0x10 (4)
	float FullyOccludedSamplesFraction; // 0x14 (4)
};

// ScriptStruct Engine.LightmassLightSettings
struct FLightmassLightSettings {
	float IndirectLightingSaturation; // 0x0 (4)
	float ShadowExponent; // 0x4 (4)
	bool bUseAreaShadowsForStationaryLight; // 0x8 (1)
};

// ScriptStruct Engine.LightmassDirectionalLightSettings
struct FLightmassDirectionalLightSettings : FLightmassLightSettings {
	float LightSourceAngle; // 0xC (4)
};

// ScriptStruct Engine.BasedPosition
struct FBasedPosition {
	struct UActor Base; // 0x0 (8)
	struct FVector Position; // 0x8 (12)
	struct FVector CachedBaseLocation; // 0x14 (12)
	struct FRotator CachedBaseRotation; // 0x20 (12)
	struct FVector CachedTransPosition; // 0x2C (12)
};

// ScriptStruct Engine.FractureEffect
struct FFractureEffect {
	struct UParticleSystem ParticleSystem; // 0x0 (8)
	struct USoundBase Sound; // 0x8 (8)
};

// ScriptStruct Engine.CollisionImpactData
struct FCollisionImpactData {
	struct TArray<struct FRigidBodyContactInfo> ContactInfos; // 0x0 (16)
	struct FVector TotalNormalImpulse; // 0x10 (12)
	struct FVector TotalFrictionImpulse; // 0x1C (12)
};

// ScriptStruct Engine.RigidBodyContactInfo
struct FRigidBodyContactInfo {
	struct FVector ContactPosition; // 0x0 (12)
	struct FVector ContactNormal; // 0xC (12)
	float ContactPenetration; // 0x18 (4)
	struct UPhysicalMaterial PhysMaterial[0x2]; // 0x20 (16)
};

// ScriptStruct Engine.RigidBodyErrorCorrection
struct FRigidBodyErrorCorrection {
	float PingExtrapolation; // 0x0 (4)
	float PingLimit; // 0x4 (4)
	float ErrorPerLinearDifference; // 0x8 (4)
	float ErrorPerAngularDifference; // 0xC (4)
	float MaxRestoredStateError; // 0x10 (4)
	float MaxLinearHardSnapDistance; // 0x14 (4)
	float PositionLerp; // 0x18 (4)
	float AngleLerp; // 0x1C (4)
	float LinearVelocityCoefficient; // 0x20 (4)
	float AngularVelocityCoefficient; // 0x24 (4)
	float ErrorAccumulationSeconds; // 0x28 (4)
	float ErrorAccumulationDistanceSq; // 0x2C (4)
	float ErrorAccumulationSimilarity; // 0x30 (4)
};

// ScriptStruct Engine.RigidBodyState
struct FRigidBodyState {
	struct FVector_NetQuantize100 Position; // 0x0 (12)
	struct FQuat Quaternion; // 0x10 (16)
	struct FVector_NetQuantize100 LinVel; // 0x20 (12)
	struct FVector_NetQuantize100 AngVel; // 0x2C (12)
	char Flags; // 0x38 (1)
};

// ScriptStruct Engine.MaterialShadingModelField
struct FMaterialShadingModelField {
	uint16_t ShadingModelField; // 0x0 (2)
};

// ScriptStruct Engine.ExponentialHeightFogData
struct FExponentialHeightFogData {
	float FogDensity; // 0x0 (4)
	float FogHeightFalloff; // 0x4 (4)
	float FogHeightOffset; // 0x8 (4)
};

// ScriptStruct Engine.FontCharacter
struct FFontCharacter {
	int32_t StartU; // 0x0 (4)
	int32_t StartV; // 0x4 (4)
	int32_t USize; // 0x8 (4)
	int32_t VSize; // 0xC (4)
	char TextureIndex; // 0x10 (1)
	int32_t VerticalOffset; // 0x14 (4)
};

// ScriptStruct Engine.FontImportOptionsData
struct FFontImportOptionsData {
	struct FString FontName; // 0x0 (16)
	float Height; // 0x10 (4)
	char bEnableAntialiasing : 1; // 0x14 (1)
	char bEnableBold : 1; // 0x14 (1)
	char bEnableItalic : 1; // 0x14 (1)
	char bEnableUnderline : 1; // 0x14 (1)
	char bAlphaOnly : 1; // 0x14 (1)
	char pad_14_5 : 3; // 0x14 (1)
	enum class EFontImportCharacterSet CharacterSet; // 0x18 (1)
	struct FString Chars; // 0x20 (16)
	struct FString UnicodeRange; // 0x30 (16)
	struct FString CharsFilePath; // 0x40 (16)
	struct FString CharsFileWildcard; // 0x50 (16)
	char bCreatePrintableOnly : 1; // 0x60 (1)
	char pad_56_1 : 7; // 0x56 (1)
	char pad_57_0 : 1; // 0x57 (1)
	char bIncludeASCIIRange : 1; // 0x60 (1)
	char pad_57_2 : 6; // 0x57 (1)
	struct FLinearColor ForegroundColor; // 0x64 (16)
	char bEnableDropShadow : 1; // 0x74 (1)
	char pad_68_1 : 7; // 0x68 (1)
	int32_t TexturePageWidth; // 0x78 (4)
	int32_t TexturePageMaxHeight; // 0x7C (4)
	int32_t XPadding; // 0x80 (4)
	int32_t YPadding; // 0x84 (4)
	int32_t ExtendBoxTop; // 0x88 (4)
	int32_t ExtendBoxBottom; // 0x8C (4)
	int32_t ExtendBoxRight; // 0x90 (4)
	int32_t ExtendBoxLeft; // 0x94 (4)
	char bEnableLegacyMode : 1; // 0x98 (1)
	char pad_89_1 : 7; // 0x89 (1)
	int32_t Kerning; // 0x9C (4)
	char bUseDistanceFieldAlpha : 1; // 0xA0 (1)
	char pad_8E_1 : 7; // 0x8E (1)
	int32_t DistanceFieldScaleFactor; // 0xA4 (4)
	float DistanceFieldScanRadiusScale; // 0xA8 (4)
};

// ScriptStruct Engine.ActiveForceFeedbackEffect
struct FActiveForceFeedbackEffect {
	struct UForceFeedbackEffect ForceFeedbackEffect; // 0x0 (8)
};

// ScriptStruct Engine.ForceFeedbackParameters
struct FForceFeedbackParameters {
	struct FName Tag; // 0x0 (8)
	bool bLooping; // 0x8 (1)
	bool bIgnoreTimeDilation; // 0x9 (1)
	bool bPlayWhilePaused; // 0xA (1)
};

// ScriptStruct Engine.ForceFeedbackChannelDetails
struct FForceFeedbackChannelDetails {
	char bAffectsLeftLarge : 1; // 0x0 (1)
	char bAffectsLeftSmall : 1; // 0x0 (1)
	char bAffectsRightLarge : 1; // 0x0 (1)
	char bAffectsRightSmall : 1; // 0x0 (1)
	char pad_0_4 : 4; // 0x0 (1)
	struct FRuntimeFloatCurve Curve; // 0x8 (136)
};

// ScriptStruct Engine.PredictProjectilePathResult
struct FPredictProjectilePathResult {
	struct TArray<struct FPredictProjectilePathPointData> PathData; // 0x0 (16)
	struct FPredictProjectilePathPointData LastTraceDestination; // 0x10 (28)
	struct FHitResult HitResult; // 0x2C (136)
};

// ScriptStruct Engine.PredictProjectilePathPointData
struct FPredictProjectilePathPointData {
	struct FVector Location; // 0x0 (12)
	struct FVector Velocity; // 0xC (12)
	float Time; // 0x18 (4)
};

// ScriptStruct Engine.PredictProjectilePathParams
struct FPredictProjectilePathParams {
	struct FVector StartLocation; // 0x0 (12)
	struct FVector LaunchVelocity; // 0xC (12)
	bool bTraceWithCollision; // 0x18 (1)
	float ProjectileRadius; // 0x1C (4)
	float MaxSimTime; // 0x20 (4)
	bool bTraceWithChannel; // 0x24 (1)
	enum class ECollisionChannel TraceChannel; // 0x25 (1)
	struct TArray<enum class EObjectTypeQuery> ObjectTypes; // 0x28 (16)
	struct TArray<struct UActor> ActorsToIgnore; // 0x38 (16)
	float SimFrequency; // 0x48 (4)
	float OverrideGravityZ; // 0x4C (4)
	enum class EDrawDebugTrace DrawDebugType; // 0x50 (1)
	float DrawDebugTime; // 0x54 (4)
	bool bTraceComplex; // 0x58 (1)
};

// ScriptStruct Engine.ActiveHapticFeedbackEffect
struct FActiveHapticFeedbackEffect {
	struct UHapticFeedbackEffect_Base HapticEffect; // 0x0 (8)
};

// ScriptStruct Engine.HapticFeedbackDetails_Curve
struct FHapticFeedbackDetails_Curve {
	struct FRuntimeFloatCurve Frequency; // 0x0 (136)
	struct FRuntimeFloatCurve Amplitude; // 0x88 (136)
};

// ScriptStruct Engine.ClusterNode
struct FClusterNode {
	struct FVector BoundMin; // 0x0 (12)
	int32_t FirstChild; // 0xC (4)
	struct FVector BoundMax; // 0x10 (12)
	int32_t LastChild; // 0x1C (4)
	int32_t FirstInstance; // 0x20 (4)
	int32_t LastInstance; // 0x24 (4)
	struct FVector MinInstanceScale; // 0x28 (12)
	struct FVector MaxInstanceScale; // 0x34 (12)
};

// ScriptStruct Engine.ClusterNode_DEPRECATED
struct FClusterNode_DEPRECATED {
	struct FVector BoundMin; // 0x0 (12)
	int32_t FirstChild; // 0xC (4)
	struct FVector BoundMax; // 0x10 (12)
	int32_t LastChild; // 0x1C (4)
	int32_t FirstInstance; // 0x20 (4)
	int32_t LastInstance; // 0x24 (4)
};

// ScriptStruct Engine.HLODProxyMesh
struct FHLODProxyMesh {
	LazyObjectProperty LODActor; // 0x0 (28)
	struct UStaticMesh StaticMesh; // 0x20 (8)
	struct FName Key; // 0x28 (8)
};

// ScriptStruct Engine.ImportanceTexture
struct FImportanceTexture {
	struct FIntPoint Size; // 0x0 (8)
	int32_t NumMips; // 0x8 (4)
	struct TArray<float> MarginalCDF; // 0x10 (16)
	struct TArray<float> ConditionalCDF; // 0x20 (16)
	struct TArray<struct FColor> TextureData; // 0x30 (16)
	struct TWeakObjectPtr<struct UTexture2D> Texture; // 0x40 (8)
	enum class EImportanceWeight Weighting; // 0x48 (1)
};

// ScriptStruct Engine.ComponentOverrideRecord
struct FComponentOverrideRecord {
	struct UClass* ComponentClass; // 0x0 (8)
	struct UActorComponent ComponentTemplate; // 0x8 (8)
	struct FComponentKey ComponentKey; // 0x10 (32)
	struct FBlueprintCookedComponentInstancingData CookedComponentInstancingData; // 0x30 (72)
};

// ScriptStruct Engine.ComponentKey
struct FComponentKey {
	struct UClass* OwnerClass; // 0x0 (8)
	struct FName SCSVariableName; // 0x8 (8)
	struct FGuid AssociatedGuid; // 0x10 (16)
};

// ScriptStruct Engine.BlueprintInputDelegateBinding
struct FBlueprintInputDelegateBinding {
	char bConsumeInput : 1; // 0x0 (1)
	char bExecuteWhenPaused : 1; // 0x0 (1)
	char bOverrideParentBinding : 1; // 0x0 (1)
};

// ScriptStruct Engine.BlueprintInputActionDelegateBinding
struct FBlueprintInputActionDelegateBinding : FBlueprintInputDelegateBinding {
	struct FName InputActionName; // 0x4 (8)
	enum class EInputEvent InputKeyEvent; // 0xC (1)
	struct FName FunctionNameToBind; // 0x10 (8)
};

// ScriptStruct Engine.BlueprintInputAxisDelegateBinding
struct FBlueprintInputAxisDelegateBinding : FBlueprintInputDelegateBinding {
	struct FName InputAxisName; // 0x4 (8)
	struct FName FunctionNameToBind; // 0xC (8)
};

// ScriptStruct Engine.BlueprintInputAxisKeyDelegateBinding
struct FBlueprintInputAxisKeyDelegateBinding : FBlueprintInputDelegateBinding {
	struct FKey AxisKey; // 0x8 (24)
	struct FName FunctionNameToBind; // 0x20 (8)
};

// ScriptStruct Engine.CachedKeyToActionInfo
struct FCachedKeyToActionInfo {
	struct UPlayerInput PlayerInput; // 0x0 (8)
};

// ScriptStruct Engine.BlueprintInputKeyDelegateBinding
struct FBlueprintInputKeyDelegateBinding : FBlueprintInputDelegateBinding {
	struct FInputChord InputChord; // 0x8 (32)
	enum class EInputEvent InputKeyEvent; // 0x28 (1)
	struct FName FunctionNameToBind; // 0x2C (8)
};

// ScriptStruct Engine.BlueprintInputTouchDelegateBinding
struct FBlueprintInputTouchDelegateBinding : FBlueprintInputDelegateBinding {
	enum class EInputEvent InputKeyEvent; // 0x4 (1)
	struct FName FunctionNameToBind; // 0x8 (8)
};

// ScriptStruct Engine.InstancedStaticMeshComponentInstanceData
struct FInstancedStaticMeshComponentInstanceData : FSceneComponentInstanceData {
	struct UStaticMesh StaticMesh; // 0xA8 (8)
	struct FInstancedStaticMeshLightMapInstanceData CachedStaticLighting; // 0xB0 (64)
	struct TArray<struct FInstancedStaticMeshInstanceData> PerInstanceSMData; // 0xF0 (16)
	struct TArray<float> PerInstanceSMCustomData; // 0x100 (16)
	int32_t InstancingRandomSeed; // 0x130 (4)
};

// ScriptStruct Engine.InstancedStaticMeshInstanceData
struct FInstancedStaticMeshInstanceData {
	struct FMatrix Transform; // 0x0 (64)
};

// ScriptStruct Engine.InstancedStaticMeshLightMapInstanceData
struct FInstancedStaticMeshLightMapInstanceData {
	struct FTransform Transform; // 0x0 (48)
	struct TArray<struct FGuid> MapBuildDataIds; // 0x30 (16)
};

// ScriptStruct Engine.IntegralCurve
struct FIntegralCurve : FIndexedCurve {
	struct TArray<struct FIntegralKey> Keys; // 0x68 (16)
	int32_t DefaultValue; // 0x78 (4)
	bool bUseDefaultValueBeforeFirstKey; // 0x7C (1)
};

// ScriptStruct Engine.IntegralKey
struct FIntegralKey {
	float Time; // 0x0 (4)
	int32_t Value; // 0x4 (4)
};

// ScriptStruct Engine.CurveEdTab
struct FCurveEdTab {
	struct FString TabName; // 0x0 (16)
	struct TArray<struct FCurveEdEntry> Curves; // 0x10 (16)
	float ViewStartInput; // 0x20 (4)
	float ViewEndInput; // 0x24 (4)
	float ViewStartOutput; // 0x28 (4)
	float ViewEndOutput; // 0x2C (4)
};

// ScriptStruct Engine.CurveEdEntry
struct FCurveEdEntry {
	struct Object CurveObject; // 0x0 (8)
	struct FColor CurveColor; // 0x8 (4)
	struct FString CurveName; // 0x10 (16)
	int32_t bHideCurve; // 0x20 (4)
	int32_t bColorCurve; // 0x24 (4)
	int32_t bFloatingPointColorCurve; // 0x28 (4)
	int32_t bClamp; // 0x2C (4)
	float ClampLow; // 0x30 (4)
	float ClampHigh; // 0x34 (4)
};

// ScriptStruct Engine.InterpEdSelKey
struct FInterpEdSelKey {
	struct UInterpGroup Group; // 0x0 (8)
	struct UInterpTrack Track; // 0x8 (8)
	int32_t KeyIndex; // 0x10 (4)
	float UnsnappedPosition; // 0x14 (4)
};

// ScriptStruct Engine.CameraPreviewInfo
struct FCameraPreviewInfo {
	struct UClass* PawnClass; // 0x0 (8)
	struct UAnimSequence AnimSeq; // 0x8 (8)
	struct FVector Location; // 0x10 (12)
	struct FRotator Rotation; // 0x1C (12)
	struct APawn PawnInst; // 0x28 (8)
};

// ScriptStruct Engine.SubTrackGroup
struct FSubTrackGroup {
	struct FString GroupName; // 0x0 (16)
	struct TArray<int32_t> TrackIndices; // 0x10 (16)
	char bIsCollapsed : 1; // 0x20 (1)
	char bIsSelected : 1; // 0x20 (1)
};

// ScriptStruct Engine.SupportedSubTrackInfo
struct FSupportedSubTrackInfo {
	struct UClass* SupportedClass; // 0x0 (8)
	struct FString SubTrackName; // 0x8 (16)
	int32_t GroupIndex; // 0x18 (4)
};

// ScriptStruct Engine.AnimControlTrackKey
struct FAnimControlTrackKey {
	float StartTime; // 0x0 (4)
	struct UAnimSequence AnimSeq; // 0x8 (8)
	float AnimStartOffset; // 0x10 (4)
	float AnimEndOffset; // 0x14 (4)
	float AnimPlayRate; // 0x18 (4)
	char bLooping : 1; // 0x1C (1)
	char pad_18_1 : 7; // 0x18 (1)
	char pad_19_0 : 1; // 0x19 (1)
	char bReverse : 1; // 0x1C (1)
};

// ScriptStruct Engine.BoolTrackKey
struct FBoolTrackKey {
	float Time; // 0x0 (4)
	char Value : 1; // 0x4 (1)
};

// ScriptStruct Engine.DirectorTrackCut
struct FDirectorTrackCut {
	float Time; // 0x0 (4)
	float TransitionTime; // 0x4 (4)
	struct FName TargetCamGroup; // 0x8 (8)
	int32_t ShotNumber; // 0x10 (4)
};

// ScriptStruct Engine.EventTrackKey
struct FEventTrackKey {
	float Time; // 0x0 (4)
	struct FName EventName; // 0x4 (8)
};

// ScriptStruct Engine.InterpLookupTrack
struct FInterpLookupTrack {
	struct TArray<struct FInterpLookupPoint> Points; // 0x0 (16)
};

// ScriptStruct Engine.InterpLookupPoint
struct FInterpLookupPoint {
	struct FName GroupName; // 0x0 (8)
	float Time; // 0x8 (4)
};

// ScriptStruct Engine.ParticleReplayTrackKey
struct FParticleReplayTrackKey {
	float Time; // 0x0 (4)
	float Duration; // 0x4 (4)
	int32_t ClipIDNumber; // 0x8 (4)
};

// ScriptStruct Engine.SoundTrackKey
struct FSoundTrackKey {
	float Time; // 0x0 (4)
	float Volume; // 0x4 (4)
	float Pitch; // 0x8 (4)
	struct USoundBase Sound; // 0x10 (8)
};

// ScriptStruct Engine.ToggleTrackKey
struct FToggleTrackKey {
	float Time; // 0x0 (4)
	enum class ETrackToggleAction ToggleAction; // 0x4 (1)
};

// ScriptStruct Engine.VisibilityTrackKey
struct FVisibilityTrackKey {
	float Time; // 0x0 (4)
	enum class EVisibilityTrackAction Action; // 0x4 (1)
	enum class EVisibilityTrackCondition ActiveCondition; // 0x5 (1)
};

// ScriptStruct Engine.DrawToRenderTargetContext
struct FDrawToRenderTargetContext {
	struct UTextureRenderTarget2D RenderTarget; // 0x0 (8)
};

// ScriptStruct Engine.LayerActorStats
struct FLayerActorStats {
	struct UClass* Type; // 0x0 (8)
	int32_t Total; // 0x8 (4)
};

// ScriptStruct Engine.ReplicatedStaticActorDestructionInfo
struct FReplicatedStaticActorDestructionInfo {
	struct UClass* ObjClass; // 0x30 (8)
};

// ScriptStruct Engine.LevelSimplificationDetails
struct FLevelSimplificationDetails {
	bool bCreatePackagePerAsset; // 0x0 (1)
	float DetailsPercentage; // 0x4 (4)
	struct FMaterialProxySettings StaticMeshMaterialSettings; // 0x8 (136)
	bool bOverrideLandscapeExportLOD; // 0x90 (1)
	int32_t LandscapeExportLOD; // 0x94 (4)
	struct FMaterialProxySettings LandscapeMaterialSettings; // 0x98 (136)
	bool bBakeFoliageToLandscape; // 0x120 (1)
	bool bBakeGrassToLandscape; // 0x121 (1)
	bool bGenerateMeshNormalMap; // 0x122 (1)
	bool bGenerateMeshMetallicMap; // 0x123 (1)
	bool bGenerateMeshRoughnessMap; // 0x124 (1)
	bool bGenerateMeshSpecularMap; // 0x125 (1)
	bool bGenerateLandscapeNormalMap; // 0x126 (1)
	bool bGenerateLandscapeMetallicMap; // 0x127 (1)
	bool bGenerateLandscapeRoughnessMap; // 0x128 (1)
	bool bGenerateLandscapeSpecularMap; // 0x129 (1)
};

// ScriptStruct Engine.MaterialProxySettings
struct FMaterialProxySettings {
	struct FIntPoint TextureSize; // 0x0 (8)
	float GutterSpace; // 0x8 (4)
	float MetallicConstant; // 0xC (4)
	float RoughnessConstant; // 0x10 (4)
	float AnisotropyConstant; // 0x14 (4)
	float SpecularConstant; // 0x18 (4)
	float OpacityConstant; // 0x1C (4)
	float OpacityMaskConstant; // 0x20 (4)
	float AmbientOcclusionConstant; // 0x24 (4)
	enum class ETextureSizingType TextureSizingType; // 0x28 (1)
	enum class EMaterialMergeType MaterialMergeType; // 0x29 (1)
	enum class EBlendMode BlendMode; // 0x2A (1)
	char bAllowTwoSidedMaterial : 1; // 0x2B (1)
	char bNormalMap : 1; // 0x2B (1)
	char bTangentMap : 1; // 0x2B (1)
	char bMetallicMap : 1; // 0x2B (1)
	char bRoughnessMap : 1; // 0x2B (1)
	char bAnisotropyMap : 1; // 0x2B (1)
	char bSpecularMap : 1; // 0x2B (1)
	char bEmissiveMap : 1; // 0x2B (1)
	char bOpacityMap : 1; // 0x2C (1)
	char bOpacityMaskMap : 1; // 0x2C (1)
	char bAmbientOcclusionMap : 1; // 0x2C (1)
	char pad_2C_3 : 5; // 0x2C (1)
	struct FIntPoint DiffuseTextureSize; // 0x30 (8)
	struct FIntPoint NormalTextureSize; // 0x38 (8)
	struct FIntPoint TangentTextureSize; // 0x40 (8)
	struct FIntPoint MetallicTextureSize; // 0x48 (8)
	struct FIntPoint RoughnessTextureSize; // 0x50 (8)
	struct FIntPoint AnisotropyTextureSize; // 0x58 (8)
	struct FIntPoint SpecularTextureSize; // 0x60 (8)
	struct FIntPoint EmissiveTextureSize; // 0x68 (8)
	struct FIntPoint OpacityTextureSize; // 0x70 (8)
	struct FIntPoint OpacityMaskTextureSize; // 0x78 (8)
	struct FIntPoint AmbientOcclusionTextureSize; // 0x80 (8)
};

// ScriptStruct Engine.DynamicTextureInstance
struct FDynamicTextureInstance : FStreamableTextureInstance {
	struct UTexture2D Texture; // 0x28 (8)
	bool bAttached; // 0x30 (1)
	float OriginalRadius; // 0x34 (4)
};

// ScriptStruct Engine.PrecomputedLightInstanceData
struct FPrecomputedLightInstanceData : FSceneComponentInstanceData {
	struct FTransform Transform; // 0xB0 (48)
	struct FGuid LightGuid; // 0xE0 (16)
	int32_t PreviewShadowMapChannel; // 0xF0 (4)
};

// ScriptStruct Engine.BatchedPoint
struct FBatchedPoint {
	struct FVector Position; // 0x0 (12)
	struct FLinearColor Color; // 0xC (16)
	float PointSize; // 0x1C (4)
	float RemainingLifeTime; // 0x20 (4)
	char DepthPriority; // 0x24 (1)
};

// ScriptStruct Engine.BatchedLine
struct FBatchedLine {
	struct FVector Start; // 0x0 (12)
	struct FVector End; // 0xC (12)
	struct FLinearColor Color; // 0x18 (16)
	float Thickness; // 0x28 (4)
	float RemainingLifeTime; // 0x2C (4)
	char DepthPriority; // 0x30 (1)
};

// ScriptStruct Engine.ClientReceiveData
struct FClientReceiveData {
	struct APlayerController LocalPC; // 0x0 (8)
	struct FName MessageType; // 0x8 (8)
	int32_t MessageIndex; // 0x10 (4)
	struct FString MessageString; // 0x18 (16)
	struct APlayerState RelatedPlayerState_2; // 0x28 (8)
	struct APlayerState RelatedPlayerState_3; // 0x30 (8)
	struct Object OptionalObject; // 0x38 (8)
};

// ScriptStruct Engine.ParameterGroupData
struct FParameterGroupData {
	struct FString GroupName; // 0x0 (16)
	int32_t GroupSortPriority; // 0x10 (4)
};

// ScriptStruct Engine.MaterialSpriteElement
struct FMaterialSpriteElement {
	struct UMaterialInterface Material; // 0x0 (8)
	struct UCurveFloat DistanceToOpacityCurve; // 0x8 (8)
	char bSizeIsInScreenSpace : 1; // 0x10 (1)
	char pad_10_1 : 7; // 0x10 (1)
	float BaseSizeX; // 0x14 (4)
	float BaseSizeY; // 0x18 (4)
	struct UCurveFloat DistanceToSizeCurve; // 0x20 (8)
};

// ScriptStruct Engine.MaterialCachedExpressionData
struct FMaterialCachedExpressionData {
	struct FMaterialCachedParameters Parameters; // 0x0 (416)
	struct TArray<struct Object> ReferencedTextures; // 0x1A0 (16)
	struct TArray<struct FMaterialFunctionInfo> FunctionInfos; // 0x1B0 (16)
	struct TArray<struct FMaterialParameterCollectionInfo> ParameterCollectionInfos; // 0x1C0 (16)
	struct TArray<struct UMaterialFunctionInterface> DefaultLayers; // 0x1D0 (16)
	struct TArray<struct UMaterialFunctionInterface> DefaultLayerBlends; // 0x1E0 (16)
	struct TArray<struct ULandscapeGrassType> GrassTypes; // 0x1F0 (16)
	struct TArray<struct FName> DynamicParameterNames; // 0x200 (16)
	struct TArray<bool> QualityLevelsUsed; // 0x210 (16)
	char bHasRuntimeVirtualTextureOutput : 1; // 0x220 (1)
	char bHasSceneColor : 1; // 0x220 (1)
};

// ScriptStruct Engine.MaterialParameterCollectionInfo
struct FMaterialParameterCollectionInfo {
	struct FGuid StateId; // 0x0 (16)
	struct UMaterialParameterCollection ParameterCollection; // 0x10 (8)
};

// ScriptStruct Engine.MaterialFunctionInfo
struct FMaterialFunctionInfo {
	struct FGuid StateId; // 0x0 (16)
	struct UMaterialFunctionInterface Function; // 0x10 (8)
};

// ScriptStruct Engine.MaterialCachedParameters
struct FMaterialCachedParameters {
	struct FMaterialCachedParameterEntry Entries[0x5]; // 0x0 (320)
	struct TArray<float> ScalarValues; // 0x140 (16)
	struct TArray<struct FLinearColor> VectorValues; // 0x150 (16)
	struct TArray<struct UTexture> TextureValues; // 0x160 (16)
	struct TArray<struct UFont> FontValues; // 0x170 (16)
	struct TArray<int32_t> FontPageValues; // 0x180 (16)
	struct TArray<struct URuntimeVirtualTexture> RuntimeVirtualTextureValues; // 0x190 (16)
};

// ScriptStruct Engine.MaterialCachedParameterEntry
struct FMaterialCachedParameterEntry {
	struct TArray<uint64_t> NameHashes; // 0x0 (16)
	struct TArray<struct FMaterialParameterInfo> ParameterInfos; // 0x10 (16)
	struct TArray<struct FGuid> ExpressionGuids; // 0x20 (16)
	struct TArray<bool> Overrides; // 0x30 (16)
};

// ScriptStruct Engine.MaterialParameterInfo
struct FMaterialParameterInfo {
	struct FName Name; // 0x0 (8)
	enum class EMaterialParameterAssociation Association; // 0x8 (1)
	int32_t Index; // 0xC (4)
};

// ScriptStruct Engine.ParameterChannelNames
struct FParameterChannelNames {
	struct FText R; // 0x0 (24)
	struct FText G; // 0x18 (24)
	struct FText B; // 0x30 (24)
	struct FText A; // 0x48 (24)
};

// ScriptStruct Engine.CustomDefine
struct FCustomDefine {
	struct FString DefineName; // 0x0 (16)
	struct FString DefineValue; // 0x10 (16)
};

// ScriptStruct Engine.CustomInput
struct FCustomInput {
	struct FName InputName; // 0x0 (8)
	struct FExpressionInput Input; // 0x8 (12)
};

// ScriptStruct Engine.FunctionExpressionOutput
struct FFunctionExpressionOutput {
	struct UMaterialExpressionFunctionOutput ExpressionOutput; // 0x0 (8)
	struct FGuid ExpressionOutputId; // 0x8 (16)
	struct FExpressionOutput Output; // 0x18 (8)
};

// ScriptStruct Engine.FunctionExpressionInput
struct FFunctionExpressionInput {
	struct UMaterialExpressionFunctionInput ExpressionInput; // 0x0 (8)
	struct FGuid ExpressionInputId; // 0x8 (16)
	struct FExpressionInput Input; // 0x18 (12)
};

// ScriptStruct Engine.FontParameterValue
struct FFontParameterValue {
	struct FMaterialParameterInfo ParameterInfo; // 0x0 (16)
	struct UFont FontValue; // 0x10 (8)
	int32_t FontPage; // 0x18 (4)
	struct FGuid ExpressionGUID; // 0x1C (16)
};

// ScriptStruct Engine.RuntimeVirtualTextureParameterValue
struct FRuntimeVirtualTextureParameterValue {
	struct FMaterialParameterInfo ParameterInfo; // 0x0 (16)
	struct URuntimeVirtualTexture ParameterValue; // 0x10 (8)
	struct FGuid ExpressionGUID; // 0x18 (16)
};

// ScriptStruct Engine.TextureParameterValue
struct FTextureParameterValue {
	struct FMaterialParameterInfo ParameterInfo; // 0x0 (16)
	struct UTexture ParameterValue; // 0x10 (8)
	struct FGuid ExpressionGUID; // 0x18 (16)
};

// ScriptStruct Engine.VectorParameterValue
struct FVectorParameterValue {
	struct FMaterialParameterInfo ParameterInfo; // 0x0 (16)
	struct FLinearColor ParameterValue; // 0x10 (16)
	struct FGuid ExpressionGUID; // 0x20 (16)
};

// ScriptStruct Engine.ScalarParameterValue
struct FScalarParameterValue {
	struct FMaterialParameterInfo ParameterInfo; // 0x0 (16)
	float ParameterValue; // 0x10 (4)
	struct FGuid ExpressionGUID; // 0x14 (16)
};

// ScriptStruct Engine.ScalarParameterAtlasInstanceData
struct FScalarParameterAtlasInstanceData {
	bool bIsUsedAsAtlasPosition; // 0x0 (1)
	struct TSoftObjectPtr<UCurveLinearColor> Curve; // 0x8 (40)
	struct TSoftObjectPtr<UCurveLinearColorAtlas> Atlas; // 0x30 (40)
};

// ScriptStruct Engine.MaterialInstanceBasePropertyOverrides
struct FMaterialInstanceBasePropertyOverrides {
	char bOverride_OpacityMaskClipValue : 1; // 0x0 (1)
	char bOverride_BlendMode : 1; // 0x0 (1)
	char bOverride_ShadingModel : 1; // 0x0 (1)
	char bOverride_DitheredLODTransition : 1; // 0x0 (1)
	char bOverride_CastDynamicShadowAsMasked : 1; // 0x0 (1)
	char bOverride_TwoSided : 1; // 0x0 (1)
	char TwoSided : 1; // 0x0 (1)
	char DitheredLODTransition : 1; // 0x0 (1)
	char bCastDynamicShadowAsMasked : 1; // 0x1 (1)
	char pad_1_1 : 7; // 0x1 (1)
	enum class EBlendMode BlendMode; // 0x2 (1)
	enum class EMaterialShadingModel ShadingModel; // 0x3 (1)
	float OpacityMaskClipValue; // 0x4 (4)
};

// ScriptStruct Engine.MaterialTextureInfo
struct FMaterialTextureInfo {
	float SamplingScale; // 0x0 (4)
	int32_t UVChannelIndex; // 0x4 (4)
	struct FName TextureName; // 0x8 (8)
};

// ScriptStruct Engine.LightmassMaterialInterfaceSettings
struct FLightmassMaterialInterfaceSettings {
	float EmissiveBoost; // 0x0 (4)
	float DiffuseBoost; // 0x4 (4)
	float ExportResolutionScale; // 0x8 (4)
	char bCastShadowAsMasked : 1; // 0xC (1)
	char bOverrideCastShadowAsMasked : 1; // 0xC (1)
	char bOverrideEmissiveBoost : 1; // 0xC (1)
	char bOverrideDiffuseBoost : 1; // 0xC (1)
	char bOverrideExportResolutionScale : 1; // 0xC (1)
};

// ScriptStruct Engine.MaterialLayersFunctions
struct FMaterialLayersFunctions {
	struct TArray<struct UMaterialFunctionInterface> Layers; // 0x0 (16)
	struct TArray<struct UMaterialFunctionInterface> Blends; // 0x10 (16)
	struct TArray<bool> LayerStates; // 0x20 (16)
	struct FString KeyString; // 0x30 (16)
};

// ScriptStruct Engine.CollectionParameterBase
struct FCollectionParameterBase {
	struct FName ParameterName; // 0x0 (8)
	struct FGuid ID; // 0x8 (16)
};

// ScriptStruct Engine.CollectionVectorParameter
struct FCollectionVectorParameter : FCollectionParameterBase {
	struct FLinearColor DefaultValue; // 0x18 (16)
};

// ScriptStruct Engine.CollectionScalarParameter
struct FCollectionScalarParameter : FCollectionParameterBase {
	float DefaultValue; // 0x18 (4)
};

// ScriptStruct Engine.InterpGroupActorInfo
struct FInterpGroupActorInfo {
	struct FName ObjectName; // 0x0 (8)
	struct TArray<struct UActor> Actors; // 0x8 (16)
};

// ScriptStruct Engine.CameraCutInfo
struct FCameraCutInfo {
	struct FVector Location; // 0x0 (12)
	float Timestamp; // 0xC (4)
};

// ScriptStruct Engine.MemberReference
struct FMemberReference {
	struct Object MemberParent; // 0x0 (8)
	struct FString MemberScope; // 0x8 (16)
	struct FName MemberName; // 0x18 (8)
	struct FGuid MemberGuid; // 0x20 (16)
	bool bSelfContext; // 0x30 (1)
	bool bWasDeprecated; // 0x31 (1)
};

// ScriptStruct Engine.MeshInstancingSettings
struct FMeshInstancingSettings {
	struct UClass* ActorClassToUse; // 0x0 (8)
	int32_t InstanceReplacementThreshold; // 0x8 (4)
	enum class EMeshInstancingReplacementMethod MeshReplacementMethod; // 0xC (1)
	bool bSkipMeshesWithVertexColors; // 0xD (1)
	bool bUseHLODVolumes; // 0xE (1)
	struct UClass* ISMComponentToUse; // 0x10 (8)
};

// ScriptStruct Engine.MeshMergingSettings
struct FMeshMergingSettings {
	int32_t TargetLightMapResolution; // 0x0 (4)
	enum class EUVOutput OutputUVs[0x8]; // 0x4 (8)
	struct FMaterialProxySettings MaterialSettings; // 0xC (136)
	int32_t GutterSize; // 0x94 (4)
	int32_t SpecificLOD; // 0x98 (4)
	enum class EMeshLODSelectionType LODSelectionType; // 0x9C (1)
	char bGenerateLightMapUV : 1; // 0x9D (1)
	char bComputedLightMapResolution : 1; // 0x9D (1)
	char bPivotPointAtZero : 1; // 0x9D (1)
	char bMergePhysicsData : 1; // 0x9D (1)
	char bMergeMaterials : 1; // 0x9D (1)
	char bCreateMergedMaterial : 1; // 0x9D (1)
	char bBakeVertexDataToMesh : 1; // 0x9D (1)
	char bUseVertexDataForBakingMaterial : 1; // 0x9D (1)
	char bUseTextureBinning : 1; // 0x9E (1)
	char bReuseMeshLightmapUVs : 1; // 0x9E (1)
	char bMergeEquivalentMaterials : 1; // 0x9E (1)
	char bUseLandscapeCulling : 1; // 0x9E (1)
	char bIncludeImposters : 1; // 0x9E (1)
	char bAllowDistanceField : 1; // 0x9E (1)
};

// ScriptStruct Engine.MeshProxySettings
struct FMeshProxySettings {
	int32_t ScreenSize; // 0x0 (4)
	float VoxelSize; // 0x4 (4)
	struct FMaterialProxySettings MaterialSettings; // 0x8 (136)
	float MergeDistance; // 0x90 (4)
	struct FColor UnresolvedGeometryColor; // 0x94 (4)
	float MaxRayCastDist; // 0x98 (4)
	float HardAngleThreshold; // 0x9C (4)
	int32_t LightMapResolution; // 0xA0 (4)
	enum class EProxyNormalComputationMethod NormalCalculationMethod; // 0xA4 (1)
	enum class ELandscapeCullingPrecision LandscapeCullingPrecision; // 0xA5 (1)
	char bCalculateCorrectLODModel : 1; // 0xA6 (1)
	char bOverrideVoxelSize : 1; // 0xA6 (1)
	char bOverrideTransferDistance : 1; // 0xA6 (1)
	char bUseHardAngleThreshold : 1; // 0xA6 (1)
	char bComputeLightMapResolution : 1; // 0xA6 (1)
	char bRecalculateNormals : 1; // 0xA6 (1)
	char bUseLandscapeCulling : 1; // 0xA6 (1)
	char bAllowAdjacency : 1; // 0xA6 (1)
	char bAllowDistanceField : 1; // 0xA7 (1)
	char bReuseMeshLightmapUVs : 1; // 0xA7 (1)
	char bCreateCollision : 1; // 0xA7 (1)
	char bAllowVertexColors : 1; // 0xA7 (1)
	char bGenerateLightmapUVs : 1; // 0xA7 (1)
};

// ScriptStruct Engine.MeshReductionSettings
struct FMeshReductionSettings {
	float PercentTriangles; // 0x0 (4)
	float PercentVertices; // 0x4 (4)
	float MaxDeviation; // 0x8 (4)
	float PixelError; // 0xC (4)
	float WeldingThreshold; // 0x10 (4)
	float HardAngleThreshold; // 0x14 (4)
	int32_t BaseLODModel; // 0x18 (4)
	enum class EMeshFeatureImportance SilhouetteImportance; // 0x1C (1)
	enum class EMeshFeatureImportance TextureImportance; // 0x1D (1)
	enum class EMeshFeatureImportance ShadingImportance; // 0x1E (1)
	char bRecalculateNormals : 1; // 0x1F (1)
	char bGenerateUniqueLightmapUVs : 1; // 0x1F (1)
	char bKeepSymmetry : 1; // 0x1F (1)
	char bVisibilityAided : 1; // 0x1F (1)
	char bCullOccluded : 1; // 0x1F (1)
	char pad_1F_5 : 3; // 0x1F (1)
	enum class EStaticMeshReductionTerimationCriterion TerminationCriterion; // 0x20 (1)
	enum class EMeshFeatureImportance VisibilityAggressiveness; // 0x21 (1)
	enum class EMeshFeatureImportance VertexColorImportance; // 0x22 (1)
};

// ScriptStruct Engine.PurchaseInfo
struct FPurchaseInfo {
	struct FString Identifier; // 0x0 (16)
	struct FString DisplayName; // 0x10 (16)
	struct FString DisplayDescription; // 0x20 (16)
	struct FString DisplayPrice; // 0x30 (16)
};

// ScriptStruct Engine.NameCurve
struct FNameCurve : FIndexedCurve {
	struct TArray<struct FNameCurveKey> Keys; // 0x68 (16)
};

// ScriptStruct Engine.NameCurveKey
struct FNameCurveKey {
	float Time; // 0x0 (4)
	struct FName Value; // 0x4 (8)
};

// ScriptStruct Engine.NavAvoidanceMask
struct FNavAvoidanceMask {
	char bGroup0 : 1; // 0x0 (1)
	char bGroup1 : 1; // 0x0 (1)
	char bGroup2 : 1; // 0x0 (1)
	char bGroup3 : 1; // 0x0 (1)
	char bGroup4 : 1; // 0x0 (1)
	char bGroup5 : 1; // 0x0 (1)
	char bGroup6 : 1; // 0x0 (1)
	char bGroup7 : 1; // 0x0 (1)
	char bGroup8 : 1; // 0x1 (1)
	char bGroup9 : 1; // 0x1 (1)
	char bGroup10 : 1; // 0x1 (1)
	char bGroup11 : 1; // 0x1 (1)
	char bGroup12 : 1; // 0x1 (1)
	char bGroup13 : 1; // 0x1 (1)
	char bGroup14 : 1; // 0x1 (1)
	char bGroup15 : 1; // 0x1 (1)
	char bGroup16 : 1; // 0x2 (1)
	char bGroup17 : 1; // 0x2 (1)
	char bGroup18 : 1; // 0x2 (1)
	char bGroup19 : 1; // 0x2 (1)
	char bGroup20 : 1; // 0x2 (1)
	char bGroup21 : 1; // 0x2 (1)
	char bGroup22 : 1; // 0x2 (1)
	char bGroup23 : 1; // 0x2 (1)
	char bGroup24 : 1; // 0x3 (1)
	char bGroup25 : 1; // 0x3 (1)
	char bGroup26 : 1; // 0x3 (1)
	char bGroup27 : 1; // 0x3 (1)
	char bGroup28 : 1; // 0x3 (1)
	char bGroup29 : 1; // 0x3 (1)
	char bGroup30 : 1; // 0x3 (1)
	char bGroup31 : 1; // 0x3 (1)
};

// ScriptStruct Engine.MovementProperties
struct FMovementProperties {
	char bCanCrouch : 1; // 0x0 (1)
	char bCanJump : 1; // 0x0 (1)
	char bCanWalk : 1; // 0x0 (1)
	char bCanSwim : 1; // 0x0 (1)
	char bCanFly : 1; // 0x0 (1)
};

// ScriptStruct Engine.NavAgentProperties
struct FNavAgentProperties : FMovementProperties {
	float AgentRadius; // 0x4 (4)
	float AgentHeight; // 0x8 (4)
	float AgentStepHeight; // 0xC (4)
	float NavWalkingSearchHeightScale; // 0x10 (4)
	struct FSoftClassPath PreferredNavData; // 0x18 (24)
};

// ScriptStruct Engine.NavDataConfig
struct FNavDataConfig : FNavAgentProperties {
	struct FName Name; // 0x30 (8)
	struct FColor Color; // 0x38 (4)
	struct FVector DefaultQueryExtent; // 0x3C (12)
	struct UClass* NavigationDataClass; // 0x48 (8)
	struct TSoftClassPtr<UObject> NavDataClass; // 0x50 (40)
};

// ScriptStruct Engine.NavAgentSelector
struct FNavAgentSelector {
	char bSupportsAgent0 : 1; // 0x0 (1)
	char bSupportsAgent1 : 1; // 0x0 (1)
	char bSupportsAgent2 : 1; // 0x0 (1)
	char bSupportsAgent3 : 1; // 0x0 (1)
	char bSupportsAgent4 : 1; // 0x0 (1)
	char bSupportsAgent5 : 1; // 0x0 (1)
	char bSupportsAgent6 : 1; // 0x0 (1)
	char bSupportsAgent7 : 1; // 0x0 (1)
	char bSupportsAgent8 : 1; // 0x1 (1)
	char bSupportsAgent9 : 1; // 0x1 (1)
	char bSupportsAgent10 : 1; // 0x1 (1)
	char bSupportsAgent11 : 1; // 0x1 (1)
	char bSupportsAgent12 : 1; // 0x1 (1)
	char bSupportsAgent13 : 1; // 0x1 (1)
	char bSupportsAgent14 : 1; // 0x1 (1)
	char bSupportsAgent15 : 1; // 0x1 (1)
};

// ScriptStruct Engine.NavigationLinkBase
struct FNavigationLinkBase {
	float LeftProjectHeight; // 0x0 (4)
	float MaxFallDownLength; // 0x4 (4)
	float SnapRadius; // 0xC (4)
	float SnapHeight; // 0x10 (4)
	struct FNavAgentSelector SupportedAgents; // 0x14 (4)
	char bSupportsAgent0 : 1; // 0x18 (1)
	char pad_14_1 : 7; // 0x14 (1)
	char pad_15_0 : 1; // 0x15 (1)
	char bSupportsAgent1 : 1; // 0x18 (1)
	char pad_15_2 : 6; // 0x15 (1)
	char pad_16_0 : 2; // 0x16 (1)
	char bSupportsAgent2 : 1; // 0x18 (1)
	char pad_16_3 : 5; // 0x16 (1)
	char pad_17_0 : 3; // 0x17 (1)
	char bSupportsAgent3 : 1; // 0x18 (1)
	char pad_17_4 : 4; // 0x17 (1)
	char pad_18_0 : 4; // 0x18 (1)
	char bSupportsAgent4 : 1; // 0x18 (1)
	char bSupportsAgent5 : 1; // 0x18 (1)
	char bSupportsAgent6 : 1; // 0x18 (1)
	char bSupportsAgent7 : 1; // 0x18 (1)
	char bSupportsAgent8 : 1; // 0x19 (1)
	char bSupportsAgent9 : 1; // 0x19 (1)
	char bSupportsAgent10 : 1; // 0x19 (1)
	char bSupportsAgent11 : 1; // 0x19 (1)
	char bSupportsAgent12 : 1; // 0x19 (1)
	char bSupportsAgent13 : 1; // 0x19 (1)
	char bSupportsAgent14 : 1; // 0x19 (1)
	char bSupportsAgent15 : 1; // 0x19 (1)
	enum class ENavLinkDirection Direction; // 0x1C (1)
	char bUseSnapHeight : 1; // 0x1D (1)
	char pad_1B_1 : 7; // 0x1B (1)
	char pad_1C_0 : 1; // 0x1C (1)
	char bSnapToCheapestArea : 1; // 0x1D (1)
	char pad_1C_2 : 6; // 0x1C (1)
	char pad_1D_0 : 2; // 0x1D (1)
	char bCustomFlag0 : 1; // 0x1D (1)
	char bCustomFlag1 : 1; // 0x1D (1)
	char bCustomFlag2 : 1; // 0x1D (1)
	char bCustomFlag3 : 1; // 0x1D (1)
	char bCustomFlag4 : 1; // 0x1D (1)
	char bCustomFlag5 : 1; // 0x1D (1)
	char bCustomFlag6 : 1; // 0x1E (1)
	char bCustomFlag7 : 1; // 0x1E (1)
	char pad_1E_2 : 6; // 0x1E (1)
	struct UClass* AreaClass; // 0x20 (8)
};

// ScriptStruct Engine.NavigationSegmentLink
struct FNavigationSegmentLink : FNavigationLinkBase {
	struct FVector LeftStart; // 0x30 (12)
	struct FVector LeftEnd; // 0x3C (12)
	struct FVector RightStart; // 0x48 (12)
	struct FVector RightEnd; // 0x54 (12)
};

// ScriptStruct Engine.NavigationLink
struct FNavigationLink : FNavigationLinkBase {
	struct FVector Left; // 0x30 (12)
	struct FVector Right; // 0x3C (12)
};

// ScriptStruct Engine.ChannelDefinition
struct FChannelDefinition {
	struct FName ChannelName; // 0x0 (8)
	struct FName ClassName; // 0x8 (8)
	struct UClass* ChannelClass; // 0x10 (8)
	int32_t StaticChannelIndex; // 0x18 (4)
	bool bTickOnCreate; // 0x1C (1)
	bool bServerOpen; // 0x1D (1)
	bool bClientOpen; // 0x1E (1)
	bool bInitialServer; // 0x1F (1)
	bool bInitialClient; // 0x20 (1)
};

// ScriptStruct Engine.PacketSimulationSettings
struct FPacketSimulationSettings {
	int32_t PktLoss; // 0x0 (4)
	int32_t PktLossMaxSize; // 0x4 (4)
	int32_t PktLossMinSize; // 0x8 (4)
	int32_t PktOrder; // 0xC (4)
	int32_t PktDup; // 0x10 (4)
	int32_t PktLag; // 0x14 (4)
	int32_t PktLagVariance; // 0x18 (4)
	int32_t PktLagMin; // 0x1C (4)
	int32_t PktLagMax; // 0x20 (4)
	int32_t PktIncomingLagMin; // 0x24 (4)
	int32_t PktIncomingLagMax; // 0x28 (4)
	int32_t PktIncomingLoss; // 0x2C (4)
	int32_t PktJitter; // 0x30 (4)
};

// ScriptStruct Engine.FastArraySerializer
struct FFastArraySerializer {
	int32_t ArrayReplicationKey; // 0x54 (4)
	enum class EFastArraySerializerDeltaFlags DeltaFlags; // 0x100 (1)
};

// ScriptStruct Engine.FastArraySerializerItem
struct FFastArraySerializerItem {
	int32_t ReplicationID; // 0x0 (4)
	int32_t ReplicationKey; // 0x4 (4)
	int32_t MostRecentArrayReplicationKey; // 0x8 (4)
};

// ScriptStruct Engine.NetworkEmulationProfileDescription
struct FNetworkEmulationProfileDescription {
	struct FString ProfileName; // 0x0 (16)
	struct FString Tooltip; // 0x10 (16)
};

// ScriptStruct Engine.NodeItem
struct FNodeItem {
	struct FName ParentName; // 0x0 (8)
	struct FTransform Transform; // 0x10 (48)
};

// ScriptStruct Engine.ParticleBurst
struct FParticleBurst {
	int32_t Count; // 0x0 (4)
	int32_t CountLow; // 0x4 (4)
	float Time; // 0x8 (4)
};

// ScriptStruct Engine.ParticleRandomSeedInfo
struct FParticleRandomSeedInfo {
	struct FName ParameterName; // 0x0 (8)
	char bGetSeedFromInstance : 1; // 0x8 (1)
	char bInstanceSeedIsIndex : 1; // 0x8 (1)
	char bResetSeedOnEmitterLooping : 1; // 0x8 (1)
	char bRandomlySelectSeedArray : 1; // 0x8 (1)
	char pad_8_4 : 4; // 0x8 (1)
	struct TArray<int32_t> RandomSeeds; // 0x10 (16)
};

// ScriptStruct Engine.ParticleCurvePair
struct FParticleCurvePair {
	struct FString CurveName; // 0x0 (16)
	struct Object CurveObject; // 0x10 (8)
};

// ScriptStruct Engine.BeamModifierOptions
struct FBeamModifierOptions {
	char bModify : 1; // 0x0 (1)
	char bScale : 1; // 0x0 (1)
	char bLock : 1; // 0x0 (1)
};

// ScriptStruct Engine.ParticleEvent_GenerateInfo
struct FParticleEvent_GenerateInfo {
	enum class EParticleEventType Type; // 0x0 (1)
	int32_t Frequency; // 0x4 (4)
	int32_t ParticleFrequency; // 0x8 (4)
	char FirstTimeOnly : 1; // 0xC (1)
	char pad_9_1 : 7; // 0x9 (1)
	char pad_A_0 : 1; // 0xA (1)
	char LastTimeOnly : 1; // 0xC (1)
	char pad_A_2 : 6; // 0xA (1)
	char pad_B_0 : 2; // 0xB (1)
	char UseReflectedImpactVector : 1; // 0xC (1)
	char pad_B_3 : 5; // 0xB (1)
	char pad_C_0 : 3; // 0xC (1)
	char bUseOrbitOffset : 1; // 0xC (1)
	char pad_C_4 : 4; // 0xC (1)
	struct FName CustomName; // 0x10 (8)
	struct TArray<struct UParticleModuleEventSendToGame> ParticleModuleEventsToSendToGame; // 0x18 (16)
};

// ScriptStruct Engine.LocationBoneSocketInfo
struct FLocationBoneSocketInfo {
	struct FName BoneSocketName; // 0x0 (8)
	struct FVector Offset; // 0x8 (12)
};

// ScriptStruct Engine.OrbitOptions
struct FOrbitOptions {
	char bProcessDuringSpawn : 1; // 0x0 (1)
	char bProcessDuringUpdate : 1; // 0x0 (1)
	char bUseEmitterTime : 1; // 0x0 (1)
};

// ScriptStruct Engine.EmitterDynamicParameter
struct FEmitterDynamicParameter {
	struct FName ParamName; // 0x0 (8)
	char bUseEmitterTime : 1; // 0x8 (1)
	char bSpawnTimeOnly : 1; // 0x8 (1)
	char pad_8_2 : 6; // 0x8 (1)
	enum class EEmitterDynamicParameterValue ValueMethod; // 0xC (1)
	char bScaleVelocityByParamValue : 1; // 0x10 (1)
	char pad_A_1 : 7; // 0xA (1)
	struct FRawDistributionFloat ParamValue; // 0x18 (48)
};

// ScriptStruct Engine.BeamTargetData
struct FBeamTargetData {
	struct FName TargetName; // 0x0 (8)
	float TargetPercentage; // 0x8 (4)
};

// ScriptStruct Engine.GPUSpriteResourceData
struct FGPUSpriteResourceData {
	struct TArray<struct FColor> QuantizedColorSamples; // 0x0 (16)
	struct TArray<struct FColor> QuantizedMiscSamples; // 0x10 (16)
	struct TArray<struct FColor> QuantizedSimulationAttrSamples; // 0x20 (16)
	struct FVector4 ColorScale; // 0x30 (16)
	struct FVector4 ColorBias; // 0x40 (16)
	struct FVector4 MiscScale; // 0x50 (16)
	struct FVector4 MiscBias; // 0x60 (16)
	struct FVector4 SimulationAttrCurveScale; // 0x70 (16)
	struct FVector4 SimulationAttrCurveBias; // 0x80 (16)
	struct FVector4 SubImageSize; // 0x90 (16)
	struct FVector4 SizeBySpeed; // 0xA0 (16)
	struct FVector ConstantAcceleration; // 0xB0 (12)
	struct FVector OrbitOffsetBase; // 0xBC (12)
	struct FVector OrbitOffsetRange; // 0xC8 (12)
	struct FVector OrbitFrequencyBase; // 0xD4 (12)
	struct FVector OrbitFrequencyRange; // 0xE0 (12)
	struct FVector OrbitPhaseBase; // 0xEC (12)
	struct FVector OrbitPhaseRange; // 0xF8 (12)
	float GlobalVectorFieldScale; // 0x104 (4)
	float GlobalVectorFieldTightness; // 0x108 (4)
	float PerParticleVectorFieldScale; // 0x10C (4)
	float PerParticleVectorFieldBias; // 0x110 (4)
	float DragCoefficientScale; // 0x114 (4)
	float DragCoefficientBias; // 0x118 (4)
	float ResilienceScale; // 0x11C (4)
	float ResilienceBias; // 0x120 (4)
	float CollisionRadiusScale; // 0x124 (4)
	float CollisionRadiusBias; // 0x128 (4)
	float CollisionTimeBias; // 0x12C (4)
	float CollisionRandomSpread; // 0x130 (4)
	float CollisionRandomDistribution; // 0x134 (4)
	float OneMinusFriction; // 0x138 (4)
	float RotationRateScale; // 0x13C (4)
	float CameraMotionBlurAmount; // 0x140 (4)
	enum class EParticleScreenAlignment ScreenAlignment; // 0x144 (1)
	enum class EParticleAxisLock LockAxisFlag; // 0x145 (1)
	struct FVector2D PivotOffset; // 0x148 (8)
	char bRemoveHMDRoll : 1; // 0x150 (1)
	char pad_14E_1 : 7; // 0x14E (1)
	float MinFacingCameraBlendDistance; // 0x154 (4)
	float MaxFacingCameraBlendDistance; // 0x158 (4)
};

// ScriptStruct Engine.GPUSpriteEmitterInfo
struct FGPUSpriteEmitterInfo {
	struct UParticleModuleRequired RequiredModule; // 0x0 (8)
	struct UParticleModuleSpawn SpawnModule; // 0x8 (8)
	struct UParticleModuleSpawnPerUnit SpawnPerUnitModule; // 0x10 (8)
	struct TArray<struct UParticleModule> SpawnModules; // 0x18 (16)
	struct FGPUSpriteLocalVectorFieldInfo LocalVectorField; // 0x30 (112)
	struct FFloatDistribution VectorFieldScale; // 0xA0 (32)
	struct FFloatDistribution DragCoefficient; // 0xC0 (32)
	struct FFloatDistribution PointAttractorStrength; // 0xE0 (32)
	struct FFloatDistribution Resilience; // 0x100 (32)
	struct FVector ConstantAcceleration; // 0x120 (12)
	struct FVector PointAttractorPosition; // 0x12C (12)
	float PointAttractorRadiusSq; // 0x138 (4)
	struct FVector OrbitOffsetBase; // 0x13C (12)
	struct FVector OrbitOffsetRange; // 0x148 (12)
	struct FVector2D InvMaxSize; // 0x154 (8)
	float InvRotationRateScale; // 0x15C (4)
	float MaxLifetime; // 0x160 (4)
	int32_t MaxParticleCount; // 0x164 (4)
	enum class EParticleScreenAlignment ScreenAlignment; // 0x168 (1)
	enum class EParticleAxisLock LockAxisFlag; // 0x169 (1)
	char bEnableCollision : 1; // 0x16C (1)
	char pad_162_1 : 7; // 0x162 (1)
	enum class EParticleCollisionMode CollisionMode; // 0x170 (1)
	char bRemoveHMDRoll : 1; // 0x174 (1)
	char pad_164_1 : 7; // 0x164 (1)
	float MinFacingCameraBlendDistance; // 0x178 (4)
	float MaxFacingCameraBlendDistance; // 0x17C (4)
	struct FRawDistributionVector DynamicColor; // 0x180 (72)
	struct FRawDistributionFloat DynamicAlpha; // 0x1C8 (48)
	struct FRawDistributionVector DynamicColorScale; // 0x1F8 (72)
	struct FRawDistributionFloat DynamicAlphaScale; // 0x240 (48)
};

// ScriptStruct Engine.GPUSpriteLocalVectorFieldInfo
struct FGPUSpriteLocalVectorFieldInfo {
	struct UVectorField Field; // 0x0 (8)
	struct FTransform Transform; // 0x10 (48)
	struct FRotator MinInitialRotation; // 0x40 (12)
	struct FRotator MaxInitialRotation; // 0x4C (12)
	struct FRotator RotationRate; // 0x58 (12)
	float Intensity; // 0x64 (4)
	float Tightness; // 0x68 (4)
	char bIgnoreComponentTransform : 1; // 0x6C (1)
	char pad_64_1 : 7; // 0x64 (1)
	char pad_65_0 : 1; // 0x65 (1)
	char bTileX : 1; // 0x6C (1)
	char pad_65_2 : 6; // 0x65 (1)
	char pad_66_0 : 2; // 0x66 (1)
	char bTileY : 1; // 0x6C (1)
	char pad_66_3 : 5; // 0x66 (1)
	char pad_67_0 : 3; // 0x67 (1)
	char bTileZ : 1; // 0x6C (1)
	char pad_67_4 : 4; // 0x67 (1)
	char pad_68_0 : 4; // 0x68 (1)
	char bUseFixDT : 1; // 0x6C (1)
};

// ScriptStruct Engine.NamedEmitterMaterial
struct FNamedEmitterMaterial {
	struct FName Name; // 0x0 (8)
	struct UMaterialInterface Material; // 0x8 (8)
};

// ScriptStruct Engine.LODSoloTrack
struct FLODSoloTrack {
	struct TArray<char> SoloEnableSetting; // 0x0 (16)
};

// ScriptStruct Engine.ParticleSysParam
struct FParticleSysParam {
	struct FName Name; // 0x0 (8)
	enum class EParticleSysParamType ParamType; // 0x8 (1)
	float Scalar; // 0xC (4)
	float Scalar_Low; // 0x10 (4)
	struct FVector Vector; // 0x14 (12)
	struct FVector Vector_Low; // 0x20 (12)
	struct FColor Color; // 0x2C (4)
	struct UActor Actor; // 0x30 (8)
	struct UMaterialInterface Material; // 0x38 (8)
};

// ScriptStruct Engine.PhysicalAnimationData
struct FPhysicalAnimationData {
	struct FName BodyName; // 0x0 (8)
	char bIsLocalSimulation : 1; // 0x8 (1)
	char pad_8_1 : 7; // 0x8 (1)
	float OrientationStrength; // 0xC (4)
	float AngularVelocityStrength; // 0x10 (4)
	float PositionStrength; // 0x14 (4)
	float VelocityStrength; // 0x18 (4)
	float MaxLinearForce; // 0x1C (4)
	float MaxAngularForce; // 0x20 (4)
};

// ScriptStruct Engine.TireFrictionScalePair
struct FTireFrictionScalePair {
	struct UTireType TireType; // 0x0 (8)
	float FrictionScale; // 0x8 (4)
};

// ScriptStruct Engine.PhysicalAnimationProfile
struct FPhysicalAnimationProfile {
	struct FName ProfileName; // 0x0 (8)
	struct FPhysicalAnimationData PhysicalAnimationData; // 0x8 (36)
};

// ScriptStruct Engine.PhysicsConstraintProfileHandle
struct FPhysicsConstraintProfileHandle {
	struct FConstraintProfileProperties ProfileProperties; // 0x0 (260)
	struct FName ProfileName; // 0x104 (8)
};

// ScriptStruct Engine.ChaosPhysicsSettings
struct FChaosPhysicsSettings {
	enum class EChaosThreadingMode DefaultThreadingModel; // 0x0 (1)
	enum class EChaosSolverTickMode DedicatedThreadTickMode; // 0x1 (1)
	enum class EChaosBufferMode DedicatedThreadBufferMode; // 0x2 (1)
};

// ScriptStruct Engine.PhysicalSurfaceName
struct FPhysicalSurfaceName {
	enum class EPhysicalSurface Type; // 0x0 (1)
	struct FName Name; // 0x4 (8)
};

// ScriptStruct Engine.DelegateArray
struct FDelegateArray {
	struct TArray<struct FDelegate> Delegates; // 0x0 (16)
};

// ScriptStruct Engine.ViewTargetTransitionParams
struct FViewTargetTransitionParams {
	float BlendTime; // 0x0 (4)
	enum class EViewTargetBlendFunction BlendFunction; // 0x4 (1)
	float BlendExp; // 0x8 (4)
	char bLockOutgoing : 1; // 0xC (1)
};

// ScriptStruct Engine.TViewTarget
struct FTViewTarget {
	struct UActor Target; // 0x0 (8)
	struct FMinimalViewInfo POV; // 0x10 (1520)
	struct APlayerState PlayerState; // 0x600 (8)
};

// ScriptStruct Engine.CameraCacheEntry
struct FCameraCacheEntry {
	float Timestamp; // 0x0 (4)
	struct FMinimalViewInfo POV; // 0x10 (1520)
};

// ScriptStruct Engine.UpdateLevelVisibilityLevelInfo
struct FUpdateLevelVisibilityLevelInfo {
	struct FName PackageName; // 0x0 (8)
	struct FName Filename; // 0x8 (8)
	char bIsVisible : 1; // 0x10 (1)
};

// ScriptStruct Engine.UpdateLevelStreamingLevelStatus
struct FUpdateLevelStreamingLevelStatus {
	struct FName PackageName; // 0x0 (8)
	int32_t LODIndex; // 0x8 (4)
	char bNewShouldBeLoaded : 1; // 0xC (1)
	char bNewShouldBeVisible : 1; // 0xC (1)
	char bNewShouldBlockOnLoad : 1; // 0xC (1)
};

// ScriptStruct Engine.InputActionSpeechMapping
struct FInputActionSpeechMapping {
	struct FName ActionName; // 0x0 (8)
	struct FName SpeechKeyword; // 0x8 (8)
};

// ScriptStruct Engine.InputAxisKeyMapping
struct FInputAxisKeyMapping {
	struct FName AxisName; // 0x0 (8)
	float Scale; // 0x8 (4)
	struct FKey Key; // 0x10 (24)
};

// ScriptStruct Engine.InputActionKeyMapping
struct FInputActionKeyMapping {
	struct FName ActionName; // 0x0 (8)
	char bShift : 1; // 0x8 (1)
	char bCtrl : 1; // 0x8 (1)
	char bAlt : 1; // 0x8 (1)
	char bCmd : 1; // 0x8 (1)
	char pad_8_4 : 4; // 0x8 (1)
	struct FKey Key; // 0x10 (24)
};

// ScriptStruct Engine.InputAxisConfigEntry
struct FInputAxisConfigEntry {
	struct FName AxisKeyName; // 0x0 (8)
	struct FInputAxisProperties AxisProperties; // 0x8 (16)
};

// ScriptStruct Engine.InputAxisProperties
struct FInputAxisProperties {
	float DeadZone; // 0x0 (4)
	float Sensitivity; // 0x4 (4)
	float Exponent; // 0x8 (4)
	char bInvert : 1; // 0xC (1)
};

// ScriptStruct Engine.KeyBind
struct FKeyBind {
	struct FKey Key; // 0x0 (24)
	struct FString Command; // 0x18 (16)
	char Control : 1; // 0x28 (1)
	char Shift : 1; // 0x28 (1)
	char Alt : 1; // 0x28 (1)
	char Cmd : 1; // 0x28 (1)
	char bIgnoreCtrl : 1; // 0x28 (1)
	char bIgnoreShift : 1; // 0x28 (1)
	char bIgnoreAlt : 1; // 0x28 (1)
	char bIgnoreCmd : 1; // 0x28 (1)
	char bDisabled : 1; // 0x29 (1)
};

// ScriptStruct Engine.PlayerMuteList
struct FPlayerMuteList {
	bool bHasVoiceHandshakeCompleted; // 0x30 (1)
	int32_t VoiceChannelIdx; // 0x34 (4)
};

// ScriptStruct Engine.PoseDataContainer
struct FPoseDataContainer {
	struct TArray<struct FSmartName> PoseNames; // 0x0 (16)
	struct TArray<struct FName> Tracks; // 0x10 (16)
	struct TMap<struct FName, int32_t> TrackMap; // 0x20 (80)
	struct TArray<struct FPoseData> Poses; // 0x70 (16)
	struct TArray<struct FAnimCurveBase> Curves; // 0x80 (16)
};

// ScriptStruct Engine.PoseData
struct FPoseData {
	struct TArray<struct FTransform> LocalSpacePose; // 0x0 (16)
	struct TMap<int32_t, int32_t> TrackToBufferIndex; // 0x10 (80)
	struct TArray<float> CurveData; // 0x60 (16)
};

// ScriptStruct Engine.PreviewAssetAttachContainer
struct FPreviewAssetAttachContainer {
	struct TArray<struct FPreviewAttachedObjectPair> AttachedObjects; // 0x0 (16)
};

// ScriptStruct Engine.PreviewAttachedObjectPair
struct FPreviewAttachedObjectPair {
	struct TSoftObjectPtr<Object> AttachedObject; // 0x0 (40)
	struct Object Object; // 0x28 (8)
	struct FName AttachedTo; // 0x30 (8)
};

// ScriptStruct Engine.PreviewMeshCollectionEntry
struct FPreviewMeshCollectionEntry {
	struct TSoftObjectPtr<USkeletalMesh> SkeletalMesh; // 0x0 (40)
};

// ScriptStruct Engine.PrimitiveComponentInstanceData
struct FPrimitiveComponentInstanceData : FSceneComponentInstanceData {
	struct FTransform ComponentTransform; // 0xB0 (48)
	int32_t VisibilityId; // 0xE0 (4)
	struct UPrimitiveComponent LODParent; // 0xE8 (8)
};

// ScriptStruct Engine.SpriteCategoryInfo
struct FSpriteCategoryInfo {
	struct FName Category; // 0x0 (8)
	struct FText DisplayName; // 0x8 (24)
	struct FText Description; // 0x20 (24)
};

// ScriptStruct Engine.ReverbSettings
struct FReverbSettings {
	bool bApplyReverb; // 0x0 (1)
	struct UReverbEffect ReverbEffect; // 0x8 (8)
	struct USoundEffectSubmixPreset ReverbPluginEffect; // 0x10 (8)
	float Volume; // 0x18 (4)
	float FadeTime; // 0x1C (4)
};

// ScriptStruct Engine.TransformBase
struct FTransformBase {
	struct FName Node; // 0x0 (8)
	struct FTransformBaseConstraint Constraints[0x2]; // 0x8 (32)
};

// ScriptStruct Engine.TransformBaseConstraint
struct FTransformBaseConstraint {
	struct TArray<struct FRigTransformConstraint> TransformConstraints; // 0x0 (16)
};

// ScriptStruct Engine.RigTransformConstraint
struct FRigTransformConstraint {
	enum class EConstraintTransform TranformType; // 0x0 (1)
	struct FName ParentSpace; // 0x4 (8)
	float Weight; // 0xC (4)
};

// ScriptStruct Engine.Node
struct FNode {
	struct FName Name; // 0x0 (8)
	struct FName ParentName; // 0x8 (8)
	struct FTransform Transform; // 0x10 (48)
	struct FString DisplayName; // 0x40 (16)
	bool bAdvanced; // 0x50 (1)
};

// ScriptStruct Engine.RootMotionSource
struct FRootMotionSource {
	uint16_t Priority; // 0x10 (2)
	uint16_t LocalID; // 0x12 (2)
	enum class ERootMotionAccumulateMode AccumulateMode; // 0x14 (1)
	struct FName InstanceName; // 0x18 (8)
	float StartTime; // 0x20 (4)
	float CurrentTime; // 0x24 (4)
	float PreviousTime; // 0x28 (4)
	float Duration; // 0x2C (4)
	struct FRootMotionSourceStatus Status; // 0x30 (1)
	struct FRootMotionSourceSettings Settings; // 0x31 (1)
	bool bInLocalSpace; // 0x32 (1)
	struct FRootMotionMovementParams RootMotionParams; // 0x40 (64)
	struct FRootMotionFinishVelocitySettings FinishVelocityParams; // 0x80 (20)
};

// ScriptStruct Engine.RootMotionFinishVelocitySettings
struct FRootMotionFinishVelocitySettings {
	enum class ERootMotionFinishVelocityMode Mode; // 0x0 (1)
	struct FVector SetVelocity; // 0x4 (12)
	float ClampVelocity; // 0x10 (4)
};

// ScriptStruct Engine.RootMotionSourceStatus
struct FRootMotionSourceStatus {
	char Flags; // 0x0 (1)
};

// ScriptStruct Engine.RootMotionSource_JumpForce
struct FRootMotionSource_JumpForce : FRootMotionSource {
	struct FRotator Rotation; // 0x98 (12)
	float Distance; // 0xA4 (4)
	float Height; // 0xA8 (4)
	bool bDisableTimeout; // 0xAC (1)
	struct UCurveVector PathOffsetCurve; // 0xB0 (8)
	struct UCurveFloat TimeMappingCurve; // 0xB8 (8)
};

// ScriptStruct Engine.RootMotionSource_MoveToDynamicForce
struct FRootMotionSource_MoveToDynamicForce : FRootMotionSource {
	struct FVector StartLocation; // 0x98 (12)
	struct FVector InitialTargetLocation; // 0xA4 (12)
	struct FVector TargetLocation; // 0xB0 (12)
	bool bRestrictSpeedToExpected; // 0xBC (1)
	struct UCurveVector PathOffsetCurve; // 0xC0 (8)
	struct UCurveFloat TimeMappingCurve; // 0xC8 (8)
};

// ScriptStruct Engine.RootMotionSource_MoveToForce
struct FRootMotionSource_MoveToForce : FRootMotionSource {
	struct FVector StartLocation; // 0x98 (12)
	struct FVector TargetLocation; // 0xA4 (12)
	bool bRestrictSpeedToExpected; // 0xB0 (1)
	struct UCurveVector PathOffsetCurve; // 0xB8 (8)
};

// ScriptStruct Engine.RootMotionSource_RadialForce
struct FRootMotionSource_RadialForce : FRootMotionSource {
	struct FVector Location; // 0x98 (12)
	struct UActor LocationActor; // 0xA8 (8)
	float Radius; // 0xB0 (4)
	float Strength; // 0xB4 (4)
	bool bIsPush; // 0xB8 (1)
	bool bNoZForce; // 0xB9 (1)
	struct UCurveFloat StrengthDistanceFalloff; // 0xC0 (8)
	struct UCurveFloat StrengthOverTime; // 0xC8 (8)
	bool bUseFixedWorldDirection; // 0xD0 (1)
	struct FRotator FixedWorldDirection; // 0xD4 (12)
};

// ScriptStruct Engine.RootMotionSource_ConstantForce
struct FRootMotionSource_ConstantForce : FRootMotionSource {
	struct FVector Force; // 0x98 (12)
	struct UCurveFloat StrengthOverTime; // 0xA8 (8)
};

// ScriptStruct Engine.CameraExposureSettings
struct FCameraExposureSettings {
	enum class EAutoExposureMethod Method; // 0x0 (1)
	float LowPercent; // 0x4 (4)
	float HighPercent; // 0x8 (4)
	float MinBrightness; // 0xC (4)
	float MaxBrightness; // 0x10 (4)
	float SpeedUp; // 0x14 (4)
	float SpeedDown; // 0x18 (4)
	float Bias; // 0x1C (4)
	struct UCurveFloat BiasCurve; // 0x20 (8)
	struct UTexture MeterMask; // 0x28 (8)
	float HistogramLogMin; // 0x30 (4)
	float HistogramLogMax; // 0x34 (4)
	float CalibrationConstant; // 0x38 (4)
	char ApplyPhysicalCameraExposure : 1; // 0x3C (1)
};

// ScriptStruct Engine.LensSettings
struct FLensSettings {
	struct FLensBloomSettings Bloom; // 0x0 (184)
	struct FLensImperfectionSettings Imperfections; // 0xB8 (32)
	float ChromaticAberration; // 0xD8 (4)
};

// ScriptStruct Engine.LensImperfectionSettings
struct FLensImperfectionSettings {
	struct UTexture DirtMask; // 0x0 (8)
	float DirtMaskIntensity; // 0x8 (4)
	struct FLinearColor DirtMaskTint; // 0xC (16)
};

// ScriptStruct Engine.LensBloomSettings
struct FLensBloomSettings {
	struct FGaussianSumBloomSettings GaussianSum; // 0x0 (132)
	struct FConvolutionBloomSettings Convolution; // 0x88 (40)
	enum class EBloomMethod Method; // 0xB0 (1)
};

// ScriptStruct Engine.ConvolutionBloomSettings
struct FConvolutionBloomSettings {
	struct UTexture2D Texture; // 0x0 (8)
	float Size; // 0x8 (4)
	struct FVector2D CenterUV; // 0xC (8)
	float PreFilterMin; // 0x14 (4)
	float PreFilterMax; // 0x18 (4)
	float PreFilterMult; // 0x1C (4)
	float BufferScale; // 0x20 (4)
};

// ScriptStruct Engine.GaussianSumBloomSettings
struct FGaussianSumBloomSettings {
	float Intensity; // 0x0 (4)
	float Threshold; // 0x4 (4)
	float SizeScale; // 0x8 (4)
	float Filter1Size; // 0xC (4)
	float Filter2Size; // 0x10 (4)
	float Filter3Size; // 0x14 (4)
	float Filter4Size; // 0x18 (4)
	float Filter5Size; // 0x1C (4)
	float Filter6Size; // 0x20 (4)
	struct FLinearColor Filter1Tint; // 0x24 (16)
	struct FLinearColor Filter2Tint; // 0x34 (16)
	struct FLinearColor Filter3Tint; // 0x44 (16)
	struct FLinearColor Filter4Tint; // 0x54 (16)
	struct FLinearColor Filter5Tint; // 0x64 (16)
	struct FLinearColor Filter6Tint; // 0x74 (16)
};

// ScriptStruct Engine.FilmStockSettings
struct FFilmStockSettings {
	float Slope; // 0x0 (4)
	float Toe; // 0x4 (4)
	float Shoulder; // 0x8 (4)
	float BlackClip; // 0xC (4)
	float WhiteClip; // 0x10 (4)
};

// ScriptStruct Engine.ColorGradingSettings
struct FColorGradingSettings {
	struct FColorGradePerRangeSettings Global; // 0x0 (80)
	struct FColorGradePerRangeSettings Shadows; // 0x50 (80)
	struct FColorGradePerRangeSettings Midtones; // 0xA0 (80)
	struct FColorGradePerRangeSettings Highlights; // 0xF0 (80)
	float ShadowsMax; // 0x140 (4)
	float HighlightsMin; // 0x144 (4)
};

// ScriptStruct Engine.ColorGradePerRangeSettings
struct FColorGradePerRangeSettings {
	struct FVector4 Saturation; // 0x0 (16)
	struct FVector4 Contrast; // 0x10 (16)
	struct FVector4 Gamma; // 0x20 (16)
	struct FVector4 Gain; // 0x30 (16)
	struct FVector4 Offset; // 0x40 (16)
};

// ScriptStruct Engine.EngineShowFlagsSetting
struct FEngineShowFlagsSetting {
	struct FString ShowFlagName; // 0x0 (16)
	bool Enabled; // 0x10 (1)
};

// ScriptStruct Engine.SimpleCurve
struct FSimpleCurve : FRealCurve {
	enum class ERichCurveInterpMode InterpMode; // 0x70 (1)
	struct TArray<struct FSimpleCurveKey> Keys; // 0x78 (16)
};

// ScriptStruct Engine.SimpleCurveKey
struct FSimpleCurveKey {
	float Time; // 0x0 (4)
	float Value; // 0x4 (4)
};

// ScriptStruct Engine.SingleAnimationPlayData
struct FSingleAnimationPlayData {
	struct UAnimationAsset AnimToPlay; // 0x0 (8)
	char bSavedLooping : 1; // 0x8 (1)
	char bSavedPlaying : 1; // 0x8 (1)
	char pad_8_2 : 6; // 0x8 (1)
	float SavedPosition; // 0xC (4)
	float SavedPlayRate; // 0x10 (4)
};

// ScriptStruct Engine.SkeletalMaterial
struct FSkeletalMaterial {
	struct UMaterialInterface MaterialInterface; // 0x0 (8)
	struct FName MaterialSlotName; // 0x8 (8)
	struct FMeshUVChannelInfo UVChannelData; // 0x10 (20)
};

// ScriptStruct Engine.ClothingAssetData_Legacy
struct FClothingAssetData_Legacy {
	struct FName AssetName; // 0x0 (8)
	struct FString ApexFileName; // 0x8 (16)
	bool bClothPropertiesChanged; // 0x18 (1)
	struct FClothPhysicsProperties_Legacy PhysicsProperties; // 0x1C (80)
};

// ScriptStruct Engine.ClothPhysicsProperties_Legacy
struct FClothPhysicsProperties_Legacy {
	float VerticalResistance; // 0x0 (4)
	float HorizontalResistance; // 0x4 (4)
	float BendResistance; // 0x8 (4)
	float ShearResistance; // 0xC (4)
	float Friction; // 0x10 (4)
	float Damping; // 0x14 (4)
	float TetherStiffness; // 0x18 (4)
	float TetherLimit; // 0x1C (4)
	float Drag; // 0x20 (4)
	float StiffnessFrequency; // 0x24 (4)
	float GravityScale; // 0x28 (4)
	float MassScale; // 0x2C (4)
	float InertiaBlend; // 0x30 (4)
	float SelfCollisionThickness; // 0x34 (4)
	float SelfCollisionSquashScale; // 0x38 (4)
	float SelfCollisionStiffness; // 0x3C (4)
	float SolverFrequency; // 0x40 (4)
	float FiberCompression; // 0x44 (4)
	float FiberExpansion; // 0x48 (4)
	float FiberResistance; // 0x4C (4)
};

// ScriptStruct Engine.SkeletalMeshLODInfo
struct FSkeletalMeshLODInfo {
	struct FPerPlatformFloat ScreenSize; // 0x0 (4)
	float LODHysteresis; // 0x4 (4)
	struct TArray<int32_t> LODMaterialMap; // 0x8 (16)
	struct FSkeletalMeshBuildSettings BuildSettings; // 0x18 (20)
	struct FSkeletalMeshOptimizationSettings ReductionSettings; // 0x2C (60)
	struct TArray<struct FBoneReference> BonesToRemove; // 0x68 (16)
	struct TArray<struct FBoneReference> BonesToPrioritize; // 0x78 (16)
	float WeightOfPrioritization; // 0x88 (4)
	struct UAnimSequence BakePose; // 0x90 (8)
	struct UAnimSequence BakePoseOverride; // 0x98 (8)
	struct FString SourceImportFilename; // 0xA0 (16)
	enum class ESkinCacheUsage SkinCacheUsage; // 0xB0 (1)
	char bHasBeenSimplified : 1; // 0xB1 (1)
	char pad_AD_1 : 7; // 0xAD (1)
	char pad_AE_0 : 1; // 0xAE (1)
	char bHasPerLODVertexColors : 1; // 0xB1 (1)
	char pad_AE_2 : 6; // 0xAE (1)
	char pad_AF_0 : 2; // 0xAF (1)
	char bAllowCPUAccess : 1; // 0xB1 (1)
	char pad_AF_3 : 5; // 0xAF (1)
	char pad_B0_0 : 3; // 0xB0 (1)
	char bSupportUniformlyDistributedSampling : 1; // 0xB1 (1)
};

// ScriptStruct Engine.SkeletalMeshOptimizationSettings
struct FSkeletalMeshOptimizationSettings {
	enum class SkeletalMeshTerminationCriterion TerminationCriterion; // 0x0 (1)
	float NumOfTrianglesPercentage; // 0x4 (4)
	float NumOfVertPercentage; // 0x8 (4)
	uint32_t MaxNumOfTriangles; // 0xC (4)
	uint32_t MaxNumOfVerts; // 0x10 (4)
	float MaxDeviationPercentage; // 0x14 (4)
	enum class SkeletalMeshOptimizationType ReductionMethod; // 0x18 (1)
	enum class SkeletalMeshOptimizationImportance SilhouetteImportance; // 0x19 (1)
	enum class SkeletalMeshOptimizationImportance TextureImportance; // 0x1A (1)
	enum class SkeletalMeshOptimizationImportance ShadingImportance; // 0x1B (1)
	enum class SkeletalMeshOptimizationImportance SkinningImportance; // 0x1C (1)
	char bRemapMorphTargets : 1; // 0x1D (1)
	char pad_1A_1 : 7; // 0x1A (1)
	char pad_1B_0 : 1; // 0x1B (1)
	char bRecalcNormals : 1; // 0x1D (1)
	char pad_1B_2 : 6; // 0x1B (1)
	float WeldingThreshold; // 0x20 (4)
	float NormalsThreshold; // 0x24 (4)
	int32_t MaxBonesPerVertex; // 0x28 (4)
	char bEnforceBoneBoundaries : 1; // 0x2C (1)
	char pad_28_1 : 7; // 0x28 (1)
	float VolumeImportance; // 0x30 (4)
	char bLockEdges : 1; // 0x34 (1)
	char pad_2D_1 : 7; // 0x2D (1)
	char pad_2E_0 : 1; // 0x2E (1)
	char bLockColorBounaries : 1; // 0x34 (1)
	char pad_2E_2 : 6; // 0x2E (1)
	int32_t BaseLOD; // 0x38 (4)
};

// ScriptStruct Engine.SkeletalMeshClothBuildParams
struct FSkeletalMeshClothBuildParams {
	struct TWeakObjectPtr<struct UClothingAssetBase> TargetAsset; // 0x0 (8)
	int32_t TargetLod; // 0x8 (4)
	bool bRemapParameters; // 0xC (1)
	struct FString AssetName; // 0x10 (16)
	int32_t LODIndex; // 0x20 (4)
	int32_t SourceSection; // 0x24 (4)
	bool bRemoveFromMesh; // 0x28 (1)
	struct TSoftObjectPtr<UPhysicsAsset> PhysicsAsset; // 0x30 (40)
};

// ScriptStruct Engine.BoneMirrorExport
struct FBoneMirrorExport {
	struct FName BoneName; // 0x0 (8)
	struct FName SourceBoneName; // 0x8 (8)
	enum class EAxis BoneFlipAxis; // 0x10 (1)
};

// ScriptStruct Engine.BoneMirrorInfo
struct FBoneMirrorInfo {
	int32_t SourceIndex; // 0x0 (4)
	enum class EAxis BoneFlipAxis; // 0x4 (1)
};

// ScriptStruct Engine.SkeletalMeshLODGroupSettings
struct FSkeletalMeshLODGroupSettings {
	struct FPerPlatformFloat ScreenSize; // 0x0 (4)
	float LODHysteresis; // 0x4 (4)
	enum class EBoneFilterActionOption BoneFilterActionOption; // 0x8 (1)
	struct TArray<struct FBoneFilter> BoneList; // 0x10 (16)
	struct TArray<struct FName> BonesToPrioritize; // 0x20 (16)
	float WeightOfPrioritization; // 0x30 (4)
	struct UAnimSequence BakePose; // 0x38 (8)
	struct FSkeletalMeshOptimizationSettings ReductionSettings; // 0x40 (60)
};

// ScriptStruct Engine.BoneFilter
struct FBoneFilter {
	bool bExcludeSelf; // 0x0 (1)
	struct FName BoneName; // 0x4 (8)
};

// ScriptStruct Engine.SkeletalMeshSamplingInfo
struct FSkeletalMeshSamplingInfo {
	struct TArray<struct FSkeletalMeshSamplingRegion> Regions; // 0x0 (16)
	struct FSkeletalMeshSamplingBuiltData BuiltData; // 0x10 (32)
};

// ScriptStruct Engine.SkeletalMeshSamplingBuiltData
struct FSkeletalMeshSamplingBuiltData {
	struct TArray<struct FSkeletalMeshSamplingLODBuiltData> WholeMeshBuiltData; // 0x0 (16)
	struct TArray<struct FSkeletalMeshSamplingRegionBuiltData> RegionBuiltData; // 0x10 (16)
};

// ScriptStruct Engine.SkeletalMeshSamplingRegion
struct FSkeletalMeshSamplingRegion {
	struct FName Name; // 0x0 (8)
	int32_t LODIndex; // 0x8 (4)
	char bSupportUniformlyDistributedSampling : 1; // 0xC (1)
	char pad_C_1 : 7; // 0xC (1)
	struct TArray<struct FSkeletalMeshSamplingRegionMaterialFilter> MaterialFilters; // 0x10 (16)
	struct TArray<struct FSkeletalMeshSamplingRegionBoneFilter> BoneFilters; // 0x20 (16)
};

// ScriptStruct Engine.SkeletalMeshSamplingRegionBoneFilter
struct FSkeletalMeshSamplingRegionBoneFilter {
	struct FName BoneName; // 0x0 (8)
	char bIncludeOrExclude : 1; // 0x8 (1)
	char bApplyToChildren : 1; // 0x8 (1)
};

// ScriptStruct Engine.SkeletalMeshSamplingRegionMaterialFilter
struct FSkeletalMeshSamplingRegionMaterialFilter {
	struct FName MaterialName; // 0x0 (8)
};

// ScriptStruct Engine.VirtualBone
struct FVirtualBone {
	struct FName SourceBoneName; // 0x0 (8)
	struct FName TargetBoneName; // 0x8 (8)
	struct FName VirtualBoneName; // 0x10 (8)
};

// ScriptStruct Engine.AnimSlotGroup
struct FAnimSlotGroup {
	struct FName GroupName; // 0x0 (8)
	struct TArray<struct FName> SlotNames; // 0x8 (16)
};

// ScriptStruct Engine.RigConfiguration
struct FRigConfiguration {
	struct URig Rig; // 0x0 (8)
	struct TArray<struct FNameMapping> BoneMappingTable; // 0x8 (16)
};

// ScriptStruct Engine.NameMapping
struct FNameMapping {
	struct FName NodeName; // 0x0 (8)
	struct FName BoneName; // 0x8 (8)
};

// ScriptStruct Engine.BoneReductionSetting
struct FBoneReductionSetting {
	struct TArray<struct FName> BonesToRemove; // 0x0 (16)
};

// ScriptStruct Engine.ReferencePose
struct FReferencePose {
	struct FName PoseName; // 0x0 (8)
	struct TArray<struct FTransform> ReferencePose; // 0x8 (16)
};

// ScriptStruct Engine.BoneNode
struct FBoneNode {
	struct FName Name; // 0x0 (8)
	int32_t ParentIndex; // 0x8 (4)
	enum class EBoneTranslationRetargetingMode TranslationRetargetingMode; // 0xC (1)
};

// ScriptStruct Engine.SkeletonToMeshLinkup
struct FSkeletonToMeshLinkup {
	struct TArray<int32_t> SkeletonToMeshTable; // 0x0 (16)
	struct TArray<int32_t> MeshToSkeletonTable; // 0x10 (16)
};

// ScriptStruct Engine.SkelMeshComponentLODInfo
struct FSkelMeshComponentLODInfo {
	struct TArray<bool> HiddenMaterials; // 0x0 (16)
};

// ScriptStruct Engine.SkelMeshSkinWeightInfo
struct FSkelMeshSkinWeightInfo {
	int32_t Bones[0xc]; // 0x0 (48)
	char Weights[0xc]; // 0x30 (12)
};

// ScriptStruct Engine.SkinWeightProfileInfo
struct FSkinWeightProfileInfo {
	struct FName Name; // 0x0 (8)
	struct FPerPlatformBool DefaultProfile; // 0x8 (1)
	struct FPerPlatformInt DefaultProfileFromLODIndex; // 0xC (4)
};

// ScriptStruct Engine.TentDistribution
struct FTentDistribution {
	float TipAltitude; // 0x0 (4)
	float TipValue; // 0x4 (4)
	float Width; // 0x8 (4)
};

// ScriptStruct Engine.PrecomputedSkyLightInstanceData
struct FPrecomputedSkyLightInstanceData : FSceneComponentInstanceData {
	struct FGuid LightGuid; // 0xA8 (16)
	float AverageBrightness; // 0xB8 (4)
};

// ScriptStruct Engine.SoundAttenuationSettings
struct FSoundAttenuationSettings : FBaseAttenuationSettings {
	char bAttenuate : 1; // 0xB0 (1)
	char bSpatialize : 1; // 0xB0 (1)
	char bAttenuateWithLPF : 1; // 0xB0 (1)
	char bEnableListenerFocus : 1; // 0xB0 (1)
	char bEnableFocusInterpolation : 1; // 0xB0 (1)
	char bEnableOcclusion : 1; // 0xB0 (1)
	char bUseComplexCollisionForOcclusion : 1; // 0xB0 (1)
	char bEnableReverbSend : 1; // 0xB0 (1)
	char bEnablePriorityAttenuation : 1; // 0xB1 (1)
	char bApplyNormalizationToStereoSounds : 1; // 0xB1 (1)
	char bEnableLogFrequencyScaling : 1; // 0xB1 (1)
	char bEnableSubmixSends : 1; // 0xB1 (1)
	char pad_B1_4 : 4; // 0xB1 (1)
	enum class ESoundSpatializationAlgorithm SpatializationAlgorithm; // 0xB2 (1)
	float BinauralRadius; // 0xB4 (4)
	enum class EAirAbsorptionMethod AbsorptionMethod; // 0xB8 (1)
	enum class ECollisionChannel OcclusionTraceChannel; // 0xB9 (1)
	enum class EReverbSendMethod ReverbSendMethod; // 0xBA (1)
	enum class EPriorityAttenuationMethod PriorityAttenuationMethod; // 0xBB (1)
	float OmniRadius; // 0xBC (4)
	float StereoSpread; // 0xC0 (4)
	float LPFRadiusMin; // 0xC4 (4)
	float LPFRadiusMax; // 0xC8 (4)
	struct FRuntimeFloatCurve CustomLowpassAirAbsorptionCurve; // 0xD0 (136)
	struct FRuntimeFloatCurve CustomHighpassAirAbsorptionCurve; // 0x158 (136)
	float LPFFrequencyAtMin; // 0x1E0 (4)
	float LPFFrequencyAtMax; // 0x1E4 (4)
	float HPFFrequencyAtMin; // 0x1E8 (4)
	float HPFFrequencyAtMax; // 0x1EC (4)
	float FocusAzimuth; // 0x1F0 (4)
	float NonFocusAzimuth; // 0x1F4 (4)
	float FocusDistanceScale; // 0x1F8 (4)
	float NonFocusDistanceScale; // 0x1FC (4)
	float FocusPriorityScale; // 0x200 (4)
	float NonFocusPriorityScale; // 0x204 (4)
	float FocusVolumeAttenuation; // 0x208 (4)
	float NonFocusVolumeAttenuation; // 0x20C (4)
	float FocusAttackInterpSpeed; // 0x210 (4)
	float FocusReleaseInterpSpeed; // 0x214 (4)
	float OcclusionLowPassFilterFrequency; // 0x218 (4)
	float OcclusionVolumeAttenuation; // 0x21C (4)
	float OcclusionInterpolationTime; // 0x220 (4)
	float ReverbWetLevelMin; // 0x224 (4)
	float ReverbWetLevelMax; // 0x228 (4)
	float ReverbDistanceMin; // 0x22C (4)
	float ReverbDistanceMax; // 0x230 (4)
	float ManualReverbSendLevel; // 0x234 (4)
	struct FRuntimeFloatCurve CustomReverbSendCurve; // 0x238 (136)
	struct TArray<struct FAttenuationSubmixSendSettings> SubmixSendSettings; // 0x2C0 (16)
	float PriorityAttenuationMin; // 0x2D0 (4)
	float PriorityAttenuationMax; // 0x2D4 (4)
	float PriorityAttenuationDistanceMin; // 0x2D8 (4)
	float PriorityAttenuationDistanceMax; // 0x2DC (4)
	float ManualPriorityAttenuation; // 0x2E0 (4)
	struct FRuntimeFloatCurve CustomPriorityAttenuationCurve; // 0x2E8 (136)
	struct FSoundAttenuationPluginSettings PluginSettings; // 0x370 (48)
};

// ScriptStruct Engine.SoundAttenuationPluginSettings
struct FSoundAttenuationPluginSettings {
	struct TArray<struct USpatializationPluginSourceSettingsBase> SpatializationPluginSettingsArray; // 0x0 (16)
	struct TArray<struct UOcclusionPluginSourceSettingsBase> OcclusionPluginSettingsArray; // 0x10 (16)
	struct TArray<struct UReverbPluginSourceSettingsBase> ReverbPluginSettingsArray; // 0x20 (16)
};

// ScriptStruct Engine.AttenuationSubmixSendSettings
struct FAttenuationSubmixSendSettings {
	struct USoundSubmix Submix; // 0x0 (8)
	enum class ESubmixSendMethod SubmixSendMethod; // 0x8 (1)
	float SubmixSendLevelMin; // 0xC (4)
	float SubmixSendLevelMax; // 0x10 (4)
	float SubmixSendDistanceMin; // 0x14 (4)
	float SubmixSendDistanceMax; // 0x18 (4)
	float ManualSubmixSendLevel; // 0x1C (4)
	struct FRuntimeFloatCurve CustomSubmixSendCurve; // 0x20 (136)
};

// ScriptStruct Engine.PassiveSoundMixModifier
struct FPassiveSoundMixModifier {
	struct USoundMix SoundMix; // 0x0 (8)
	float MinVolumeThreshold; // 0x8 (4)
	float MaxVolumeThreshold; // 0xC (4)
};

// ScriptStruct Engine.SoundClassProperties
struct FSoundClassProperties {
	float Volume; // 0x0 (4)
	float Pitch; // 0x4 (4)
	float LowPassFilterFrequency; // 0x8 (4)
	float AttenuationDistanceScale; // 0xC (4)
	float StereoBleed; // 0x10 (4)
	float LFEBleed; // 0x14 (4)
	float VoiceCenterChannelVolume; // 0x18 (4)
	float RadioFilterVolume; // 0x1C (4)
	float RadioFilterVolumeThreshold; // 0x20 (4)
	char bApplyEffects : 1; // 0x24 (1)
	char bAlwaysPlay : 1; // 0x24 (1)
	char bIsUISound : 1; // 0x24 (1)
	char bIsMusic : 1; // 0x24 (1)
	char bCenterChannelOnly : 1; // 0x24 (1)
	char bApplyAmbientVolumes : 1; // 0x24 (1)
	char bReverb : 1; // 0x24 (1)
	char pad_24_7 : 1; // 0x24 (1)
	float Default2DReverbSendAmount; // 0x28 (4)
	enum class EAudioOutputTarget OutputTarget; // 0x2C (1)
	enum class ESoundWaveLoadingBehavior LoadingBehavior; // 0x2D (1)
	struct USoundSubmix DefaultSubmix; // 0x30 (8)
};

// ScriptStruct Engine.SoundConcurrencySettings
struct FSoundConcurrencySettings {
	int32_t MaxCount; // 0x0 (4)
	char bLimitToOwner : 1; // 0x4 (1)
	char pad_4_1 : 7; // 0x4 (1)
	enum class EMaxConcurrentResolutionRule ResolutionRule; // 0x8 (1)
	float VolumeScale; // 0xC (4)
	float VolumeScaleAttackTime; // 0x10 (4)
	char bVolumeScaleCanRelease : 1; // 0x14 (1)
	char pad_E_1 : 7; // 0xE (1)
	float VolumeScaleReleaseTime; // 0x18 (4)
	float VoiceStealReleaseTime; // 0x1C (4)
};

// ScriptStruct Engine.SourceEffectChainEntry
struct FSourceEffectChainEntry {
	struct USoundEffectSourcePreset Preset; // 0x0 (8)
	char bBypass : 1; // 0x8 (1)
};

// ScriptStruct Engine.SoundGroup
struct FSoundGroup {
	enum class ESoundGroup SoundGroup; // 0x0 (1)
	struct FString DisplayName; // 0x8 (16)
	char bAlwaysDecompressOnLoad : 1; // 0x18 (1)
	char pad_11_1 : 7; // 0x11 (1)
	float DecompressedDuration; // 0x1C (4)
};

// ScriptStruct Engine.SoundClassAdjuster
struct FSoundClassAdjuster {
	struct USoundClass SoundClassObject; // 0x0 (8)
	float VolumeAdjuster; // 0x8 (4)
	float PitchAdjuster; // 0xC (4)
	float LowPassFilterFrequency; // 0x10 (4)
	char bApplyToChildren : 1; // 0x14 (1)
	char pad_14_1 : 7; // 0x14 (1)
	float VoiceCenterChannelVolumeAdjuster; // 0x18 (4)
};

// ScriptStruct Engine.AudioEQEffect
struct FAudioEQEffect : FAudioEffectParameters {
	float FrequencyCenter0; // 0x10 (4)
	float Gain0; // 0x14 (4)
	float Bandwidth0; // 0x18 (4)
	float FrequencyCenter1; // 0x1C (4)
	float Gain1; // 0x20 (4)
	float Bandwidth1; // 0x24 (4)
	float FrequencyCenter2; // 0x28 (4)
	float Gain2; // 0x2C (4)
	float Bandwidth2; // 0x30 (4)
	float FrequencyCenter3; // 0x34 (4)
	float Gain3; // 0x38 (4)
	float Bandwidth3; // 0x3C (4)
};

// ScriptStruct Engine.DistanceDatum
struct FDistanceDatum {
	float FadeInDistanceStart; // 0x0 (4)
	float FadeInDistanceEnd; // 0x4 (4)
	float FadeOutDistanceStart; // 0x8 (4)
	float FadeOutDistanceEnd; // 0xC (4)
	float Volume; // 0x10 (4)
};

// ScriptStruct Engine.ModulatorContinuousParams
struct FModulatorContinuousParams {
	struct FName ParameterName; // 0x0 (8)
	float Default; // 0x8 (4)
	float MinInput; // 0xC (4)
	float MaxInput; // 0x10 (4)
	float MinOutput; // 0x14 (4)
	float MaxOutput; // 0x18 (4)
	enum class ModulationParamMode ParamMode; // 0x1C (1)
};

// ScriptStruct Engine.SoundSourceBusSendInfo
struct FSoundSourceBusSendInfo {
	enum class ESourceBusSendLevelControlMethod SourceBusSendLevelControlMethod; // 0x0 (1)
	struct USoundSourceBus SoundSourceBus; // 0x8 (8)
	float SendLevel; // 0x10 (4)
	float MinSendLevel; // 0x14 (4)
	float MaxSendLevel; // 0x18 (4)
	float MinSendDistance; // 0x1C (4)
	float MaxSendDistance; // 0x20 (4)
	struct FRuntimeFloatCurve CustomSendLevelCurve; // 0x28 (136)
};

// ScriptStruct Engine.SoundSubmixSendInfo
struct FSoundSubmixSendInfo {
	enum class ESendLevelControlMethod SendLevelControlMethod; // 0x0 (1)
	struct USoundSubmixBase SoundSubmix; // 0x8 (8)
	float SendLevel; // 0x10 (4)
	float MinSendLevel; // 0x14 (4)
	float MaxSendLevel; // 0x18 (4)
	float MinSendDistance; // 0x1C (4)
	float MaxSendDistance; // 0x20 (4)
	struct FRuntimeFloatCurve CustomSendLevelCurve; // 0x28 (136)
};

// ScriptStruct Engine.SoundWaveEnvelopeTimeData
struct FSoundWaveEnvelopeTimeData {
	float Amplitude; // 0x0 (4)
	float TimeSec; // 0x4 (4)
};

// ScriptStruct Engine.SoundWaveSpectralTimeData
struct FSoundWaveSpectralTimeData {
	struct TArray<struct FSoundWaveSpectralDataEntry> Data; // 0x0 (16)
	float TimeSec; // 0x10 (4)
};

// ScriptStruct Engine.SoundWaveSpectralDataEntry
struct FSoundWaveSpectralDataEntry {
	float Magnitude; // 0x0 (4)
	float NormalizedMagnitude; // 0x4 (4)
};

// ScriptStruct Engine.SoundWaveEnvelopeDataPerSound
struct FSoundWaveEnvelopeDataPerSound {
	float Envelope; // 0x0 (4)
	float PlaybackTime; // 0x4 (4)
	struct USoundWave SoundWave; // 0x8 (8)
};

// ScriptStruct Engine.SoundWaveSpectralDataPerSound
struct FSoundWaveSpectralDataPerSound {
	struct TArray<struct FSoundWaveSpectralData> SpectralData; // 0x0 (16)
	float PlaybackTime; // 0x10 (4)
	struct USoundWave SoundWave; // 0x18 (8)
};

// ScriptStruct Engine.SoundWaveSpectralData
struct FSoundWaveSpectralData {
	float FrequencyHz; // 0x0 (4)
	float Magnitude; // 0x4 (4)
	float NormalizedMagnitude; // 0x8 (4)
};

// ScriptStruct Engine.SplineInstanceData
struct FSplineInstanceData : FSceneComponentInstanceData {
	bool bSplineHasBeenEdited; // 0xA8 (1)
	struct FSplineCurves SplineCurves; // 0xB0 (104)
	struct FSplineCurves SplineCurvesPreUCS; // 0x118 (104)
};

// ScriptStruct Engine.SplineCurves
struct FSplineCurves {
	struct FInterpCurveVector Position; // 0x0 (24)
	struct FInterpCurveQuat Rotation; // 0x18 (24)
	struct FInterpCurveVector Scale; // 0x30 (24)
	struct FInterpCurveFloat ReparamTable; // 0x48 (24)
	struct USplineMetadata MetaData; // 0x60 (8)
};

// ScriptStruct Engine.SplinePoint
struct FSplinePoint {
	float InputKey; // 0x0 (4)
	struct FVector Position; // 0x4 (12)
	struct FVector ArriveTangent; // 0x10 (12)
	struct FVector LeaveTangent; // 0x1C (12)
	struct FRotator Rotation; // 0x28 (12)
	struct FVector Scale; // 0x34 (12)
	enum class ESplinePointType Type; // 0x40 (1)
};

// ScriptStruct Engine.SplineMeshInstanceData
struct FSplineMeshInstanceData : FSceneComponentInstanceData {
	struct FVector StartPos; // 0xA8 (12)
	struct FVector EndPos; // 0xB4 (12)
	struct FVector StartTangent; // 0xC0 (12)
	struct FVector EndTangent; // 0xCC (12)
};

// ScriptStruct Engine.SplineMeshParams
struct FSplineMeshParams {
	struct FVector StartPos; // 0x0 (12)
	struct FVector StartTangent; // 0xC (12)
	struct FVector2D StartScale; // 0x18 (8)
	float StartRoll; // 0x20 (4)
	struct FVector2D StartOffset; // 0x24 (8)
	struct FVector EndPos; // 0x2C (12)
	struct FVector2D EndScale; // 0x38 (8)
	struct FVector EndTangent; // 0x40 (12)
	float EndRoll; // 0x4C (4)
	struct FVector2D EndOffset; // 0x50 (8)
};

// ScriptStruct Engine.MaterialRemapIndex
struct FMaterialRemapIndex {
	uint32_t ImportVersionKey; // 0x0 (4)
	struct TArray<int32_t> MaterialRemap; // 0x8 (16)
};

// ScriptStruct Engine.StaticMaterial
struct FStaticMaterial {
	struct UMaterialInterface MaterialInterface; // 0x0 (8)
	struct FName MaterialSlotName; // 0x8 (8)
	struct FName ImportedMaterialSlotName; // 0x10 (8)
	struct FMeshUVChannelInfo UVChannelData; // 0x18 (20)
};

// ScriptStruct Engine.AssetEditorOrbitCameraPosition
struct FAssetEditorOrbitCameraPosition {
	bool bIsSet; // 0x0 (1)
	struct FVector CamOrbitPoint; // 0x4 (12)
	struct FVector CamOrbitZoom; // 0x10 (12)
	struct FRotator CamOrbitRotation; // 0x1C (12)
};

// ScriptStruct Engine.MeshSectionInfoMap
struct FMeshSectionInfoMap {
	struct TMap<uint32_t, struct FMeshSectionInfo> Map; // 0x0 (80)
};

// ScriptStruct Engine.MeshSectionInfo
struct FMeshSectionInfo {
	int32_t MaterialIndex; // 0x0 (4)
	bool bEnableCollision; // 0x4 (1)
	bool bCastShadow; // 0x5 (1)
	bool bForceOpaque; // 0x6 (1)
};

// ScriptStruct Engine.StaticMeshSourceModel
struct FStaticMeshSourceModel {
	struct FMeshBuildSettings BuildSettings; // 0x0 (48)
	struct FMeshReductionSettings ReductionSettings; // 0x30 (36)
	float LODDistance; // 0x54 (4)
	struct FPerPlatformFloat ScreenSize; // 0x58 (4)
	struct FString SourceImportFilename; // 0x60 (16)
};

// ScriptStruct Engine.StaticMeshOptimizationSettings
struct FStaticMeshOptimizationSettings {
	enum class EOptimizationType ReductionMethod; // 0x0 (1)
	float NumOfTrianglesPercentage; // 0x4 (4)
	float MaxDeviationPercentage; // 0x8 (4)
	float WeldingThreshold; // 0xC (4)
	bool bRecalcNormals; // 0x10 (1)
	float NormalsThreshold; // 0x14 (4)
	char SilhouetteImportance; // 0x18 (1)
	char TextureImportance; // 0x19 (1)
	char ShadingImportance; // 0x1A (1)
};

// ScriptStruct Engine.StaticMeshComponentInstanceData
struct FStaticMeshComponentInstanceData : FPrimitiveComponentInstanceData {
	struct UStaticMesh StaticMesh; // 0xF0 (8)
	struct TArray<struct FStaticMeshVertexColorLODData> VertexColorLODs; // 0xF8 (16)
	struct TArray<struct FGuid> CachedStaticLighting; // 0x108 (16)
	struct TArray<struct FStreamingTextureBuildInfo> StreamingTextureData; // 0x118 (16)
};

// ScriptStruct Engine.StreamingTextureBuildInfo
struct FStreamingTextureBuildInfo {
	uint32_t PackedRelativeBox; // 0x0 (4)
	int32_t TextureLevelIndex; // 0x4 (4)
	float TexelFactor; // 0x8 (4)
};

// ScriptStruct Engine.StaticMeshVertexColorLODData
struct FStaticMeshVertexColorLODData {
	struct TArray<struct FPaintedVertex> PaintedVertices; // 0x0 (16)
	struct TArray<struct FColor> VertexBufferColors; // 0x10 (16)
	uint32_t LODIndex; // 0x20 (4)
};

// ScriptStruct Engine.PaintedVertex
struct FPaintedVertex {
	struct FVector Position; // 0x0 (12)
	struct FColor Color; // 0xC (4)
	struct FVector4 Normal; // 0x10 (16)
};

// ScriptStruct Engine.StaticParameterSet
struct FStaticParameterSet {
	struct TArray<struct FStaticSwitchParameter> StaticSwitchParameters; // 0x0 (16)
	struct TArray<struct FStaticComponentMaskParameter> StaticComponentMaskParameters; // 0x10 (16)
	struct TArray<struct FStaticTerrainLayerWeightParameter> TerrainLayerWeightParameters; // 0x20 (16)
	struct TArray<struct FStaticMaterialLayersParameter> MaterialLayersParameters; // 0x30 (16)
};

// ScriptStruct Engine.StaticParameterBase
struct FStaticParameterBase {
	struct FMaterialParameterInfo ParameterInfo; // 0x0 (16)
	bool bOverride; // 0x10 (1)
	struct FGuid ExpressionGUID; // 0x14 (16)
};

// ScriptStruct Engine.StaticMaterialLayersParameter
struct FStaticMaterialLayersParameter : FStaticParameterBase {
	struct FMaterialLayersFunctions Value; // 0x28 (64)
};

// ScriptStruct Engine.StaticTerrainLayerWeightParameter
struct FStaticTerrainLayerWeightParameter : FStaticParameterBase {
	int32_t WeightmapIndex; // 0x24 (4)
	bool bWeightBasedBlend; // 0x28 (1)
};

// ScriptStruct Engine.StaticComponentMaskParameter
struct FStaticComponentMaskParameter : FStaticParameterBase {
	bool R; // 0x24 (1)
	bool G; // 0x25 (1)
	bool B; // 0x26 (1)
	bool A; // 0x27 (1)
};

// ScriptStruct Engine.StaticSwitchParameter
struct FStaticSwitchParameter : FStaticParameterBase {
	bool Value; // 0x24 (1)
};

// ScriptStruct Engine.EquirectProps
struct FEquirectProps {
	struct FBox2D LeftUVRect; // 0x0 (20)
	struct FBox2D RightUVRect; // 0x14 (20)
	struct FVector2D LeftScale; // 0x28 (8)
	struct FVector2D RightScale; // 0x30 (8)
	struct FVector2D LeftBias; // 0x38 (8)
	struct FVector2D RightBias; // 0x40 (8)
};

// ScriptStruct Engine.StringCurve
struct FStringCurve : FIndexedCurve {
	struct FString DefaultValue; // 0x68 (16)
	struct TArray<struct FStringCurveKey> Keys; // 0x78 (16)
};

// ScriptStruct Engine.StringCurveKey
struct FStringCurveKey {
	float Time; // 0x0 (4)
	struct FString Value; // 0x8 (16)
};

// ScriptStruct Engine.SubsurfaceProfileStruct
struct FSubsurfaceProfileStruct {
	struct FLinearColor SurfaceAlbedo; // 0x0 (16)
	struct FLinearColor MeanFreePathColor; // 0x10 (16)
	float MeanFreePathDistance; // 0x20 (4)
	float WorldUnitScale; // 0x24 (4)
	bool bEnableBurley; // 0x28 (1)
	float ScatterRadius; // 0x2C (4)
	struct FLinearColor SubsurfaceColor; // 0x30 (16)
	struct FLinearColor FalloffColor; // 0x40 (16)
	struct FLinearColor BoundaryColorBleed; // 0x50 (16)
	float ExtinctionScale; // 0x60 (4)
	float NormalScale; // 0x64 (4)
	float ScatteringDistribution; // 0x68 (4)
	float IOR; // 0x6C (4)
	float Roughness0; // 0x70 (4)
	float Roughness1; // 0x74 (4)
	float LobeMix; // 0x78 (4)
	struct FLinearColor TransmissionTintColor; // 0x7C (16)
};

// ScriptStruct Engine.TextureFormatSettings
struct FTextureFormatSettings {
	enum class TextureCompressionSettings CompressionSettings; // 0x0 (1)
	char CompressionNoAlpha : 1; // 0x1 (1)
	char CompressionNone : 1; // 0x1 (1)
	char CompressionYCoCg : 1; // 0x1 (1)
	char SRGB : 1; // 0x1 (1)
};

// ScriptStruct Engine.TextureSourceBlock
struct FTextureSourceBlock {
	int32_t BlockX; // 0x0 (4)
	int32_t BlockY; // 0x4 (4)
	int32_t SizeX; // 0x8 (4)
	int32_t SizeY; // 0xC (4)
	int32_t NumSlices; // 0x10 (4)
	int32_t NumMips; // 0x14 (4)
};

// ScriptStruct Engine.TextureLODGroup
struct FTextureLODGroup {
	enum class TextureGroup Group; // 0x0 (1)
	int32_t LODBias; // 0xC (4)
	int32_t LODBias_Smaller; // 0x10 (4)
	int32_t LODBias_Smallest; // 0x14 (4)
	int32_t NumStreamedMips; // 0x1C (4)
	enum class TextureMipGenSettings MipGenSettings; // 0x20 (1)
	int32_t MinLODSize; // 0x24 (4)
	int32_t MaxLODSize; // 0x28 (4)
	int32_t MaxLODSize_Smaller; // 0x2C (4)
	int32_t MaxLODSize_Smallest; // 0x30 (4)
	int32_t OptionalLODBias; // 0x34 (4)
	int32_t OptionalMaxLODSize; // 0x38 (4)
	struct FName MinMagFilter; // 0x40 (8)
	struct FName MipFilter; // 0x48 (8)
	enum class ETextureMipLoadOptions MipLoadOptions; // 0x50 (1)
	bool DuplicateNonOptionalMips; // 0x51 (1)
};

// ScriptStruct Engine.StreamingRenderAssetPrimitiveInfo
struct FStreamingRenderAssetPrimitiveInfo {
	struct UStreamableRenderAsset RenderAsset; // 0x0 (8)
	struct FBoxSphereBounds Bounds; // 0x8 (28)
	float TexelFactor; // 0x24 (4)
	uint32_t PackedRelativeBox; // 0x28 (4)
	char bAllowInvalidTexelFactorWhenUnregistered : 1; // 0x2C (1)
};

// ScriptStruct Engine.Timeline
struct FTimeline {
	enum class ETimelineLengthMode LengthMode; // 0x0 (1)
	char bLooping : 1; // 0x1 (1)
	char bReversePlayback : 1; // 0x1 (1)
	char bPlaying : 1; // 0x1 (1)
	char pad_1_3 : 5; // 0x1 (1)
	float Length; // 0x4 (4)
	float PlayRate; // 0x8 (4)
	float Position; // 0xC (4)
	struct TArray<struct FTimelineEventEntry> Events; // 0x10 (16)
	struct TArray<struct FTimelineVectorTrack> InterpVectors; // 0x20 (16)
	struct TArray<struct FTimelineFloatTrack> InterpFloats; // 0x30 (16)
	struct TArray<struct FTimelineLinearColorTrack> InterpLinearColors; // 0x40 (16)
	struct FDelegate TimelinePostUpdateFunc; // 0x50 (16)
	struct FDelegate TimelineFinishedFunc; // 0x60 (16)
	struct TWeakObjectPtr<struct Object> PropertySetObject; // 0x70 (8)
	struct FName DirectionPropertyName; // 0x78 (8)
};

// ScriptStruct Engine.TimelineLinearColorTrack
struct FTimelineLinearColorTrack {
	struct UCurveLinearColor LinearColorCurve; // 0x0 (8)
	struct FDelegate InterpFunc; // 0x8 (16)
	struct FName TrackName; // 0x18 (8)
	struct FName LinearColorPropertyName; // 0x20 (8)
};

// ScriptStruct Engine.TimelineFloatTrack
struct FTimelineFloatTrack {
	struct UCurveFloat FloatCurve; // 0x0 (8)
	struct FDelegate InterpFunc; // 0x8 (16)
	struct FName TrackName; // 0x18 (8)
	struct FName FloatPropertyName; // 0x20 (8)
};

// ScriptStruct Engine.TimelineVectorTrack
struct FTimelineVectorTrack {
	struct UCurveVector VectorCurve; // 0x0 (8)
	struct FDelegate InterpFunc; // 0x8 (16)
	struct FName TrackName; // 0x18 (8)
	struct FName VectorPropertyName; // 0x20 (8)
};

// ScriptStruct Engine.TimelineEventEntry
struct FTimelineEventEntry {
	float Time; // 0x0 (4)
	struct FDelegate EventFunc; // 0x4 (16)
};

// ScriptStruct Engine.TTTrackBase
struct FTTTrackBase {
	struct FName TrackName; // 0x8 (8)
	bool bIsExternalCurve; // 0x10 (1)
};

// ScriptStruct Engine.TTPropertyTrack
struct FTTPropertyTrack : FTTTrackBase {
	struct FName PropertyName; // 0x18 (8)
};

// ScriptStruct Engine.TTLinearColorTrack
struct FTTLinearColorTrack : FTTPropertyTrack {
	struct UCurveLinearColor CurveLinearColor; // 0x20 (8)
};

// ScriptStruct Engine.TTVectorTrack
struct FTTVectorTrack : FTTPropertyTrack {
	struct UCurveVector CurveVector; // 0x20 (8)
};

// ScriptStruct Engine.TTFloatTrack
struct FTTFloatTrack : FTTPropertyTrack {
	struct UCurveFloat CurveFloat; // 0x20 (8)
};

// ScriptStruct Engine.TTEventTrack
struct FTTEventTrack : FTTTrackBase {
	struct FName FunctionName; // 0x18 (8)
	struct UCurveFloat CurveKeys; // 0x20 (8)
};

// ScriptStruct Engine.TimeStretchCurveInstance
struct FTimeStretchCurveInstance {
	bool bHasValidData; // 0x0 (1)
};

// ScriptStruct Engine.TimeStretchCurve
struct FTimeStretchCurve {
	float SamplingRate; // 0x0 (4)
	float CurveValueMinPrecision; // 0x4 (4)
	struct TArray<struct FTimeStretchCurveMarker> Markers; // 0x8 (16)
	float Sum_dT_i_by_C_i[0x3]; // 0x18 (12)
};

// ScriptStruct Engine.TimeStretchCurveMarker
struct FTimeStretchCurveMarker {
	float Time[0x3]; // 0x0 (12)
	float Alpha; // 0xC (4)
};

// ScriptStruct Engine.TouchInputControl
struct FTouchInputControl {
	struct UTexture2D Image1; // 0x0 (8)
	struct UTexture2D Image2; // 0x8 (8)
	struct FVector2D Center; // 0x10 (8)
	struct FVector2D VisualSize; // 0x18 (8)
	struct FVector2D ThumbSize; // 0x20 (8)
	struct FVector2D InteractionSize; // 0x28 (8)
	struct FVector2D InputScale; // 0x30 (8)
	struct FKey MainInputKey; // 0x38 (24)
	struct FKey AltInputKey; // 0x50 (24)
};

// ScriptStruct Engine.HardwareCursorReference
struct FHardwareCursorReference {
	struct FName CursorPath; // 0x0 (8)
	struct FVector2D HotSpot; // 0x8 (8)
};

// ScriptStruct Engine.VirtualTextureBuildSettings
struct FVirtualTextureBuildSettings {
	int32_t TileSize; // 0x0 (4)
	int32_t TileBorderSize; // 0x4 (4)
	bool bEnableCompressCrunch; // 0x8 (1)
	bool bEnableCompressZlib; // 0x9 (1)
};

// ScriptStruct Engine.VirtualTextureSpacePoolConfig
struct FVirtualTextureSpacePoolConfig {
	int32_t MinTileSize; // 0x0 (4)
	int32_t MaxTileSize; // 0x4 (4)
	struct TArray<enum class EPixelFormat> Formats; // 0x8 (16)
	int32_t SizeInMegabyte; // 0x18 (4)
	bool bAllowSizeScale; // 0x1C (1)
};

// ScriptStruct Engine.VoiceSettings
struct FVoiceSettings {
	struct USceneComponent ComponentToAttachTo; // 0x0 (8)
	struct USoundAttenuation AttenuationSettings; // 0x8 (8)
	struct USoundEffectSourcePresetChain SourceEffectChain; // 0x10 (8)
};

// ScriptStruct Engine.StreamingLevelsToConsider
struct FStreamingLevelsToConsider {
	struct TArray<struct FLevelStreamingWrapper> StreamingLevels; // 0x0 (16)
};

// ScriptStruct Engine.LevelStreamingWrapper
struct FLevelStreamingWrapper {
	struct ULevelStreaming StreamingLevel; // 0x0 (8)
};

// ScriptStruct Engine.LevelCollection
struct FLevelCollection {
	struct AGameStateBase GameState; // 0x8 (8)
	struct UNetDriver NetDriver; // 0x10 (8)
	struct UDemoNetDriver DemoNetDriver; // 0x18 (8)
	struct ULevel PersistentLevel; // 0x20 (8)
	struct TSet<struct ULevel> Levels; // 0x28 (80)
};

// ScriptStruct Engine.LevelViewportInfo
struct FLevelViewportInfo {
	struct FVector CamPosition; // 0x0 (12)
	struct FRotator CamRotation; // 0xC (12)
	float CamOrthoZoom; // 0x18 (4)
	bool CamUpdated; // 0x1C (1)
};

// ScriptStruct Engine.WorldPSCPool
struct FWorldPSCPool {
	struct TMap<struct UParticleSystem, struct FPSCPool> WorldParticleSystemPools; // 0x0 (80)
};

// ScriptStruct Engine.PSCPool
struct FPSCPool {
	struct TArray<struct FPSCPoolElem> FreeElements; // 0x0 (16)
	struct TArray<struct UParticleSystemComponent> InUseComponents_Auto; // 0x10 (16)
	struct TArray<struct UParticleSystemComponent> InUseComponents_Manual; // 0x20 (16)
};

// ScriptStruct Engine.PSCPoolElem
struct FPSCPoolElem {
	struct UParticleSystemComponent PSC; // 0x0 (8)
};

// ScriptStruct Engine.BroadphaseSettings
struct FBroadphaseSettings {
	bool bUseMBPOnClient; // 0x0 (1)
	bool bUseMBPOnServer; // 0x1 (1)
	bool bUseMBPOuterBounds; // 0x2 (1)
	struct FBox MBPBounds; // 0x4 (28)
	struct FBox MBPOuterBounds; // 0x20 (28)
	uint32_t MBPNumSubdivs; // 0x3C (4)
};

// ScriptStruct Engine.HierarchicalSimplification
struct FHierarchicalSimplification {
	float TransitionScreenSize; // 0x0 (4)
	float OverrideDrawDistance; // 0x4 (4)
	char bUseOverrideDrawDistance : 1; // 0x8 (1)
	char bAllowSpecificExclusion : 1; // 0x8 (1)
	char bSimplifyMesh : 1; // 0x8 (1)
	char bOnlyGenerateClustersForVolumes : 1; // 0x8 (1)
	char bReusePreviousLevelClusters : 1; // 0x8 (1)
	char pad_8_5 : 3; // 0x8 (1)
	struct FMeshProxySettings ProxySetting; // 0xC (168)
	struct FMeshMergingSettings MergeSetting; // 0xB4 (160)
	float DesiredBoundRadius; // 0x154 (4)
	float DesiredFillingPercentage; // 0x158 (4)
	int32_t MinNumberOfActorsToBuild; // 0x15C (4)
};

// ScriptStruct Engine.NetViewer
struct FNetViewer {
	struct UNetConnection Connection; // 0x0 (8)
	struct UActor InViewer; // 0x8 (8)
	struct UActor ViewTarget; // 0x10 (8)
	struct FVector ViewLocation; // 0x18 (12)
	struct FVector ViewDir; // 0x24 (12)
};

// ScriptStruct Engine.LightmassWorldInfoSettings
struct FLightmassWorldInfoSettings {
	float StaticLightingLevelScale; // 0x0 (4)
	int32_t NumIndirectLightingBounces; // 0x4 (4)
	int32_t NumSkyLightingBounces; // 0x8 (4)
	float IndirectLightingQuality; // 0xC (4)
	float IndirectLightingSmoothness; // 0x10 (4)
	struct FColor EnvironmentColor; // 0x14 (4)
	float EnvironmentIntensity; // 0x18 (4)
	float EmissiveBoost; // 0x1C (4)
	float DiffuseBoost; // 0x20 (4)
	enum class EVolumeLightingMethod VolumeLightingMethod; // 0x24 (1)
	char bUseAmbientOcclusion : 1; // 0x25 (1)
	char bGenerateAmbientOcclusionMaterialMask : 1; // 0x25 (1)
	char bVisualizeMaterialDiffuse : 1; // 0x25 (1)
	char bVisualizeAmbientOcclusion : 1; // 0x25 (1)
	char bCompressLightmaps : 1; // 0x25 (1)
	char pad_25_5 : 3; // 0x25 (1)
	float VolumetricLightmapDetailCellSize; // 0x28 (4)
	float VolumetricLightmapMaximumBrickMemoryMb; // 0x2C (4)
	float VolumetricLightmapSphericalHarmonicSmoothing; // 0x30 (4)
	float VolumeLightSamplePlacementScale; // 0x34 (4)
	float DirectIlluminationOcclusionFraction; // 0x38 (4)
	float IndirectIlluminationOcclusionFraction; // 0x3C (4)
	float OcclusionExponent; // 0x40 (4)
	float FullyOccludedSamplesFraction; // 0x44 (4)
	float MaxOcclusionDistance; // 0x48 (4)
};

// Function Engine.Actor.WasRecentlyRendered
inline bool UActor::WasRecentlyRendered(float Tolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.WasRecentlyRendered");

	struct WasRecentlyRendered_Params {
		float Tolerance;
		bool ReturnValue;

	}; WasRecentlyRendered_Params Params;

	Params.Tolerance = Tolerance;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.UserConstructionScript
inline void UActor::UserConstructionScript() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.UserConstructionScript");

	struct UserConstructionScript_Params {
		
	}; UserConstructionScript_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.TearOff
inline void UActor::TearOff() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TearOff");

	struct TearOff_Params {
		
	}; TearOff_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.SnapRootComponentTo
inline void UActor::SnapRootComponentTo(struct UActor InParentActor, struct FName InSocketName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SnapRootComponentTo");

	struct SnapRootComponentTo_Params {
		struct UActor InParentActor;
		struct FName InSocketName;
	}; SnapRootComponentTo_Params Params;

	Params.InParentActor = InParentActor;
	Params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.SetTickGroup
inline void UActor::SetTickGroup(enum class ETickingGroup NewTickGroup) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetTickGroup");

	struct SetTickGroup_Params {
		enum class ETickingGroup NewTickGroup;
	}; SetTickGroup_Params Params;

	Params.NewTickGroup = NewTickGroup;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.SetTickableWhenPaused
inline void UActor::SetTickableWhenPaused(bool bTickableWhenPaused) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetTickableWhenPaused");

	struct SetTickableWhenPaused_Params {
		bool bTickableWhenPaused;
	}; SetTickableWhenPaused_Params Params;

	Params.bTickableWhenPaused = bTickableWhenPaused;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.SetReplicates
inline void UActor::SetReplicates(bool bInReplicates) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetReplicates");

	struct SetReplicates_Params {
		bool bInReplicates;
	}; SetReplicates_Params Params;

	Params.bInReplicates = bInReplicates;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.SetReplicateMovement
inline void UActor::SetReplicateMovement(bool bInReplicateMovement) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetReplicateMovement");

	struct SetReplicateMovement_Params {
		bool bInReplicateMovement;
	}; SetReplicateMovement_Params Params;

	Params.bInReplicateMovement = bInReplicateMovement;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.SetOwner
inline void UActor::SetOwner(struct UActor NewOwner) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetOwner");

	struct SetOwner_Params {
		struct UActor NewOwner;
	}; SetOwner_Params Params;

	Params.NewOwner = NewOwner;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.SetNetDormancy
inline void UActor::SetNetDormancy(enum class ENetDormancy NewDormancy) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetNetDormancy");

	struct SetNetDormancy_Params {
		enum class ENetDormancy NewDormancy;
	}; SetNetDormancy_Params Params;

	Params.NewDormancy = NewDormancy;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.SetLifeSpan
inline void UActor::SetLifeSpan(float InLifespan) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetLifeSpan");

	struct SetLifeSpan_Params {
		float InLifespan;
	}; SetLifeSpan_Params Params;

	Params.InLifespan = InLifespan;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.SetAutoDestroyWhenFinished
inline void UActor::SetAutoDestroyWhenFinished(bool bVal) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetAutoDestroyWhenFinished");

	struct SetAutoDestroyWhenFinished_Params {
		bool bVal;
	}; SetAutoDestroyWhenFinished_Params Params;

	Params.bVal = bVal;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.SetActorTickInterval
inline void UActor::SetActorTickInterval(float TickInterval) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetActorTickInterval");

	struct SetActorTickInterval_Params {
		float TickInterval;
	}; SetActorTickInterval_Params Params;

	Params.TickInterval = TickInterval;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.SetActorTickEnabled
inline void UActor::SetActorTickEnabled(bool bEnabled) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetActorTickEnabled");

	struct SetActorTickEnabled_Params {
		bool bEnabled;
	}; SetActorTickEnabled_Params Params;

	Params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.SetActorScale3D
inline void UActor::SetActorScale3D(struct FVector NewScale3D) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetActorScale3D");

	struct SetActorScale3D_Params {
		struct FVector NewScale3D;
	}; SetActorScale3D_Params Params;

	Params.NewScale3D = NewScale3D;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.SetActorRelativeScale3D
inline void UActor::SetActorRelativeScale3D(struct FVector NewRelativeScale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetActorRelativeScale3D");

	struct SetActorRelativeScale3D_Params {
		struct FVector NewRelativeScale;
	}; SetActorRelativeScale3D_Params Params;

	Params.NewRelativeScale = NewRelativeScale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.SetActorHiddenInGame
inline void UActor::SetActorHiddenInGame(bool bNewHidden) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetActorHiddenInGame");

	struct SetActorHiddenInGame_Params {
		bool bNewHidden;
	}; SetActorHiddenInGame_Params Params;

	Params.bNewHidden = bNewHidden;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.SetActorEnableCollision
inline void UActor::SetActorEnableCollision(bool bNewActorEnableCollision) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetActorEnableCollision");

	struct SetActorEnableCollision_Params {
		bool bNewActorEnableCollision;
	}; SetActorEnableCollision_Params Params;

	Params.bNewActorEnableCollision = bNewActorEnableCollision;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.RemoveTickPrerequisiteComponent
inline void UActor::RemoveTickPrerequisiteComponent(struct UActorComponent PrerequisiteComponent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.RemoveTickPrerequisiteComponent");

	struct RemoveTickPrerequisiteComponent_Params {
		struct UActorComponent PrerequisiteComponent;
	}; RemoveTickPrerequisiteComponent_Params Params;

	Params.PrerequisiteComponent = PrerequisiteComponent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.RemoveTickPrerequisiteActor
inline void UActor::RemoveTickPrerequisiteActor(struct UActor PrerequisiteActor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.RemoveTickPrerequisiteActor");

	struct RemoveTickPrerequisiteActor_Params {
		struct UActor PrerequisiteActor;
	}; RemoveTickPrerequisiteActor_Params Params;

	Params.PrerequisiteActor = PrerequisiteActor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.ReceiveTick
inline void UActor::ReceiveTick(float DeltaSeconds) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveTick");

	struct ReceiveTick_Params {
		float DeltaSeconds;
	}; ReceiveTick_Params Params;

	Params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.ReceiveRadialDamage
inline void UActor::ReceiveRadialDamage(float DamageReceived, struct UDamageType DamageType, struct FVector Origin, struct FHitResult& HitInfo, struct AController InstigatedBy, struct UActor DamageCauser) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveRadialDamage");

	struct ReceiveRadialDamage_Params {
		float DamageReceived;
		struct UDamageType DamageType;
		struct FVector Origin;
		struct FHitResult& HitInfo;
		struct AController InstigatedBy;
		struct UActor DamageCauser;
	}; ReceiveRadialDamage_Params Params;

	Params.DamageReceived = DamageReceived;
	Params.DamageType = DamageType;
	Params.Origin = Origin;
	Params.InstigatedBy = InstigatedBy;
	Params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	HitInfo = Params.HitInfo;

}

// Function Engine.Actor.ReceivePointDamage
inline void UActor::ReceivePointDamage(float Damage, struct UDamageType DamageType, struct FVector HitLocation, struct FVector HitNormal, struct UPrimitiveComponent HitComponent, struct FName BoneName, struct FVector ShotFromDirection, struct AController InstigatedBy, struct UActor DamageCauser, struct FHitResult& HitInfo) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceivePointDamage");

	struct ReceivePointDamage_Params {
		float Damage;
		struct UDamageType DamageType;
		struct FVector HitLocation;
		struct FVector HitNormal;
		struct UPrimitiveComponent HitComponent;
		struct FName BoneName;
		struct FVector ShotFromDirection;
		struct AController InstigatedBy;
		struct UActor DamageCauser;
		struct FHitResult& HitInfo;
	}; ReceivePointDamage_Params Params;

	Params.Damage = Damage;
	Params.DamageType = DamageType;
	Params.HitLocation = HitLocation;
	Params.HitNormal = HitNormal;
	Params.HitComponent = HitComponent;
	Params.BoneName = BoneName;
	Params.ShotFromDirection = ShotFromDirection;
	Params.InstigatedBy = InstigatedBy;
	Params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	HitInfo = Params.HitInfo;

}

// Function Engine.Actor.ReceiveHit
inline void UActor::ReceiveHit(struct UPrimitiveComponent MyComp, struct UActor Other, struct UPrimitiveComponent OtherComp, bool bSelfMoved, struct FVector HitLocation, struct FVector HitNormal, struct FVector NormalImpulse, struct FHitResult& Hit) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveHit");

	struct ReceiveHit_Params {
		struct UPrimitiveComponent MyComp;
		struct UActor Other;
		struct UPrimitiveComponent OtherComp;
		bool bSelfMoved;
		struct FVector HitLocation;
		struct FVector HitNormal;
		struct FVector NormalImpulse;
		struct FHitResult& Hit;
	}; ReceiveHit_Params Params;

	Params.MyComp = MyComp;
	Params.Other = Other;
	Params.OtherComp = OtherComp;
	Params.bSelfMoved = bSelfMoved;
	Params.HitLocation = HitLocation;
	Params.HitNormal = HitNormal;
	Params.NormalImpulse = NormalImpulse;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Hit = Params.Hit;

}

// Function Engine.Actor.ReceiveEndPlay
inline void UActor::ReceiveEndPlay(enum class EEndPlayReason EndPlayReason) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveEndPlay");

	struct ReceiveEndPlay_Params {
		enum class EEndPlayReason EndPlayReason;
	}; ReceiveEndPlay_Params Params;

	Params.EndPlayReason = EndPlayReason;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.ReceiveDestroyed
inline void UActor::ReceiveDestroyed() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveDestroyed");

	struct ReceiveDestroyed_Params {
		
	}; ReceiveDestroyed_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.ReceiveBeginPlay
inline void UActor::ReceiveBeginPlay() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveBeginPlay");

	struct ReceiveBeginPlay_Params {
		
	}; ReceiveBeginPlay_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.ReceiveAnyDamage
inline void UActor::ReceiveAnyDamage(float Damage, struct UDamageType DamageType, struct AController InstigatedBy, struct UActor DamageCauser) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveAnyDamage");

	struct ReceiveAnyDamage_Params {
		float Damage;
		struct UDamageType DamageType;
		struct AController InstigatedBy;
		struct UActor DamageCauser;
	}; ReceiveAnyDamage_Params Params;

	Params.Damage = Damage;
	Params.DamageType = DamageType;
	Params.InstigatedBy = InstigatedBy;
	Params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.ReceiveActorOnReleased
inline void UActor::ReceiveActorOnReleased(struct FKey ButtonReleased) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorOnReleased");

	struct ReceiveActorOnReleased_Params {
		struct FKey ButtonReleased;
	}; ReceiveActorOnReleased_Params Params;

	Params.ButtonReleased = ButtonReleased;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.ReceiveActorOnInputTouchLeave
inline void UActor::ReceiveActorOnInputTouchLeave(enum class ETouchIndex FingerIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorOnInputTouchLeave");

	struct ReceiveActorOnInputTouchLeave_Params {
		enum class ETouchIndex FingerIndex;
	}; ReceiveActorOnInputTouchLeave_Params Params;

	Params.FingerIndex = FingerIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.ReceiveActorOnInputTouchEnter
inline void UActor::ReceiveActorOnInputTouchEnter(enum class ETouchIndex FingerIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorOnInputTouchEnter");

	struct ReceiveActorOnInputTouchEnter_Params {
		enum class ETouchIndex FingerIndex;
	}; ReceiveActorOnInputTouchEnter_Params Params;

	Params.FingerIndex = FingerIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.ReceiveActorOnInputTouchEnd
inline void UActor::ReceiveActorOnInputTouchEnd(enum class ETouchIndex FingerIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorOnInputTouchEnd");

	struct ReceiveActorOnInputTouchEnd_Params {
		enum class ETouchIndex FingerIndex;
	}; ReceiveActorOnInputTouchEnd_Params Params;

	Params.FingerIndex = FingerIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.ReceiveActorOnInputTouchBegin
inline void UActor::ReceiveActorOnInputTouchBegin(enum class ETouchIndex FingerIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorOnInputTouchBegin");

	struct ReceiveActorOnInputTouchBegin_Params {
		enum class ETouchIndex FingerIndex;
	}; ReceiveActorOnInputTouchBegin_Params Params;

	Params.FingerIndex = FingerIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.ReceiveActorOnClicked
inline void UActor::ReceiveActorOnClicked(struct FKey ButtonPressed) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorOnClicked");

	struct ReceiveActorOnClicked_Params {
		struct FKey ButtonPressed;
	}; ReceiveActorOnClicked_Params Params;

	Params.ButtonPressed = ButtonPressed;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.ReceiveActorEndOverlap
inline void UActor::ReceiveActorEndOverlap(struct UActor OtherActor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorEndOverlap");

	struct ReceiveActorEndOverlap_Params {
		struct UActor OtherActor;
	}; ReceiveActorEndOverlap_Params Params;

	Params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.ReceiveActorEndCursorOver
inline void UActor::ReceiveActorEndCursorOver() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorEndCursorOver");

	struct ReceiveActorEndCursorOver_Params {
		
	}; ReceiveActorEndCursorOver_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.ReceiveActorBeginOverlap
inline void UActor::ReceiveActorBeginOverlap(struct UActor OtherActor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorBeginOverlap");

	struct ReceiveActorBeginOverlap_Params {
		struct UActor OtherActor;
	}; ReceiveActorBeginOverlap_Params Params;

	Params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.ReceiveActorBeginCursorOver
inline void UActor::ReceiveActorBeginCursorOver() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorBeginCursorOver");

	struct ReceiveActorBeginCursorOver_Params {
		
	}; ReceiveActorBeginCursorOver_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.PrestreamTextures
inline void UActor::PrestreamTextures(float Seconds, bool bEnableStreaming, int32_t CinematicTextureGroups) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PrestreamTextures");

	struct PrestreamTextures_Params {
		float Seconds;
		bool bEnableStreaming;
		int32_t CinematicTextureGroups;
	}; PrestreamTextures_Params Params;

	Params.Seconds = Seconds;
	Params.bEnableStreaming = bEnableStreaming;
	Params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.OnRep_ReplicateMovement
inline void UActor::OnRep_ReplicateMovement() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnRep_ReplicateMovement");

	struct OnRep_ReplicateMovement_Params {
		
	}; OnRep_ReplicateMovement_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.OnRep_ReplicatedMovement
inline void UActor::OnRep_ReplicatedMovement() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnRep_ReplicatedMovement");

	struct OnRep_ReplicatedMovement_Params {
		
	}; OnRep_ReplicatedMovement_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.OnRep_Owner
inline void UActor::OnRep_Owner() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnRep_Owner");

	struct OnRep_Owner_Params {
		
	}; OnRep_Owner_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.OnRep_Instigator
inline void UActor::OnRep_Instigator() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnRep_Instigator");

	struct OnRep_Instigator_Params {
		
	}; OnRep_Instigator_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.OnRep_AttachmentReplication
inline void UActor::OnRep_AttachmentReplication() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnRep_AttachmentReplication");

	struct OnRep_AttachmentReplication_Params {
		
	}; OnRep_AttachmentReplication_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.MakeNoise
inline void UActor::MakeNoise(float Loudness, struct APawn NoiseInstigator, struct FVector NoiseLocation, float MaxRange, struct FName Tag) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MakeNoise");

	struct MakeNoise_Params {
		float Loudness;
		struct APawn NoiseInstigator;
		struct FVector NoiseLocation;
		float MaxRange;
		struct FName Tag;
	}; MakeNoise_Params Params;

	Params.Loudness = Loudness;
	Params.NoiseInstigator = NoiseInstigator;
	Params.NoiseLocation = NoiseLocation;
	Params.MaxRange = MaxRange;
	Params.Tag = Tag;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.MakeMIDForMaterial
inline struct UMaterialInstanceDynamic UActor::MakeMIDForMaterial(struct UMaterialInterface Parent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MakeMIDForMaterial");

	struct MakeMIDForMaterial_Params {
		struct UMaterialInterface Parent;
		struct UMaterialInstanceDynamic ReturnValue;

	}; MakeMIDForMaterial_Params Params;

	Params.Parent = Parent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.K2_TeleportTo
inline bool UActor::K2_TeleportTo(struct FVector DestLocation, struct FRotator DestRotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_TeleportTo");

	struct K2_TeleportTo_Params {
		struct FVector DestLocation;
		struct FRotator DestRotation;
		bool ReturnValue;

	}; K2_TeleportTo_Params Params;

	Params.DestLocation = DestLocation;
	Params.DestRotation = DestRotation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.K2_SetActorTransform
inline bool UActor::K2_SetActorTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_SetActorTransform");

	struct K2_SetActorTransform_Params {
		struct FTransform& NewTransform;
		bool bSweep;
		struct FHitResult& SweepHitResult;
		bool bTeleport;
		bool ReturnValue;

	}; K2_SetActorTransform_Params Params;

	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewTransform = Params.NewTransform;
	SweepHitResult = Params.SweepHitResult;


	return params.ReturnValue;
}

// Function Engine.Actor.K2_SetActorRotation
inline bool UActor::K2_SetActorRotation(struct FRotator NewRotation, bool bTeleportPhysics) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_SetActorRotation");

	struct K2_SetActorRotation_Params {
		struct FRotator NewRotation;
		bool bTeleportPhysics;
		bool ReturnValue;

	}; K2_SetActorRotation_Params Params;

	Params.NewRotation = NewRotation;
	Params.bTeleportPhysics = bTeleportPhysics;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.K2_SetActorRelativeTransform
inline void UActor::K2_SetActorRelativeTransform(struct FTransform& NewRelativeTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_SetActorRelativeTransform");

	struct K2_SetActorRelativeTransform_Params {
		struct FTransform& NewRelativeTransform;
		bool bSweep;
		struct FHitResult& SweepHitResult;
		bool bTeleport;
	}; K2_SetActorRelativeTransform_Params Params;

	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewRelativeTransform = Params.NewRelativeTransform;
	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.Actor.K2_SetActorRelativeRotation
inline void UActor::K2_SetActorRelativeRotation(struct FRotator NewRelativeRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_SetActorRelativeRotation");

	struct K2_SetActorRelativeRotation_Params {
		struct FRotator NewRelativeRotation;
		bool bSweep;
		struct FHitResult& SweepHitResult;
		bool bTeleport;
	}; K2_SetActorRelativeRotation_Params Params;

	Params.NewRelativeRotation = NewRelativeRotation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.Actor.K2_SetActorRelativeLocation
inline void UActor::K2_SetActorRelativeLocation(struct FVector NewRelativeLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_SetActorRelativeLocation");

	struct K2_SetActorRelativeLocation_Params {
		struct FVector NewRelativeLocation;
		bool bSweep;
		struct FHitResult& SweepHitResult;
		bool bTeleport;
	}; K2_SetActorRelativeLocation_Params Params;

	Params.NewRelativeLocation = NewRelativeLocation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.Actor.K2_SetActorLocationAndRotation
inline bool UActor::K2_SetActorLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_SetActorLocationAndRotation");

	struct K2_SetActorLocationAndRotation_Params {
		struct FVector NewLocation;
		struct FRotator NewRotation;
		bool bSweep;
		struct FHitResult& SweepHitResult;
		bool bTeleport;
		bool ReturnValue;

	}; K2_SetActorLocationAndRotation_Params Params;

	Params.NewLocation = NewLocation;
	Params.NewRotation = NewRotation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;


	return params.ReturnValue;
}

// Function Engine.Actor.K2_SetActorLocation
inline bool UActor::K2_SetActorLocation(struct FVector NewLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_SetActorLocation");

	struct K2_SetActorLocation_Params {
		struct FVector NewLocation;
		bool bSweep;
		struct FHitResult& SweepHitResult;
		bool bTeleport;
		bool ReturnValue;

	}; K2_SetActorLocation_Params Params;

	Params.NewLocation = NewLocation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;


	return params.ReturnValue;
}

// Function Engine.Actor.K2_OnReset
inline void UActor::K2_OnReset() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_OnReset");

	struct K2_OnReset_Params {
		
	}; K2_OnReset_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.K2_OnEndViewTarget
inline void UActor::K2_OnEndViewTarget(struct APlayerController PC) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_OnEndViewTarget");

	struct K2_OnEndViewTarget_Params {
		struct APlayerController PC;
	}; K2_OnEndViewTarget_Params Params;

	Params.PC = PC;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.K2_OnBecomeViewTarget
inline void UActor::K2_OnBecomeViewTarget(struct APlayerController PC) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_OnBecomeViewTarget");

	struct K2_OnBecomeViewTarget_Params {
		struct APlayerController PC;
	}; K2_OnBecomeViewTarget_Params Params;

	Params.PC = PC;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.K2_GetRootComponent
inline struct USceneComponent UActor::K2_GetRootComponent() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_GetRootComponent");

	struct K2_GetRootComponent_Params {
		
		struct USceneComponent ReturnValue;

	}; K2_GetRootComponent_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.K2_GetComponentsByClass
inline struct TArray<struct UActorComponent> UActor::K2_GetComponentsByClass(struct UClass* ComponentClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_GetComponentsByClass");

	struct K2_GetComponentsByClass_Params {
		struct UClass* ComponentClass;
		struct TArray<struct UActorComponent> ReturnValue;

	}; K2_GetComponentsByClass_Params Params;

	Params.ComponentClass = ComponentClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.K2_GetActorRotation
inline struct FRotator UActor::K2_GetActorRotation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_GetActorRotation");

	struct K2_GetActorRotation_Params {
		
		struct FRotator ReturnValue;

	}; K2_GetActorRotation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.K2_GetActorLocation
inline struct FVector UActor::K2_GetActorLocation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_GetActorLocation");

	struct K2_GetActorLocation_Params {
		
		struct FVector ReturnValue;

	}; K2_GetActorLocation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.K2_DetachFromActor
inline void UActor::K2_DetachFromActor(enum class EDetachmentRule LocationRule, enum class EDetachmentRule RotationRule, enum class EDetachmentRule ScaleRule) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_DetachFromActor");

	struct K2_DetachFromActor_Params {
		enum class EDetachmentRule LocationRule;
		enum class EDetachmentRule RotationRule;
		enum class EDetachmentRule ScaleRule;
	}; K2_DetachFromActor_Params Params;

	Params.LocationRule = LocationRule;
	Params.RotationRule = RotationRule;
	Params.ScaleRule = ScaleRule;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.K2_DestroyComponent
inline void UActor::K2_DestroyComponent(struct UActorComponent Component) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_DestroyComponent");

	struct K2_DestroyComponent_Params {
		struct UActorComponent Component;
	}; K2_DestroyComponent_Params Params;

	Params.Component = Component;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.K2_DestroyActor
inline void UActor::K2_DestroyActor() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_DestroyActor");

	struct K2_DestroyActor_Params {
		
	}; K2_DestroyActor_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.K2_AttachToComponent
inline void UActor::K2_AttachToComponent(struct USceneComponent Parent, struct FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_AttachToComponent");

	struct K2_AttachToComponent_Params {
		struct USceneComponent Parent;
		struct FName SocketName;
		enum class EAttachmentRule LocationRule;
		enum class EAttachmentRule RotationRule;
		enum class EAttachmentRule ScaleRule;
		bool bWeldSimulatedBodies;
	}; K2_AttachToComponent_Params Params;

	Params.Parent = Parent;
	Params.SocketName = SocketName;
	Params.LocationRule = LocationRule;
	Params.RotationRule = RotationRule;
	Params.ScaleRule = ScaleRule;
	Params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.K2_AttachToActor
inline void UActor::K2_AttachToActor(struct UActor ParentActor, struct FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_AttachToActor");

	struct K2_AttachToActor_Params {
		struct UActor ParentActor;
		struct FName SocketName;
		enum class EAttachmentRule LocationRule;
		enum class EAttachmentRule RotationRule;
		enum class EAttachmentRule ScaleRule;
		bool bWeldSimulatedBodies;
	}; K2_AttachToActor_Params Params;

	Params.ParentActor = ParentActor;
	Params.SocketName = SocketName;
	Params.LocationRule = LocationRule;
	Params.RotationRule = RotationRule;
	Params.ScaleRule = ScaleRule;
	Params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.K2_AttachRootComponentToActor
inline void UActor::K2_AttachRootComponentToActor(struct UActor InParentActor, struct FName InSocketName, enum class EAttachLocation AttachLocationType, bool bWeldSimulatedBodies) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_AttachRootComponentToActor");

	struct K2_AttachRootComponentToActor_Params {
		struct UActor InParentActor;
		struct FName InSocketName;
		enum class EAttachLocation AttachLocationType;
		bool bWeldSimulatedBodies;
	}; K2_AttachRootComponentToActor_Params Params;

	Params.InParentActor = InParentActor;
	Params.InSocketName = InSocketName;
	Params.AttachLocationType = AttachLocationType;
	Params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.K2_AttachRootComponentTo
inline void UActor::K2_AttachRootComponentTo(struct USceneComponent InParent, struct FName InSocketName, enum class EAttachLocation AttachLocationType, bool bWeldSimulatedBodies) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_AttachRootComponentTo");

	struct K2_AttachRootComponentTo_Params {
		struct USceneComponent InParent;
		struct FName InSocketName;
		enum class EAttachLocation AttachLocationType;
		bool bWeldSimulatedBodies;
	}; K2_AttachRootComponentTo_Params Params;

	Params.InParent = InParent;
	Params.InSocketName = InSocketName;
	Params.AttachLocationType = AttachLocationType;
	Params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.K2_AddActorWorldTransform
inline void UActor::K2_AddActorWorldTransform(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_AddActorWorldTransform");

	struct K2_AddActorWorldTransform_Params {
		struct FTransform& DeltaTransform;
		bool bSweep;
		struct FHitResult& SweepHitResult;
		bool bTeleport;
	}; K2_AddActorWorldTransform_Params Params;

	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	DeltaTransform = Params.DeltaTransform;
	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.Actor.K2_AddActorWorldRotation
inline void UActor::K2_AddActorWorldRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_AddActorWorldRotation");

	struct K2_AddActorWorldRotation_Params {
		struct FRotator DeltaRotation;
		bool bSweep;
		struct FHitResult& SweepHitResult;
		bool bTeleport;
	}; K2_AddActorWorldRotation_Params Params;

	Params.DeltaRotation = DeltaRotation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.Actor.K2_AddActorWorldOffset
inline void UActor::K2_AddActorWorldOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_AddActorWorldOffset");

	struct K2_AddActorWorldOffset_Params {
		struct FVector DeltaLocation;
		bool bSweep;
		struct FHitResult& SweepHitResult;
		bool bTeleport;
	}; K2_AddActorWorldOffset_Params Params;

	Params.DeltaLocation = DeltaLocation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.Actor.K2_AddActorLocalTransform
inline void UActor::K2_AddActorLocalTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_AddActorLocalTransform");

	struct K2_AddActorLocalTransform_Params {
		struct FTransform& NewTransform;
		bool bSweep;
		struct FHitResult& SweepHitResult;
		bool bTeleport;
	}; K2_AddActorLocalTransform_Params Params;

	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewTransform = Params.NewTransform;
	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.Actor.K2_AddActorLocalRotation
inline void UActor::K2_AddActorLocalRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_AddActorLocalRotation");

	struct K2_AddActorLocalRotation_Params {
		struct FRotator DeltaRotation;
		bool bSweep;
		struct FHitResult& SweepHitResult;
		bool bTeleport;
	}; K2_AddActorLocalRotation_Params Params;

	Params.DeltaRotation = DeltaRotation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.Actor.K2_AddActorLocalOffset
inline void UActor::K2_AddActorLocalOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_AddActorLocalOffset");

	struct K2_AddActorLocalOffset_Params {
		struct FVector DeltaLocation;
		bool bSweep;
		struct FHitResult& SweepHitResult;
		bool bTeleport;
	}; K2_AddActorLocalOffset_Params Params;

	Params.DeltaLocation = DeltaLocation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.Actor.IsOverlappingActor
inline bool UActor::IsOverlappingActor(struct UActor Other) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsOverlappingActor");

	struct IsOverlappingActor_Params {
		struct UActor Other;
		bool ReturnValue;

	}; IsOverlappingActor_Params Params;

	Params.Other = Other;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.IsChildActor
inline bool UActor::IsChildActor() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsChildActor");

	struct IsChildActor_Params {
		
		bool ReturnValue;

	}; IsChildActor_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.IsActorTickEnabled
inline bool UActor::IsActorTickEnabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsActorTickEnabled");

	struct IsActorTickEnabled_Params {
		
		bool ReturnValue;

	}; IsActorTickEnabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.IsActorBeingDestroyed
inline bool UActor::IsActorBeingDestroyed() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsActorBeingDestroyed");

	struct IsActorBeingDestroyed_Params {
		
		bool ReturnValue;

	}; IsActorBeingDestroyed_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.HasAuthority
inline bool UActor::HasAuthority() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.HasAuthority");

	struct HasAuthority_Params {
		
		bool ReturnValue;

	}; HasAuthority_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetVerticalDistanceTo
inline float UActor::GetVerticalDistanceTo(struct UActor OtherActor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetVerticalDistanceTo");

	struct GetVerticalDistanceTo_Params {
		struct UActor OtherActor;
		float ReturnValue;

	}; GetVerticalDistanceTo_Params Params;

	Params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetVelocity
inline struct FVector UActor::GetVelocity() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetVelocity");

	struct GetVelocity_Params {
		
		struct FVector ReturnValue;

	}; GetVelocity_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetTransform
inline struct FTransform UActor::GetTransform() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetTransform");

	struct GetTransform_Params {
		
		struct FTransform ReturnValue;

	}; GetTransform_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetTickableWhenPaused
inline bool UActor::GetTickableWhenPaused() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetTickableWhenPaused");

	struct GetTickableWhenPaused_Params {
		
		bool ReturnValue;

	}; GetTickableWhenPaused_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetSquaredDistanceTo
inline float UActor::GetSquaredDistanceTo(struct UActor OtherActor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetSquaredDistanceTo");

	struct GetSquaredDistanceTo_Params {
		struct UActor OtherActor;
		float ReturnValue;

	}; GetSquaredDistanceTo_Params Params;

	Params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetRemoteRole
inline enum class ENetRole UActor::GetRemoteRole() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetRemoteRole");

	struct GetRemoteRole_Params {
		
		enum class ENetRole ReturnValue;

	}; GetRemoteRole_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetParentComponent
inline struct UChildActorComponent UActor::GetParentComponent() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetParentComponent");

	struct GetParentComponent_Params {
		
		struct UChildActorComponent ReturnValue;

	}; GetParentComponent_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetParentActor
inline struct UActor UActor::GetParentActor() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetParentActor");

	struct GetParentActor_Params {
		
		struct UActor ReturnValue;

	}; GetParentActor_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetOwner
inline struct UActor UActor::GetOwner() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetOwner");

	struct GetOwner_Params {
		
		struct UActor ReturnValue;

	}; GetOwner_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetOverlappingComponents
inline void UActor::GetOverlappingComponents(struct TArray<struct UPrimitiveComponent>& OverlappingComponents) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetOverlappingComponents");

	struct GetOverlappingComponents_Params {
		struct TArray<struct UPrimitiveComponent>& OverlappingComponents;
	}; GetOverlappingComponents_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OverlappingComponents = Params.OverlappingComponents;

}

// Function Engine.Actor.GetOverlappingActors
inline void UActor::GetOverlappingActors(struct TArray<struct UActor>& OverlappingActors, struct UClass* ClassFilter) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetOverlappingActors");

	struct GetOverlappingActors_Params {
		struct TArray<struct UActor>& OverlappingActors;
		struct UClass* ClassFilter;
	}; GetOverlappingActors_Params Params;

	Params.ClassFilter = ClassFilter;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OverlappingActors = Params.OverlappingActors;

}

// Function Engine.Actor.GetLocalRole
inline enum class ENetRole UActor::GetLocalRole() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetLocalRole");

	struct GetLocalRole_Params {
		
		enum class ENetRole ReturnValue;

	}; GetLocalRole_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetLifeSpan
inline float UActor::GetLifeSpan() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetLifeSpan");

	struct GetLifeSpan_Params {
		
		float ReturnValue;

	}; GetLifeSpan_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetInstigatorController
inline struct AController UActor::GetInstigatorController() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetInstigatorController");

	struct GetInstigatorController_Params {
		
		struct AController ReturnValue;

	}; GetInstigatorController_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetInstigator
inline struct APawn UActor::GetInstigator() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetInstigator");

	struct GetInstigator_Params {
		
		struct APawn ReturnValue;

	}; GetInstigator_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetInputVectorAxisValue
inline struct FVector UActor::GetInputVectorAxisValue(struct FKey InputAxisKey) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetInputVectorAxisValue");

	struct GetInputVectorAxisValue_Params {
		struct FKey InputAxisKey;
		struct FVector ReturnValue;

	}; GetInputVectorAxisValue_Params Params;

	Params.InputAxisKey = InputAxisKey;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetInputAxisValue
inline float UActor::GetInputAxisValue(struct FName InputAxisName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetInputAxisValue");

	struct GetInputAxisValue_Params {
		struct FName InputAxisName;
		float ReturnValue;

	}; GetInputAxisValue_Params Params;

	Params.InputAxisName = InputAxisName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetInputAxisKeyValue
inline float UActor::GetInputAxisKeyValue(struct FKey InputAxisKey) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetInputAxisKeyValue");

	struct GetInputAxisKeyValue_Params {
		struct FKey InputAxisKey;
		float ReturnValue;

	}; GetInputAxisKeyValue_Params Params;

	Params.InputAxisKey = InputAxisKey;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetHorizontalDotProductTo
inline float UActor::GetHorizontalDotProductTo(struct UActor OtherActor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetHorizontalDotProductTo");

	struct GetHorizontalDotProductTo_Params {
		struct UActor OtherActor;
		float ReturnValue;

	}; GetHorizontalDotProductTo_Params Params;

	Params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetHorizontalDistanceTo
inline float UActor::GetHorizontalDistanceTo(struct UActor OtherActor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetHorizontalDistanceTo");

	struct GetHorizontalDistanceTo_Params {
		struct UActor OtherActor;
		float ReturnValue;

	}; GetHorizontalDistanceTo_Params Params;

	Params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetGameTimeSinceCreation
inline float UActor::GetGameTimeSinceCreation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetGameTimeSinceCreation");

	struct GetGameTimeSinceCreation_Params {
		
		float ReturnValue;

	}; GetGameTimeSinceCreation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetDotProductTo
inline float UActor::GetDotProductTo(struct UActor OtherActor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetDotProductTo");

	struct GetDotProductTo_Params {
		struct UActor OtherActor;
		float ReturnValue;

	}; GetDotProductTo_Params Params;

	Params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetDistanceTo
inline float UActor::GetDistanceTo(struct UActor OtherActor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetDistanceTo");

	struct GetDistanceTo_Params {
		struct UActor OtherActor;
		float ReturnValue;

	}; GetDistanceTo_Params Params;

	Params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetComponentsByTag
inline struct TArray<struct UActorComponent> UActor::GetComponentsByTag(struct UClass* ComponentClass, struct FName Tag) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetComponentsByTag");

	struct GetComponentsByTag_Params {
		struct UClass* ComponentClass;
		struct FName Tag;
		struct TArray<struct UActorComponent> ReturnValue;

	}; GetComponentsByTag_Params Params;

	Params.ComponentClass = ComponentClass;
	Params.Tag = Tag;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetComponentsByInterface
inline struct TArray<struct UActorComponent> UActor::GetComponentsByInterface(struct UClass* Interface) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetComponentsByInterface");

	struct GetComponentsByInterface_Params {
		struct UClass* Interface;
		struct TArray<struct UActorComponent> ReturnValue;

	}; GetComponentsByInterface_Params Params;

	Params.Interface = Interface;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetComponentByClass
inline struct UActorComponent UActor::GetComponentByClass(struct UClass* ComponentClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetComponentByClass");

	struct GetComponentByClass_Params {
		struct UClass* ComponentClass;
		struct UActorComponent ReturnValue;

	}; GetComponentByClass_Params Params;

	Params.ComponentClass = ComponentClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetAttachParentSocketName
inline struct FName UActor::GetAttachParentSocketName() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAttachParentSocketName");

	struct GetAttachParentSocketName_Params {
		
		struct FName ReturnValue;

	}; GetAttachParentSocketName_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetAttachParentActor
inline struct UActor UActor::GetAttachParentActor() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAttachParentActor");

	struct GetAttachParentActor_Params {
		
		struct UActor ReturnValue;

	}; GetAttachParentActor_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetAttachedActors
inline void UActor::GetAttachedActors(struct TArray<struct UActor>& OutActors, bool bResetArray) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAttachedActors");

	struct GetAttachedActors_Params {
		struct TArray<struct UActor>& OutActors;
		bool bResetArray;
	}; GetAttachedActors_Params Params;

	Params.bResetArray = bResetArray;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutActors = Params.OutActors;

}

// Function Engine.Actor.GetAllChildActors
inline void UActor::GetAllChildActors(struct TArray<struct UActor>& ChildActors, bool bIncludeDescendants) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAllChildActors");

	struct GetAllChildActors_Params {
		struct TArray<struct UActor>& ChildActors;
		bool bIncludeDescendants;
	}; GetAllChildActors_Params Params;

	Params.bIncludeDescendants = bIncludeDescendants;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	ChildActors = Params.ChildActors;

}

// Function Engine.Actor.GetActorUpVector
inline struct FVector UActor::GetActorUpVector() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorUpVector");

	struct GetActorUpVector_Params {
		
		struct FVector ReturnValue;

	}; GetActorUpVector_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetActorTimeDilation
inline float UActor::GetActorTimeDilation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorTimeDilation");

	struct GetActorTimeDilation_Params {
		
		float ReturnValue;

	}; GetActorTimeDilation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetActorTickInterval
inline float UActor::GetActorTickInterval() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorTickInterval");

	struct GetActorTickInterval_Params {
		
		float ReturnValue;

	}; GetActorTickInterval_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetActorScale3D
inline struct FVector UActor::GetActorScale3D() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorScale3D");

	struct GetActorScale3D_Params {
		
		struct FVector ReturnValue;

	}; GetActorScale3D_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetActorRightVector
inline struct FVector UActor::GetActorRightVector() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorRightVector");

	struct GetActorRightVector_Params {
		
		struct FVector ReturnValue;

	}; GetActorRightVector_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetActorRelativeScale3D
inline struct FVector UActor::GetActorRelativeScale3D() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorRelativeScale3D");

	struct GetActorRelativeScale3D_Params {
		
		struct FVector ReturnValue;

	}; GetActorRelativeScale3D_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetActorForwardVector
inline struct FVector UActor::GetActorForwardVector() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorForwardVector");

	struct GetActorForwardVector_Params {
		
		struct FVector ReturnValue;

	}; GetActorForwardVector_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetActorEyesViewPoint
inline void UActor::GetActorEyesViewPoint(struct FVector& OutLocation, struct FRotator& OutRotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorEyesViewPoint");

	struct GetActorEyesViewPoint_Params {
		struct FVector& OutLocation;
		struct FRotator& OutRotation;
	}; GetActorEyesViewPoint_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutLocation = Params.OutLocation;
	OutRotation = Params.OutRotation;

}

// Function Engine.Actor.GetActorEnableCollision
inline bool UActor::GetActorEnableCollision() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorEnableCollision");

	struct GetActorEnableCollision_Params {
		
		bool ReturnValue;

	}; GetActorEnableCollision_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetActorBounds
inline void UActor::GetActorBounds(bool bOnlyCollidingComponents, struct FVector& Origin, struct FVector& BoxExtent, bool bIncludeFromChildActors) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorBounds");

	struct GetActorBounds_Params {
		bool bOnlyCollidingComponents;
		struct FVector& Origin;
		struct FVector& BoxExtent;
		bool bIncludeFromChildActors;
	}; GetActorBounds_Params Params;

	Params.bOnlyCollidingComponents = bOnlyCollidingComponents;
	Params.bIncludeFromChildActors = bIncludeFromChildActors;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Origin = Params.Origin;
	BoxExtent = Params.BoxExtent;

}

// Function Engine.Actor.ForceNetUpdate
inline void UActor::ForceNetUpdate() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ForceNetUpdate");

	struct ForceNetUpdate_Params {
		
	}; ForceNetUpdate_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.FlushNetDormancy
inline void UActor::FlushNetDormancy() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FlushNetDormancy");

	struct FlushNetDormancy_Params {
		
	}; FlushNetDormancy_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.EnableInput
inline void UActor::EnableInput(struct APlayerController PlayerController) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.EnableInput");

	struct EnableInput_Params {
		struct APlayerController PlayerController;
	}; EnableInput_Params Params;

	Params.PlayerController = PlayerController;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.DisableInput
inline void UActor::DisableInput(struct APlayerController PlayerController) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DisableInput");

	struct DisableInput_Params {
		struct APlayerController PlayerController;
	}; DisableInput_Params Params;

	Params.PlayerController = PlayerController;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.DetachRootComponentFromParent
inline void UActor::DetachRootComponentFromParent(bool bMaintainWorldPosition) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DetachRootComponentFromParent");

	struct DetachRootComponentFromParent_Params {
		bool bMaintainWorldPosition;
	}; DetachRootComponentFromParent_Params Params;

	Params.bMaintainWorldPosition = bMaintainWorldPosition;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.AddTickPrerequisiteComponent
inline void UActor::AddTickPrerequisiteComponent(struct UActorComponent PrerequisiteComponent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AddTickPrerequisiteComponent");

	struct AddTickPrerequisiteComponent_Params {
		struct UActorComponent PrerequisiteComponent;
	}; AddTickPrerequisiteComponent_Params Params;

	Params.PrerequisiteComponent = PrerequisiteComponent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.AddTickPrerequisiteActor
inline void UActor::AddTickPrerequisiteActor(struct UActor PrerequisiteActor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AddTickPrerequisiteActor");

	struct AddTickPrerequisiteActor_Params {
		struct UActor PrerequisiteActor;
	}; AddTickPrerequisiteActor_Params Params;

	Params.PrerequisiteActor = PrerequisiteActor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.AddComponent
inline struct UActorComponent UActor::AddComponent(struct FName TemplateName, bool bManualAttachment, struct FTransform& RelativeTransform, struct Object ComponentTemplateContext) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AddComponent");

	struct AddComponent_Params {
		struct FName TemplateName;
		bool bManualAttachment;
		struct FTransform& RelativeTransform;
		struct Object ComponentTemplateContext;
		struct UActorComponent ReturnValue;

	}; AddComponent_Params Params;

	Params.TemplateName = TemplateName;
	Params.bManualAttachment = bManualAttachment;
	Params.ComponentTemplateContext = ComponentTemplateContext;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	RelativeTransform = Params.RelativeTransform;


	return params.ReturnValue;
}

// Function Engine.Actor.ActorHasTag
inline bool UActor::ActorHasTag(struct FName Tag) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ActorHasTag");

	struct ActorHasTag_Params {
		struct FName Tag;
		bool ReturnValue;

	}; ActorHasTag_Params Params;

	Params.Tag = Tag;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.ActorComponent.ToggleActive
inline void UActorComponent::ToggleActive() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.ToggleActive");

	struct ToggleActive_Params {
		
	}; ToggleActive_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.SetTickGroup
inline void UActorComponent::SetTickGroup(enum class ETickingGroup NewTickGroup) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.SetTickGroup");

	struct SetTickGroup_Params {
		enum class ETickingGroup NewTickGroup;
	}; SetTickGroup_Params Params;

	Params.NewTickGroup = NewTickGroup;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.SetTickableWhenPaused
inline void UActorComponent::SetTickableWhenPaused(bool bTickableWhenPaused) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.SetTickableWhenPaused");

	struct SetTickableWhenPaused_Params {
		bool bTickableWhenPaused;
	}; SetTickableWhenPaused_Params Params;

	Params.bTickableWhenPaused = bTickableWhenPaused;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.SetIsReplicated
inline void UActorComponent::SetIsReplicated(bool ShouldReplicate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.SetIsReplicated");

	struct SetIsReplicated_Params {
		bool ShouldReplicate;
	}; SetIsReplicated_Params Params;

	Params.ShouldReplicate = ShouldReplicate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.SetComponentTickInterval
inline void UActorComponent::SetComponentTickInterval(float TickInterval) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.SetComponentTickInterval");

	struct SetComponentTickInterval_Params {
		float TickInterval;
	}; SetComponentTickInterval_Params Params;

	Params.TickInterval = TickInterval;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.SetComponentTickEnabled
inline void UActorComponent::SetComponentTickEnabled(bool bEnabled) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.SetComponentTickEnabled");

	struct SetComponentTickEnabled_Params {
		bool bEnabled;
	}; SetComponentTickEnabled_Params Params;

	Params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.SetAutoActivate
inline void UActorComponent::SetAutoActivate(bool bNewAutoActivate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.SetAutoActivate");

	struct SetAutoActivate_Params {
		bool bNewAutoActivate;
	}; SetAutoActivate_Params Params;

	Params.bNewAutoActivate = bNewAutoActivate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.SetActive
inline void UActorComponent::SetActive(bool bNewActive, bool bReset) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.SetActive");

	struct SetActive_Params {
		bool bNewActive;
		bool bReset;
	}; SetActive_Params Params;

	Params.bNewActive = bNewActive;
	Params.bReset = bReset;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.RemoveTickPrerequisiteComponent
inline void UActorComponent::RemoveTickPrerequisiteComponent(struct UActorComponent PrerequisiteComponent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.RemoveTickPrerequisiteComponent");

	struct RemoveTickPrerequisiteComponent_Params {
		struct UActorComponent PrerequisiteComponent;
	}; RemoveTickPrerequisiteComponent_Params Params;

	Params.PrerequisiteComponent = PrerequisiteComponent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.RemoveTickPrerequisiteActor
inline void UActorComponent::RemoveTickPrerequisiteActor(struct UActor PrerequisiteActor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.RemoveTickPrerequisiteActor");

	struct RemoveTickPrerequisiteActor_Params {
		struct UActor PrerequisiteActor;
	}; RemoveTickPrerequisiteActor_Params Params;

	Params.PrerequisiteActor = PrerequisiteActor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.ReceiveTick
inline void UActorComponent::ReceiveTick(float DeltaSeconds) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.ReceiveTick");

	struct ReceiveTick_Params {
		float DeltaSeconds;
	}; ReceiveTick_Params Params;

	Params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.ReceiveEndPlay
inline void UActorComponent::ReceiveEndPlay(enum class EEndPlayReason EndPlayReason) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.ReceiveEndPlay");

	struct ReceiveEndPlay_Params {
		enum class EEndPlayReason EndPlayReason;
	}; ReceiveEndPlay_Params Params;

	Params.EndPlayReason = EndPlayReason;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.ReceiveBeginPlay
inline void UActorComponent::ReceiveBeginPlay() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.ReceiveBeginPlay");

	struct ReceiveBeginPlay_Params {
		
	}; ReceiveBeginPlay_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.OnRep_IsActive
inline void UActorComponent::OnRep_IsActive() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.OnRep_IsActive");

	struct OnRep_IsActive_Params {
		
	}; OnRep_IsActive_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.K2_DestroyComponent
inline void UActorComponent::K2_DestroyComponent(struct Object Object) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.K2_DestroyComponent");

	struct K2_DestroyComponent_Params {
		struct Object Object;
	}; K2_DestroyComponent_Params Params;

	Params.Object = Object;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.IsComponentTickEnabled
inline bool UActorComponent::IsComponentTickEnabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.IsComponentTickEnabled");

	struct IsComponentTickEnabled_Params {
		
		bool ReturnValue;

	}; IsComponentTickEnabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.ActorComponent.IsBeingDestroyed
inline bool UActorComponent::IsBeingDestroyed() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.IsBeingDestroyed");

	struct IsBeingDestroyed_Params {
		
		bool ReturnValue;

	}; IsBeingDestroyed_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.ActorComponent.IsActive
inline bool UActorComponent::IsActive() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.IsActive");

	struct IsActive_Params {
		
		bool ReturnValue;

	}; IsActive_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.ActorComponent.GetOwner
inline struct UActor UActorComponent::GetOwner() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.GetOwner");

	struct GetOwner_Params {
		
		struct UActor ReturnValue;

	}; GetOwner_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.ActorComponent.GetComponentTickInterval
inline float UActorComponent::GetComponentTickInterval() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.GetComponentTickInterval");

	struct GetComponentTickInterval_Params {
		
		float ReturnValue;

	}; GetComponentTickInterval_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.ActorComponent.Deactivate
inline void UActorComponent::Deactivate() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.Deactivate");

	struct Deactivate_Params {
		
	}; Deactivate_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.ComponentHasTag
inline bool UActorComponent::ComponentHasTag(struct FName Tag) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.ComponentHasTag");

	struct ComponentHasTag_Params {
		struct FName Tag;
		bool ReturnValue;

	}; ComponentHasTag_Params Params;

	Params.Tag = Tag;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.ActorComponent.AddTickPrerequisiteComponent
inline void UActorComponent::AddTickPrerequisiteComponent(struct UActorComponent PrerequisiteComponent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.AddTickPrerequisiteComponent");

	struct AddTickPrerequisiteComponent_Params {
		struct UActorComponent PrerequisiteComponent;
	}; AddTickPrerequisiteComponent_Params Params;

	Params.PrerequisiteComponent = PrerequisiteComponent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.AddTickPrerequisiteActor
inline void UActorComponent::AddTickPrerequisiteActor(struct UActor PrerequisiteActor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.AddTickPrerequisiteActor");

	struct AddTickPrerequisiteActor_Params {
		struct UActor PrerequisiteActor;
	}; AddTickPrerequisiteActor_Params Params;

	Params.PrerequisiteActor = PrerequisiteActor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.Activate
inline void UActorComponent::Activate(bool bReset) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.Activate");

	struct Activate_Params {
		bool bReset;
	}; Activate_Params Params;

	Params.bReset = bReset;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneComponent.ToggleVisibility
inline void USceneComponent::ToggleVisibility(bool bPropagateToChildren) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.ToggleVisibility");

	struct ToggleVisibility_Params {
		bool bPropagateToChildren;
	}; ToggleVisibility_Params Params;

	Params.bPropagateToChildren = bPropagateToChildren;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneComponent.SnapTo
inline bool USceneComponent::SnapTo(struct USceneComponent InParent, struct FName InSocketName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SnapTo");

	struct SnapTo_Params {
		struct USceneComponent InParent;
		struct FName InSocketName;
		bool ReturnValue;

	}; SnapTo_Params Params;

	Params.InParent = InParent;
	Params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.SetWorldScale3D
inline void USceneComponent::SetWorldScale3D(struct FVector NewScale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SetWorldScale3D");

	struct SetWorldScale3D_Params {
		struct FVector NewScale;
	}; SetWorldScale3D_Params Params;

	Params.NewScale = NewScale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneComponent.SetVisibility
inline void USceneComponent::SetVisibility(bool bNewVisibility, bool bPropagateToChildren) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SetVisibility");

	struct SetVisibility_Params {
		bool bNewVisibility;
		bool bPropagateToChildren;
	}; SetVisibility_Params Params;

	Params.bNewVisibility = bNewVisibility;
	Params.bPropagateToChildren = bPropagateToChildren;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneComponent.SetShouldUpdatePhysicsVolume
inline void USceneComponent::SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SetShouldUpdatePhysicsVolume");

	struct SetShouldUpdatePhysicsVolume_Params {
		bool bInShouldUpdatePhysicsVolume;
	}; SetShouldUpdatePhysicsVolume_Params Params;

	Params.bInShouldUpdatePhysicsVolume = bInShouldUpdatePhysicsVolume;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneComponent.SetRelativeScale3D
inline void USceneComponent::SetRelativeScale3D(struct FVector NewScale3D) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SetRelativeScale3D");

	struct SetRelativeScale3D_Params {
		struct FVector NewScale3D;
	}; SetRelativeScale3D_Params Params;

	Params.NewScale3D = NewScale3D;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneComponent.SetMobility
inline void USceneComponent::SetMobility(enum class EComponentMobility NewMobility) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SetMobility");

	struct SetMobility_Params {
		enum class EComponentMobility NewMobility;
	}; SetMobility_Params Params;

	Params.NewMobility = NewMobility;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneComponent.SetHiddenInGame
inline void USceneComponent::SetHiddenInGame(bool NewHidden, bool bPropagateToChildren) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SetHiddenInGame");

	struct SetHiddenInGame_Params {
		bool NewHidden;
		bool bPropagateToChildren;
	}; SetHiddenInGame_Params Params;

	Params.NewHidden = NewHidden;
	Params.bPropagateToChildren = bPropagateToChildren;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneComponent.SetAbsolute
inline void USceneComponent::SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SetAbsolute");

	struct SetAbsolute_Params {
		bool bNewAbsoluteLocation;
		bool bNewAbsoluteRotation;
		bool bNewAbsoluteScale;
	}; SetAbsolute_Params Params;

	Params.bNewAbsoluteLocation = bNewAbsoluteLocation;
	Params.bNewAbsoluteRotation = bNewAbsoluteRotation;
	Params.bNewAbsoluteScale = bNewAbsoluteScale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneComponent.ResetRelativeTransform
inline void USceneComponent::ResetRelativeTransform() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.ResetRelativeTransform");

	struct ResetRelativeTransform_Params {
		
	}; ResetRelativeTransform_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneComponent.OnRep_Visibility
inline void USceneComponent::OnRep_Visibility(bool OldValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.OnRep_Visibility");

	struct OnRep_Visibility_Params {
		bool OldValue;
	}; OnRep_Visibility_Params Params;

	Params.OldValue = OldValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneComponent.OnRep_Transform
inline void USceneComponent::OnRep_Transform() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.OnRep_Transform");

	struct OnRep_Transform_Params {
		
	}; OnRep_Transform_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneComponent.OnRep_AttachSocketName
inline void USceneComponent::OnRep_AttachSocketName() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.OnRep_AttachSocketName");

	struct OnRep_AttachSocketName_Params {
		
	}; OnRep_AttachSocketName_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneComponent.OnRep_AttachParent
inline void USceneComponent::OnRep_AttachParent() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.OnRep_AttachParent");

	struct OnRep_AttachParent_Params {
		
	}; OnRep_AttachParent_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneComponent.OnRep_AttachChildren
inline void USceneComponent::OnRep_AttachChildren() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.OnRep_AttachChildren");

	struct OnRep_AttachChildren_Params {
		
	}; OnRep_AttachChildren_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneComponent.K2_SetWorldTransform
inline void USceneComponent::K2_SetWorldTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_SetWorldTransform");

	struct K2_SetWorldTransform_Params {
		struct FTransform& NewTransform;
		bool bSweep;
		struct FHitResult& SweepHitResult;
		bool bTeleport;
	}; K2_SetWorldTransform_Params Params;

	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewTransform = Params.NewTransform;
	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.SceneComponent.K2_SetWorldRotation
inline void USceneComponent::K2_SetWorldRotation(struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_SetWorldRotation");

	struct K2_SetWorldRotation_Params {
		struct FRotator NewRotation;
		bool bSweep;
		struct FHitResult& SweepHitResult;
		bool bTeleport;
	}; K2_SetWorldRotation_Params Params;

	Params.NewRotation = NewRotation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.SceneComponent.K2_SetWorldLocationAndRotation
inline void USceneComponent::K2_SetWorldLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_SetWorldLocationAndRotation");

	struct K2_SetWorldLocationAndRotation_Params {
		struct FVector NewLocation;
		struct FRotator NewRotation;
		bool bSweep;
		struct FHitResult& SweepHitResult;
		bool bTeleport;
	}; K2_SetWorldLocationAndRotation_Params Params;

	Params.NewLocation = NewLocation;
	Params.NewRotation = NewRotation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.SceneComponent.K2_SetWorldLocation
inline void USceneComponent::K2_SetWorldLocation(struct FVector NewLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_SetWorldLocation");

	struct K2_SetWorldLocation_Params {
		struct FVector NewLocation;
		bool bSweep;
		struct FHitResult& SweepHitResult;
		bool bTeleport;
	}; K2_SetWorldLocation_Params Params;

	Params.NewLocation = NewLocation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.SceneComponent.K2_SetRelativeTransform
inline void USceneComponent::K2_SetRelativeTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_SetRelativeTransform");

	struct K2_SetRelativeTransform_Params {
		struct FTransform& NewTransform;
		bool bSweep;
		struct FHitResult& SweepHitResult;
		bool bTeleport;
	}; K2_SetRelativeTransform_Params Params;

	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewTransform = Params.NewTransform;
	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.SceneComponent.K2_SetRelativeRotation
inline void USceneComponent::K2_SetRelativeRotation(struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_SetRelativeRotation");

	struct K2_SetRelativeRotation_Params {
		struct FRotator NewRotation;
		bool bSweep;
		struct FHitResult& SweepHitResult;
		bool bTeleport;
	}; K2_SetRelativeRotation_Params Params;

	Params.NewRotation = NewRotation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.SceneComponent.K2_SetRelativeLocationAndRotation
inline void USceneComponent::K2_SetRelativeLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_SetRelativeLocationAndRotation");

	struct K2_SetRelativeLocationAndRotation_Params {
		struct FVector NewLocation;
		struct FRotator NewRotation;
		bool bSweep;
		struct FHitResult& SweepHitResult;
		bool bTeleport;
	}; K2_SetRelativeLocationAndRotation_Params Params;

	Params.NewLocation = NewLocation;
	Params.NewRotation = NewRotation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.SceneComponent.K2_SetRelativeLocation
inline void USceneComponent::K2_SetRelativeLocation(struct FVector NewLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_SetRelativeLocation");

	struct K2_SetRelativeLocation_Params {
		struct FVector NewLocation;
		bool bSweep;
		struct FHitResult& SweepHitResult;
		bool bTeleport;
	}; K2_SetRelativeLocation_Params Params;

	Params.NewLocation = NewLocation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.SceneComponent.K2_GetComponentToWorld
inline struct FTransform USceneComponent::K2_GetComponentToWorld() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_GetComponentToWorld");

	struct K2_GetComponentToWorld_Params {
		
		struct FTransform ReturnValue;

	}; K2_GetComponentToWorld_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.K2_GetComponentScale
inline struct FVector USceneComponent::K2_GetComponentScale() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_GetComponentScale");

	struct K2_GetComponentScale_Params {
		
		struct FVector ReturnValue;

	}; K2_GetComponentScale_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.K2_GetComponentRotation
inline struct FRotator USceneComponent::K2_GetComponentRotation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_GetComponentRotation");

	struct K2_GetComponentRotation_Params {
		
		struct FRotator ReturnValue;

	}; K2_GetComponentRotation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.K2_GetComponentLocation
inline struct FVector USceneComponent::K2_GetComponentLocation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_GetComponentLocation");

	struct K2_GetComponentLocation_Params {
		
		struct FVector ReturnValue;

	}; K2_GetComponentLocation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.K2_DetachFromComponent
inline void USceneComponent::K2_DetachFromComponent(enum class EDetachmentRule LocationRule, enum class EDetachmentRule RotationRule, enum class EDetachmentRule ScaleRule, bool bCallModify) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_DetachFromComponent");

	struct K2_DetachFromComponent_Params {
		enum class EDetachmentRule LocationRule;
		enum class EDetachmentRule RotationRule;
		enum class EDetachmentRule ScaleRule;
		bool bCallModify;
	}; K2_DetachFromComponent_Params Params;

	Params.LocationRule = LocationRule;
	Params.RotationRule = RotationRule;
	Params.ScaleRule = ScaleRule;
	Params.bCallModify = bCallModify;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneComponent.K2_AttachToComponent
inline bool USceneComponent::K2_AttachToComponent(struct USceneComponent Parent, struct FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_AttachToComponent");

	struct K2_AttachToComponent_Params {
		struct USceneComponent Parent;
		struct FName SocketName;
		enum class EAttachmentRule LocationRule;
		enum class EAttachmentRule RotationRule;
		enum class EAttachmentRule ScaleRule;
		bool bWeldSimulatedBodies;
		bool ReturnValue;

	}; K2_AttachToComponent_Params Params;

	Params.Parent = Parent;
	Params.SocketName = SocketName;
	Params.LocationRule = LocationRule;
	Params.RotationRule = RotationRule;
	Params.ScaleRule = ScaleRule;
	Params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.K2_AttachTo
inline bool USceneComponent::K2_AttachTo(struct USceneComponent InParent, struct FName InSocketName, enum class EAttachLocation AttachType, bool bWeldSimulatedBodies) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_AttachTo");

	struct K2_AttachTo_Params {
		struct USceneComponent InParent;
		struct FName InSocketName;
		enum class EAttachLocation AttachType;
		bool bWeldSimulatedBodies;
		bool ReturnValue;

	}; K2_AttachTo_Params Params;

	Params.InParent = InParent;
	Params.InSocketName = InSocketName;
	Params.AttachType = AttachType;
	Params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.K2_AddWorldTransform
inline void USceneComponent::K2_AddWorldTransform(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_AddWorldTransform");

	struct K2_AddWorldTransform_Params {
		struct FTransform& DeltaTransform;
		bool bSweep;
		struct FHitResult& SweepHitResult;
		bool bTeleport;
	}; K2_AddWorldTransform_Params Params;

	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	DeltaTransform = Params.DeltaTransform;
	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.SceneComponent.K2_AddWorldRotation
inline void USceneComponent::K2_AddWorldRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_AddWorldRotation");

	struct K2_AddWorldRotation_Params {
		struct FRotator DeltaRotation;
		bool bSweep;
		struct FHitResult& SweepHitResult;
		bool bTeleport;
	}; K2_AddWorldRotation_Params Params;

	Params.DeltaRotation = DeltaRotation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.SceneComponent.K2_AddWorldOffset
inline void USceneComponent::K2_AddWorldOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_AddWorldOffset");

	struct K2_AddWorldOffset_Params {
		struct FVector DeltaLocation;
		bool bSweep;
		struct FHitResult& SweepHitResult;
		bool bTeleport;
	}; K2_AddWorldOffset_Params Params;

	Params.DeltaLocation = DeltaLocation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.SceneComponent.K2_AddRelativeRotation
inline void USceneComponent::K2_AddRelativeRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_AddRelativeRotation");

	struct K2_AddRelativeRotation_Params {
		struct FRotator DeltaRotation;
		bool bSweep;
		struct FHitResult& SweepHitResult;
		bool bTeleport;
	}; K2_AddRelativeRotation_Params Params;

	Params.DeltaRotation = DeltaRotation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.SceneComponent.K2_AddRelativeLocation
inline void USceneComponent::K2_AddRelativeLocation(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_AddRelativeLocation");

	struct K2_AddRelativeLocation_Params {
		struct FVector DeltaLocation;
		bool bSweep;
		struct FHitResult& SweepHitResult;
		bool bTeleport;
	}; K2_AddRelativeLocation_Params Params;

	Params.DeltaLocation = DeltaLocation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.SceneComponent.K2_AddLocalTransform
inline void USceneComponent::K2_AddLocalTransform(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_AddLocalTransform");

	struct K2_AddLocalTransform_Params {
		struct FTransform& DeltaTransform;
		bool bSweep;
		struct FHitResult& SweepHitResult;
		bool bTeleport;
	}; K2_AddLocalTransform_Params Params;

	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	DeltaTransform = Params.DeltaTransform;
	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.SceneComponent.K2_AddLocalRotation
inline void USceneComponent::K2_AddLocalRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_AddLocalRotation");

	struct K2_AddLocalRotation_Params {
		struct FRotator DeltaRotation;
		bool bSweep;
		struct FHitResult& SweepHitResult;
		bool bTeleport;
	}; K2_AddLocalRotation_Params Params;

	Params.DeltaRotation = DeltaRotation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.SceneComponent.K2_AddLocalOffset
inline void USceneComponent::K2_AddLocalOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_AddLocalOffset");

	struct K2_AddLocalOffset_Params {
		struct FVector DeltaLocation;
		bool bSweep;
		struct FHitResult& SweepHitResult;
		bool bTeleport;
	}; K2_AddLocalOffset_Params Params;

	Params.DeltaLocation = DeltaLocation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.SceneComponent.IsVisible
inline bool USceneComponent::IsVisible() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.IsVisible");

	struct IsVisible_Params {
		
		bool ReturnValue;

	}; IsVisible_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.IsSimulatingPhysics
inline bool USceneComponent::IsSimulatingPhysics(struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.IsSimulatingPhysics");

	struct IsSimulatingPhysics_Params {
		struct FName BoneName;
		bool ReturnValue;

	}; IsSimulatingPhysics_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.IsAnySimulatingPhysics
inline bool USceneComponent::IsAnySimulatingPhysics() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.IsAnySimulatingPhysics");

	struct IsAnySimulatingPhysics_Params {
		
		bool ReturnValue;

	}; IsAnySimulatingPhysics_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.GetUpVector
inline struct FVector USceneComponent::GetUpVector() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetUpVector");

	struct GetUpVector_Params {
		
		struct FVector ReturnValue;

	}; GetUpVector_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.GetSocketTransform
inline struct FTransform USceneComponent::GetSocketTransform(struct FName InSocketName, enum class ERelativeTransformSpace TransformSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetSocketTransform");

	struct GetSocketTransform_Params {
		struct FName InSocketName;
		enum class ERelativeTransformSpace TransformSpace;
		struct FTransform ReturnValue;

	}; GetSocketTransform_Params Params;

	Params.InSocketName = InSocketName;
	Params.TransformSpace = TransformSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.GetSocketRotation
inline struct FRotator USceneComponent::GetSocketRotation(struct FName InSocketName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetSocketRotation");

	struct GetSocketRotation_Params {
		struct FName InSocketName;
		struct FRotator ReturnValue;

	}; GetSocketRotation_Params Params;

	Params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.GetSocketQuaternion
inline struct FQuat USceneComponent::GetSocketQuaternion(struct FName InSocketName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetSocketQuaternion");

	struct GetSocketQuaternion_Params {
		struct FName InSocketName;
		struct FQuat ReturnValue;

	}; GetSocketQuaternion_Params Params;

	Params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.GetSocketLocation
inline struct FVector USceneComponent::GetSocketLocation(struct FName InSocketName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetSocketLocation");

	struct GetSocketLocation_Params {
		struct FName InSocketName;
		struct FVector ReturnValue;

	}; GetSocketLocation_Params Params;

	Params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.GetShouldUpdatePhysicsVolume
inline bool USceneComponent::GetShouldUpdatePhysicsVolume() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetShouldUpdatePhysicsVolume");

	struct GetShouldUpdatePhysicsVolume_Params {
		
		bool ReturnValue;

	}; GetShouldUpdatePhysicsVolume_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.GetRightVector
inline struct FVector USceneComponent::GetRightVector() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetRightVector");

	struct GetRightVector_Params {
		
		struct FVector ReturnValue;

	}; GetRightVector_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.GetRelativeTransform
inline struct FTransform USceneComponent::GetRelativeTransform() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetRelativeTransform");

	struct GetRelativeTransform_Params {
		
		struct FTransform ReturnValue;

	}; GetRelativeTransform_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.GetPhysicsVolume
inline struct APhysicsVolume USceneComponent::GetPhysicsVolume() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetPhysicsVolume");

	struct GetPhysicsVolume_Params {
		
		struct APhysicsVolume ReturnValue;

	}; GetPhysicsVolume_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.GetParentComponents
inline void USceneComponent::GetParentComponents(struct TArray<struct USceneComponent>& Parents) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetParentComponents");

	struct GetParentComponents_Params {
		struct TArray<struct USceneComponent>& Parents;
	}; GetParentComponents_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Parents = Params.Parents;

}

// Function Engine.SceneComponent.GetNumChildrenComponents
inline int32_t USceneComponent::GetNumChildrenComponents() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetNumChildrenComponents");

	struct GetNumChildrenComponents_Params {
		
		int32_t ReturnValue;

	}; GetNumChildrenComponents_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.GetForwardVector
inline struct FVector USceneComponent::GetForwardVector() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetForwardVector");

	struct GetForwardVector_Params {
		
		struct FVector ReturnValue;

	}; GetForwardVector_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.GetComponentVelocity
inline struct FVector USceneComponent::GetComponentVelocity() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetComponentVelocity");

	struct GetComponentVelocity_Params {
		
		struct FVector ReturnValue;

	}; GetComponentVelocity_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.GetChildrenComponents
inline void USceneComponent::GetChildrenComponents(bool bIncludeAllDescendants, struct TArray<struct USceneComponent>& Children) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetChildrenComponents");

	struct GetChildrenComponents_Params {
		bool bIncludeAllDescendants;
		struct TArray<struct USceneComponent>& Children;
	}; GetChildrenComponents_Params Params;

	Params.bIncludeAllDescendants = bIncludeAllDescendants;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Children = Params.Children;

}

// Function Engine.SceneComponent.GetChildComponent
inline struct USceneComponent USceneComponent::GetChildComponent(int32_t ChildIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetChildComponent");

	struct GetChildComponent_Params {
		int32_t ChildIndex;
		struct USceneComponent ReturnValue;

	}; GetChildComponent_Params Params;

	Params.ChildIndex = ChildIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.GetAttachSocketName
inline struct FName USceneComponent::GetAttachSocketName() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetAttachSocketName");

	struct GetAttachSocketName_Params {
		
		struct FName ReturnValue;

	}; GetAttachSocketName_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.GetAttachParent
inline struct USceneComponent USceneComponent::GetAttachParent() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetAttachParent");

	struct GetAttachParent_Params {
		
		struct USceneComponent ReturnValue;

	}; GetAttachParent_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.GetAllSocketNames
inline struct TArray<struct FName> USceneComponent::GetAllSocketNames() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetAllSocketNames");

	struct GetAllSocketNames_Params {
		
		struct TArray<struct FName> ReturnValue;

	}; GetAllSocketNames_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.DoesSocketExist
inline bool USceneComponent::DoesSocketExist(struct FName InSocketName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.DoesSocketExist");

	struct DoesSocketExist_Params {
		struct FName InSocketName;
		bool ReturnValue;

	}; DoesSocketExist_Params Params;

	Params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.DetachFromParent
inline void USceneComponent::DetachFromParent(bool bMaintainWorldPosition, bool bCallModify) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.DetachFromParent");

	struct DetachFromParent_Params {
		bool bMaintainWorldPosition;
		bool bCallModify;
	}; DetachFromParent_Params Params;

	Params.bMaintainWorldPosition = bMaintainWorldPosition;
	Params.bCallModify = bCallModify;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.WasRecentlyRendered
inline bool UPrimitiveComponent::WasRecentlyRendered(float Tolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.WasRecentlyRendered");

	struct WasRecentlyRendered_Params {
		float Tolerance;
		bool ReturnValue;

	}; WasRecentlyRendered_Params Params;

	Params.Tolerance = Tolerance;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.WakeRigidBody
inline void UPrimitiveComponent::WakeRigidBody(struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.WakeRigidBody");

	struct WakeRigidBody_Params {
		struct FName BoneName;
	}; WakeRigidBody_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.WakeAllRigidBodies
inline void UPrimitiveComponent::WakeAllRigidBodies() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.WakeAllRigidBodies");

	struct WakeAllRigidBodies_Params {
		
	}; WakeAllRigidBodies_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetWalkableSlopeOverride
inline void UPrimitiveComponent::SetWalkableSlopeOverride(struct FWalkableSlopeOverride& NewOverride) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetWalkableSlopeOverride");

	struct SetWalkableSlopeOverride_Params {
		struct FWalkableSlopeOverride& NewOverride;
	}; SetWalkableSlopeOverride_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewOverride = Params.NewOverride;

}

// Function Engine.PrimitiveComponent.SetUseCCD
inline void UPrimitiveComponent::SetUseCCD(bool InUseCCD, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetUseCCD");

	struct SetUseCCD_Params {
		bool InUseCCD;
		struct FName BoneName;
	}; SetUseCCD_Params Params;

	Params.InUseCCD = InUseCCD;
	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetTranslucentSortPriority
inline void UPrimitiveComponent::SetTranslucentSortPriority(int32_t NewTranslucentSortPriority) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetTranslucentSortPriority");

	struct SetTranslucentSortPriority_Params {
		int32_t NewTranslucentSortPriority;
	}; SetTranslucentSortPriority_Params Params;

	Params.NewTranslucentSortPriority = NewTranslucentSortPriority;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetSingleSampleShadowFromStationaryLights
inline void UPrimitiveComponent::SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetSingleSampleShadowFromStationaryLights");

	struct SetSingleSampleShadowFromStationaryLights_Params {
		bool bNewSingleSampleShadowFromStationaryLights;
	}; SetSingleSampleShadowFromStationaryLights_Params Params;

	Params.bNewSingleSampleShadowFromStationaryLights = bNewSingleSampleShadowFromStationaryLights;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetSimulatePhysics
inline void UPrimitiveComponent::SetSimulatePhysics(bool bSimulate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetSimulatePhysics");

	struct SetSimulatePhysics_Params {
		bool bSimulate;
	}; SetSimulatePhysics_Params Params;

	Params.bSimulate = bSimulate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetRenderOnTop
inline void UPrimitiveComponent::SetRenderOnTop(bool bValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRenderOnTop");

	struct SetRenderOnTop_Params {
		bool bValue;
	}; SetRenderOnTop_Params Params;

	Params.bValue = bValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetRenderInMainPass
inline void UPrimitiveComponent::SetRenderInMainPass(bool bValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRenderInMainPass");

	struct SetRenderInMainPass_Params {
		bool bValue;
	}; SetRenderInMainPass_Params Params;

	Params.bValue = bValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetRenderCustomDepth
inline void UPrimitiveComponent::SetRenderCustomDepth(bool bValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRenderCustomDepth");

	struct SetRenderCustomDepth_Params {
		bool bValue;
	}; SetRenderCustomDepth_Params Params;

	Params.bValue = bValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetReceivesDecals
inline void UPrimitiveComponent::SetReceivesDecals(bool bNewReceivesDecals) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetReceivesDecals");

	struct SetReceivesDecals_Params {
		bool bNewReceivesDecals;
	}; SetReceivesDecals_Params Params;

	Params.bNewReceivesDecals = bNewReceivesDecals;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetPhysMaterialOverride
inline void UPrimitiveComponent::SetPhysMaterialOverride(struct UPhysicalMaterial NewPhysMaterial) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetPhysMaterialOverride");

	struct SetPhysMaterialOverride_Params {
		struct UPhysicalMaterial NewPhysMaterial;
	}; SetPhysMaterialOverride_Params Params;

	Params.NewPhysMaterial = NewPhysMaterial;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInRadians
inline void UPrimitiveComponent::SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInRadians");

	struct SetPhysicsMaxAngularVelocityInRadians_Params {
		float NewMaxAngVel;
		bool bAddToCurrent;
		struct FName BoneName;
	}; SetPhysicsMaxAngularVelocityInRadians_Params Params;

	Params.NewMaxAngVel = NewMaxAngVel;
	Params.bAddToCurrent = bAddToCurrent;
	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInDegrees
inline void UPrimitiveComponent::SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInDegrees");

	struct SetPhysicsMaxAngularVelocityInDegrees_Params {
		float NewMaxAngVel;
		bool bAddToCurrent;
		struct FName BoneName;
	}; SetPhysicsMaxAngularVelocityInDegrees_Params Params;

	Params.NewMaxAngVel = NewMaxAngVel;
	Params.bAddToCurrent = bAddToCurrent;
	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocity
inline void UPrimitiveComponent::SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocity");

	struct SetPhysicsMaxAngularVelocity_Params {
		float NewMaxAngVel;
		bool bAddToCurrent;
		struct FName BoneName;
	}; SetPhysicsMaxAngularVelocity_Params Params;

	Params.NewMaxAngVel = NewMaxAngVel;
	Params.bAddToCurrent = bAddToCurrent;
	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetPhysicsLinearVelocity
inline void UPrimitiveComponent::SetPhysicsLinearVelocity(struct FVector NewVel, bool bAddToCurrent, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetPhysicsLinearVelocity");

	struct SetPhysicsLinearVelocity_Params {
		struct FVector NewVel;
		bool bAddToCurrent;
		struct FName BoneName;
	}; SetPhysicsLinearVelocity_Params Params;

	Params.NewVel = NewVel;
	Params.bAddToCurrent = bAddToCurrent;
	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetPhysicsAngularVelocityInRadians
inline void UPrimitiveComponent::SetPhysicsAngularVelocityInRadians(struct FVector NewAngVel, bool bAddToCurrent, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetPhysicsAngularVelocityInRadians");

	struct SetPhysicsAngularVelocityInRadians_Params {
		struct FVector NewAngVel;
		bool bAddToCurrent;
		struct FName BoneName;
	}; SetPhysicsAngularVelocityInRadians_Params Params;

	Params.NewAngVel = NewAngVel;
	Params.bAddToCurrent = bAddToCurrent;
	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetPhysicsAngularVelocityInDegrees
inline void UPrimitiveComponent::SetPhysicsAngularVelocityInDegrees(struct FVector NewAngVel, bool bAddToCurrent, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetPhysicsAngularVelocityInDegrees");

	struct SetPhysicsAngularVelocityInDegrees_Params {
		struct FVector NewAngVel;
		bool bAddToCurrent;
		struct FName BoneName;
	}; SetPhysicsAngularVelocityInDegrees_Params Params;

	Params.NewAngVel = NewAngVel;
	Params.bAddToCurrent = bAddToCurrent;
	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetPhysicsAngularVelocity
inline void UPrimitiveComponent::SetPhysicsAngularVelocity(struct FVector NewAngVel, bool bAddToCurrent, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetPhysicsAngularVelocity");

	struct SetPhysicsAngularVelocity_Params {
		struct FVector NewAngVel;
		bool bAddToCurrent;
		struct FName BoneName;
	}; SetPhysicsAngularVelocity_Params Params;

	Params.NewAngVel = NewAngVel;
	Params.bAddToCurrent = bAddToCurrent;
	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetOwnerNoSee
inline void UPrimitiveComponent::SetOwnerNoSee(bool bNewOwnerNoSee) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetOwnerNoSee");

	struct SetOwnerNoSee_Params {
		bool bNewOwnerNoSee;
	}; SetOwnerNoSee_Params Params;

	Params.bNewOwnerNoSee = bNewOwnerNoSee;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetOnlyOwnerSee
inline void UPrimitiveComponent::SetOnlyOwnerSee(bool bNewOnlyOwnerSee) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetOnlyOwnerSee");

	struct SetOnlyOwnerSee_Params {
		bool bNewOnlyOwnerSee;
	}; SetOnlyOwnerSee_Params Params;

	Params.bNewOnlyOwnerSee = bNewOnlyOwnerSee;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision
inline void UPrimitiveComponent::SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision");

	struct SetNotifyRigidBodyCollision_Params {
		bool bNewNotifyRigidBodyCollision;
	}; SetNotifyRigidBodyCollision_Params Params;

	Params.bNewNotifyRigidBodyCollision = bNewNotifyRigidBodyCollision;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetMaterialByName
inline void UPrimitiveComponent::SetMaterialByName(struct FName MaterialSlotName, struct UMaterialInterface Material) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetMaterialByName");

	struct SetMaterialByName_Params {
		struct FName MaterialSlotName;
		struct UMaterialInterface Material;
	}; SetMaterialByName_Params Params;

	Params.MaterialSlotName = MaterialSlotName;
	Params.Material = Material;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetMaterial
inline void UPrimitiveComponent::SetMaterial(int32_t ElementIndex, struct UMaterialInterface Material) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetMaterial");

	struct SetMaterial_Params {
		int32_t ElementIndex;
		struct UMaterialInterface Material;
	}; SetMaterial_Params Params;

	Params.ElementIndex = ElementIndex;
	Params.Material = Material;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetMassScale
inline void UPrimitiveComponent::SetMassScale(struct FName BoneName, float InMassScale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetMassScale");

	struct SetMassScale_Params {
		struct FName BoneName;
		float InMassScale;
	}; SetMassScale_Params Params;

	Params.BoneName = BoneName;
	Params.InMassScale = InMassScale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetMassOverrideInKg
inline void UPrimitiveComponent::SetMassOverrideInKg(struct FName BoneName, float MassInKg, bool bOverrideMass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetMassOverrideInKg");

	struct SetMassOverrideInKg_Params {
		struct FName BoneName;
		float MassInKg;
		bool bOverrideMass;
	}; SetMassOverrideInKg_Params Params;

	Params.BoneName = BoneName;
	Params.MassInKg = MassInKg;
	Params.bOverrideMass = bOverrideMass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetLinearDamping
inline void UPrimitiveComponent::SetLinearDamping(float InDamping) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetLinearDamping");

	struct SetLinearDamping_Params {
		float InDamping;
	}; SetLinearDamping_Params Params;

	Params.InDamping = InDamping;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetLightingChannels
inline void UPrimitiveComponent::SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetLightingChannels");

	struct SetLightingChannels_Params {
		bool bChannel0;
		bool bChannel1;
		bool bChannel2;
	}; SetLightingChannels_Params Params;

	Params.bChannel0 = bChannel0;
	Params.bChannel1 = bChannel1;
	Params.bChannel2 = bChannel2;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetLightAttachmentsAsGroup
inline void UPrimitiveComponent::SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetLightAttachmentsAsGroup");

	struct SetLightAttachmentsAsGroup_Params {
		bool bInLightAttachmentsAsGroup;
	}; SetLightAttachmentsAsGroup_Params Params;

	Params.bInLightAttachmentsAsGroup = bInLightAttachmentsAsGroup;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetGenerateOverlapEvents
inline void UPrimitiveComponent::SetGenerateOverlapEvents(bool bInGenerateOverlapEvents) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetGenerateOverlapEvents");

	struct SetGenerateOverlapEvents_Params {
		bool bInGenerateOverlapEvents;
	}; SetGenerateOverlapEvents_Params Params;

	Params.bInGenerateOverlapEvents = bInGenerateOverlapEvents;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetExcludeFromLightAttachmentGroup
inline void UPrimitiveComponent::SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetExcludeFromLightAttachmentGroup");

	struct SetExcludeFromLightAttachmentGroup_Params {
		bool bInExcludeFromLightAttachmentGroup;
	}; SetExcludeFromLightAttachmentGroup_Params Params;

	Params.bInExcludeFromLightAttachmentGroup = bInExcludeFromLightAttachmentGroup;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetEnableGravity
inline void UPrimitiveComponent::SetEnableGravity(bool bGravityEnabled) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetEnableGravity");

	struct SetEnableGravity_Params {
		bool bGravityEnabled;
	}; SetEnableGravity_Params Params;

	Params.bGravityEnabled = bGravityEnabled;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector4
inline void UPrimitiveComponent::SetCustomPrimitiveDataVector4(int32_t DataIndex, struct FVector4 Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector4");

	struct SetCustomPrimitiveDataVector4_Params {
		int32_t DataIndex;
		struct FVector4 Value;
	}; SetCustomPrimitiveDataVector4_Params Params;

	Params.DataIndex = DataIndex;
	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector3
inline void UPrimitiveComponent::SetCustomPrimitiveDataVector3(int32_t DataIndex, struct FVector Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector3");

	struct SetCustomPrimitiveDataVector3_Params {
		int32_t DataIndex;
		struct FVector Value;
	}; SetCustomPrimitiveDataVector3_Params Params;

	Params.DataIndex = DataIndex;
	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector2
inline void UPrimitiveComponent::SetCustomPrimitiveDataVector2(int32_t DataIndex, struct FVector2D Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector2");

	struct SetCustomPrimitiveDataVector2_Params {
		int32_t DataIndex;
		struct FVector2D Value;
	}; SetCustomPrimitiveDataVector2_Params Params;

	Params.DataIndex = DataIndex;
	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetCustomPrimitiveDataFloat
inline void UPrimitiveComponent::SetCustomPrimitiveDataFloat(int32_t DataIndex, float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCustomPrimitiveDataFloat");

	struct SetCustomPrimitiveDataFloat_Params {
		int32_t DataIndex;
		float Value;
	}; SetCustomPrimitiveDataFloat_Params Params;

	Params.DataIndex = DataIndex;
	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetCustomDepthStencilWriteMask
inline void UPrimitiveComponent::SetCustomDepthStencilWriteMask(enum class ERendererStencilMask WriteMaskBit) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCustomDepthStencilWriteMask");

	struct SetCustomDepthStencilWriteMask_Params {
		enum class ERendererStencilMask WriteMaskBit;
	}; SetCustomDepthStencilWriteMask_Params Params;

	Params.WriteMaskBit = WriteMaskBit;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetCustomDepthStencilValue
inline void UPrimitiveComponent::SetCustomDepthStencilValue(int32_t Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCustomDepthStencilValue");

	struct SetCustomDepthStencilValue_Params {
		int32_t Value;
	}; SetCustomDepthStencilValue_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetCullDistance
inline void UPrimitiveComponent::SetCullDistance(float NewCullDistance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCullDistance");

	struct SetCullDistance_Params {
		float NewCullDistance;
	}; SetCullDistance_Params Params;

	Params.NewCullDistance = NewCullDistance;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetConstraintMode
inline void UPrimitiveComponent::SetConstraintMode(enum class EDOFMode ConstraintMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetConstraintMode");

	struct SetConstraintMode_Params {
		enum class EDOFMode ConstraintMode;
	}; SetConstraintMode_Params Params;

	Params.ConstraintMode = ConstraintMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetCollisionResponseToChannel
inline void UPrimitiveComponent::SetCollisionResponseToChannel(enum class ECollisionChannel Channel, enum class ECollisionResponse NewResponse) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCollisionResponseToChannel");

	struct SetCollisionResponseToChannel_Params {
		enum class ECollisionChannel Channel;
		enum class ECollisionResponse NewResponse;
	}; SetCollisionResponseToChannel_Params Params;

	Params.Channel = Channel;
	Params.NewResponse = NewResponse;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetCollisionResponseToAllChannels
inline void UPrimitiveComponent::SetCollisionResponseToAllChannels(enum class ECollisionResponse NewResponse) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCollisionResponseToAllChannels");

	struct SetCollisionResponseToAllChannels_Params {
		enum class ECollisionResponse NewResponse;
	}; SetCollisionResponseToAllChannels_Params Params;

	Params.NewResponse = NewResponse;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetCollisionProfileName
inline void UPrimitiveComponent::SetCollisionProfileName(struct FName InCollisionProfileName, bool bUpdateOverlaps) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCollisionProfileName");

	struct SetCollisionProfileName_Params {
		struct FName InCollisionProfileName;
		bool bUpdateOverlaps;
	}; SetCollisionProfileName_Params Params;

	Params.InCollisionProfileName = InCollisionProfileName;
	Params.bUpdateOverlaps = bUpdateOverlaps;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetCollisionObjectType
inline void UPrimitiveComponent::SetCollisionObjectType(enum class ECollisionChannel Channel) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCollisionObjectType");

	struct SetCollisionObjectType_Params {
		enum class ECollisionChannel Channel;
	}; SetCollisionObjectType_Params Params;

	Params.Channel = Channel;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetCollisionEnabled
inline void UPrimitiveComponent::SetCollisionEnabled(enum class ECollisionEnabled NewType) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCollisionEnabled");

	struct SetCollisionEnabled_Params {
		enum class ECollisionEnabled NewType;
	}; SetCollisionEnabled_Params Params;

	Params.NewType = NewType;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetCenterOfMass
inline void UPrimitiveComponent::SetCenterOfMass(struct FVector CenterOfMassOffset, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCenterOfMass");

	struct SetCenterOfMass_Params {
		struct FVector CenterOfMassOffset;
		struct FName BoneName;
	}; SetCenterOfMass_Params Params;

	Params.CenterOfMassOffset = CenterOfMassOffset;
	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetCastShadow
inline void UPrimitiveComponent::SetCastShadow(bool NewCastShadow) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCastShadow");

	struct SetCastShadow_Params {
		bool NewCastShadow;
	}; SetCastShadow_Params Params;

	Params.NewCastShadow = NewCastShadow;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetCastInsetShadow
inline void UPrimitiveComponent::SetCastInsetShadow(bool bInCastInsetShadow) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCastInsetShadow");

	struct SetCastInsetShadow_Params {
		bool bInCastInsetShadow;
	}; SetCastInsetShadow_Params Params;

	Params.bInCastInsetShadow = bInCastInsetShadow;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetBoundsScale
inline void UPrimitiveComponent::SetBoundsScale(float NewBoundsScale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetBoundsScale");

	struct SetBoundsScale_Params {
		float NewBoundsScale;
	}; SetBoundsScale_Params Params;

	Params.NewBoundsScale = NewBoundsScale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetAngularDamping
inline void UPrimitiveComponent::SetAngularDamping(float InDamping) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetAngularDamping");

	struct SetAngularDamping_Params {
		float InDamping;
	}; SetAngularDamping_Params Params;

	Params.InDamping = InDamping;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetAllUseCCD
inline void UPrimitiveComponent::SetAllUseCCD(bool InUseCCD) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetAllUseCCD");

	struct SetAllUseCCD_Params {
		bool InUseCCD;
	}; SetAllUseCCD_Params Params;

	Params.InUseCCD = InUseCCD;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetAllPhysicsLinearVelocity
inline void UPrimitiveComponent::SetAllPhysicsLinearVelocity(struct FVector NewVel, bool bAddToCurrent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetAllPhysicsLinearVelocity");

	struct SetAllPhysicsLinearVelocity_Params {
		struct FVector NewVel;
		bool bAddToCurrent;
	}; SetAllPhysicsLinearVelocity_Params Params;

	Params.NewVel = NewVel;
	Params.bAddToCurrent = bAddToCurrent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInRadians
inline void UPrimitiveComponent::SetAllPhysicsAngularVelocityInRadians(struct FVector& NewAngVel, bool bAddToCurrent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInRadians");

	struct SetAllPhysicsAngularVelocityInRadians_Params {
		struct FVector& NewAngVel;
		bool bAddToCurrent;
	}; SetAllPhysicsAngularVelocityInRadians_Params Params;

	Params.bAddToCurrent = bAddToCurrent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewAngVel = Params.NewAngVel;

}

// Function Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInDegrees
inline void UPrimitiveComponent::SetAllPhysicsAngularVelocityInDegrees(struct FVector& NewAngVel, bool bAddToCurrent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInDegrees");

	struct SetAllPhysicsAngularVelocityInDegrees_Params {
		struct FVector& NewAngVel;
		bool bAddToCurrent;
	}; SetAllPhysicsAngularVelocityInDegrees_Params Params;

	Params.bAddToCurrent = bAddToCurrent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewAngVel = Params.NewAngVel;

}

// Function Engine.PrimitiveComponent.SetAllMassScale
inline void UPrimitiveComponent::SetAllMassScale(float InMassScale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetAllMassScale");

	struct SetAllMassScale_Params {
		float InMassScale;
	}; SetAllMassScale_Params Params;

	Params.InMassScale = InMassScale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.ScaleByMomentOfInertia
inline struct FVector UPrimitiveComponent::ScaleByMomentOfInertia(struct FVector InputVector, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.ScaleByMomentOfInertia");

	struct ScaleByMomentOfInertia_Params {
		struct FVector InputVector;
		struct FName BoneName;
		struct FVector ReturnValue;

	}; ScaleByMomentOfInertia_Params Params;

	Params.InputVector = InputVector;
	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.PutRigidBodyToSleep
inline void UPrimitiveComponent::PutRigidBodyToSleep(struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.PutRigidBodyToSleep");

	struct PutRigidBodyToSleep_Params {
		struct FName BoneName;
	}; PutRigidBodyToSleep_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.K2_SphereTraceComponent
inline bool UPrimitiveComponent::K2_SphereTraceComponent(struct FVector TraceStart, struct FVector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector& HitLocation, struct FVector& HitNormal, struct FName& BoneName, struct FHitResult& OutHit) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.K2_SphereTraceComponent");

	struct K2_SphereTraceComponent_Params {
		struct FVector TraceStart;
		struct FVector TraceEnd;
		float SphereRadius;
		bool bTraceComplex;
		bool bShowTrace;
		bool bPersistentShowTrace;
		struct FVector& HitLocation;
		struct FVector& HitNormal;
		struct FName& BoneName;
		struct FHitResult& OutHit;
		bool ReturnValue;

	}; K2_SphereTraceComponent_Params Params;

	Params.TraceStart = TraceStart;
	Params.TraceEnd = TraceEnd;
	Params.SphereRadius = SphereRadius;
	Params.bTraceComplex = bTraceComplex;
	Params.bShowTrace = bShowTrace;
	Params.bPersistentShowTrace = bPersistentShowTrace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	HitLocation = Params.HitLocation;
	HitNormal = Params.HitNormal;
	BoneName = Params.BoneName;
	OutHit = Params.OutHit;


	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.K2_SphereOverlapComponent
inline bool UPrimitiveComponent::K2_SphereOverlapComponent(struct FVector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector& HitLocation, struct FVector& HitNormal, struct FName& BoneName, struct FHitResult& OutHit) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.K2_SphereOverlapComponent");

	struct K2_SphereOverlapComponent_Params {
		struct FVector InSphereCentre;
		float InSphereRadius;
		bool bTraceComplex;
		bool bShowTrace;
		bool bPersistentShowTrace;
		struct FVector& HitLocation;
		struct FVector& HitNormal;
		struct FName& BoneName;
		struct FHitResult& OutHit;
		bool ReturnValue;

	}; K2_SphereOverlapComponent_Params Params;

	Params.InSphereCentre = InSphereCentre;
	Params.InSphereRadius = InSphereRadius;
	Params.bTraceComplex = bTraceComplex;
	Params.bShowTrace = bShowTrace;
	Params.bPersistentShowTrace = bPersistentShowTrace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	HitLocation = Params.HitLocation;
	HitNormal = Params.HitNormal;
	BoneName = Params.BoneName;
	OutHit = Params.OutHit;


	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.K2_LineTraceComponent
inline bool UPrimitiveComponent::K2_LineTraceComponent(struct FVector TraceStart, struct FVector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector& HitLocation, struct FVector& HitNormal, struct FName& BoneName, struct FHitResult& OutHit) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.K2_LineTraceComponent");

	struct K2_LineTraceComponent_Params {
		struct FVector TraceStart;
		struct FVector TraceEnd;
		bool bTraceComplex;
		bool bShowTrace;
		bool bPersistentShowTrace;
		struct FVector& HitLocation;
		struct FVector& HitNormal;
		struct FName& BoneName;
		struct FHitResult& OutHit;
		bool ReturnValue;

	}; K2_LineTraceComponent_Params Params;

	Params.TraceStart = TraceStart;
	Params.TraceEnd = TraceEnd;
	Params.bTraceComplex = bTraceComplex;
	Params.bShowTrace = bShowTrace;
	Params.bPersistentShowTrace = bPersistentShowTrace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	HitLocation = Params.HitLocation;
	HitNormal = Params.HitNormal;
	BoneName = Params.BoneName;
	OutHit = Params.OutHit;


	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.K2_IsQueryCollisionEnabled
inline bool UPrimitiveComponent::K2_IsQueryCollisionEnabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.K2_IsQueryCollisionEnabled");

	struct K2_IsQueryCollisionEnabled_Params {
		
		bool ReturnValue;

	}; K2_IsQueryCollisionEnabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.K2_IsPhysicsCollisionEnabled
inline bool UPrimitiveComponent::K2_IsPhysicsCollisionEnabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.K2_IsPhysicsCollisionEnabled");

	struct K2_IsPhysicsCollisionEnabled_Params {
		
		bool ReturnValue;

	}; K2_IsPhysicsCollisionEnabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.K2_IsCollisionEnabled
inline bool UPrimitiveComponent::K2_IsCollisionEnabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.K2_IsCollisionEnabled");

	struct K2_IsCollisionEnabled_Params {
		
		bool ReturnValue;

	}; K2_IsCollisionEnabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.K2_BoxOverlapComponent
inline bool UPrimitiveComponent::K2_BoxOverlapComponent(struct FVector InBoxCentre, struct FBox InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector& HitLocation, struct FVector& HitNormal, struct FName& BoneName, struct FHitResult& OutHit) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.K2_BoxOverlapComponent");

	struct K2_BoxOverlapComponent_Params {
		struct FVector InBoxCentre;
		struct FBox InBox;
		bool bTraceComplex;
		bool bShowTrace;
		bool bPersistentShowTrace;
		struct FVector& HitLocation;
		struct FVector& HitNormal;
		struct FName& BoneName;
		struct FHitResult& OutHit;
		bool ReturnValue;

	}; K2_BoxOverlapComponent_Params Params;

	Params.InBoxCentre = InBoxCentre;
	Params.InBox = InBox;
	Params.bTraceComplex = bTraceComplex;
	Params.bShowTrace = bShowTrace;
	Params.bPersistentShowTrace = bPersistentShowTrace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	HitLocation = Params.HitLocation;
	HitNormal = Params.HitNormal;
	BoneName = Params.BoneName;
	OutHit = Params.OutHit;


	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.IsOverlappingComponent
inline bool UPrimitiveComponent::IsOverlappingComponent(struct UPrimitiveComponent OtherComp) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.IsOverlappingComponent");

	struct IsOverlappingComponent_Params {
		struct UPrimitiveComponent OtherComp;
		bool ReturnValue;

	}; IsOverlappingComponent_Params Params;

	Params.OtherComp = OtherComp;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.IsOverlappingActor
inline bool UPrimitiveComponent::IsOverlappingActor(struct UActor Other) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.IsOverlappingActor");

	struct IsOverlappingActor_Params {
		struct UActor Other;
		bool ReturnValue;

	}; IsOverlappingActor_Params Params;

	Params.Other = Other;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.IsGravityEnabled
inline bool UPrimitiveComponent::IsGravityEnabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.IsGravityEnabled");

	struct IsGravityEnabled_Params {
		
		bool ReturnValue;

	}; IsGravityEnabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.IsAnyRigidBodyAwake
inline bool UPrimitiveComponent::IsAnyRigidBodyAwake() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.IsAnyRigidBodyAwake");

	struct IsAnyRigidBodyAwake_Params {
		
		bool ReturnValue;

	}; IsAnyRigidBodyAwake_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.IgnoreComponentWhenMoving
inline void UPrimitiveComponent::IgnoreComponentWhenMoving(struct UPrimitiveComponent Component, bool bShouldIgnore) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.IgnoreComponentWhenMoving");

	struct IgnoreComponentWhenMoving_Params {
		struct UPrimitiveComponent Component;
		bool bShouldIgnore;
	}; IgnoreComponentWhenMoving_Params Params;

	Params.Component = Component;
	Params.bShouldIgnore = bShouldIgnore;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.IgnoreActorWhenMoving
inline void UPrimitiveComponent::IgnoreActorWhenMoving(struct UActor Actor, bool bShouldIgnore) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.IgnoreActorWhenMoving");

	struct IgnoreActorWhenMoving_Params {
		struct UActor Actor;
		bool bShouldIgnore;
	}; IgnoreActorWhenMoving_Params Params;

	Params.Actor = Actor;
	Params.bShouldIgnore = bShouldIgnore;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.GetWalkableSlopeOverride
inline struct FWalkableSlopeOverride UPrimitiveComponent::GetWalkableSlopeOverride() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetWalkableSlopeOverride");

	struct GetWalkableSlopeOverride_Params {
		
		struct FWalkableSlopeOverride ReturnValue;

	}; GetWalkableSlopeOverride_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetPhysicsLinearVelocityAtPoint
inline struct FVector UPrimitiveComponent::GetPhysicsLinearVelocityAtPoint(struct FVector Point, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetPhysicsLinearVelocityAtPoint");

	struct GetPhysicsLinearVelocityAtPoint_Params {
		struct FVector Point;
		struct FName BoneName;
		struct FVector ReturnValue;

	}; GetPhysicsLinearVelocityAtPoint_Params Params;

	Params.Point = Point;
	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetPhysicsLinearVelocity
inline struct FVector UPrimitiveComponent::GetPhysicsLinearVelocity(struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetPhysicsLinearVelocity");

	struct GetPhysicsLinearVelocity_Params {
		struct FName BoneName;
		struct FVector ReturnValue;

	}; GetPhysicsLinearVelocity_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetPhysicsAngularVelocityInRadians
inline struct FVector UPrimitiveComponent::GetPhysicsAngularVelocityInRadians(struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetPhysicsAngularVelocityInRadians");

	struct GetPhysicsAngularVelocityInRadians_Params {
		struct FName BoneName;
		struct FVector ReturnValue;

	}; GetPhysicsAngularVelocityInRadians_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetPhysicsAngularVelocityInDegrees
inline struct FVector UPrimitiveComponent::GetPhysicsAngularVelocityInDegrees(struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetPhysicsAngularVelocityInDegrees");

	struct GetPhysicsAngularVelocityInDegrees_Params {
		struct FName BoneName;
		struct FVector ReturnValue;

	}; GetPhysicsAngularVelocityInDegrees_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetPhysicsAngularVelocity
inline struct FVector UPrimitiveComponent::GetPhysicsAngularVelocity(struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetPhysicsAngularVelocity");

	struct GetPhysicsAngularVelocity_Params {
		struct FName BoneName;
		struct FVector ReturnValue;

	}; GetPhysicsAngularVelocity_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetOverlappingComponents
inline void UPrimitiveComponent::GetOverlappingComponents(struct TArray<struct UPrimitiveComponent>& OutOverlappingComponents) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetOverlappingComponents");

	struct GetOverlappingComponents_Params {
		struct TArray<struct UPrimitiveComponent>& OutOverlappingComponents;
	}; GetOverlappingComponents_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutOverlappingComponents = Params.OutOverlappingComponents;

}

// Function Engine.PrimitiveComponent.GetOverlappingActors
inline void UPrimitiveComponent::GetOverlappingActors(struct TArray<struct UActor>& OverlappingActors, struct UClass* ClassFilter) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetOverlappingActors");

	struct GetOverlappingActors_Params {
		struct TArray<struct UActor>& OverlappingActors;
		struct UClass* ClassFilter;
	}; GetOverlappingActors_Params Params;

	Params.ClassFilter = ClassFilter;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OverlappingActors = Params.OverlappingActors;

}

// Function Engine.PrimitiveComponent.GetNumMaterials
inline int32_t UPrimitiveComponent::GetNumMaterials() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetNumMaterials");

	struct GetNumMaterials_Params {
		
		int32_t ReturnValue;

	}; GetNumMaterials_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetMaterialFromCollisionFaceIndex
inline struct UMaterialInterface UPrimitiveComponent::GetMaterialFromCollisionFaceIndex(int32_t FaceIndex, int32_t& SectionIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetMaterialFromCollisionFaceIndex");

	struct GetMaterialFromCollisionFaceIndex_Params {
		int32_t FaceIndex;
		int32_t& SectionIndex;
		struct UMaterialInterface ReturnValue;

	}; GetMaterialFromCollisionFaceIndex_Params Params;

	Params.FaceIndex = FaceIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SectionIndex = Params.SectionIndex;


	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetMaterial
inline struct UMaterialInterface UPrimitiveComponent::GetMaterial(int32_t ElementIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetMaterial");

	struct GetMaterial_Params {
		int32_t ElementIndex;
		struct UMaterialInterface ReturnValue;

	}; GetMaterial_Params Params;

	Params.ElementIndex = ElementIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetMassScale
inline float UPrimitiveComponent::GetMassScale(struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetMassScale");

	struct GetMassScale_Params {
		struct FName BoneName;
		float ReturnValue;

	}; GetMassScale_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetMass
inline float UPrimitiveComponent::GetMass() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetMass");

	struct GetMass_Params {
		
		float ReturnValue;

	}; GetMass_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetLinearDamping
inline float UPrimitiveComponent::GetLinearDamping() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetLinearDamping");

	struct GetLinearDamping_Params {
		
		float ReturnValue;

	}; GetLinearDamping_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetInertiaTensor
inline struct FVector UPrimitiveComponent::GetInertiaTensor(struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetInertiaTensor");

	struct GetInertiaTensor_Params {
		struct FName BoneName;
		struct FVector ReturnValue;

	}; GetInertiaTensor_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetGenerateOverlapEvents
inline bool UPrimitiveComponent::GetGenerateOverlapEvents() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetGenerateOverlapEvents");

	struct GetGenerateOverlapEvents_Params {
		
		bool ReturnValue;

	}; GetGenerateOverlapEvents_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetCollisionResponseToChannel
inline enum class ECollisionResponse UPrimitiveComponent::GetCollisionResponseToChannel(enum class ECollisionChannel Channel) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetCollisionResponseToChannel");

	struct GetCollisionResponseToChannel_Params {
		enum class ECollisionChannel Channel;
		enum class ECollisionResponse ReturnValue;

	}; GetCollisionResponseToChannel_Params Params;

	Params.Channel = Channel;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetCollisionProfileName
inline struct FName UPrimitiveComponent::GetCollisionProfileName() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetCollisionProfileName");

	struct GetCollisionProfileName_Params {
		
		struct FName ReturnValue;

	}; GetCollisionProfileName_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetCollisionObjectType
inline enum class ECollisionChannel UPrimitiveComponent::GetCollisionObjectType() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetCollisionObjectType");

	struct GetCollisionObjectType_Params {
		
		enum class ECollisionChannel ReturnValue;

	}; GetCollisionObjectType_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetCollisionEnabled
inline enum class ECollisionEnabled UPrimitiveComponent::GetCollisionEnabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetCollisionEnabled");

	struct GetCollisionEnabled_Params {
		
		enum class ECollisionEnabled ReturnValue;

	}; GetCollisionEnabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetClosestPointOnCollision
inline float UPrimitiveComponent::GetClosestPointOnCollision(struct FVector& Point, struct FVector& OutPointOnBody, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetClosestPointOnCollision");

	struct GetClosestPointOnCollision_Params {
		struct FVector& Point;
		struct FVector& OutPointOnBody;
		struct FName BoneName;
		float ReturnValue;

	}; GetClosestPointOnCollision_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Point = Params.Point;
	OutPointOnBody = Params.OutPointOnBody;


	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetCenterOfMass
inline struct FVector UPrimitiveComponent::GetCenterOfMass(struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetCenterOfMass");

	struct GetCenterOfMass_Params {
		struct FName BoneName;
		struct FVector ReturnValue;

	}; GetCenterOfMass_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetAngularDamping
inline float UPrimitiveComponent::GetAngularDamping() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetAngularDamping");

	struct GetAngularDamping_Params {
		
		float ReturnValue;

	}; GetAngularDamping_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.CreateDynamicMaterialInstance
inline struct UMaterialInstanceDynamic UPrimitiveComponent::CreateDynamicMaterialInstance(int32_t ElementIndex, struct UMaterialInterface SourceMaterial, struct FName OptionalName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.CreateDynamicMaterialInstance");

	struct CreateDynamicMaterialInstance_Params {
		int32_t ElementIndex;
		struct UMaterialInterface SourceMaterial;
		struct FName OptionalName;
		struct UMaterialInstanceDynamic ReturnValue;

	}; CreateDynamicMaterialInstance_Params Params;

	Params.ElementIndex = ElementIndex;
	Params.SourceMaterial = SourceMaterial;
	Params.OptionalName = OptionalName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamicFromMaterial
inline struct UMaterialInstanceDynamic UPrimitiveComponent::CreateAndSetMaterialInstanceDynamicFromMaterial(int32_t ElementIndex, struct UMaterialInterface Parent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamicFromMaterial");

	struct CreateAndSetMaterialInstanceDynamicFromMaterial_Params {
		int32_t ElementIndex;
		struct UMaterialInterface Parent;
		struct UMaterialInstanceDynamic ReturnValue;

	}; CreateAndSetMaterialInstanceDynamicFromMaterial_Params Params;

	Params.ElementIndex = ElementIndex;
	Params.Parent = Parent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamic
inline struct UMaterialInstanceDynamic UPrimitiveComponent::CreateAndSetMaterialInstanceDynamic(int32_t ElementIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamic");

	struct CreateAndSetMaterialInstanceDynamic_Params {
		int32_t ElementIndex;
		struct UMaterialInstanceDynamic ReturnValue;

	}; CreateAndSetMaterialInstanceDynamic_Params Params;

	Params.ElementIndex = ElementIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreComponents
inline struct TArray<struct UPrimitiveComponent> UPrimitiveComponent::CopyArrayOfMoveIgnoreComponents() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreComponents");

	struct CopyArrayOfMoveIgnoreComponents_Params {
		
		struct TArray<struct UPrimitiveComponent> ReturnValue;

	}; CopyArrayOfMoveIgnoreComponents_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreActors
inline struct TArray<struct UActor> UPrimitiveComponent::CopyArrayOfMoveIgnoreActors() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreActors");

	struct CopyArrayOfMoveIgnoreActors_Params {
		
		struct TArray<struct UActor> ReturnValue;

	}; CopyArrayOfMoveIgnoreActors_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.ClearMoveIgnoreComponents
inline void UPrimitiveComponent::ClearMoveIgnoreComponents() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.ClearMoveIgnoreComponents");

	struct ClearMoveIgnoreComponents_Params {
		
	}; ClearMoveIgnoreComponents_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.ClearMoveIgnoreActors
inline void UPrimitiveComponent::ClearMoveIgnoreActors() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.ClearMoveIgnoreActors");

	struct ClearMoveIgnoreActors_Params {
		
	}; ClearMoveIgnoreActors_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.CanCharacterStepUp
inline bool UPrimitiveComponent::CanCharacterStepUp(struct APawn Pawn) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.CanCharacterStepUp");

	struct CanCharacterStepUp_Params {
		struct APawn Pawn;
		bool ReturnValue;

	}; CanCharacterStepUp_Params Params;

	Params.Pawn = Pawn;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.AddTorqueInRadians
inline void UPrimitiveComponent::AddTorqueInRadians(struct FVector Torque, struct FName BoneName, bool bAccelChange) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddTorqueInRadians");

	struct AddTorqueInRadians_Params {
		struct FVector Torque;
		struct FName BoneName;
		bool bAccelChange;
	}; AddTorqueInRadians_Params Params;

	Params.Torque = Torque;
	Params.BoneName = BoneName;
	Params.bAccelChange = bAccelChange;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.AddTorqueInDegrees
inline void UPrimitiveComponent::AddTorqueInDegrees(struct FVector Torque, struct FName BoneName, bool bAccelChange) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddTorqueInDegrees");

	struct AddTorqueInDegrees_Params {
		struct FVector Torque;
		struct FName BoneName;
		bool bAccelChange;
	}; AddTorqueInDegrees_Params Params;

	Params.Torque = Torque;
	Params.BoneName = BoneName;
	Params.bAccelChange = bAccelChange;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.AddTorque
inline void UPrimitiveComponent::AddTorque(struct FVector Torque, struct FName BoneName, bool bAccelChange) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddTorque");

	struct AddTorque_Params {
		struct FVector Torque;
		struct FName BoneName;
		bool bAccelChange;
	}; AddTorque_Params Params;

	Params.Torque = Torque;
	Params.BoneName = BoneName;
	Params.bAccelChange = bAccelChange;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.AddRadialImpulse
inline void UPrimitiveComponent::AddRadialImpulse(struct FVector Origin, float Radius, float Strength, enum class ERadialImpulseFalloff Falloff, bool bVelChange) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddRadialImpulse");

	struct AddRadialImpulse_Params {
		struct FVector Origin;
		float Radius;
		float Strength;
		enum class ERadialImpulseFalloff Falloff;
		bool bVelChange;
	}; AddRadialImpulse_Params Params;

	Params.Origin = Origin;
	Params.Radius = Radius;
	Params.Strength = Strength;
	Params.Falloff = Falloff;
	Params.bVelChange = bVelChange;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.AddRadialForce
inline void UPrimitiveComponent::AddRadialForce(struct FVector Origin, float Radius, float Strength, enum class ERadialImpulseFalloff Falloff, bool bAccelChange) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddRadialForce");

	struct AddRadialForce_Params {
		struct FVector Origin;
		float Radius;
		float Strength;
		enum class ERadialImpulseFalloff Falloff;
		bool bAccelChange;
	}; AddRadialForce_Params Params;

	Params.Origin = Origin;
	Params.Radius = Radius;
	Params.Strength = Strength;
	Params.Falloff = Falloff;
	Params.bAccelChange = bAccelChange;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.AddImpulseAtLocation
inline void UPrimitiveComponent::AddImpulseAtLocation(struct FVector Impulse, struct FVector Location, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddImpulseAtLocation");

	struct AddImpulseAtLocation_Params {
		struct FVector Impulse;
		struct FVector Location;
		struct FName BoneName;
	}; AddImpulseAtLocation_Params Params;

	Params.Impulse = Impulse;
	Params.Location = Location;
	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.AddImpulse
inline void UPrimitiveComponent::AddImpulse(struct FVector Impulse, struct FName BoneName, bool bVelChange) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddImpulse");

	struct AddImpulse_Params {
		struct FVector Impulse;
		struct FName BoneName;
		bool bVelChange;
	}; AddImpulse_Params Params;

	Params.Impulse = Impulse;
	Params.BoneName = BoneName;
	Params.bVelChange = bVelChange;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.AddForceAtLocationLocal
inline void UPrimitiveComponent::AddForceAtLocationLocal(struct FVector Force, struct FVector Location, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddForceAtLocationLocal");

	struct AddForceAtLocationLocal_Params {
		struct FVector Force;
		struct FVector Location;
		struct FName BoneName;
	}; AddForceAtLocationLocal_Params Params;

	Params.Force = Force;
	Params.Location = Location;
	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.AddForceAtLocation
inline void UPrimitiveComponent::AddForceAtLocation(struct FVector Force, struct FVector Location, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddForceAtLocation");

	struct AddForceAtLocation_Params {
		struct FVector Force;
		struct FVector Location;
		struct FName BoneName;
	}; AddForceAtLocation_Params Params;

	Params.Force = Force;
	Params.Location = Location;
	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.AddForce
inline void UPrimitiveComponent::AddForce(struct FVector Force, struct FName BoneName, bool bAccelChange) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddForce");

	struct AddForce_Params {
		struct FVector Force;
		struct FName BoneName;
		bool bAccelChange;
	}; AddForce_Params Params;

	Params.Force = Force;
	Params.BoneName = BoneName;
	Params.bAccelChange = bAccelChange;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.AddAngularImpulseInRadians
inline void UPrimitiveComponent::AddAngularImpulseInRadians(struct FVector Impulse, struct FName BoneName, bool bVelChange) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddAngularImpulseInRadians");

	struct AddAngularImpulseInRadians_Params {
		struct FVector Impulse;
		struct FName BoneName;
		bool bVelChange;
	}; AddAngularImpulseInRadians_Params Params;

	Params.Impulse = Impulse;
	Params.BoneName = BoneName;
	Params.bVelChange = bVelChange;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.AddAngularImpulseInDegrees
inline void UPrimitiveComponent::AddAngularImpulseInDegrees(struct FVector Impulse, struct FName BoneName, bool bVelChange) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddAngularImpulseInDegrees");

	struct AddAngularImpulseInDegrees_Params {
		struct FVector Impulse;
		struct FName BoneName;
		bool bVelChange;
	}; AddAngularImpulseInDegrees_Params Params;

	Params.Impulse = Impulse;
	Params.BoneName = BoneName;
	Params.bVelChange = bVelChange;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.AddAngularImpulse
inline void UPrimitiveComponent::AddAngularImpulse(struct FVector Impulse, struct FName BoneName, bool bVelChange) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddAngularImpulse");

	struct AddAngularImpulse_Params {
		struct FVector Impulse;
		struct FName BoneName;
		bool bVelChange;
	}; AddAngularImpulse_Params Params;

	Params.Impulse = Impulse;
	Params.BoneName = BoneName;
	Params.bVelChange = bVelChange;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.BoxComponent.SetBoxExtent
inline void UBoxComponent::SetBoxExtent(struct FVector InBoxExtent, bool bUpdateOverlaps) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BoxComponent.SetBoxExtent");

	struct SetBoxExtent_Params {
		struct FVector InBoxExtent;
		bool bUpdateOverlaps;
	}; SetBoxExtent_Params Params;

	Params.InBoxExtent = InBoxExtent;
	Params.bUpdateOverlaps = bUpdateOverlaps;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.BoxComponent.GetUnscaledBoxExtent
inline struct FVector UBoxComponent::GetUnscaledBoxExtent() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BoxComponent.GetUnscaledBoxExtent");

	struct GetUnscaledBoxExtent_Params {
		
		struct FVector ReturnValue;

	}; GetUnscaledBoxExtent_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.BoxComponent.GetScaledBoxExtent
inline struct FVector UBoxComponent::GetScaledBoxExtent() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BoxComponent.GetScaledBoxExtent");

	struct GetScaledBoxExtent_Params {
		
		struct FVector ReturnValue;

	}; GetScaledBoxExtent_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MeshComponent.SetVectorParameterValueOnMaterials
inline void UMeshComponent::SetVectorParameterValueOnMaterials(struct FName ParameterName, struct FVector ParameterValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.SetVectorParameterValueOnMaterials");

	struct SetVectorParameterValueOnMaterials_Params {
		struct FName ParameterName;
		struct FVector ParameterValue;
	}; SetVectorParameterValueOnMaterials_Params Params;

	Params.ParameterName = ParameterName;
	Params.ParameterValue = ParameterValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MeshComponent.SetScalarParameterValueOnMaterials
inline void UMeshComponent::SetScalarParameterValueOnMaterials(struct FName ParameterName, float ParameterValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.SetScalarParameterValueOnMaterials");

	struct SetScalarParameterValueOnMaterials_Params {
		struct FName ParameterName;
		float ParameterValue;
	}; SetScalarParameterValueOnMaterials_Params Params;

	Params.ParameterName = ParameterName;
	Params.ParameterValue = ParameterValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MeshComponent.PrestreamTextures
inline void UMeshComponent::PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int32_t CinematicTextureGroups) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.PrestreamTextures");

	struct PrestreamTextures_Params {
		float Seconds;
		bool bPrioritizeCharacterTextures;
		int32_t CinematicTextureGroups;
	}; PrestreamTextures_Params Params;

	Params.Seconds = Seconds;
	Params.bPrioritizeCharacterTextures = bPrioritizeCharacterTextures;
	Params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MeshComponent.IsMaterialSlotNameValid
inline bool UMeshComponent::IsMaterialSlotNameValid(struct FName MaterialSlotName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.IsMaterialSlotNameValid");

	struct IsMaterialSlotNameValid_Params {
		struct FName MaterialSlotName;
		bool ReturnValue;

	}; IsMaterialSlotNameValid_Params Params;

	Params.MaterialSlotName = MaterialSlotName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MeshComponent.GetMaterialSlotNames
inline struct TArray<struct FName> UMeshComponent::GetMaterialSlotNames() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.GetMaterialSlotNames");

	struct GetMaterialSlotNames_Params {
		
		struct TArray<struct FName> ReturnValue;

	}; GetMaterialSlotNames_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MeshComponent.GetMaterials
inline struct TArray<struct UMaterialInterface> UMeshComponent::GetMaterials() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.GetMaterials");

	struct GetMaterials_Params {
		
		struct TArray<struct UMaterialInterface> ReturnValue;

	}; GetMaterials_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MeshComponent.GetMaterialIndex
inline int32_t UMeshComponent::GetMaterialIndex(struct FName MaterialSlotName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.GetMaterialIndex");

	struct GetMaterialIndex_Params {
		struct FName MaterialSlotName;
		int32_t ReturnValue;

	}; GetMaterialIndex_Params Params;

	Params.MaterialSlotName = MaterialSlotName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.UnloadSkinWeightProfile
inline void USkinnedMeshComponent::UnloadSkinWeightProfile(struct FName InProfileName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.UnloadSkinWeightProfile");

	struct UnloadSkinWeightProfile_Params {
		struct FName InProfileName;
	}; UnloadSkinWeightProfile_Params Params;

	Params.InProfileName = InProfileName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.UnHideBoneByName
inline void USkinnedMeshComponent::UnHideBoneByName(struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.UnHideBoneByName");

	struct UnHideBoneByName_Params {
		struct FName BoneName;
	}; UnHideBoneByName_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.TransformToBoneSpace
inline void USkinnedMeshComponent::TransformToBoneSpace(struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector& OutPosition, struct FRotator& OutRotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.TransformToBoneSpace");

	struct TransformToBoneSpace_Params {
		struct FName BoneName;
		struct FVector InPosition;
		struct FRotator InRotation;
		struct FVector& OutPosition;
		struct FRotator& OutRotation;
	}; TransformToBoneSpace_Params Params;

	Params.BoneName = BoneName;
	Params.InPosition = InPosition;
	Params.InRotation = InRotation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutPosition = Params.OutPosition;
	OutRotation = Params.OutRotation;

}

// Function Engine.SkinnedMeshComponent.TransformFromBoneSpace
inline void USkinnedMeshComponent::TransformFromBoneSpace(struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector& OutPosition, struct FRotator& OutRotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.TransformFromBoneSpace");

	struct TransformFromBoneSpace_Params {
		struct FName BoneName;
		struct FVector InPosition;
		struct FRotator InRotation;
		struct FVector& OutPosition;
		struct FRotator& OutRotation;
	}; TransformFromBoneSpace_Params Params;

	Params.BoneName = BoneName;
	Params.InPosition = InPosition;
	Params.InRotation = InRotation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutPosition = Params.OutPosition;
	OutRotation = Params.OutRotation;

}

// Function Engine.SkinnedMeshComponent.ShowMaterialSection
inline void USkinnedMeshComponent::ShowMaterialSection(int32_t MaterialID, int32_t SectionIndex, bool bShow, int32_t LODIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.ShowMaterialSection");

	struct ShowMaterialSection_Params {
		int32_t MaterialID;
		int32_t SectionIndex;
		bool bShow;
		int32_t LODIndex;
	}; ShowMaterialSection_Params Params;

	Params.MaterialID = MaterialID;
	Params.SectionIndex = SectionIndex;
	Params.bShow = bShow;
	Params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.ShowAllMaterialSections
inline void USkinnedMeshComponent::ShowAllMaterialSections(int32_t LODIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.ShowAllMaterialSections");

	struct ShowAllMaterialSections_Params {
		int32_t LODIndex;
	}; ShowAllMaterialSections_Params Params;

	Params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.SetVertexColorOverride_LinearColor
inline void USkinnedMeshComponent::SetVertexColorOverride_LinearColor(int32_t LODIndex, struct TArray<struct FLinearColor>& VertexColors) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetVertexColorOverride_LinearColor");

	struct SetVertexColorOverride_LinearColor_Params {
		int32_t LODIndex;
		struct TArray<struct FLinearColor>& VertexColors;
	}; SetVertexColorOverride_LinearColor_Params Params;

	Params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	VertexColors = Params.VertexColors;

}

// Function Engine.SkinnedMeshComponent.SetSkinWeightProfile
inline bool USkinnedMeshComponent::SetSkinWeightProfile(struct FName InProfileName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetSkinWeightProfile");

	struct SetSkinWeightProfile_Params {
		struct FName InProfileName;
		bool ReturnValue;

	}; SetSkinWeightProfile_Params Params;

	Params.InProfileName = InProfileName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.SetSkinWeightOverride
inline void USkinnedMeshComponent::SetSkinWeightOverride(int32_t LODIndex, struct TArray<struct FSkelMeshSkinWeightInfo>& SkinWeights) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetSkinWeightOverride");

	struct SetSkinWeightOverride_Params {
		int32_t LODIndex;
		struct TArray<struct FSkelMeshSkinWeightInfo>& SkinWeights;
	}; SetSkinWeightOverride_Params Params;

	Params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SkinWeights = Params.SkinWeights;

}

// Function Engine.SkinnedMeshComponent.SetSkeletalMesh
inline void USkinnedMeshComponent::SetSkeletalMesh(struct USkeletalMesh NewMesh, bool bReinitPose) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetSkeletalMesh");

	struct SetSkeletalMesh_Params {
		struct USkeletalMesh NewMesh;
		bool bReinitPose;
	}; SetSkeletalMesh_Params Params;

	Params.NewMesh = NewMesh;
	Params.bReinitPose = bReinitPose;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.SetRenderStatic
inline void USkinnedMeshComponent::SetRenderStatic(bool bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetRenderStatic");

	struct SetRenderStatic_Params {
		bool bNewValue;
	}; SetRenderStatic_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.SetPhysicsAsset
inline void USkinnedMeshComponent::SetPhysicsAsset(struct UPhysicsAsset NewPhysicsAsset, bool bForceReInit) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetPhysicsAsset");

	struct SetPhysicsAsset_Params {
		struct UPhysicsAsset NewPhysicsAsset;
		bool bForceReInit;
	}; SetPhysicsAsset_Params Params;

	Params.NewPhysicsAsset = NewPhysicsAsset;
	Params.bForceReInit = bForceReInit;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.SetMinLOD
inline void USkinnedMeshComponent::SetMinLOD(int32_t InNewMinLOD) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetMinLOD");

	struct SetMinLOD_Params {
		int32_t InNewMinLOD;
	}; SetMinLOD_Params Params;

	Params.InNewMinLOD = InNewMinLOD;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.SetMasterPoseComponent
inline void USkinnedMeshComponent::SetMasterPoseComponent(struct USkinnedMeshComponent NewMasterBoneComponent, bool bForceUpdate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetMasterPoseComponent");

	struct SetMasterPoseComponent_Params {
		struct USkinnedMeshComponent NewMasterBoneComponent;
		bool bForceUpdate;
	}; SetMasterPoseComponent_Params Params;

	Params.NewMasterBoneComponent = NewMasterBoneComponent;
	Params.bForceUpdate = bForceUpdate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.SetForcedLOD
inline void USkinnedMeshComponent::SetForcedLOD(int32_t InNewForcedLOD) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetForcedLOD");

	struct SetForcedLOD_Params {
		int32_t InNewForcedLOD;
	}; SetForcedLOD_Params Params;

	Params.InNewForcedLOD = InNewForcedLOD;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.SetCastCapsuleIndirectShadow
inline void USkinnedMeshComponent::SetCastCapsuleIndirectShadow(bool bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetCastCapsuleIndirectShadow");

	struct SetCastCapsuleIndirectShadow_Params {
		bool bNewValue;
	}; SetCastCapsuleIndirectShadow_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.SetCastCapsuleDirectShadow
inline void USkinnedMeshComponent::SetCastCapsuleDirectShadow(bool bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetCastCapsuleDirectShadow");

	struct SetCastCapsuleDirectShadow_Params {
		bool bNewValue;
	}; SetCastCapsuleDirectShadow_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.SetCapsuleIndirectShadowMinVisibility
inline void USkinnedMeshComponent::SetCapsuleIndirectShadowMinVisibility(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetCapsuleIndirectShadowMinVisibility");

	struct SetCapsuleIndirectShadowMinVisibility_Params {
		float NewValue;
	}; SetCapsuleIndirectShadowMinVisibility_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.IsUsingSkinWeightProfile
inline bool USkinnedMeshComponent::IsUsingSkinWeightProfile() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.IsUsingSkinWeightProfile");

	struct IsUsingSkinWeightProfile_Params {
		
		bool ReturnValue;

	}; IsUsingSkinWeightProfile_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.IsMaterialSectionShown
inline bool USkinnedMeshComponent::IsMaterialSectionShown(int32_t MaterialID, int32_t LODIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.IsMaterialSectionShown");

	struct IsMaterialSectionShown_Params {
		int32_t MaterialID;
		int32_t LODIndex;
		bool ReturnValue;

	}; IsMaterialSectionShown_Params Params;

	Params.MaterialID = MaterialID;
	Params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.IsBoneHiddenByName
inline bool USkinnedMeshComponent::IsBoneHiddenByName(struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.IsBoneHiddenByName");

	struct IsBoneHiddenByName_Params {
		struct FName BoneName;
		bool ReturnValue;

	}; IsBoneHiddenByName_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.HideBoneByName
inline void USkinnedMeshComponent::HideBoneByName(struct FName BoneName, enum class EPhysBodyOp PhysBodyOption) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.HideBoneByName");

	struct HideBoneByName_Params {
		struct FName BoneName;
		enum class EPhysBodyOp PhysBodyOption;
	}; HideBoneByName_Params Params;

	Params.BoneName = BoneName;
	Params.PhysBodyOption = PhysBodyOption;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.GetTwistAndSwingAngleOfDeltaRotationFromRefPose
inline bool USkinnedMeshComponent::GetTwistAndSwingAngleOfDeltaRotationFromRefPose(struct FName BoneName, float& OutTwistAngle, float& OutSwingAngle) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.GetTwistAndSwingAngleOfDeltaRotationFromRefPose");

	struct GetTwistAndSwingAngleOfDeltaRotationFromRefPose_Params {
		struct FName BoneName;
		float& OutTwistAngle;
		float& OutSwingAngle;
		bool ReturnValue;

	}; GetTwistAndSwingAngleOfDeltaRotationFromRefPose_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutTwistAngle = Params.OutTwistAngle;
	OutSwingAngle = Params.OutSwingAngle;


	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.GetSocketBoneName
inline struct FName USkinnedMeshComponent::GetSocketBoneName(struct FName InSocketName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.GetSocketBoneName");

	struct GetSocketBoneName_Params {
		struct FName InSocketName;
		struct FName ReturnValue;

	}; GetSocketBoneName_Params Params;

	Params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.GetRefPosePosition
inline struct FVector USkinnedMeshComponent::GetRefPosePosition(int32_t BoneIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.GetRefPosePosition");

	struct GetRefPosePosition_Params {
		int32_t BoneIndex;
		struct FVector ReturnValue;

	}; GetRefPosePosition_Params Params;

	Params.BoneIndex = BoneIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.GetParentBone
inline struct FName USkinnedMeshComponent::GetParentBone(struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.GetParentBone");

	struct GetParentBone_Params {
		struct FName BoneName;
		struct FName ReturnValue;

	}; GetParentBone_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.GetNumLODs
inline int32_t USkinnedMeshComponent::GetNumLODs() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.GetNumLODs");

	struct GetNumLODs_Params {
		
		int32_t ReturnValue;

	}; GetNumLODs_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.GetNumBones
inline int32_t USkinnedMeshComponent::GetNumBones() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.GetNumBones");

	struct GetNumBones_Params {
		
		int32_t ReturnValue;

	}; GetNumBones_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.GetForcedLOD
inline int32_t USkinnedMeshComponent::GetForcedLOD() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.GetForcedLOD");

	struct GetForcedLOD_Params {
		
		int32_t ReturnValue;

	}; GetForcedLOD_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.GetDeltaTransformFromRefPose
inline struct FTransform USkinnedMeshComponent::GetDeltaTransformFromRefPose(struct FName BoneName, struct FName BaseName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.GetDeltaTransformFromRefPose");

	struct GetDeltaTransformFromRefPose_Params {
		struct FName BoneName;
		struct FName BaseName;
		struct FTransform ReturnValue;

	}; GetDeltaTransformFromRefPose_Params Params;

	Params.BoneName = BoneName;
	Params.BaseName = BaseName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.GetCurrentSkinWeightProfileName
inline struct FName USkinnedMeshComponent::GetCurrentSkinWeightProfileName() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.GetCurrentSkinWeightProfileName");

	struct GetCurrentSkinWeightProfileName_Params {
		
		struct FName ReturnValue;

	}; GetCurrentSkinWeightProfileName_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.GetBoneName
inline struct FName USkinnedMeshComponent::GetBoneName(int32_t BoneIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.GetBoneName");

	struct GetBoneName_Params {
		int32_t BoneIndex;
		struct FName ReturnValue;

	}; GetBoneName_Params Params;

	Params.BoneIndex = BoneIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.GetBoneIndex
inline int32_t USkinnedMeshComponent::GetBoneIndex(struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.GetBoneIndex");

	struct GetBoneIndex_Params {
		struct FName BoneName;
		int32_t ReturnValue;

	}; GetBoneIndex_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.FindClosestBone_K2
inline struct FName USkinnedMeshComponent::FindClosestBone_K2(struct FVector TestLocation, struct FVector& BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.FindClosestBone_K2");

	struct FindClosestBone_K2_Params {
		struct FVector TestLocation;
		struct FVector& BoneLocation;
		float IgnoreScale;
		bool bRequirePhysicsAsset;
		struct FName ReturnValue;

	}; FindClosestBone_K2_Params Params;

	Params.TestLocation = TestLocation;
	Params.IgnoreScale = IgnoreScale;
	Params.bRequirePhysicsAsset = bRequirePhysicsAsset;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	BoneLocation = Params.BoneLocation;


	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.ClearVertexColorOverride
inline void USkinnedMeshComponent::ClearVertexColorOverride(int32_t LODIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.ClearVertexColorOverride");

	struct ClearVertexColorOverride_Params {
		int32_t LODIndex;
	}; ClearVertexColorOverride_Params Params;

	Params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.ClearSkinWeightProfile
inline void USkinnedMeshComponent::ClearSkinWeightProfile() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.ClearSkinWeightProfile");

	struct ClearSkinWeightProfile_Params {
		
	}; ClearSkinWeightProfile_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.ClearSkinWeightOverride
inline void USkinnedMeshComponent::ClearSkinWeightOverride(int32_t LODIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.ClearSkinWeightOverride");

	struct ClearSkinWeightOverride_Params {
		int32_t LODIndex;
	}; ClearSkinWeightOverride_Params Params;

	Params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.BoneIsChildOf
inline bool USkinnedMeshComponent::BoneIsChildOf(struct FName BoneName, struct FName ParentBoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.BoneIsChildOf");

	struct BoneIsChildOf_Params {
		struct FName BoneName;
		struct FName ParentBoneName;
		bool ReturnValue;

	}; BoneIsChildOf_Params Params;

	Params.BoneName = BoneName;
	Params.ParentBoneName = ParentBoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMesh.SetLODSettings
inline void USkeletalMesh::SetLODSettings(struct USkeletalMeshLODSettings InLODSettings) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMesh.SetLODSettings");

	struct SetLODSettings_Params {
		struct USkeletalMeshLODSettings InLODSettings;
	}; SetLODSettings_Params Params;

	Params.InLODSettings = InLODSettings;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMesh.NumSockets
inline int32_t USkeletalMesh::NumSockets() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMesh.NumSockets");

	struct NumSockets_Params {
		
		int32_t ReturnValue;

	}; NumSockets_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMesh.K2_GetAllMorphTargetNames
inline struct TArray<struct FString> USkeletalMesh::K2_GetAllMorphTargetNames() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMesh.K2_GetAllMorphTargetNames");

	struct K2_GetAllMorphTargetNames_Params {
		
		struct TArray<struct FString> ReturnValue;

	}; K2_GetAllMorphTargetNames_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMesh.IsSectionUsingCloth
inline bool USkeletalMesh::IsSectionUsingCloth(int32_t InSectionIndex, bool bCheckCorrespondingSections) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMesh.IsSectionUsingCloth");

	struct IsSectionUsingCloth_Params {
		int32_t InSectionIndex;
		bool bCheckCorrespondingSections;
		bool ReturnValue;

	}; IsSectionUsingCloth_Params Params;

	Params.InSectionIndex = InSectionIndex;
	Params.bCheckCorrespondingSections = bCheckCorrespondingSections;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMesh.GetSocketByIndex
inline struct USkeletalMeshSocket USkeletalMesh::GetSocketByIndex(int32_t Index) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMesh.GetSocketByIndex");

	struct GetSocketByIndex_Params {
		int32_t Index;
		struct USkeletalMeshSocket ReturnValue;

	}; GetSocketByIndex_Params Params;

	Params.Index = Index;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMesh.GetNodeMappingContainer
inline struct UNodeMappingContainer USkeletalMesh::GetNodeMappingContainer(struct UBlueprint SourceAsset) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMesh.GetNodeMappingContainer");

	struct GetNodeMappingContainer_Params {
		struct UBlueprint SourceAsset;
		struct UNodeMappingContainer ReturnValue;

	}; GetNodeMappingContainer_Params Params;

	Params.SourceAsset = SourceAsset;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMesh.GetImportedBounds
inline struct FBoxSphereBounds USkeletalMesh::GetImportedBounds() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMesh.GetImportedBounds");

	struct GetImportedBounds_Params {
		
		struct FBoxSphereBounds ReturnValue;

	}; GetImportedBounds_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMesh.GetBounds
inline struct FBoxSphereBounds USkeletalMesh::GetBounds() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMesh.GetBounds");

	struct GetBounds_Params {
		
		struct FBoxSphereBounds ReturnValue;

	}; GetBounds_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMesh.FindSocketInfo
inline struct USkeletalMeshSocket USkeletalMesh::FindSocketInfo(struct FName InSocketName, struct FTransform& OutTransform, int32_t& OutBoneIndex, int32_t& OutIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMesh.FindSocketInfo");

	struct FindSocketInfo_Params {
		struct FName InSocketName;
		struct FTransform& OutTransform;
		int32_t& OutBoneIndex;
		int32_t& OutIndex;
		struct USkeletalMeshSocket ReturnValue;

	}; FindSocketInfo_Params Params;

	Params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutTransform = Params.OutTransform;
	OutBoneIndex = Params.OutBoneIndex;
	OutIndex = Params.OutIndex;


	return params.ReturnValue;
}

// Function Engine.SkeletalMesh.FindSocketAndIndex
inline struct USkeletalMeshSocket USkeletalMesh::FindSocketAndIndex(struct FName InSocketName, int32_t& OutIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMesh.FindSocketAndIndex");

	struct FindSocketAndIndex_Params {
		struct FName InSocketName;
		int32_t& OutIndex;
		struct USkeletalMeshSocket ReturnValue;

	}; FindSocketAndIndex_Params Params;

	Params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutIndex = Params.OutIndex;


	return params.ReturnValue;
}

// Function Engine.SkeletalMesh.FindSocket
inline struct USkeletalMeshSocket USkeletalMesh::FindSocket(struct FName InSocketName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMesh.FindSocket");

	struct FindSocket_Params {
		struct FName InSocketName;
		struct USkeletalMeshSocket ReturnValue;

	}; FindSocket_Params Params;

	Params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Pawn.SpawnDefaultController
inline void APawn::SpawnDefaultController() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SpawnDefaultController");

	struct SpawnDefaultController_Params {
		
	}; SpawnDefaultController_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Pawn.SetCanAffectNavigationGeneration
inline void APawn::SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetCanAffectNavigationGeneration");

	struct SetCanAffectNavigationGeneration_Params {
		bool bNewValue;
		bool bForceUpdate;
	}; SetCanAffectNavigationGeneration_Params Params;

	Params.bNewValue = bNewValue;
	Params.bForceUpdate = bForceUpdate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Pawn.ReceiveUnpossessed
inline void APawn::ReceiveUnpossessed(struct AController OldController) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ReceiveUnpossessed");

	struct ReceiveUnpossessed_Params {
		struct AController OldController;
	}; ReceiveUnpossessed_Params Params;

	Params.OldController = OldController;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Pawn.ReceivePossessed
inline void APawn::ReceivePossessed(struct AController NewController) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ReceivePossessed");

	struct ReceivePossessed_Params {
		struct AController NewController;
	}; ReceivePossessed_Params Params;

	Params.NewController = NewController;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Pawn.PawnMakeNoise
inline void APawn::PawnMakeNoise(float Loudness, struct FVector NoiseLocation, bool bUseNoiseMakerLocation, struct UActor NoiseMaker) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PawnMakeNoise");

	struct PawnMakeNoise_Params {
		float Loudness;
		struct FVector NoiseLocation;
		bool bUseNoiseMakerLocation;
		struct UActor NoiseMaker;
	}; PawnMakeNoise_Params Params;

	Params.Loudness = Loudness;
	Params.NoiseLocation = NoiseLocation;
	Params.bUseNoiseMakerLocation = bUseNoiseMakerLocation;
	Params.NoiseMaker = NoiseMaker;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Pawn.OnRep_PlayerState
inline void APawn::OnRep_PlayerState() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OnRep_PlayerState");

	struct OnRep_PlayerState_Params {
		
	}; OnRep_PlayerState_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Pawn.OnRep_Controller
inline void APawn::OnRep_Controller() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OnRep_Controller");

	struct OnRep_Controller_Params {
		
	}; OnRep_Controller_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Pawn.LaunchPawn
inline void APawn::LaunchPawn(struct FVector LaunchVelocity, bool bXYOverride, bool bZOverride) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.LaunchPawn");

	struct LaunchPawn_Params {
		struct FVector LaunchVelocity;
		bool bXYOverride;
		bool bZOverride;
	}; LaunchPawn_Params Params;

	Params.LaunchVelocity = LaunchVelocity;
	Params.bXYOverride = bXYOverride;
	Params.bZOverride = bZOverride;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Pawn.K2_GetMovementInputVector
inline struct FVector APawn::K2_GetMovementInputVector() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.K2_GetMovementInputVector");

	struct K2_GetMovementInputVector_Params {
		
		struct FVector ReturnValue;

	}; K2_GetMovementInputVector_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Pawn.IsPlayerControlled
inline bool APawn::IsPlayerControlled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsPlayerControlled");

	struct IsPlayerControlled_Params {
		
		bool ReturnValue;

	}; IsPlayerControlled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Pawn.IsPawnControlled
inline bool APawn::IsPawnControlled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsPawnControlled");

	struct IsPawnControlled_Params {
		
		bool ReturnValue;

	}; IsPawnControlled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Pawn.IsMoveInputIgnored
inline bool APawn::IsMoveInputIgnored() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsMoveInputIgnored");

	struct IsMoveInputIgnored_Params {
		
		bool ReturnValue;

	}; IsMoveInputIgnored_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Pawn.IsLocallyControlled
inline bool APawn::IsLocallyControlled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsLocallyControlled");

	struct IsLocallyControlled_Params {
		
		bool ReturnValue;

	}; IsLocallyControlled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Pawn.IsControlled
inline bool APawn::IsControlled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsControlled");

	struct IsControlled_Params {
		
		bool ReturnValue;

	}; IsControlled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Pawn.IsBotControlled
inline bool APawn::IsBotControlled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsBotControlled");

	struct IsBotControlled_Params {
		
		bool ReturnValue;

	}; IsBotControlled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Pawn.GetPendingMovementInputVector
inline struct FVector APawn::GetPendingMovementInputVector() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetPendingMovementInputVector");

	struct GetPendingMovementInputVector_Params {
		
		struct FVector ReturnValue;

	}; GetPendingMovementInputVector_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Pawn.GetNavAgentLocation
inline struct FVector APawn::GetNavAgentLocation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetNavAgentLocation");

	struct GetNavAgentLocation_Params {
		
		struct FVector ReturnValue;

	}; GetNavAgentLocation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Pawn.GetMovementComponent
inline struct UPawnMovementComponent APawn::GetMovementComponent() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetMovementComponent");

	struct GetMovementComponent_Params {
		
		struct UPawnMovementComponent ReturnValue;

	}; GetMovementComponent_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Pawn.GetMovementBaseActor
inline struct UActor APawn::GetMovementBaseActor(struct APawn Pawn) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetMovementBaseActor");

	struct GetMovementBaseActor_Params {
		struct APawn Pawn;
		struct UActor ReturnValue;

	}; GetMovementBaseActor_Params Params;

	Params.Pawn = Pawn;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Pawn.GetLastMovementInputVector
inline struct FVector APawn::GetLastMovementInputVector() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetLastMovementInputVector");

	struct GetLastMovementInputVector_Params {
		
		struct FVector ReturnValue;

	}; GetLastMovementInputVector_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Pawn.GetControlRotation
inline struct FRotator APawn::GetControlRotation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetControlRotation");

	struct GetControlRotation_Params {
		
		struct FRotator ReturnValue;

	}; GetControlRotation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Pawn.GetController
inline struct AController APawn::GetController() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetController");

	struct GetController_Params {
		
		struct AController ReturnValue;

	}; GetController_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Pawn.GetBaseAimRotation
inline struct FRotator APawn::GetBaseAimRotation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetBaseAimRotation");

	struct GetBaseAimRotation_Params {
		
		struct FRotator ReturnValue;

	}; GetBaseAimRotation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Pawn.DetachFromControllerPendingDestroy
inline void APawn::DetachFromControllerPendingDestroy() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DetachFromControllerPendingDestroy");

	struct DetachFromControllerPendingDestroy_Params {
		
	}; DetachFromControllerPendingDestroy_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Pawn.ConsumeMovementInputVector
inline struct FVector APawn::ConsumeMovementInputVector() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ConsumeMovementInputVector");

	struct ConsumeMovementInputVector_Params {
		
		struct FVector ReturnValue;

	}; ConsumeMovementInputVector_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Pawn.AddMovementInput
inline void APawn::AddMovementInput(struct FVector WorldDirection, float ScaleValue, bool bForce) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddMovementInput");

	struct AddMovementInput_Params {
		struct FVector WorldDirection;
		float ScaleValue;
		bool bForce;
	}; AddMovementInput_Params Params;

	Params.WorldDirection = WorldDirection;
	Params.ScaleValue = ScaleValue;
	Params.bForce = bForce;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Pawn.AddControllerYawInput
inline void APawn::AddControllerYawInput(float Val) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddControllerYawInput");

	struct AddControllerYawInput_Params {
		float Val;
	}; AddControllerYawInput_Params Params;

	Params.Val = Val;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Pawn.AddControllerRollInput
inline void APawn::AddControllerRollInput(float Val) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddControllerRollInput");

	struct AddControllerRollInput_Params {
		float Val;
	}; AddControllerRollInput_Params Params;

	Params.Val = Val;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Pawn.AddControllerPitchInput
inline void APawn::AddControllerPitchInput(float Val) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddControllerPitchInput");

	struct AddControllerPitchInput_Params {
		float Val;
	}; AddControllerPitchInput_Params Params;

	Params.Val = Val;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.UnCrouch
inline void ACharacter::UnCrouch(bool bClientSimulation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.UnCrouch");

	struct UnCrouch_Params {
		bool bClientSimulation;
	}; UnCrouch_Params Params;

	Params.bClientSimulation = bClientSimulation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.StopJumping
inline void ACharacter::StopJumping() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.StopJumping");

	struct StopJumping_Params {
		
	}; StopJumping_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.StopAnimMontage
inline void ACharacter::StopAnimMontage(struct UAnimMontage AnimMontage) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.StopAnimMontage");

	struct StopAnimMontage_Params {
		struct UAnimMontage AnimMontage;
	}; StopAnimMontage_Params Params;

	Params.AnimMontage = AnimMontage;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.ServerMoveOld
inline void ACharacter::ServerMoveOld(float OldTimeStamp, struct FVector_NetQuantize10 OldAccel, char OldMoveFlags) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ServerMoveOld");

	struct ServerMoveOld_Params {
		float OldTimeStamp;
		struct FVector_NetQuantize10 OldAccel;
		char OldMoveFlags;
	}; ServerMoveOld_Params Params;

	Params.OldTimeStamp = OldTimeStamp;
	Params.OldAccel = OldAccel;
	Params.OldMoveFlags = OldMoveFlags;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.ServerMoveNoBase
inline void ACharacter::ServerMoveNoBase(float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, char ClientMovementMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ServerMoveNoBase");

	struct ServerMoveNoBase_Params {
		float Timestamp;
		struct FVector_NetQuantize10 InAccel;
		struct FVector_NetQuantize100 ClientLoc;
		char CompressedMoveFlags;
		char ClientRoll;
		uint32_t View;
		char ClientMovementMode;
	}; ServerMoveNoBase_Params Params;

	Params.Timestamp = Timestamp;
	Params.InAccel = InAccel;
	Params.ClientLoc = ClientLoc;
	Params.CompressedMoveFlags = CompressedMoveFlags;
	Params.ClientRoll = ClientRoll;
	Params.View = View;
	Params.ClientMovementMode = ClientMovementMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.ServerMoveDualNoBase
inline void ACharacter::ServerMoveDualNoBase(float TimeStamp0, struct FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, char ClientMovementMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ServerMoveDualNoBase");

	struct ServerMoveDualNoBase_Params {
		float TimeStamp0;
		struct FVector_NetQuantize10 InAccel0;
		char PendingFlags;
		uint32_t View0;
		float Timestamp;
		struct FVector_NetQuantize10 InAccel;
		struct FVector_NetQuantize100 ClientLoc;
		char NewFlags;
		char ClientRoll;
		uint32_t View;
		char ClientMovementMode;
	}; ServerMoveDualNoBase_Params Params;

	Params.TimeStamp0 = TimeStamp0;
	Params.InAccel0 = InAccel0;
	Params.PendingFlags = PendingFlags;
	Params.View0 = View0;
	Params.Timestamp = Timestamp;
	Params.InAccel = InAccel;
	Params.ClientLoc = ClientLoc;
	Params.NewFlags = NewFlags;
	Params.ClientRoll = ClientRoll;
	Params.View = View;
	Params.ClientMovementMode = ClientMovementMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.ServerMoveDualHybridRootMotion
inline void ACharacter::ServerMoveDualHybridRootMotion(float TimeStamp0, struct FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, struct UPrimitiveComponent ClientMovementBase, struct FName ClientBaseBoneName, char ClientMovementMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ServerMoveDualHybridRootMotion");

	struct ServerMoveDualHybridRootMotion_Params {
		float TimeStamp0;
		struct FVector_NetQuantize10 InAccel0;
		char PendingFlags;
		uint32_t View0;
		float Timestamp;
		struct FVector_NetQuantize10 InAccel;
		struct FVector_NetQuantize100 ClientLoc;
		char NewFlags;
		char ClientRoll;
		uint32_t View;
		struct UPrimitiveComponent ClientMovementBase;
		struct FName ClientBaseBoneName;
		char ClientMovementMode;
	}; ServerMoveDualHybridRootMotion_Params Params;

	Params.TimeStamp0 = TimeStamp0;
	Params.InAccel0 = InAccel0;
	Params.PendingFlags = PendingFlags;
	Params.View0 = View0;
	Params.Timestamp = Timestamp;
	Params.InAccel = InAccel;
	Params.ClientLoc = ClientLoc;
	Params.NewFlags = NewFlags;
	Params.ClientRoll = ClientRoll;
	Params.View = View;
	Params.ClientMovementBase = ClientMovementBase;
	Params.ClientBaseBoneName = ClientBaseBoneName;
	Params.ClientMovementMode = ClientMovementMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.ServerMoveDual
inline void ACharacter::ServerMoveDual(float TimeStamp0, struct FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, struct UPrimitiveComponent ClientMovementBase, struct FName ClientBaseBoneName, char ClientMovementMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ServerMoveDual");

	struct ServerMoveDual_Params {
		float TimeStamp0;
		struct FVector_NetQuantize10 InAccel0;
		char PendingFlags;
		uint32_t View0;
		float Timestamp;
		struct FVector_NetQuantize10 InAccel;
		struct FVector_NetQuantize100 ClientLoc;
		char NewFlags;
		char ClientRoll;
		uint32_t View;
		struct UPrimitiveComponent ClientMovementBase;
		struct FName ClientBaseBoneName;
		char ClientMovementMode;
	}; ServerMoveDual_Params Params;

	Params.TimeStamp0 = TimeStamp0;
	Params.InAccel0 = InAccel0;
	Params.PendingFlags = PendingFlags;
	Params.View0 = View0;
	Params.Timestamp = Timestamp;
	Params.InAccel = InAccel;
	Params.ClientLoc = ClientLoc;
	Params.NewFlags = NewFlags;
	Params.ClientRoll = ClientRoll;
	Params.View = View;
	Params.ClientMovementBase = ClientMovementBase;
	Params.ClientBaseBoneName = ClientBaseBoneName;
	Params.ClientMovementMode = ClientMovementMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.ServerMove
inline void ACharacter::ServerMove(float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, struct UPrimitiveComponent ClientMovementBase, struct FName ClientBaseBoneName, char ClientMovementMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ServerMove");

	struct ServerMove_Params {
		float Timestamp;
		struct FVector_NetQuantize10 InAccel;
		struct FVector_NetQuantize100 ClientLoc;
		char CompressedMoveFlags;
		char ClientRoll;
		uint32_t View;
		struct UPrimitiveComponent ClientMovementBase;
		struct FName ClientBaseBoneName;
		char ClientMovementMode;
	}; ServerMove_Params Params;

	Params.Timestamp = Timestamp;
	Params.InAccel = InAccel;
	Params.ClientLoc = ClientLoc;
	Params.CompressedMoveFlags = CompressedMoveFlags;
	Params.ClientRoll = ClientRoll;
	Params.View = View;
	Params.ClientMovementBase = ClientMovementBase;
	Params.ClientBaseBoneName = ClientBaseBoneName;
	Params.ClientMovementMode = ClientMovementMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.RootMotionDebugClientPrintOnScreen
inline void ACharacter::RootMotionDebugClientPrintOnScreen(struct FString inString) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.RootMotionDebugClientPrintOnScreen");

	struct RootMotionDebugClientPrintOnScreen_Params {
		struct FString inString;
	}; RootMotionDebugClientPrintOnScreen_Params Params;

	Params.inString = inString;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.PlayAnimMontage
inline float ACharacter::PlayAnimMontage(struct UAnimMontage AnimMontage, float InPlayRate, struct FName StartSectionName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.PlayAnimMontage");

	struct PlayAnimMontage_Params {
		struct UAnimMontage AnimMontage;
		float InPlayRate;
		struct FName StartSectionName;
		float ReturnValue;

	}; PlayAnimMontage_Params Params;

	Params.AnimMontage = AnimMontage;
	Params.InPlayRate = InPlayRate;
	Params.StartSectionName = StartSectionName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Character.OnWalkingOffLedge
inline void ACharacter::OnWalkingOffLedge(struct FVector& PreviousFloorImpactNormal, struct FVector& PreviousFloorContactNormal, struct FVector& PreviousLocation, float TimeDelta) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.OnWalkingOffLedge");

	struct OnWalkingOffLedge_Params {
		struct FVector& PreviousFloorImpactNormal;
		struct FVector& PreviousFloorContactNormal;
		struct FVector& PreviousLocation;
		float TimeDelta;
	}; OnWalkingOffLedge_Params Params;

	Params.TimeDelta = TimeDelta;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	PreviousFloorImpactNormal = Params.PreviousFloorImpactNormal;
	PreviousFloorContactNormal = Params.PreviousFloorContactNormal;
	PreviousLocation = Params.PreviousLocation;

}

// Function Engine.Character.OnRep_RootMotion
inline void ACharacter::OnRep_RootMotion() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.OnRep_RootMotion");

	struct OnRep_RootMotion_Params {
		
	}; OnRep_RootMotion_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.OnRep_ReplicatedBasedMovement
inline void ACharacter::OnRep_ReplicatedBasedMovement() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.OnRep_ReplicatedBasedMovement");

	struct OnRep_ReplicatedBasedMovement_Params {
		
	}; OnRep_ReplicatedBasedMovement_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.OnRep_ReplayLastTransformUpdateTimeStamp
inline void ACharacter::OnRep_ReplayLastTransformUpdateTimeStamp() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.OnRep_ReplayLastTransformUpdateTimeStamp");

	struct OnRep_ReplayLastTransformUpdateTimeStamp_Params {
		
	}; OnRep_ReplayLastTransformUpdateTimeStamp_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.OnRep_IsCrouched
inline void ACharacter::OnRep_IsCrouched() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.OnRep_IsCrouched");

	struct OnRep_IsCrouched_Params {
		
	}; OnRep_IsCrouched_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.OnLaunched
inline void ACharacter::OnLaunched(struct FVector LaunchVelocity, bool bXYOverride, bool bZOverride) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.OnLaunched");

	struct OnLaunched_Params {
		struct FVector LaunchVelocity;
		bool bXYOverride;
		bool bZOverride;
	}; OnLaunched_Params Params;

	Params.LaunchVelocity = LaunchVelocity;
	Params.bXYOverride = bXYOverride;
	Params.bZOverride = bZOverride;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.OnLanded
inline void ACharacter::OnLanded(struct FHitResult& Hit) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.OnLanded");

	struct OnLanded_Params {
		struct FHitResult& Hit;
	}; OnLanded_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Hit = Params.Hit;

}

// Function Engine.Character.OnJumped
inline void ACharacter::OnJumped() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.OnJumped");

	struct OnJumped_Params {
		
	}; OnJumped_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.LaunchCharacter
inline void ACharacter::LaunchCharacter(struct FVector LaunchVelocity, bool bXYOverride, bool bZOverride) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.LaunchCharacter");

	struct LaunchCharacter_Params {
		struct FVector LaunchVelocity;
		bool bXYOverride;
		bool bZOverride;
	}; LaunchCharacter_Params Params;

	Params.LaunchVelocity = LaunchVelocity;
	Params.bXYOverride = bXYOverride;
	Params.bZOverride = bZOverride;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.K2_UpdateCustomMovement
inline void ACharacter::K2_UpdateCustomMovement(float DeltaTime) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.K2_UpdateCustomMovement");

	struct K2_UpdateCustomMovement_Params {
		float DeltaTime;
	}; K2_UpdateCustomMovement_Params Params;

	Params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.K2_OnStartCrouch
inline void ACharacter::K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.K2_OnStartCrouch");

	struct K2_OnStartCrouch_Params {
		float HalfHeightAdjust;
		float ScaledHalfHeightAdjust;
	}; K2_OnStartCrouch_Params Params;

	Params.HalfHeightAdjust = HalfHeightAdjust;
	Params.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.K2_OnMovementModeChanged
inline void ACharacter::K2_OnMovementModeChanged(enum class EMovementMode PrevMovementMode, enum class EMovementMode NewMovementMode, char PrevCustomMode, char NewCustomMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.K2_OnMovementModeChanged");

	struct K2_OnMovementModeChanged_Params {
		enum class EMovementMode PrevMovementMode;
		enum class EMovementMode NewMovementMode;
		char PrevCustomMode;
		char NewCustomMode;
	}; K2_OnMovementModeChanged_Params Params;

	Params.PrevMovementMode = PrevMovementMode;
	Params.NewMovementMode = NewMovementMode;
	Params.PrevCustomMode = PrevCustomMode;
	Params.NewCustomMode = NewCustomMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.K2_OnEndCrouch
inline void ACharacter::K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.K2_OnEndCrouch");

	struct K2_OnEndCrouch_Params {
		float HalfHeightAdjust;
		float ScaledHalfHeightAdjust;
	}; K2_OnEndCrouch_Params Params;

	Params.HalfHeightAdjust = HalfHeightAdjust;
	Params.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.Jump
inline void ACharacter::Jump() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.Jump");

	struct Jump_Params {
		
	}; Jump_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.IsPlayingRootMotion
inline bool ACharacter::IsPlayingRootMotion() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.IsPlayingRootMotion");

	struct IsPlayingRootMotion_Params {
		
		bool ReturnValue;

	}; IsPlayingRootMotion_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Character.IsPlayingNetworkedRootMotionMontage
inline bool ACharacter::IsPlayingNetworkedRootMotionMontage() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.IsPlayingNetworkedRootMotionMontage");

	struct IsPlayingNetworkedRootMotionMontage_Params {
		
		bool ReturnValue;

	}; IsPlayingNetworkedRootMotionMontage_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Character.IsJumpProvidingForce
inline bool ACharacter::IsJumpProvidingForce() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.IsJumpProvidingForce");

	struct IsJumpProvidingForce_Params {
		
		bool ReturnValue;

	}; IsJumpProvidingForce_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Character.HasAnyRootMotion
inline bool ACharacter::HasAnyRootMotion() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.HasAnyRootMotion");

	struct HasAnyRootMotion_Params {
		
		bool ReturnValue;

	}; HasAnyRootMotion_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Character.GetCurrentMontage
inline struct UAnimMontage ACharacter::GetCurrentMontage() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.GetCurrentMontage");

	struct GetCurrentMontage_Params {
		
		struct UAnimMontage ReturnValue;

	}; GetCurrentMontage_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Character.GetBaseTranslationOffset
inline struct FVector ACharacter::GetBaseTranslationOffset() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.GetBaseTranslationOffset");

	struct GetBaseTranslationOffset_Params {
		
		struct FVector ReturnValue;

	}; GetBaseTranslationOffset_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Character.GetBaseRotationOffsetRotator
inline struct FRotator ACharacter::GetBaseRotationOffsetRotator() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.GetBaseRotationOffsetRotator");

	struct GetBaseRotationOffsetRotator_Params {
		
		struct FRotator ReturnValue;

	}; GetBaseRotationOffsetRotator_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Character.GetAnimRootMotionTranslationScale
inline float ACharacter::GetAnimRootMotionTranslationScale() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.GetAnimRootMotionTranslationScale");

	struct GetAnimRootMotionTranslationScale_Params {
		
		float ReturnValue;

	}; GetAnimRootMotionTranslationScale_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Character.Crouch
inline void ACharacter::Crouch(bool bClientSimulation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.Crouch");

	struct Crouch_Params {
		bool bClientSimulation;
	}; Crouch_Params Params;

	Params.bClientSimulation = bClientSimulation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.ClientVeryShortAdjustPosition
inline void ACharacter::ClientVeryShortAdjustPosition(float Timestamp, struct FVector NewLoc, struct UPrimitiveComponent NewBase, struct FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ClientVeryShortAdjustPosition");

	struct ClientVeryShortAdjustPosition_Params {
		float Timestamp;
		struct FVector NewLoc;
		struct UPrimitiveComponent NewBase;
		struct FName NewBaseBoneName;
		bool bHasBase;
		bool bBaseRelativePosition;
		char ServerMovementMode;
	}; ClientVeryShortAdjustPosition_Params Params;

	Params.Timestamp = Timestamp;
	Params.NewLoc = NewLoc;
	Params.NewBase = NewBase;
	Params.NewBaseBoneName = NewBaseBoneName;
	Params.bHasBase = bHasBase;
	Params.bBaseRelativePosition = bBaseRelativePosition;
	Params.ServerMovementMode = ServerMovementMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.ClientCheatWalk
inline void ACharacter::ClientCheatWalk() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ClientCheatWalk");

	struct ClientCheatWalk_Params {
		
	}; ClientCheatWalk_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.ClientCheatGhost
inline void ACharacter::ClientCheatGhost() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ClientCheatGhost");

	struct ClientCheatGhost_Params {
		
	}; ClientCheatGhost_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.ClientCheatFly
inline void ACharacter::ClientCheatFly() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ClientCheatFly");

	struct ClientCheatFly_Params {
		
	}; ClientCheatFly_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.ClientAdjustRootMotionSourcePosition
inline void ACharacter::ClientAdjustRootMotionSourcePosition(float Timestamp, struct FRootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, struct FVector ServerLoc, struct FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, struct UPrimitiveComponent ServerBase, struct FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ClientAdjustRootMotionSourcePosition");

	struct ClientAdjustRootMotionSourcePosition_Params {
		float Timestamp;
		struct FRootMotionSourceGroup ServerRootMotion;
		bool bHasAnimRootMotion;
		float ServerMontageTrackPosition;
		struct FVector ServerLoc;
		struct FVector_NetQuantizeNormal ServerRotation;
		float ServerVelZ;
		struct UPrimitiveComponent ServerBase;
		struct FName ServerBoneName;
		bool bHasBase;
		bool bBaseRelativePosition;
		char ServerMovementMode;
	}; ClientAdjustRootMotionSourcePosition_Params Params;

	Params.Timestamp = Timestamp;
	Params.ServerRootMotion = ServerRootMotion;
	Params.bHasAnimRootMotion = bHasAnimRootMotion;
	Params.ServerMontageTrackPosition = ServerMontageTrackPosition;
	Params.ServerLoc = ServerLoc;
	Params.ServerRotation = ServerRotation;
	Params.ServerVelZ = ServerVelZ;
	Params.ServerBase = ServerBase;
	Params.ServerBoneName = ServerBoneName;
	Params.bHasBase = bHasBase;
	Params.bBaseRelativePosition = bBaseRelativePosition;
	Params.ServerMovementMode = ServerMovementMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.ClientAdjustRootMotionPosition
inline void ACharacter::ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, struct FVector ServerLoc, struct FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, struct UPrimitiveComponent ServerBase, struct FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ClientAdjustRootMotionPosition");

	struct ClientAdjustRootMotionPosition_Params {
		float Timestamp;
		float ServerMontageTrackPosition;
		struct FVector ServerLoc;
		struct FVector_NetQuantizeNormal ServerRotation;
		float ServerVelZ;
		struct UPrimitiveComponent ServerBase;
		struct FName ServerBoneName;
		bool bHasBase;
		bool bBaseRelativePosition;
		char ServerMovementMode;
	}; ClientAdjustRootMotionPosition_Params Params;

	Params.Timestamp = Timestamp;
	Params.ServerMontageTrackPosition = ServerMontageTrackPosition;
	Params.ServerLoc = ServerLoc;
	Params.ServerRotation = ServerRotation;
	Params.ServerVelZ = ServerVelZ;
	Params.ServerBase = ServerBase;
	Params.ServerBoneName = ServerBoneName;
	Params.bHasBase = bHasBase;
	Params.bBaseRelativePosition = bBaseRelativePosition;
	Params.ServerMovementMode = ServerMovementMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.ClientAdjustPosition
inline void ACharacter::ClientAdjustPosition(float Timestamp, struct FVector NewLoc, struct FVector NewVel, struct UPrimitiveComponent NewBase, struct FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ClientAdjustPosition");

	struct ClientAdjustPosition_Params {
		float Timestamp;
		struct FVector NewLoc;
		struct FVector NewVel;
		struct UPrimitiveComponent NewBase;
		struct FName NewBaseBoneName;
		bool bHasBase;
		bool bBaseRelativePosition;
		char ServerMovementMode;
	}; ClientAdjustPosition_Params Params;

	Params.Timestamp = Timestamp;
	Params.NewLoc = NewLoc;
	Params.NewVel = NewVel;
	Params.NewBase = NewBase;
	Params.NewBaseBoneName = NewBaseBoneName;
	Params.bHasBase = bHasBase;
	Params.bBaseRelativePosition = bBaseRelativePosition;
	Params.ServerMovementMode = ServerMovementMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.ClientAckGoodMove
inline void ACharacter::ClientAckGoodMove(float Timestamp) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ClientAckGoodMove");

	struct ClientAckGoodMove_Params {
		float Timestamp;
	}; ClientAckGoodMove_Params Params;

	Params.Timestamp = Timestamp;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.CanJumpInternal
inline bool ACharacter::CanJumpInternal() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.CanJumpInternal");

	struct CanJumpInternal_Params {
		
		bool ReturnValue;

	}; CanJumpInternal_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Character.CanJump
inline bool ACharacter::CanJump() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.CanJump");

	struct CanJump_Params {
		
		bool ReturnValue;

	}; CanJump_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Character.CanCrouch
inline bool ACharacter::CanCrouch() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.CanCrouch");

	struct CanCrouch_Params {
		
		bool ReturnValue;

	}; CanCrouch_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Character.CacheInitialMeshOffset
inline void ACharacter::CacheInitialMeshOffset(struct FVector MeshRelativeLocation, struct FRotator MeshRelativeRotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.CacheInitialMeshOffset");

	struct CacheInitialMeshOffset_Params {
		struct FVector MeshRelativeLocation;
		struct FRotator MeshRelativeRotation;
	}; CacheInitialMeshOffset_Params Params;

	Params.MeshRelativeLocation = MeshRelativeLocation;
	Params.MeshRelativeRotation = MeshRelativeRotation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MovementComponent.StopMovementImmediately
inline void UMovementComponent::StopMovementImmediately() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.StopMovementImmediately");

	struct StopMovementImmediately_Params {
		
	}; StopMovementImmediately_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MovementComponent.SnapUpdatedComponentToPlane
inline void UMovementComponent::SnapUpdatedComponentToPlane() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.SnapUpdatedComponentToPlane");

	struct SnapUpdatedComponentToPlane_Params {
		
	}; SnapUpdatedComponentToPlane_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MovementComponent.SetUpdatedComponent
inline void UMovementComponent::SetUpdatedComponent(struct USceneComponent NewUpdatedComponent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.SetUpdatedComponent");

	struct SetUpdatedComponent_Params {
		struct USceneComponent NewUpdatedComponent;
	}; SetUpdatedComponent_Params Params;

	Params.NewUpdatedComponent = NewUpdatedComponent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MovementComponent.SetPlaneConstraintOrigin
inline void UMovementComponent::SetPlaneConstraintOrigin(struct FVector PlaneOrigin) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.SetPlaneConstraintOrigin");

	struct SetPlaneConstraintOrigin_Params {
		struct FVector PlaneOrigin;
	}; SetPlaneConstraintOrigin_Params Params;

	Params.PlaneOrigin = PlaneOrigin;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MovementComponent.SetPlaneConstraintNormal
inline void UMovementComponent::SetPlaneConstraintNormal(struct FVector PlaneNormal) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.SetPlaneConstraintNormal");

	struct SetPlaneConstraintNormal_Params {
		struct FVector PlaneNormal;
	}; SetPlaneConstraintNormal_Params Params;

	Params.PlaneNormal = PlaneNormal;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MovementComponent.SetPlaneConstraintFromVectors
inline void UMovementComponent::SetPlaneConstraintFromVectors(struct FVector Forward, struct FVector Up) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.SetPlaneConstraintFromVectors");

	struct SetPlaneConstraintFromVectors_Params {
		struct FVector Forward;
		struct FVector Up;
	}; SetPlaneConstraintFromVectors_Params Params;

	Params.Forward = Forward;
	Params.Up = Up;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MovementComponent.SetPlaneConstraintEnabled
inline void UMovementComponent::SetPlaneConstraintEnabled(bool bEnabled) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.SetPlaneConstraintEnabled");

	struct SetPlaneConstraintEnabled_Params {
		bool bEnabled;
	}; SetPlaneConstraintEnabled_Params Params;

	Params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MovementComponent.SetPlaneConstraintAxisSetting
inline void UMovementComponent::SetPlaneConstraintAxisSetting(enum class EPlaneConstraintAxisSetting NewAxisSetting) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.SetPlaneConstraintAxisSetting");

	struct SetPlaneConstraintAxisSetting_Params {
		enum class EPlaneConstraintAxisSetting NewAxisSetting;
	}; SetPlaneConstraintAxisSetting_Params Params;

	Params.NewAxisSetting = NewAxisSetting;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MovementComponent.PhysicsVolumeChanged
inline void UMovementComponent::PhysicsVolumeChanged(struct APhysicsVolume NewVolume) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.PhysicsVolumeChanged");

	struct PhysicsVolumeChanged_Params {
		struct APhysicsVolume NewVolume;
	}; PhysicsVolumeChanged_Params Params;

	Params.NewVolume = NewVolume;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MovementComponent.K2_MoveUpdatedComponent
inline bool UMovementComponent::K2_MoveUpdatedComponent(struct FVector Delta, struct FRotator NewRotation, struct FHitResult& OutHit, bool bSweep, bool bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.K2_MoveUpdatedComponent");

	struct K2_MoveUpdatedComponent_Params {
		struct FVector Delta;
		struct FRotator NewRotation;
		struct FHitResult& OutHit;
		bool bSweep;
		bool bTeleport;
		bool ReturnValue;

	}; K2_MoveUpdatedComponent_Params Params;

	Params.Delta = Delta;
	Params.NewRotation = NewRotation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutHit = Params.OutHit;


	return params.ReturnValue;
}

// Function Engine.MovementComponent.K2_GetModifiedMaxSpeed
inline float UMovementComponent::K2_GetModifiedMaxSpeed() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.K2_GetModifiedMaxSpeed");

	struct K2_GetModifiedMaxSpeed_Params {
		
		float ReturnValue;

	}; K2_GetModifiedMaxSpeed_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MovementComponent.K2_GetMaxSpeedModifier
inline float UMovementComponent::K2_GetMaxSpeedModifier() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.K2_GetMaxSpeedModifier");

	struct K2_GetMaxSpeedModifier_Params {
		
		float ReturnValue;

	}; K2_GetMaxSpeedModifier_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MovementComponent.IsExceedingMaxSpeed
inline bool UMovementComponent::IsExceedingMaxSpeed(float MaxSpeed) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.IsExceedingMaxSpeed");

	struct IsExceedingMaxSpeed_Params {
		float MaxSpeed;
		bool ReturnValue;

	}; IsExceedingMaxSpeed_Params Params;

	Params.MaxSpeed = MaxSpeed;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MovementComponent.GetPlaneConstraintOrigin
inline struct FVector UMovementComponent::GetPlaneConstraintOrigin() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.GetPlaneConstraintOrigin");

	struct GetPlaneConstraintOrigin_Params {
		
		struct FVector ReturnValue;

	}; GetPlaneConstraintOrigin_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MovementComponent.GetPlaneConstraintNormal
inline struct FVector UMovementComponent::GetPlaneConstraintNormal() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.GetPlaneConstraintNormal");

	struct GetPlaneConstraintNormal_Params {
		
		struct FVector ReturnValue;

	}; GetPlaneConstraintNormal_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MovementComponent.GetPlaneConstraintAxisSetting
inline enum class EPlaneConstraintAxisSetting UMovementComponent::GetPlaneConstraintAxisSetting() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.GetPlaneConstraintAxisSetting");

	struct GetPlaneConstraintAxisSetting_Params {
		
		enum class EPlaneConstraintAxisSetting ReturnValue;

	}; GetPlaneConstraintAxisSetting_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MovementComponent.GetPhysicsVolume
inline struct APhysicsVolume UMovementComponent::GetPhysicsVolume() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.GetPhysicsVolume");

	struct GetPhysicsVolume_Params {
		
		struct APhysicsVolume ReturnValue;

	}; GetPhysicsVolume_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MovementComponent.GetMaxSpeed
inline float UMovementComponent::GetMaxSpeed() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.GetMaxSpeed");

	struct GetMaxSpeed_Params {
		
		float ReturnValue;

	}; GetMaxSpeed_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MovementComponent.GetGravityZ
inline float UMovementComponent::GetGravityZ() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.GetGravityZ");

	struct GetGravityZ_Params {
		
		float ReturnValue;

	}; GetGravityZ_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MovementComponent.ConstrainNormalToPlane
inline struct FVector UMovementComponent::ConstrainNormalToPlane(struct FVector Normal) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.ConstrainNormalToPlane");

	struct ConstrainNormalToPlane_Params {
		struct FVector Normal;
		struct FVector ReturnValue;

	}; ConstrainNormalToPlane_Params Params;

	Params.Normal = Normal;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MovementComponent.ConstrainLocationToPlane
inline struct FVector UMovementComponent::ConstrainLocationToPlane(struct FVector Location) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.ConstrainLocationToPlane");

	struct ConstrainLocationToPlane_Params {
		struct FVector Location;
		struct FVector ReturnValue;

	}; ConstrainLocationToPlane_Params Params;

	Params.Location = Location;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MovementComponent.ConstrainDirectionToPlane
inline struct FVector UMovementComponent::ConstrainDirectionToPlane(struct FVector Direction) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.ConstrainDirectionToPlane");

	struct ConstrainDirectionToPlane_Params {
		struct FVector Direction;
		struct FVector ReturnValue;

	}; ConstrainDirectionToPlane_Params Params;

	Params.Direction = Direction;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.NavMovementComponent.StopMovementKeepPathing
inline void UNavMovementComponent::StopMovementKeepPathing() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMovementComponent.StopMovementKeepPathing");

	struct StopMovementKeepPathing_Params {
		
	}; StopMovementKeepPathing_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.NavMovementComponent.StopActiveMovement
inline void UNavMovementComponent::StopActiveMovement() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMovementComponent.StopActiveMovement");

	struct StopActiveMovement_Params {
		
	}; StopActiveMovement_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.NavMovementComponent.IsSwimming
inline bool UNavMovementComponent::IsSwimming() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMovementComponent.IsSwimming");

	struct IsSwimming_Params {
		
		bool ReturnValue;

	}; IsSwimming_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.NavMovementComponent.IsMovingOnGround
inline bool UNavMovementComponent::IsMovingOnGround() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMovementComponent.IsMovingOnGround");

	struct IsMovingOnGround_Params {
		
		bool ReturnValue;

	}; IsMovingOnGround_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.NavMovementComponent.IsFlying
inline bool UNavMovementComponent::IsFlying() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMovementComponent.IsFlying");

	struct IsFlying_Params {
		
		bool ReturnValue;

	}; IsFlying_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.NavMovementComponent.IsFalling
inline bool UNavMovementComponent::IsFalling() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMovementComponent.IsFalling");

	struct IsFalling_Params {
		
		bool ReturnValue;

	}; IsFalling_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.NavMovementComponent.IsCrouching
inline bool UNavMovementComponent::IsCrouching() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMovementComponent.IsCrouching");

	struct IsCrouching_Params {
		
		bool ReturnValue;

	}; IsCrouching_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PawnMovementComponent.K2_GetInputVector
inline struct FVector UPawnMovementComponent::K2_GetInputVector() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PawnMovementComponent.K2_GetInputVector");

	struct K2_GetInputVector_Params {
		
		struct FVector ReturnValue;

	}; K2_GetInputVector_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PawnMovementComponent.IsMoveInputIgnored
inline bool UPawnMovementComponent::IsMoveInputIgnored() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PawnMovementComponent.IsMoveInputIgnored");

	struct IsMoveInputIgnored_Params {
		
		bool ReturnValue;

	}; IsMoveInputIgnored_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PawnMovementComponent.GetPendingInputVector
inline struct FVector UPawnMovementComponent::GetPendingInputVector() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PawnMovementComponent.GetPendingInputVector");

	struct GetPendingInputVector_Params {
		
		struct FVector ReturnValue;

	}; GetPendingInputVector_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PawnMovementComponent.GetPawnOwner
inline struct APawn UPawnMovementComponent::GetPawnOwner() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PawnMovementComponent.GetPawnOwner");

	struct GetPawnOwner_Params {
		
		struct APawn ReturnValue;

	}; GetPawnOwner_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PawnMovementComponent.GetLastInputVector
inline struct FVector UPawnMovementComponent::GetLastInputVector() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PawnMovementComponent.GetLastInputVector");

	struct GetLastInputVector_Params {
		
		struct FVector ReturnValue;

	}; GetLastInputVector_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PawnMovementComponent.ConsumeInputVector
inline struct FVector UPawnMovementComponent::ConsumeInputVector() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PawnMovementComponent.ConsumeInputVector");

	struct ConsumeInputVector_Params {
		
		struct FVector ReturnValue;

	}; ConsumeInputVector_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PawnMovementComponent.AddInputVector
inline void UPawnMovementComponent::AddInputVector(struct FVector WorldVector, bool bForce) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PawnMovementComponent.AddInputVector");

	struct AddInputVector_Params {
		struct FVector WorldVector;
		bool bForce;
	}; AddInputVector_Params Params;

	Params.WorldVector = WorldVector;
	Params.bForce = bForce;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CharacterMovementComponent.SetWalkableFloorZ
inline void UCharacterMovementComponent::SetWalkableFloorZ(float InWalkableFloorZ) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetWalkableFloorZ");

	struct SetWalkableFloorZ_Params {
		float InWalkableFloorZ;
	}; SetWalkableFloorZ_Params Params;

	Params.InWalkableFloorZ = InWalkableFloorZ;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CharacterMovementComponent.SetWalkableFloorAngle
inline void UCharacterMovementComponent::SetWalkableFloorAngle(float InWalkableFloorAngle) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetWalkableFloorAngle");

	struct SetWalkableFloorAngle_Params {
		float InWalkableFloorAngle;
	}; SetWalkableFloorAngle_Params Params;

	Params.InWalkableFloorAngle = InWalkableFloorAngle;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CharacterMovementComponent.SetMovementMode
inline void UCharacterMovementComponent::SetMovementMode(enum class EMovementMode NewMovementMode, char NewCustomMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetMovementMode");

	struct SetMovementMode_Params {
		enum class EMovementMode NewMovementMode;
		char NewCustomMode;
	}; SetMovementMode_Params Params;

	Params.NewMovementMode = NewMovementMode;
	Params.NewCustomMode = NewCustomMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CharacterMovementComponent.SetGroupsToIgnoreMask
inline void UCharacterMovementComponent::SetGroupsToIgnoreMask(struct FNavAvoidanceMask& GroupMask) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetGroupsToIgnoreMask");

	struct SetGroupsToIgnoreMask_Params {
		struct FNavAvoidanceMask& GroupMask;
	}; SetGroupsToIgnoreMask_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	GroupMask = Params.GroupMask;

}

// Function Engine.CharacterMovementComponent.SetGroupsToIgnore
inline void UCharacterMovementComponent::SetGroupsToIgnore(int32_t GroupFlags) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetGroupsToIgnore");

	struct SetGroupsToIgnore_Params {
		int32_t GroupFlags;
	}; SetGroupsToIgnore_Params Params;

	Params.GroupFlags = GroupFlags;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CharacterMovementComponent.SetGroupsToAvoidMask
inline void UCharacterMovementComponent::SetGroupsToAvoidMask(struct FNavAvoidanceMask& GroupMask) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetGroupsToAvoidMask");

	struct SetGroupsToAvoidMask_Params {
		struct FNavAvoidanceMask& GroupMask;
	}; SetGroupsToAvoidMask_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	GroupMask = Params.GroupMask;

}

// Function Engine.CharacterMovementComponent.SetGroupsToAvoid
inline void UCharacterMovementComponent::SetGroupsToAvoid(int32_t GroupFlags) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetGroupsToAvoid");

	struct SetGroupsToAvoid_Params {
		int32_t GroupFlags;
	}; SetGroupsToAvoid_Params Params;

	Params.GroupFlags = GroupFlags;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CharacterMovementComponent.SetAvoidanceGroupMask
inline void UCharacterMovementComponent::SetAvoidanceGroupMask(struct FNavAvoidanceMask& GroupMask) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetAvoidanceGroupMask");

	struct SetAvoidanceGroupMask_Params {
		struct FNavAvoidanceMask& GroupMask;
	}; SetAvoidanceGroupMask_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	GroupMask = Params.GroupMask;

}

// Function Engine.CharacterMovementComponent.SetAvoidanceGroup
inline void UCharacterMovementComponent::SetAvoidanceGroup(int32_t GroupFlags) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetAvoidanceGroup");

	struct SetAvoidanceGroup_Params {
		int32_t GroupFlags;
	}; SetAvoidanceGroup_Params Params;

	Params.GroupFlags = GroupFlags;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CharacterMovementComponent.SetAvoidanceEnabled
inline void UCharacterMovementComponent::SetAvoidanceEnabled(bool bEnable) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetAvoidanceEnabled");

	struct SetAvoidanceEnabled_Params {
		bool bEnable;
	}; SetAvoidanceEnabled_Params Params;

	Params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CharacterMovementComponent.K2_GetWalkableFloorZ
inline float UCharacterMovementComponent::K2_GetWalkableFloorZ() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.K2_GetWalkableFloorZ");

	struct K2_GetWalkableFloorZ_Params {
		
		float ReturnValue;

	}; K2_GetWalkableFloorZ_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.K2_GetWalkableFloorAngle
inline float UCharacterMovementComponent::K2_GetWalkableFloorAngle() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.K2_GetWalkableFloorAngle");

	struct K2_GetWalkableFloorAngle_Params {
		
		float ReturnValue;

	}; K2_GetWalkableFloorAngle_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.K2_GetModifiedMaxAcceleration
inline float UCharacterMovementComponent::K2_GetModifiedMaxAcceleration() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.K2_GetModifiedMaxAcceleration");

	struct K2_GetModifiedMaxAcceleration_Params {
		
		float ReturnValue;

	}; K2_GetModifiedMaxAcceleration_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.K2_FindFloor
inline void UCharacterMovementComponent::K2_FindFloor(struct FVector CapsuleLocation, struct FFindFloorResult& FloorResult) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.K2_FindFloor");

	struct K2_FindFloor_Params {
		struct FVector CapsuleLocation;
		struct FFindFloorResult& FloorResult;
	}; K2_FindFloor_Params Params;

	Params.CapsuleLocation = CapsuleLocation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	FloorResult = Params.FloorResult;

}

// Function Engine.CharacterMovementComponent.K2_ComputeFloorDist
inline void UCharacterMovementComponent::K2_ComputeFloorDist(struct FVector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, struct FFindFloorResult& FloorResult) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.K2_ComputeFloorDist");

	struct K2_ComputeFloorDist_Params {
		struct FVector CapsuleLocation;
		float LineDistance;
		float SweepDistance;
		float SweepRadius;
		struct FFindFloorResult& FloorResult;
	}; K2_ComputeFloorDist_Params Params;

	Params.CapsuleLocation = CapsuleLocation;
	Params.LineDistance = LineDistance;
	Params.SweepDistance = SweepDistance;
	Params.SweepRadius = SweepRadius;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	FloorResult = Params.FloorResult;

}

// Function Engine.CharacterMovementComponent.IsWalking
inline bool UCharacterMovementComponent::IsWalking() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.IsWalking");

	struct IsWalking_Params {
		
		bool ReturnValue;

	}; IsWalking_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.IsWalkable
inline bool UCharacterMovementComponent::IsWalkable(struct FHitResult& Hit) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.IsWalkable");

	struct IsWalkable_Params {
		struct FHitResult& Hit;
		bool ReturnValue;

	}; IsWalkable_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Hit = Params.Hit;


	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.GetValidPerchRadius
inline float UCharacterMovementComponent::GetValidPerchRadius() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetValidPerchRadius");

	struct GetValidPerchRadius_Params {
		
		float ReturnValue;

	}; GetValidPerchRadius_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.GetPerchRadiusThreshold
inline float UCharacterMovementComponent::GetPerchRadiusThreshold() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetPerchRadiusThreshold");

	struct GetPerchRadiusThreshold_Params {
		
		float ReturnValue;

	}; GetPerchRadiusThreshold_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.GetMovementBase
inline struct UPrimitiveComponent UCharacterMovementComponent::GetMovementBase() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetMovementBase");

	struct GetMovementBase_Params {
		
		struct UPrimitiveComponent ReturnValue;

	}; GetMovementBase_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.GetMinAnalogSpeed
inline float UCharacterMovementComponent::GetMinAnalogSpeed() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetMinAnalogSpeed");

	struct GetMinAnalogSpeed_Params {
		
		float ReturnValue;

	}; GetMinAnalogSpeed_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.GetMaxJumpHeightWithJumpTime
inline float UCharacterMovementComponent::GetMaxJumpHeightWithJumpTime() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetMaxJumpHeightWithJumpTime");

	struct GetMaxJumpHeightWithJumpTime_Params {
		
		float ReturnValue;

	}; GetMaxJumpHeightWithJumpTime_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.GetMaxJumpHeight
inline float UCharacterMovementComponent::GetMaxJumpHeight() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetMaxJumpHeight");

	struct GetMaxJumpHeight_Params {
		
		float ReturnValue;

	}; GetMaxJumpHeight_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.GetMaxBrakingDeceleration
inline float UCharacterMovementComponent::GetMaxBrakingDeceleration() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetMaxBrakingDeceleration");

	struct GetMaxBrakingDeceleration_Params {
		
		float ReturnValue;

	}; GetMaxBrakingDeceleration_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.GetMaxAcceleration
inline float UCharacterMovementComponent::GetMaxAcceleration() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetMaxAcceleration");

	struct GetMaxAcceleration_Params {
		
		float ReturnValue;

	}; GetMaxAcceleration_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.GetLastUpdateVelocity
inline struct FVector UCharacterMovementComponent::GetLastUpdateVelocity() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetLastUpdateVelocity");

	struct GetLastUpdateVelocity_Params {
		
		struct FVector ReturnValue;

	}; GetLastUpdateVelocity_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.GetLastUpdateRotation
inline struct FRotator UCharacterMovementComponent::GetLastUpdateRotation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetLastUpdateRotation");

	struct GetLastUpdateRotation_Params {
		
		struct FRotator ReturnValue;

	}; GetLastUpdateRotation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.GetLastUpdateLocation
inline struct FVector UCharacterMovementComponent::GetLastUpdateLocation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetLastUpdateLocation");

	struct GetLastUpdateLocation_Params {
		
		struct FVector ReturnValue;

	}; GetLastUpdateLocation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.GetImpartedMovementBaseVelocity
inline struct FVector UCharacterMovementComponent::GetImpartedMovementBaseVelocity() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetImpartedMovementBaseVelocity");

	struct GetImpartedMovementBaseVelocity_Params {
		
		struct FVector ReturnValue;

	}; GetImpartedMovementBaseVelocity_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.GetCurrentAcceleration
inline struct FVector UCharacterMovementComponent::GetCurrentAcceleration() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetCurrentAcceleration");

	struct GetCurrentAcceleration_Params {
		
		struct FVector ReturnValue;

	}; GetCurrentAcceleration_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.GetCharacterOwner
inline struct ACharacter UCharacterMovementComponent::GetCharacterOwner() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetCharacterOwner");

	struct GetCharacterOwner_Params {
		
		struct ACharacter ReturnValue;

	}; GetCharacterOwner_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.GetAnalogInputModifier
inline float UCharacterMovementComponent::GetAnalogInputModifier() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetAnalogInputModifier");

	struct GetAnalogInputModifier_Params {
		
		float ReturnValue;

	}; GetAnalogInputModifier_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.DisableMovement
inline void UCharacterMovementComponent::DisableMovement() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.DisableMovement");

	struct DisableMovement_Params {
		
	}; DisableMovement_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CharacterMovementComponent.ClearAccumulatedForces
inline void UCharacterMovementComponent::ClearAccumulatedForces() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.ClearAccumulatedForces");

	struct ClearAccumulatedForces_Params {
		
	}; ClearAccumulatedForces_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CharacterMovementComponent.CapsuleTouched
inline void UCharacterMovementComponent::CapsuleTouched(struct UPrimitiveComponent OverlappedComp, struct UActor Other, struct UPrimitiveComponent OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.CapsuleTouched");

	struct CapsuleTouched_Params {
		struct UPrimitiveComponent OverlappedComp;
		struct UActor Other;
		struct UPrimitiveComponent OtherComp;
		int32_t OtherBodyIndex;
		bool bFromSweep;
		struct FHitResult& SweepResult;
	}; CapsuleTouched_Params Params;

	Params.OverlappedComp = OverlappedComp;
	Params.Other = Other;
	Params.OtherComp = OtherComp;
	Params.OtherBodyIndex = OtherBodyIndex;
	Params.bFromSweep = bFromSweep;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepResult = Params.SweepResult;

}

// Function Engine.CharacterMovementComponent.CalcVelocity
inline void UCharacterMovementComponent::CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.CalcVelocity");

	struct CalcVelocity_Params {
		float DeltaTime;
		float Friction;
		bool bFluid;
		float BrakingDeceleration;
	}; CalcVelocity_Params Params;

	Params.DeltaTime = DeltaTime;
	Params.Friction = Friction;
	Params.bFluid = bFluid;
	Params.BrakingDeceleration = BrakingDeceleration;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CharacterMovementComponent.AddImpulse
inline void UCharacterMovementComponent::AddImpulse(struct FVector Impulse, bool bVelocityChange) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.AddImpulse");

	struct AddImpulse_Params {
		struct FVector Impulse;
		bool bVelocityChange;
	}; AddImpulse_Params Params;

	Params.Impulse = Impulse;
	Params.bVelocityChange = bVelocityChange;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CharacterMovementComponent.AddForce
inline void UCharacterMovementComponent::AddForce(struct FVector Force) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.AddForce");

	struct AddForce_Params {
		struct FVector Force;
	}; AddForce_Params Params;

	Params.Force = Force;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.World.K2_GetWorldSettings
inline struct AWorldSettings UWorld::K2_GetWorldSettings() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.World.K2_GetWorldSettings");

	struct K2_GetWorldSettings_Params {
		
		struct AWorldSettings ReturnValue;

	}; K2_GetWorldSettings_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.World.HandleTimelineScrubbed
inline void UWorld::HandleTimelineScrubbed() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.World.HandleTimelineScrubbed");

	struct HandleTimelineScrubbed_Params {
		
	}; HandleTimelineScrubbed_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineComponent.UpdateSpline
inline void USplineComponent::UpdateSpline() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.UpdateSpline");

	struct UpdateSpline_Params {
		
	}; UpdateSpline_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineComponent.SetWorldLocationAtSplinePoint
inline void USplineComponent::SetWorldLocationAtSplinePoint(int32_t PointIndex, struct FVector& InLocation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetWorldLocationAtSplinePoint");

	struct SetWorldLocationAtSplinePoint_Params {
		int32_t PointIndex;
		struct FVector& InLocation;
	}; SetWorldLocationAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InLocation = Params.InLocation;

}

// Function Engine.SplineComponent.SetUpVectorAtSplinePoint
inline void USplineComponent::SetUpVectorAtSplinePoint(int32_t PointIndex, struct FVector& InUpVector, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetUpVectorAtSplinePoint");

	struct SetUpVectorAtSplinePoint_Params {
		int32_t PointIndex;
		struct FVector& InUpVector;
		enum class ESplineCoordinateSpace CoordinateSpace;
		bool bUpdateSpline;
	}; SetUpVectorAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;
	Params.CoordinateSpace = CoordinateSpace;
	Params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InUpVector = Params.InUpVector;

}

// Function Engine.SplineComponent.SetUnselectedSplineSegmentColor
inline void USplineComponent::SetUnselectedSplineSegmentColor(struct FLinearColor& SegmentColor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetUnselectedSplineSegmentColor");

	struct SetUnselectedSplineSegmentColor_Params {
		struct FLinearColor& SegmentColor;
	}; SetUnselectedSplineSegmentColor_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SegmentColor = Params.SegmentColor;

}

// Function Engine.SplineComponent.SetTangentsAtSplinePoint
inline void USplineComponent::SetTangentsAtSplinePoint(int32_t PointIndex, struct FVector& InArriveTangent, struct FVector& InLeaveTangent, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetTangentsAtSplinePoint");

	struct SetTangentsAtSplinePoint_Params {
		int32_t PointIndex;
		struct FVector& InArriveTangent;
		struct FVector& InLeaveTangent;
		enum class ESplineCoordinateSpace CoordinateSpace;
		bool bUpdateSpline;
	}; SetTangentsAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;
	Params.CoordinateSpace = CoordinateSpace;
	Params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InArriveTangent = Params.InArriveTangent;
	InLeaveTangent = Params.InLeaveTangent;

}

// Function Engine.SplineComponent.SetTangentAtSplinePoint
inline void USplineComponent::SetTangentAtSplinePoint(int32_t PointIndex, struct FVector& InTangent, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetTangentAtSplinePoint");

	struct SetTangentAtSplinePoint_Params {
		int32_t PointIndex;
		struct FVector& InTangent;
		enum class ESplineCoordinateSpace CoordinateSpace;
		bool bUpdateSpline;
	}; SetTangentAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;
	Params.CoordinateSpace = CoordinateSpace;
	Params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InTangent = Params.InTangent;

}

// Function Engine.SplineComponent.SetSplineWorldPoints
inline void USplineComponent::SetSplineWorldPoints(struct TArray<struct FVector>& Points) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetSplineWorldPoints");

	struct SetSplineWorldPoints_Params {
		struct TArray<struct FVector>& Points;
	}; SetSplineWorldPoints_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Points = Params.Points;

}

// Function Engine.SplineComponent.SetSplinePointType
inline void USplineComponent::SetSplinePointType(int32_t PointIndex, enum class ESplinePointType Type, bool bUpdateSpline) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetSplinePointType");

	struct SetSplinePointType_Params {
		int32_t PointIndex;
		enum class ESplinePointType Type;
		bool bUpdateSpline;
	}; SetSplinePointType_Params Params;

	Params.PointIndex = PointIndex;
	Params.Type = Type;
	Params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineComponent.SetSplinePoints
inline void USplineComponent::SetSplinePoints(struct TArray<struct FVector>& Points, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetSplinePoints");

	struct SetSplinePoints_Params {
		struct TArray<struct FVector>& Points;
		enum class ESplineCoordinateSpace CoordinateSpace;
		bool bUpdateSpline;
	}; SetSplinePoints_Params Params;

	Params.CoordinateSpace = CoordinateSpace;
	Params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Points = Params.Points;

}

// Function Engine.SplineComponent.SetSplineLocalPoints
inline void USplineComponent::SetSplineLocalPoints(struct TArray<struct FVector>& Points) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetSplineLocalPoints");

	struct SetSplineLocalPoints_Params {
		struct TArray<struct FVector>& Points;
	}; SetSplineLocalPoints_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Points = Params.Points;

}

// Function Engine.SplineComponent.SetSelectedSplineSegmentColor
inline void USplineComponent::SetSelectedSplineSegmentColor(struct FLinearColor& SegmentColor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetSelectedSplineSegmentColor");

	struct SetSelectedSplineSegmentColor_Params {
		struct FLinearColor& SegmentColor;
	}; SetSelectedSplineSegmentColor_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SegmentColor = Params.SegmentColor;

}

// Function Engine.SplineComponent.SetLocationAtSplinePoint
inline void USplineComponent::SetLocationAtSplinePoint(int32_t PointIndex, struct FVector& InLocation, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetLocationAtSplinePoint");

	struct SetLocationAtSplinePoint_Params {
		int32_t PointIndex;
		struct FVector& InLocation;
		enum class ESplineCoordinateSpace CoordinateSpace;
		bool bUpdateSpline;
	}; SetLocationAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;
	Params.CoordinateSpace = CoordinateSpace;
	Params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InLocation = Params.InLocation;

}

// Function Engine.SplineComponent.SetDrawDebug
inline void USplineComponent::SetDrawDebug(bool bShow) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetDrawDebug");

	struct SetDrawDebug_Params {
		bool bShow;
	}; SetDrawDebug_Params Params;

	Params.bShow = bShow;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineComponent.SetDefaultUpVector
inline void USplineComponent::SetDefaultUpVector(struct FVector& UpVector, enum class ESplineCoordinateSpace CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetDefaultUpVector");

	struct SetDefaultUpVector_Params {
		struct FVector& UpVector;
		enum class ESplineCoordinateSpace CoordinateSpace;
	}; SetDefaultUpVector_Params Params;

	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	UpVector = Params.UpVector;

}

// Function Engine.SplineComponent.SetClosedLoopAtPosition
inline void USplineComponent::SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetClosedLoopAtPosition");

	struct SetClosedLoopAtPosition_Params {
		bool bInClosedLoop;
		float Key;
		bool bUpdateSpline;
	}; SetClosedLoopAtPosition_Params Params;

	Params.bInClosedLoop = bInClosedLoop;
	Params.Key = Key;
	Params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineComponent.SetClosedLoop
inline void USplineComponent::SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetClosedLoop");

	struct SetClosedLoop_Params {
		bool bInClosedLoop;
		bool bUpdateSpline;
	}; SetClosedLoop_Params Params;

	Params.bInClosedLoop = bInClosedLoop;
	Params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineComponent.RemoveSplinePoint
inline void USplineComponent::RemoveSplinePoint(int32_t Index, bool bUpdateSpline) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.RemoveSplinePoint");

	struct RemoveSplinePoint_Params {
		int32_t Index;
		bool bUpdateSpline;
	}; RemoveSplinePoint_Params Params;

	Params.Index = Index;
	Params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineComponent.IsClosedLoop
inline bool USplineComponent::IsClosedLoop() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.IsClosedLoop");

	struct IsClosedLoop_Params {
		
		bool ReturnValue;

	}; IsClosedLoop_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetWorldTangentAtDistanceAlongSpline
inline struct FVector USplineComponent::GetWorldTangentAtDistanceAlongSpline(float Distance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetWorldTangentAtDistanceAlongSpline");

	struct GetWorldTangentAtDistanceAlongSpline_Params {
		float Distance;
		struct FVector ReturnValue;

	}; GetWorldTangentAtDistanceAlongSpline_Params Params;

	Params.Distance = Distance;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetWorldRotationAtTime
inline struct FRotator USplineComponent::GetWorldRotationAtTime(float Time, bool bUseConstantVelocity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetWorldRotationAtTime");

	struct GetWorldRotationAtTime_Params {
		float Time;
		bool bUseConstantVelocity;
		struct FRotator ReturnValue;

	}; GetWorldRotationAtTime_Params Params;

	Params.Time = Time;
	Params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetWorldRotationAtDistanceAlongSpline
inline struct FRotator USplineComponent::GetWorldRotationAtDistanceAlongSpline(float Distance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetWorldRotationAtDistanceAlongSpline");

	struct GetWorldRotationAtDistanceAlongSpline_Params {
		float Distance;
		struct FRotator ReturnValue;

	}; GetWorldRotationAtDistanceAlongSpline_Params Params;

	Params.Distance = Distance;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetWorldLocationAtTime
inline struct FVector USplineComponent::GetWorldLocationAtTime(float Time, bool bUseConstantVelocity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetWorldLocationAtTime");

	struct GetWorldLocationAtTime_Params {
		float Time;
		bool bUseConstantVelocity;
		struct FVector ReturnValue;

	}; GetWorldLocationAtTime_Params Params;

	Params.Time = Time;
	Params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetWorldLocationAtSplinePoint
inline struct FVector USplineComponent::GetWorldLocationAtSplinePoint(int32_t PointIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetWorldLocationAtSplinePoint");

	struct GetWorldLocationAtSplinePoint_Params {
		int32_t PointIndex;
		struct FVector ReturnValue;

	}; GetWorldLocationAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetWorldLocationAtDistanceAlongSpline
inline struct FVector USplineComponent::GetWorldLocationAtDistanceAlongSpline(float Distance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetWorldLocationAtDistanceAlongSpline");

	struct GetWorldLocationAtDistanceAlongSpline_Params {
		float Distance;
		struct FVector ReturnValue;

	}; GetWorldLocationAtDistanceAlongSpline_Params Params;

	Params.Distance = Distance;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetWorldDirectionAtTime
inline struct FVector USplineComponent::GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetWorldDirectionAtTime");

	struct GetWorldDirectionAtTime_Params {
		float Time;
		bool bUseConstantVelocity;
		struct FVector ReturnValue;

	}; GetWorldDirectionAtTime_Params Params;

	Params.Time = Time;
	Params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetWorldDirectionAtDistanceAlongSpline
inline struct FVector USplineComponent::GetWorldDirectionAtDistanceAlongSpline(float Distance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetWorldDirectionAtDistanceAlongSpline");

	struct GetWorldDirectionAtDistanceAlongSpline_Params {
		float Distance;
		struct FVector ReturnValue;

	}; GetWorldDirectionAtDistanceAlongSpline_Params Params;

	Params.Distance = Distance;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetVectorPropertyAtSplinePoint
inline struct FVector USplineComponent::GetVectorPropertyAtSplinePoint(int32_t Index, struct FName PropertyName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetVectorPropertyAtSplinePoint");

	struct GetVectorPropertyAtSplinePoint_Params {
		int32_t Index;
		struct FName PropertyName;
		struct FVector ReturnValue;

	}; GetVectorPropertyAtSplinePoint_Params Params;

	Params.Index = Index;
	Params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetVectorPropertyAtSplineInputKey
inline struct FVector USplineComponent::GetVectorPropertyAtSplineInputKey(float InKey, struct FName PropertyName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetVectorPropertyAtSplineInputKey");

	struct GetVectorPropertyAtSplineInputKey_Params {
		float InKey;
		struct FName PropertyName;
		struct FVector ReturnValue;

	}; GetVectorPropertyAtSplineInputKey_Params Params;

	Params.InKey = InKey;
	Params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetUpVectorAtTime
inline struct FVector USplineComponent::GetUpVectorAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetUpVectorAtTime");

	struct GetUpVectorAtTime_Params {
		float Time;
		enum class ESplineCoordinateSpace CoordinateSpace;
		bool bUseConstantVelocity;
		struct FVector ReturnValue;

	}; GetUpVectorAtTime_Params Params;

	Params.Time = Time;
	Params.CoordinateSpace = CoordinateSpace;
	Params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetUpVectorAtSplinePoint
inline struct FVector USplineComponent::GetUpVectorAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetUpVectorAtSplinePoint");

	struct GetUpVectorAtSplinePoint_Params {
		int32_t PointIndex;
		enum class ESplineCoordinateSpace CoordinateSpace;
		struct FVector ReturnValue;

	}; GetUpVectorAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetUpVectorAtSplineInputKey
inline struct FVector USplineComponent::GetUpVectorAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetUpVectorAtSplineInputKey");

	struct GetUpVectorAtSplineInputKey_Params {
		float InKey;
		enum class ESplineCoordinateSpace CoordinateSpace;
		struct FVector ReturnValue;

	}; GetUpVectorAtSplineInputKey_Params Params;

	Params.InKey = InKey;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetUpVectorAtDistanceAlongSpline
inline struct FVector USplineComponent::GetUpVectorAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetUpVectorAtDistanceAlongSpline");

	struct GetUpVectorAtDistanceAlongSpline_Params {
		float Distance;
		enum class ESplineCoordinateSpace CoordinateSpace;
		struct FVector ReturnValue;

	}; GetUpVectorAtDistanceAlongSpline_Params Params;

	Params.Distance = Distance;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetTransformAtTime
inline struct FTransform USplineComponent::GetTransformAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity, bool bUseScale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetTransformAtTime");

	struct GetTransformAtTime_Params {
		float Time;
		enum class ESplineCoordinateSpace CoordinateSpace;
		bool bUseConstantVelocity;
		bool bUseScale;
		struct FTransform ReturnValue;

	}; GetTransformAtTime_Params Params;

	Params.Time = Time;
	Params.CoordinateSpace = CoordinateSpace;
	Params.bUseConstantVelocity = bUseConstantVelocity;
	Params.bUseScale = bUseScale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetTransformAtSplinePoint
inline struct FTransform USplineComponent::GetTransformAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetTransformAtSplinePoint");

	struct GetTransformAtSplinePoint_Params {
		int32_t PointIndex;
		enum class ESplineCoordinateSpace CoordinateSpace;
		bool bUseScale;
		struct FTransform ReturnValue;

	}; GetTransformAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;
	Params.CoordinateSpace = CoordinateSpace;
	Params.bUseScale = bUseScale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetTransformAtSplineInputKey
inline struct FTransform USplineComponent::GetTransformAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetTransformAtSplineInputKey");

	struct GetTransformAtSplineInputKey_Params {
		float InKey;
		enum class ESplineCoordinateSpace CoordinateSpace;
		bool bUseScale;
		struct FTransform ReturnValue;

	}; GetTransformAtSplineInputKey_Params Params;

	Params.InKey = InKey;
	Params.CoordinateSpace = CoordinateSpace;
	Params.bUseScale = bUseScale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetTransformAtDistanceAlongSpline
inline struct FTransform USplineComponent::GetTransformAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetTransformAtDistanceAlongSpline");

	struct GetTransformAtDistanceAlongSpline_Params {
		float Distance;
		enum class ESplineCoordinateSpace CoordinateSpace;
		bool bUseScale;
		struct FTransform ReturnValue;

	}; GetTransformAtDistanceAlongSpline_Params Params;

	Params.Distance = Distance;
	Params.CoordinateSpace = CoordinateSpace;
	Params.bUseScale = bUseScale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetTangentAtTime
inline struct FVector USplineComponent::GetTangentAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetTangentAtTime");

	struct GetTangentAtTime_Params {
		float Time;
		enum class ESplineCoordinateSpace CoordinateSpace;
		bool bUseConstantVelocity;
		struct FVector ReturnValue;

	}; GetTangentAtTime_Params Params;

	Params.Time = Time;
	Params.CoordinateSpace = CoordinateSpace;
	Params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetTangentAtSplinePoint
inline struct FVector USplineComponent::GetTangentAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetTangentAtSplinePoint");

	struct GetTangentAtSplinePoint_Params {
		int32_t PointIndex;
		enum class ESplineCoordinateSpace CoordinateSpace;
		struct FVector ReturnValue;

	}; GetTangentAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetTangentAtSplineInputKey
inline struct FVector USplineComponent::GetTangentAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetTangentAtSplineInputKey");

	struct GetTangentAtSplineInputKey_Params {
		float InKey;
		enum class ESplineCoordinateSpace CoordinateSpace;
		struct FVector ReturnValue;

	}; GetTangentAtSplineInputKey_Params Params;

	Params.InKey = InKey;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetTangentAtDistanceAlongSpline
inline struct FVector USplineComponent::GetTangentAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetTangentAtDistanceAlongSpline");

	struct GetTangentAtDistanceAlongSpline_Params {
		float Distance;
		enum class ESplineCoordinateSpace CoordinateSpace;
		struct FVector ReturnValue;

	}; GetTangentAtDistanceAlongSpline_Params Params;

	Params.Distance = Distance;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetSplinePointType
inline enum class ESplinePointType USplineComponent::GetSplinePointType(int32_t PointIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetSplinePointType");

	struct GetSplinePointType_Params {
		int32_t PointIndex;
		enum class ESplinePointType ReturnValue;

	}; GetSplinePointType_Params Params;

	Params.PointIndex = PointIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetSplineLength
inline float USplineComponent::GetSplineLength() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetSplineLength");

	struct GetSplineLength_Params {
		
		float ReturnValue;

	}; GetSplineLength_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetScaleAtTime
inline struct FVector USplineComponent::GetScaleAtTime(float Time, bool bUseConstantVelocity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetScaleAtTime");

	struct GetScaleAtTime_Params {
		float Time;
		bool bUseConstantVelocity;
		struct FVector ReturnValue;

	}; GetScaleAtTime_Params Params;

	Params.Time = Time;
	Params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetScaleAtSplinePoint
inline struct FVector USplineComponent::GetScaleAtSplinePoint(int32_t PointIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetScaleAtSplinePoint");

	struct GetScaleAtSplinePoint_Params {
		int32_t PointIndex;
		struct FVector ReturnValue;

	}; GetScaleAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetScaleAtSplineInputKey
inline struct FVector USplineComponent::GetScaleAtSplineInputKey(float InKey) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetScaleAtSplineInputKey");

	struct GetScaleAtSplineInputKey_Params {
		float InKey;
		struct FVector ReturnValue;

	}; GetScaleAtSplineInputKey_Params Params;

	Params.InKey = InKey;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetScaleAtDistanceAlongSpline
inline struct FVector USplineComponent::GetScaleAtDistanceAlongSpline(float Distance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetScaleAtDistanceAlongSpline");

	struct GetScaleAtDistanceAlongSpline_Params {
		float Distance;
		struct FVector ReturnValue;

	}; GetScaleAtDistanceAlongSpline_Params Params;

	Params.Distance = Distance;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetRotationAtTime
inline struct FRotator USplineComponent::GetRotationAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetRotationAtTime");

	struct GetRotationAtTime_Params {
		float Time;
		enum class ESplineCoordinateSpace CoordinateSpace;
		bool bUseConstantVelocity;
		struct FRotator ReturnValue;

	}; GetRotationAtTime_Params Params;

	Params.Time = Time;
	Params.CoordinateSpace = CoordinateSpace;
	Params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetRotationAtSplinePoint
inline struct FRotator USplineComponent::GetRotationAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetRotationAtSplinePoint");

	struct GetRotationAtSplinePoint_Params {
		int32_t PointIndex;
		enum class ESplineCoordinateSpace CoordinateSpace;
		struct FRotator ReturnValue;

	}; GetRotationAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetRotationAtSplineInputKey
inline struct FRotator USplineComponent::GetRotationAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetRotationAtSplineInputKey");

	struct GetRotationAtSplineInputKey_Params {
		float InKey;
		enum class ESplineCoordinateSpace CoordinateSpace;
		struct FRotator ReturnValue;

	}; GetRotationAtSplineInputKey_Params Params;

	Params.InKey = InKey;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetRotationAtDistanceAlongSpline
inline struct FRotator USplineComponent::GetRotationAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetRotationAtDistanceAlongSpline");

	struct GetRotationAtDistanceAlongSpline_Params {
		float Distance;
		enum class ESplineCoordinateSpace CoordinateSpace;
		struct FRotator ReturnValue;

	}; GetRotationAtDistanceAlongSpline_Params Params;

	Params.Distance = Distance;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetRollAtTime
inline float USplineComponent::GetRollAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetRollAtTime");

	struct GetRollAtTime_Params {
		float Time;
		enum class ESplineCoordinateSpace CoordinateSpace;
		bool bUseConstantVelocity;
		float ReturnValue;

	}; GetRollAtTime_Params Params;

	Params.Time = Time;
	Params.CoordinateSpace = CoordinateSpace;
	Params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetRollAtSplinePoint
inline float USplineComponent::GetRollAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetRollAtSplinePoint");

	struct GetRollAtSplinePoint_Params {
		int32_t PointIndex;
		enum class ESplineCoordinateSpace CoordinateSpace;
		float ReturnValue;

	}; GetRollAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetRollAtSplineInputKey
inline float USplineComponent::GetRollAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetRollAtSplineInputKey");

	struct GetRollAtSplineInputKey_Params {
		float InKey;
		enum class ESplineCoordinateSpace CoordinateSpace;
		float ReturnValue;

	}; GetRollAtSplineInputKey_Params Params;

	Params.InKey = InKey;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetRollAtDistanceAlongSpline
inline float USplineComponent::GetRollAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetRollAtDistanceAlongSpline");

	struct GetRollAtDistanceAlongSpline_Params {
		float Distance;
		enum class ESplineCoordinateSpace CoordinateSpace;
		float ReturnValue;

	}; GetRollAtDistanceAlongSpline_Params Params;

	Params.Distance = Distance;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetRightVectorAtTime
inline struct FVector USplineComponent::GetRightVectorAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetRightVectorAtTime");

	struct GetRightVectorAtTime_Params {
		float Time;
		enum class ESplineCoordinateSpace CoordinateSpace;
		bool bUseConstantVelocity;
		struct FVector ReturnValue;

	}; GetRightVectorAtTime_Params Params;

	Params.Time = Time;
	Params.CoordinateSpace = CoordinateSpace;
	Params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetRightVectorAtSplinePoint
inline struct FVector USplineComponent::GetRightVectorAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetRightVectorAtSplinePoint");

	struct GetRightVectorAtSplinePoint_Params {
		int32_t PointIndex;
		enum class ESplineCoordinateSpace CoordinateSpace;
		struct FVector ReturnValue;

	}; GetRightVectorAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetRightVectorAtSplineInputKey
inline struct FVector USplineComponent::GetRightVectorAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetRightVectorAtSplineInputKey");

	struct GetRightVectorAtSplineInputKey_Params {
		float InKey;
		enum class ESplineCoordinateSpace CoordinateSpace;
		struct FVector ReturnValue;

	}; GetRightVectorAtSplineInputKey_Params Params;

	Params.InKey = InKey;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetRightVectorAtDistanceAlongSpline
inline struct FVector USplineComponent::GetRightVectorAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetRightVectorAtDistanceAlongSpline");

	struct GetRightVectorAtDistanceAlongSpline_Params {
		float Distance;
		enum class ESplineCoordinateSpace CoordinateSpace;
		struct FVector ReturnValue;

	}; GetRightVectorAtDistanceAlongSpline_Params Params;

	Params.Distance = Distance;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetNumberOfSplineSegments
inline int32_t USplineComponent::GetNumberOfSplineSegments() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetNumberOfSplineSegments");

	struct GetNumberOfSplineSegments_Params {
		
		int32_t ReturnValue;

	}; GetNumberOfSplineSegments_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetNumberOfSplinePoints
inline int32_t USplineComponent::GetNumberOfSplinePoints() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetNumberOfSplinePoints");

	struct GetNumberOfSplinePoints_Params {
		
		int32_t ReturnValue;

	}; GetNumberOfSplinePoints_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetLocationAtTime
inline struct FVector USplineComponent::GetLocationAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetLocationAtTime");

	struct GetLocationAtTime_Params {
		float Time;
		enum class ESplineCoordinateSpace CoordinateSpace;
		bool bUseConstantVelocity;
		struct FVector ReturnValue;

	}; GetLocationAtTime_Params Params;

	Params.Time = Time;
	Params.CoordinateSpace = CoordinateSpace;
	Params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetLocationAtSplinePoint
inline struct FVector USplineComponent::GetLocationAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetLocationAtSplinePoint");

	struct GetLocationAtSplinePoint_Params {
		int32_t PointIndex;
		enum class ESplineCoordinateSpace CoordinateSpace;
		struct FVector ReturnValue;

	}; GetLocationAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetLocationAtSplineInputKey
inline struct FVector USplineComponent::GetLocationAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetLocationAtSplineInputKey");

	struct GetLocationAtSplineInputKey_Params {
		float InKey;
		enum class ESplineCoordinateSpace CoordinateSpace;
		struct FVector ReturnValue;

	}; GetLocationAtSplineInputKey_Params Params;

	Params.InKey = InKey;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetLocationAtDistanceAlongSpline
inline struct FVector USplineComponent::GetLocationAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetLocationAtDistanceAlongSpline");

	struct GetLocationAtDistanceAlongSpline_Params {
		float Distance;
		enum class ESplineCoordinateSpace CoordinateSpace;
		struct FVector ReturnValue;

	}; GetLocationAtDistanceAlongSpline_Params Params;

	Params.Distance = Distance;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetLocationAndTangentAtSplinePoint
inline void USplineComponent::GetLocationAndTangentAtSplinePoint(int32_t PointIndex, struct FVector& Location, struct FVector& Tangent, enum class ESplineCoordinateSpace CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetLocationAndTangentAtSplinePoint");

	struct GetLocationAndTangentAtSplinePoint_Params {
		int32_t PointIndex;
		struct FVector& Location;
		struct FVector& Tangent;
		enum class ESplineCoordinateSpace CoordinateSpace;
	}; GetLocationAndTangentAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Location = Params.Location;
	Tangent = Params.Tangent;

}

// Function Engine.SplineComponent.GetLocalLocationAndTangentAtSplinePoint
inline void USplineComponent::GetLocalLocationAndTangentAtSplinePoint(int32_t PointIndex, struct FVector& LocalLocation, struct FVector& LocalTangent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetLocalLocationAndTangentAtSplinePoint");

	struct GetLocalLocationAndTangentAtSplinePoint_Params {
		int32_t PointIndex;
		struct FVector& LocalLocation;
		struct FVector& LocalTangent;
	}; GetLocalLocationAndTangentAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	LocalLocation = Params.LocalLocation;
	LocalTangent = Params.LocalTangent;

}

// Function Engine.SplineComponent.GetLeaveTangentAtSplinePoint
inline struct FVector USplineComponent::GetLeaveTangentAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetLeaveTangentAtSplinePoint");

	struct GetLeaveTangentAtSplinePoint_Params {
		int32_t PointIndex;
		enum class ESplineCoordinateSpace CoordinateSpace;
		struct FVector ReturnValue;

	}; GetLeaveTangentAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetInputKeyAtDistanceAlongSpline
inline float USplineComponent::GetInputKeyAtDistanceAlongSpline(float Distance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetInputKeyAtDistanceAlongSpline");

	struct GetInputKeyAtDistanceAlongSpline_Params {
		float Distance;
		float ReturnValue;

	}; GetInputKeyAtDistanceAlongSpline_Params Params;

	Params.Distance = Distance;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetFloatPropertyAtSplinePoint
inline float USplineComponent::GetFloatPropertyAtSplinePoint(int32_t Index, struct FName PropertyName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetFloatPropertyAtSplinePoint");

	struct GetFloatPropertyAtSplinePoint_Params {
		int32_t Index;
		struct FName PropertyName;
		float ReturnValue;

	}; GetFloatPropertyAtSplinePoint_Params Params;

	Params.Index = Index;
	Params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetFloatPropertyAtSplineInputKey
inline float USplineComponent::GetFloatPropertyAtSplineInputKey(float InKey, struct FName PropertyName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetFloatPropertyAtSplineInputKey");

	struct GetFloatPropertyAtSplineInputKey_Params {
		float InKey;
		struct FName PropertyName;
		float ReturnValue;

	}; GetFloatPropertyAtSplineInputKey_Params Params;

	Params.InKey = InKey;
	Params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetDistanceAlongSplineAtSplinePoint
inline float USplineComponent::GetDistanceAlongSplineAtSplinePoint(int32_t PointIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetDistanceAlongSplineAtSplinePoint");

	struct GetDistanceAlongSplineAtSplinePoint_Params {
		int32_t PointIndex;
		float ReturnValue;

	}; GetDistanceAlongSplineAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetDirectionAtTime
inline struct FVector USplineComponent::GetDirectionAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetDirectionAtTime");

	struct GetDirectionAtTime_Params {
		float Time;
		enum class ESplineCoordinateSpace CoordinateSpace;
		bool bUseConstantVelocity;
		struct FVector ReturnValue;

	}; GetDirectionAtTime_Params Params;

	Params.Time = Time;
	Params.CoordinateSpace = CoordinateSpace;
	Params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetDirectionAtSplinePoint
inline struct FVector USplineComponent::GetDirectionAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetDirectionAtSplinePoint");

	struct GetDirectionAtSplinePoint_Params {
		int32_t PointIndex;
		enum class ESplineCoordinateSpace CoordinateSpace;
		struct FVector ReturnValue;

	}; GetDirectionAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetDirectionAtSplineInputKey
inline struct FVector USplineComponent::GetDirectionAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetDirectionAtSplineInputKey");

	struct GetDirectionAtSplineInputKey_Params {
		float InKey;
		enum class ESplineCoordinateSpace CoordinateSpace;
		struct FVector ReturnValue;

	}; GetDirectionAtSplineInputKey_Params Params;

	Params.InKey = InKey;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetDirectionAtDistanceAlongSpline
inline struct FVector USplineComponent::GetDirectionAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetDirectionAtDistanceAlongSpline");

	struct GetDirectionAtDistanceAlongSpline_Params {
		float Distance;
		enum class ESplineCoordinateSpace CoordinateSpace;
		struct FVector ReturnValue;

	}; GetDirectionAtDistanceAlongSpline_Params Params;

	Params.Distance = Distance;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetDefaultUpVector
inline struct FVector USplineComponent::GetDefaultUpVector(enum class ESplineCoordinateSpace CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetDefaultUpVector");

	struct GetDefaultUpVector_Params {
		enum class ESplineCoordinateSpace CoordinateSpace;
		struct FVector ReturnValue;

	}; GetDefaultUpVector_Params Params;

	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetArriveTangentAtSplinePoint
inline struct FVector USplineComponent::GetArriveTangentAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetArriveTangentAtSplinePoint");

	struct GetArriveTangentAtSplinePoint_Params {
		int32_t PointIndex;
		enum class ESplineCoordinateSpace CoordinateSpace;
		struct FVector ReturnValue;

	}; GetArriveTangentAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.FindUpVectorClosestToWorldLocation
inline struct FVector USplineComponent::FindUpVectorClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.FindUpVectorClosestToWorldLocation");

	struct FindUpVectorClosestToWorldLocation_Params {
		struct FVector& WorldLocation;
		enum class ESplineCoordinateSpace CoordinateSpace;
		struct FVector ReturnValue;

	}; FindUpVectorClosestToWorldLocation_Params Params;

	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	WorldLocation = Params.WorldLocation;


	return params.ReturnValue;
}

// Function Engine.SplineComponent.FindTransformClosestToWorldLocation
inline struct FTransform USplineComponent::FindTransformClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.FindTransformClosestToWorldLocation");

	struct FindTransformClosestToWorldLocation_Params {
		struct FVector& WorldLocation;
		enum class ESplineCoordinateSpace CoordinateSpace;
		bool bUseScale;
		struct FTransform ReturnValue;

	}; FindTransformClosestToWorldLocation_Params Params;

	Params.CoordinateSpace = CoordinateSpace;
	Params.bUseScale = bUseScale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	WorldLocation = Params.WorldLocation;


	return params.ReturnValue;
}

// Function Engine.SplineComponent.FindTangentClosestToWorldLocation
inline struct FVector USplineComponent::FindTangentClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.FindTangentClosestToWorldLocation");

	struct FindTangentClosestToWorldLocation_Params {
		struct FVector& WorldLocation;
		enum class ESplineCoordinateSpace CoordinateSpace;
		struct FVector ReturnValue;

	}; FindTangentClosestToWorldLocation_Params Params;

	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	WorldLocation = Params.WorldLocation;


	return params.ReturnValue;
}

// Function Engine.SplineComponent.FindScaleClosestToWorldLocation
inline struct FVector USplineComponent::FindScaleClosestToWorldLocation(struct FVector& WorldLocation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.FindScaleClosestToWorldLocation");

	struct FindScaleClosestToWorldLocation_Params {
		struct FVector& WorldLocation;
		struct FVector ReturnValue;

	}; FindScaleClosestToWorldLocation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	WorldLocation = Params.WorldLocation;


	return params.ReturnValue;
}

// Function Engine.SplineComponent.FindRotationClosestToWorldLocation
inline struct FRotator USplineComponent::FindRotationClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.FindRotationClosestToWorldLocation");

	struct FindRotationClosestToWorldLocation_Params {
		struct FVector& WorldLocation;
		enum class ESplineCoordinateSpace CoordinateSpace;
		struct FRotator ReturnValue;

	}; FindRotationClosestToWorldLocation_Params Params;

	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	WorldLocation = Params.WorldLocation;


	return params.ReturnValue;
}

// Function Engine.SplineComponent.FindRollClosestToWorldLocation
inline float USplineComponent::FindRollClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.FindRollClosestToWorldLocation");

	struct FindRollClosestToWorldLocation_Params {
		struct FVector& WorldLocation;
		enum class ESplineCoordinateSpace CoordinateSpace;
		float ReturnValue;

	}; FindRollClosestToWorldLocation_Params Params;

	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	WorldLocation = Params.WorldLocation;


	return params.ReturnValue;
}

// Function Engine.SplineComponent.FindRightVectorClosestToWorldLocation
inline struct FVector USplineComponent::FindRightVectorClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.FindRightVectorClosestToWorldLocation");

	struct FindRightVectorClosestToWorldLocation_Params {
		struct FVector& WorldLocation;
		enum class ESplineCoordinateSpace CoordinateSpace;
		struct FVector ReturnValue;

	}; FindRightVectorClosestToWorldLocation_Params Params;

	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	WorldLocation = Params.WorldLocation;


	return params.ReturnValue;
}

// Function Engine.SplineComponent.FindLocationClosestToWorldLocation
inline struct FVector USplineComponent::FindLocationClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.FindLocationClosestToWorldLocation");

	struct FindLocationClosestToWorldLocation_Params {
		struct FVector& WorldLocation;
		enum class ESplineCoordinateSpace CoordinateSpace;
		struct FVector ReturnValue;

	}; FindLocationClosestToWorldLocation_Params Params;

	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	WorldLocation = Params.WorldLocation;


	return params.ReturnValue;
}

// Function Engine.SplineComponent.FindInputKeyClosestToWorldLocation
inline float USplineComponent::FindInputKeyClosestToWorldLocation(struct FVector& WorldLocation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.FindInputKeyClosestToWorldLocation");

	struct FindInputKeyClosestToWorldLocation_Params {
		struct FVector& WorldLocation;
		float ReturnValue;

	}; FindInputKeyClosestToWorldLocation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	WorldLocation = Params.WorldLocation;


	return params.ReturnValue;
}

// Function Engine.SplineComponent.FindDirectionClosestToWorldLocation
inline struct FVector USplineComponent::FindDirectionClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.FindDirectionClosestToWorldLocation");

	struct FindDirectionClosestToWorldLocation_Params {
		struct FVector& WorldLocation;
		enum class ESplineCoordinateSpace CoordinateSpace;
		struct FVector ReturnValue;

	}; FindDirectionClosestToWorldLocation_Params Params;

	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	WorldLocation = Params.WorldLocation;


	return params.ReturnValue;
}

// Function Engine.SplineComponent.ClearSplinePoints
inline void USplineComponent::ClearSplinePoints(bool bUpdateSpline) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.ClearSplinePoints");

	struct ClearSplinePoints_Params {
		bool bUpdateSpline;
	}; ClearSplinePoints_Params Params;

	Params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineComponent.AddSplineWorldPoint
inline void USplineComponent::AddSplineWorldPoint(struct FVector& Position) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.AddSplineWorldPoint");

	struct AddSplineWorldPoint_Params {
		struct FVector& Position;
	}; AddSplineWorldPoint_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Position = Params.Position;

}

// Function Engine.SplineComponent.AddSplinePointAtIndex
inline void USplineComponent::AddSplinePointAtIndex(struct FVector& Position, int32_t Index, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.AddSplinePointAtIndex");

	struct AddSplinePointAtIndex_Params {
		struct FVector& Position;
		int32_t Index;
		enum class ESplineCoordinateSpace CoordinateSpace;
		bool bUpdateSpline;
	}; AddSplinePointAtIndex_Params Params;

	Params.Index = Index;
	Params.CoordinateSpace = CoordinateSpace;
	Params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Position = Params.Position;

}

// Function Engine.SplineComponent.AddSplinePoint
inline void USplineComponent::AddSplinePoint(struct FVector& Position, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.AddSplinePoint");

	struct AddSplinePoint_Params {
		struct FVector& Position;
		enum class ESplineCoordinateSpace CoordinateSpace;
		bool bUpdateSpline;
	}; AddSplinePoint_Params Params;

	Params.CoordinateSpace = CoordinateSpace;
	Params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Position = Params.Position;

}

// Function Engine.SplineComponent.AddSplineLocalPoint
inline void USplineComponent::AddSplineLocalPoint(struct FVector& Position) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.AddSplineLocalPoint");

	struct AddSplineLocalPoint_Params {
		struct FVector& Position;
	}; AddSplineLocalPoint_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Position = Params.Position;

}

// Function Engine.SplineComponent.AddPoints
inline void USplineComponent::AddPoints(struct TArray<struct FSplinePoint>& Points, bool bUpdateSpline) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.AddPoints");

	struct AddPoints_Params {
		struct TArray<struct FSplinePoint>& Points;
		bool bUpdateSpline;
	}; AddPoints_Params Params;

	Params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Points = Params.Points;

}

// Function Engine.SplineComponent.AddPoint
inline void USplineComponent::AddPoint(struct FSplinePoint& Point, bool bUpdateSpline) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.AddPoint");

	struct AddPoint_Params {
		struct FSplinePoint& Point;
		bool bUpdateSpline;
	}; AddPoint_Params Params;

	Params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Point = Params.Point;

}

// Function Engine.SkeletalMeshComponent.UnlinkAnimClassLayers
inline void USkeletalMeshComponent::UnlinkAnimClassLayers(struct UClass* InClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UnlinkAnimClassLayers");

	struct UnlinkAnimClassLayers_Params {
		struct UClass* InClass;
	}; UnlinkAnimClassLayers_Params Params;

	Params.InClass = InClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.UnbindClothFromMasterPoseComponent
inline void USkeletalMeshComponent::UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UnbindClothFromMasterPoseComponent");

	struct UnbindClothFromMasterPoseComponent_Params {
		bool bRestoreSimulationSpace;
	}; UnbindClothFromMasterPoseComponent_Params Params;

	Params.bRestoreSimulationSpace = bRestoreSimulationSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.ToggleDisablePostProcessBlueprint
inline void USkeletalMeshComponent::ToggleDisablePostProcessBlueprint() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ToggleDisablePostProcessBlueprint");

	struct ToggleDisablePostProcessBlueprint_Params {
		
	}; ToggleDisablePostProcessBlueprint_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.TermBodiesBelow
inline void USkeletalMeshComponent::TermBodiesBelow(struct FName ParentBoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.TermBodiesBelow");

	struct TermBodiesBelow_Params {
		struct FName ParentBoneName;
	}; TermBodiesBelow_Params Params;

	Params.ParentBoneName = ParentBoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SuspendClothingSimulation
inline void USkeletalMeshComponent::SuspendClothingSimulation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SuspendClothingSimulation");

	struct SuspendClothingSimulation_Params {
		
	}; SuspendClothingSimulation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.Stop
inline void USkeletalMeshComponent::Stop() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.Stop");

	struct Stop_Params {
		
	}; Stop_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SnapshotPose
inline void USkeletalMeshComponent::SnapshotPose(struct FPoseSnapshot& Snapshot) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SnapshotPose");

	struct SnapshotPose_Params {
		struct FPoseSnapshot& Snapshot;
	}; SnapshotPose_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Snapshot = Params.Snapshot;

}

// Function Engine.SkeletalMeshComponent.SetUpdateAnimationInEditor
inline void USkeletalMeshComponent::SetUpdateAnimationInEditor(bool NewUpdateState) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetUpdateAnimationInEditor");

	struct SetUpdateAnimationInEditor_Params {
		bool NewUpdateState;
	}; SetUpdateAnimationInEditor_Params Params;

	Params.NewUpdateState = NewUpdateState;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetTeleportRotationThreshold
inline void USkeletalMeshComponent::SetTeleportRotationThreshold(float Threshold) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetTeleportRotationThreshold");

	struct SetTeleportRotationThreshold_Params {
		float Threshold;
	}; SetTeleportRotationThreshold_Params Params;

	Params.Threshold = Threshold;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetTeleportDistanceThreshold
inline void USkeletalMeshComponent::SetTeleportDistanceThreshold(float Threshold) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetTeleportDistanceThreshold");

	struct SetTeleportDistanceThreshold_Params {
		float Threshold;
	}; SetTeleportDistanceThreshold_Params Params;

	Params.Threshold = Threshold;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetPosition
inline void USkeletalMeshComponent::SetPosition(float InPos, bool bFireNotifies) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetPosition");

	struct SetPosition_Params {
		float InPos;
		bool bFireNotifies;
	}; SetPosition_Params Params;

	Params.InPos = InPos;
	Params.bFireNotifies = bFireNotifies;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetPlayRate
inline void USkeletalMeshComponent::SetPlayRate(float Rate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetPlayRate");

	struct SetPlayRate_Params {
		float Rate;
	}; SetPlayRate_Params Params;

	Params.Rate = Rate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetPhysicsBlendWeight
inline void USkeletalMeshComponent::SetPhysicsBlendWeight(float PhysicsBlendWeight) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetPhysicsBlendWeight");

	struct SetPhysicsBlendWeight_Params {
		float PhysicsBlendWeight;
	}; SetPhysicsBlendWeight_Params Params;

	Params.PhysicsBlendWeight = PhysicsBlendWeight;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetNotifyRigidBodyCollisionBelow
inline void USkeletalMeshComponent::SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, struct FName BoneName, bool bIncludeSelf) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetNotifyRigidBodyCollisionBelow");

	struct SetNotifyRigidBodyCollisionBelow_Params {
		bool bNewNotifyRigidBodyCollision;
		struct FName BoneName;
		bool bIncludeSelf;
	}; SetNotifyRigidBodyCollisionBelow_Params Params;

	Params.bNewNotifyRigidBodyCollision = bNewNotifyRigidBodyCollision;
	Params.BoneName = BoneName;
	Params.bIncludeSelf = bIncludeSelf;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetMorphTarget
inline void USkeletalMeshComponent::SetMorphTarget(struct FName MorphTargetName, float Value, bool bRemoveZeroWeight) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetMorphTarget");

	struct SetMorphTarget_Params {
		struct FName MorphTargetName;
		float Value;
		bool bRemoveZeroWeight;
	}; SetMorphTarget_Params Params;

	Params.MorphTargetName = MorphTargetName;
	Params.Value = Value;
	Params.bRemoveZeroWeight = bRemoveZeroWeight;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetEnablePhysicsBlending
inline void USkeletalMeshComponent::SetEnablePhysicsBlending(bool bNewBlendPhysics) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetEnablePhysicsBlending");

	struct SetEnablePhysicsBlending_Params {
		bool bNewBlendPhysics;
	}; SetEnablePhysicsBlending_Params Params;

	Params.bNewBlendPhysics = bNewBlendPhysics;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetEnableGravityOnAllBodiesBelow
inline void USkeletalMeshComponent::SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, struct FName BoneName, bool bIncludeSelf) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetEnableGravityOnAllBodiesBelow");

	struct SetEnableGravityOnAllBodiesBelow_Params {
		bool bEnableGravity;
		struct FName BoneName;
		bool bIncludeSelf;
	}; SetEnableGravityOnAllBodiesBelow_Params Params;

	Params.bEnableGravity = bEnableGravity;
	Params.BoneName = BoneName;
	Params.bIncludeSelf = bIncludeSelf;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetEnableBodyGravity
inline void USkeletalMeshComponent::SetEnableBodyGravity(bool bEnableGravity, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetEnableBodyGravity");

	struct SetEnableBodyGravity_Params {
		bool bEnableGravity;
		struct FName BoneName;
	}; SetEnableBodyGravity_Params Params;

	Params.bEnableGravity = bEnableGravity;
	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetDisablePostProcessBlueprint
inline void USkeletalMeshComponent::SetDisablePostProcessBlueprint(bool bInDisablePostProcess) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetDisablePostProcessBlueprint");

	struct SetDisablePostProcessBlueprint_Params {
		bool bInDisablePostProcess;
	}; SetDisablePostProcessBlueprint_Params Params;

	Params.bInDisablePostProcess = bInDisablePostProcess;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetDisableAnimCurves
inline void USkeletalMeshComponent::SetDisableAnimCurves(bool bInDisableAnimCurves) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetDisableAnimCurves");

	struct SetDisableAnimCurves_Params {
		bool bInDisableAnimCurves;
	}; SetDisableAnimCurves_Params Params;

	Params.bInDisableAnimCurves = bInDisableAnimCurves;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetConstraintProfileForAll
inline void USkeletalMeshComponent::SetConstraintProfileForAll(struct FName ProfileName, bool bDefaultIfNotFound) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetConstraintProfileForAll");

	struct SetConstraintProfileForAll_Params {
		struct FName ProfileName;
		bool bDefaultIfNotFound;
	}; SetConstraintProfileForAll_Params Params;

	Params.ProfileName = ProfileName;
	Params.bDefaultIfNotFound = bDefaultIfNotFound;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetConstraintProfile
inline void USkeletalMeshComponent::SetConstraintProfile(struct FName JointName, struct FName ProfileName, bool bDefaultIfNotFound) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetConstraintProfile");

	struct SetConstraintProfile_Params {
		struct FName JointName;
		struct FName ProfileName;
		bool bDefaultIfNotFound;
	}; SetConstraintProfile_Params Params;

	Params.JointName = JointName;
	Params.ProfileName = ProfileName;
	Params.bDefaultIfNotFound = bDefaultIfNotFound;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetClothMaxDistanceScale
inline void USkeletalMeshComponent::SetClothMaxDistanceScale(float Scale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothMaxDistanceScale");

	struct SetClothMaxDistanceScale_Params {
		float Scale;
	}; SetClothMaxDistanceScale_Params Params;

	Params.Scale = Scale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetBodyNotifyRigidBodyCollision
inline void USkeletalMeshComponent::SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetBodyNotifyRigidBodyCollision");

	struct SetBodyNotifyRigidBodyCollision_Params {
		bool bNewNotifyRigidBodyCollision;
		struct FName BoneName;
	}; SetBodyNotifyRigidBodyCollision_Params Params;

	Params.bNewNotifyRigidBodyCollision = bNewNotifyRigidBodyCollision;
	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetAnimClass
inline void USkeletalMeshComponent::SetAnimClass(struct UClass* NewClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAnimClass");

	struct SetAnimClass_Params {
		struct UClass* NewClass;
	}; SetAnimClass_Params Params;

	Params.NewClass = NewClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetAnimationMode
inline void USkeletalMeshComponent::SetAnimationMode(enum class EAnimationMode InAnimationMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAnimationMode");

	struct SetAnimationMode_Params {
		enum class EAnimationMode InAnimationMode;
	}; SetAnimationMode_Params Params;

	Params.InAnimationMode = InAnimationMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetAnimation
inline void USkeletalMeshComponent::SetAnimation(struct UAnimationAsset NewAnimToPlay) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAnimation");

	struct SetAnimation_Params {
		struct UAnimationAsset NewAnimToPlay;
	}; SetAnimation_Params Params;

	Params.NewAnimToPlay = NewAnimToPlay;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetAngularLimits
inline void USkeletalMeshComponent::SetAngularLimits(struct FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAngularLimits");

	struct SetAngularLimits_Params {
		struct FName InBoneName;
		float Swing1LimitAngle;
		float TwistLimitAngle;
		float Swing2LimitAngle;
	}; SetAngularLimits_Params Params;

	Params.InBoneName = InBoneName;
	Params.Swing1LimitAngle = Swing1LimitAngle;
	Params.TwistLimitAngle = TwistLimitAngle;
	Params.Swing2LimitAngle = Swing2LimitAngle;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetAllowRigidBodyAnimNode
inline void USkeletalMeshComponent::SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAllowRigidBodyAnimNode");

	struct SetAllowRigidBodyAnimNode_Params {
		bool bInAllow;
		bool bReinitAnim;
	}; SetAllowRigidBodyAnimNode_Params Params;

	Params.bInAllow = bInAllow;
	Params.bReinitAnim = bReinitAnim;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetAllowedAnimCurvesEvaluation
inline void USkeletalMeshComponent::SetAllowedAnimCurvesEvaluation(struct TArray<struct FName>& List, bool bAllow) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAllowedAnimCurvesEvaluation");

	struct SetAllowedAnimCurvesEvaluation_Params {
		struct TArray<struct FName>& List;
		bool bAllow;
	}; SetAllowedAnimCurvesEvaluation_Params Params;

	Params.bAllow = bAllow;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	List = Params.List;

}

// Function Engine.SkeletalMeshComponent.SetAllowAnimCurveEvaluation
inline void USkeletalMeshComponent::SetAllowAnimCurveEvaluation(bool bInAllow) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAllowAnimCurveEvaluation");

	struct SetAllowAnimCurveEvaluation_Params {
		bool bInAllow;
	}; SetAllowAnimCurveEvaluation_Params Params;

	Params.bInAllow = bInAllow;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetAllMotorsAngularVelocityDrive
inline void USkeletalMeshComponent::SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAllMotorsAngularVelocityDrive");

	struct SetAllMotorsAngularVelocityDrive_Params {
		bool bEnableSwingDrive;
		bool bEnableTwistDrive;
		bool bSkipCustomPhysicsType;
	}; SetAllMotorsAngularVelocityDrive_Params Params;

	Params.bEnableSwingDrive = bEnableSwingDrive;
	Params.bEnableTwistDrive = bEnableTwistDrive;
	Params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetAllMotorsAngularPositionDrive
inline void USkeletalMeshComponent::SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAllMotorsAngularPositionDrive");

	struct SetAllMotorsAngularPositionDrive_Params {
		bool bEnableSwingDrive;
		bool bEnableTwistDrive;
		bool bSkipCustomPhysicsType;
	}; SetAllMotorsAngularPositionDrive_Params Params;

	Params.bEnableSwingDrive = bEnableSwingDrive;
	Params.bEnableTwistDrive = bEnableTwistDrive;
	Params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetAllMotorsAngularDriveParams
inline void USkeletalMeshComponent::SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAllMotorsAngularDriveParams");

	struct SetAllMotorsAngularDriveParams_Params {
		float InSpring;
		float InDamping;
		float InForceLimit;
		bool bSkipCustomPhysicsType;
	}; SetAllMotorsAngularDriveParams_Params Params;

	Params.InSpring = InSpring;
	Params.InDamping = InDamping;
	Params.InForceLimit = InForceLimit;
	Params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetAllBodiesSimulatePhysics
inline void USkeletalMeshComponent::SetAllBodiesSimulatePhysics(bool bNewSimulate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAllBodiesSimulatePhysics");

	struct SetAllBodiesSimulatePhysics_Params {
		bool bNewSimulate;
	}; SetAllBodiesSimulatePhysics_Params Params;

	Params.bNewSimulate = bNewSimulate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetAllBodiesPhysicsBlendWeight
inline void USkeletalMeshComponent::SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAllBodiesPhysicsBlendWeight");

	struct SetAllBodiesPhysicsBlendWeight_Params {
		float PhysicsBlendWeight;
		bool bSkipCustomPhysicsType;
	}; SetAllBodiesPhysicsBlendWeight_Params Params;

	Params.PhysicsBlendWeight = PhysicsBlendWeight;
	Params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetAllBodiesBelowSimulatePhysics
inline void USkeletalMeshComponent::SetAllBodiesBelowSimulatePhysics(struct FName& InBoneName, bool bNewSimulate, bool bIncludeSelf) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAllBodiesBelowSimulatePhysics");

	struct SetAllBodiesBelowSimulatePhysics_Params {
		struct FName& InBoneName;
		bool bNewSimulate;
		bool bIncludeSelf;
	}; SetAllBodiesBelowSimulatePhysics_Params Params;

	Params.bNewSimulate = bNewSimulate;
	Params.bIncludeSelf = bIncludeSelf;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InBoneName = Params.InBoneName;

}

// Function Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsBlendWeight
inline void USkeletalMeshComponent::SetAllBodiesBelowPhysicsBlendWeight(struct FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsBlendWeight");

	struct SetAllBodiesBelowPhysicsBlendWeight_Params {
		struct FName& InBoneName;
		float PhysicsBlendWeight;
		bool bSkipCustomPhysicsType;
		bool bIncludeSelf;
	}; SetAllBodiesBelowPhysicsBlendWeight_Params Params;

	Params.PhysicsBlendWeight = PhysicsBlendWeight;
	Params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;
	Params.bIncludeSelf = bIncludeSelf;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InBoneName = Params.InBoneName;

}

// Function Engine.SkeletalMeshComponent.ResumeClothingSimulation
inline void USkeletalMeshComponent::ResumeClothingSimulation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ResumeClothingSimulation");

	struct ResumeClothingSimulation_Params {
		
	}; ResumeClothingSimulation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.ResetClothTeleportMode
inline void USkeletalMeshComponent::ResetClothTeleportMode() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ResetClothTeleportMode");

	struct ResetClothTeleportMode_Params {
		
	}; ResetClothTeleportMode_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.ResetAnimInstanceDynamics
inline void USkeletalMeshComponent::ResetAnimInstanceDynamics(enum class ETeleportType InTeleportType) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ResetAnimInstanceDynamics");

	struct ResetAnimInstanceDynamics_Params {
		enum class ETeleportType InTeleportType;
	}; ResetAnimInstanceDynamics_Params Params;

	Params.InTeleportType = InTeleportType;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.ResetAllowedAnimCurveEvaluation
inline void USkeletalMeshComponent::ResetAllowedAnimCurveEvaluation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ResetAllowedAnimCurveEvaluation");

	struct ResetAllowedAnimCurveEvaluation_Params {
		
	}; ResetAllowedAnimCurveEvaluation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.ResetAllBodiesSimulatePhysics
inline void USkeletalMeshComponent::ResetAllBodiesSimulatePhysics() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ResetAllBodiesSimulatePhysics");

	struct ResetAllBodiesSimulatePhysics_Params {
		
	}; ResetAllBodiesSimulatePhysics_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.PlayAnimation
inline void USkeletalMeshComponent::PlayAnimation(struct UAnimationAsset NewAnimToPlay, bool bLooping) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.PlayAnimation");

	struct PlayAnimation_Params {
		struct UAnimationAsset NewAnimToPlay;
		bool bLooping;
	}; PlayAnimation_Params Params;

	Params.NewAnimToPlay = NewAnimToPlay;
	Params.bLooping = bLooping;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.Play
inline void USkeletalMeshComponent::Play(bool bLooping) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.Play");

	struct Play_Params {
		bool bLooping;
	}; Play_Params Params;

	Params.bLooping = bLooping;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.OverrideAnimationData
inline void USkeletalMeshComponent::OverrideAnimationData(struct UAnimationAsset InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.OverrideAnimationData");

	struct OverrideAnimationData_Params {
		struct UAnimationAsset InAnimToPlay;
		bool bIsLooping;
		bool bIsPlaying;
		float Position;
		float PlayRate;
	}; OverrideAnimationData_Params Params;

	Params.InAnimToPlay = InAnimToPlay;
	Params.bIsLooping = bIsLooping;
	Params.bIsPlaying = bIsPlaying;
	Params.Position = Position;
	Params.PlayRate = PlayRate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.LinkAnimGraphByTag
inline void USkeletalMeshComponent::LinkAnimGraphByTag(struct FName InTag, struct UClass* InClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.LinkAnimGraphByTag");

	struct LinkAnimGraphByTag_Params {
		struct FName InTag;
		struct UClass* InClass;
	}; LinkAnimGraphByTag_Params Params;

	Params.InTag = InTag;
	Params.InClass = InClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.LinkAnimClassLayers
inline void USkeletalMeshComponent::LinkAnimClassLayers(struct UClass* InClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.LinkAnimClassLayers");

	struct LinkAnimClassLayers_Params {
		struct UClass* InClass;
	}; LinkAnimClassLayers_Params Params;

	Params.InClass = InClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.K2_GetClosestPointOnPhysicsAsset
inline bool USkeletalMeshComponent::K2_GetClosestPointOnPhysicsAsset(struct FVector& WorldPosition, struct FVector& ClosestWorldPosition, struct FVector& Normal, struct FName& BoneName, float& Distance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.K2_GetClosestPointOnPhysicsAsset");

	struct K2_GetClosestPointOnPhysicsAsset_Params {
		struct FVector& WorldPosition;
		struct FVector& ClosestWorldPosition;
		struct FVector& Normal;
		struct FName& BoneName;
		float& Distance;
		bool ReturnValue;

	}; K2_GetClosestPointOnPhysicsAsset_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	WorldPosition = Params.WorldPosition;
	ClosestWorldPosition = Params.ClosestWorldPosition;
	Normal = Params.Normal;
	BoneName = Params.BoneName;
	Distance = Params.Distance;


	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.IsPlaying
inline bool USkeletalMeshComponent::IsPlaying() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.IsPlaying");

	struct IsPlaying_Params {
		
		bool ReturnValue;

	}; IsPlaying_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.IsClothingSimulationSuspended
inline bool USkeletalMeshComponent::IsClothingSimulationSuspended() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.IsClothingSimulationSuspended");

	struct IsClothingSimulationSuspended_Params {
		
		bool ReturnValue;

	}; IsClothingSimulationSuspended_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.IsBodyGravityEnabled
inline bool USkeletalMeshComponent::IsBodyGravityEnabled(struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.IsBodyGravityEnabled");

	struct IsBodyGravityEnabled_Params {
		struct FName BoneName;
		bool ReturnValue;

	}; IsBodyGravityEnabled_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.HasValidAnimationInstance
inline bool USkeletalMeshComponent::HasValidAnimationInstance() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.HasValidAnimationInstance");

	struct HasValidAnimationInstance_Params {
		
		bool ReturnValue;

	}; HasValidAnimationInstance_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetTeleportRotationThreshold
inline float USkeletalMeshComponent::GetTeleportRotationThreshold() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetTeleportRotationThreshold");

	struct GetTeleportRotationThreshold_Params {
		
		float ReturnValue;

	}; GetTeleportRotationThreshold_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetTeleportDistanceThreshold
inline float USkeletalMeshComponent::GetTeleportDistanceThreshold() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetTeleportDistanceThreshold");

	struct GetTeleportDistanceThreshold_Params {
		
		float ReturnValue;

	}; GetTeleportDistanceThreshold_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetSkeletalCenterOfMass
inline struct FVector USkeletalMeshComponent::GetSkeletalCenterOfMass() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetSkeletalCenterOfMass");

	struct GetSkeletalCenterOfMass_Params {
		
		struct FVector ReturnValue;

	}; GetSkeletalCenterOfMass_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetPostProcessInstance
inline struct UAnimInstance USkeletalMeshComponent::GetPostProcessInstance() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetPostProcessInstance");

	struct GetPostProcessInstance_Params {
		
		struct UAnimInstance ReturnValue;

	}; GetPostProcessInstance_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetPosition
inline float USkeletalMeshComponent::GetPosition() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetPosition");

	struct GetPosition_Params {
		
		float ReturnValue;

	}; GetPosition_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetPlayRate
inline float USkeletalMeshComponent::GetPlayRate() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetPlayRate");

	struct GetPlayRate_Params {
		
		float ReturnValue;

	}; GetPlayRate_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetMorphTarget
inline float USkeletalMeshComponent::GetMorphTarget(struct FName MorphTargetName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetMorphTarget");

	struct GetMorphTarget_Params {
		struct FName MorphTargetName;
		float ReturnValue;

	}; GetMorphTarget_Params Params;

	Params.MorphTargetName = MorphTargetName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByGroup
inline struct UAnimInstance USkeletalMeshComponent::GetLinkedAnimLayerInstanceByGroup(struct FName InGroup) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByGroup");

	struct GetLinkedAnimLayerInstanceByGroup_Params {
		struct FName InGroup;
		struct UAnimInstance ReturnValue;

	}; GetLinkedAnimLayerInstanceByGroup_Params Params;

	Params.InGroup = InGroup;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByClass
inline struct UAnimInstance USkeletalMeshComponent::GetLinkedAnimLayerInstanceByClass(struct UClass* InClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByClass");

	struct GetLinkedAnimLayerInstanceByClass_Params {
		struct UClass* InClass;
		struct UAnimInstance ReturnValue;

	}; GetLinkedAnimLayerInstanceByClass_Params Params;

	Params.InClass = InClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstancesByTag
inline void USkeletalMeshComponent::GetLinkedAnimGraphInstancesByTag(struct FName InTag, struct TArray<struct UAnimInstance>& OutLinkedInstances) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstancesByTag");

	struct GetLinkedAnimGraphInstancesByTag_Params {
		struct FName InTag;
		struct TArray<struct UAnimInstance>& OutLinkedInstances;
	}; GetLinkedAnimGraphInstancesByTag_Params Params;

	Params.InTag = InTag;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutLinkedInstances = Params.OutLinkedInstances;

}

// Function Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstanceByTag
inline struct UAnimInstance USkeletalMeshComponent::GetLinkedAnimGraphInstanceByTag(struct FName InTag) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstanceByTag");

	struct GetLinkedAnimGraphInstanceByTag_Params {
		struct FName InTag;
		struct UAnimInstance ReturnValue;

	}; GetLinkedAnimGraphInstanceByTag_Params Params;

	Params.InTag = InTag;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetDisablePostProcessBlueprint
inline bool USkeletalMeshComponent::GetDisablePostProcessBlueprint() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetDisablePostProcessBlueprint");

	struct GetDisablePostProcessBlueprint_Params {
		
		bool ReturnValue;

	}; GetDisablePostProcessBlueprint_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetDisableAnimCurves
inline bool USkeletalMeshComponent::GetDisableAnimCurves() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetDisableAnimCurves");

	struct GetDisableAnimCurves_Params {
		
		bool ReturnValue;

	}; GetDisableAnimCurves_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetCurrentJointAngles
inline void USkeletalMeshComponent::GetCurrentJointAngles(struct FName InBoneName, float& Swing1Angle, float& TwistAngle, float& Swing2Angle) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetCurrentJointAngles");

	struct GetCurrentJointAngles_Params {
		struct FName InBoneName;
		float& Swing1Angle;
		float& TwistAngle;
		float& Swing2Angle;
	}; GetCurrentJointAngles_Params Params;

	Params.InBoneName = InBoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Swing1Angle = Params.Swing1Angle;
	TwistAngle = Params.TwistAngle;
	Swing2Angle = Params.Swing2Angle;

}

// Function Engine.SkeletalMeshComponent.GetClothMaxDistanceScale
inline float USkeletalMeshComponent::GetClothMaxDistanceScale() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothMaxDistanceScale");

	struct GetClothMaxDistanceScale_Params {
		
		float ReturnValue;

	}; GetClothMaxDistanceScale_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetClothingSimulationInteractor
inline struct UClothingSimulationInteractor USkeletalMeshComponent::GetClothingSimulationInteractor() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothingSimulationInteractor");

	struct GetClothingSimulationInteractor_Params {
		
		struct UClothingSimulationInteractor ReturnValue;

	}; GetClothingSimulationInteractor_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetBoneMass
inline float USkeletalMeshComponent::GetBoneMass(struct FName BoneName, bool bScaleMass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetBoneMass");

	struct GetBoneMass_Params {
		struct FName BoneName;
		bool bScaleMass;
		float ReturnValue;

	}; GetBoneMass_Params Params;

	Params.BoneName = BoneName;
	Params.bScaleMass = bScaleMass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetAnimInstance
inline struct UAnimInstance USkeletalMeshComponent::GetAnimInstance() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetAnimInstance");

	struct GetAnimInstance_Params {
		
		struct UAnimInstance ReturnValue;

	}; GetAnimInstance_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetAnimClass
inline struct UClass* USkeletalMeshComponent::GetAnimClass() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetAnimClass");

	struct GetAnimClass_Params {
		
		struct UClass* ReturnValue;

	}; GetAnimClass_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetAnimationMode
inline enum class EAnimationMode USkeletalMeshComponent::GetAnimationMode() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetAnimationMode");

	struct GetAnimationMode_Params {
		
		enum class EAnimationMode ReturnValue;

	}; GetAnimationMode_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetAllowRigidBodyAnimNode
inline bool USkeletalMeshComponent::GetAllowRigidBodyAnimNode() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetAllowRigidBodyAnimNode");

	struct GetAllowRigidBodyAnimNode_Params {
		
		bool ReturnValue;

	}; GetAllowRigidBodyAnimNode_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetAllowedAnimCurveEvaluate
inline bool USkeletalMeshComponent::GetAllowedAnimCurveEvaluate() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetAllowedAnimCurveEvaluate");

	struct GetAllowedAnimCurveEvaluate_Params {
		
		bool ReturnValue;

	}; GetAllowedAnimCurveEvaluate_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleportAndReset
inline void USkeletalMeshComponent::ForceClothNextUpdateTeleportAndReset() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleportAndReset");

	struct ForceClothNextUpdateTeleportAndReset_Params {
		
	}; ForceClothNextUpdateTeleportAndReset_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleport
inline void USkeletalMeshComponent::ForceClothNextUpdateTeleport() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleport");

	struct ForceClothNextUpdateTeleport_Params {
		
	}; ForceClothNextUpdateTeleport_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.FindConstraintBoneName
inline struct FName USkeletalMeshComponent::FindConstraintBoneName(int32_t ConstraintIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindConstraintBoneName");

	struct FindConstraintBoneName_Params {
		int32_t ConstraintIndex;
		struct FName ReturnValue;

	}; FindConstraintBoneName_Params Params;

	Params.ConstraintIndex = ConstraintIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.ClearMorphTargets
inline void USkeletalMeshComponent::ClearMorphTargets() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ClearMorphTargets");

	struct ClearMorphTargets_Params {
		
	}; ClearMorphTargets_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.BreakConstraint
inline void USkeletalMeshComponent::BreakConstraint(struct FVector Impulse, struct FVector HitLocation, struct FName InBoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.BreakConstraint");

	struct BreakConstraint_Params {
		struct FVector Impulse;
		struct FVector HitLocation;
		struct FName InBoneName;
	}; BreakConstraint_Params Params;

	Params.Impulse = Impulse;
	Params.HitLocation = HitLocation;
	Params.InBoneName = InBoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.BindClothToMasterPoseComponent
inline void USkeletalMeshComponent::BindClothToMasterPoseComponent() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.BindClothToMasterPoseComponent");

	struct BindClothToMasterPoseComponent_Params {
		
	}; BindClothToMasterPoseComponent_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.AllowAnimCurveEvaluation
inline void USkeletalMeshComponent::AllowAnimCurveEvaluation(struct FName NameOfCurve, bool bAllow) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AllowAnimCurveEvaluation");

	struct AllowAnimCurveEvaluation_Params {
		struct FName NameOfCurve;
		bool bAllow;
	}; AllowAnimCurveEvaluation_Params Params;

	Params.NameOfCurve = NameOfCurve;
	Params.bAllow = bAllow;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.AddImpulseToAllBodiesBelow
inline void USkeletalMeshComponent::AddImpulseToAllBodiesBelow(struct FVector Impulse, struct FName BoneName, bool bVelChange, bool bIncludeSelf) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AddImpulseToAllBodiesBelow");

	struct AddImpulseToAllBodiesBelow_Params {
		struct FVector Impulse;
		struct FName BoneName;
		bool bVelChange;
		bool bIncludeSelf;
	}; AddImpulseToAllBodiesBelow_Params Params;

	Params.Impulse = Impulse;
	Params.BoneName = BoneName;
	Params.bVelChange = bVelChange;
	Params.bIncludeSelf = bIncludeSelf;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.AddForceToAllBodiesBelow
inline void USkeletalMeshComponent::AddForceToAllBodiesBelow(struct FVector Force, struct FName BoneName, bool bAccelChange, bool bIncludeSelf) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AddForceToAllBodiesBelow");

	struct AddForceToAllBodiesBelow_Params {
		struct FVector Force;
		struct FName BoneName;
		bool bAccelChange;
		bool bIncludeSelf;
	}; AddForceToAllBodiesBelow_Params Params;

	Params.Force = Force;
	Params.BoneName = BoneName;
	Params.bAccelChange = bAccelChange;
	Params.bIncludeSelf = bIncludeSelf;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.AccumulateAllBodiesBelowPhysicsBlendWeight
inline void USkeletalMeshComponent::AccumulateAllBodiesBelowPhysicsBlendWeight(struct FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AccumulateAllBodiesBelowPhysicsBlendWeight");

	struct AccumulateAllBodiesBelowPhysicsBlendWeight_Params {
		struct FName& InBoneName;
		float AddPhysicsBlendWeight;
		bool bSkipCustomPhysicsType;
	}; AccumulateAllBodiesBelowPhysicsBlendWeight_Params Params;

	Params.AddPhysicsBlendWeight = AddPhysicsBlendWeight;
	Params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InBoneName = Params.InBoneName;

}

// Function Engine.AnimInstance.UnlockAIResources
inline void UAnimInstance::UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.UnlockAIResources");

	struct UnlockAIResources_Params {
		bool bUnlockMovement;
		bool UnlockAILogic;
	}; UnlockAIResources_Params Params;

	Params.bUnlockMovement = bUnlockMovement;
	Params.UnlockAILogic = UnlockAILogic;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.UnlinkAnimClassLayers
inline void UAnimInstance::UnlinkAnimClassLayers(struct UClass* InClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.UnlinkAnimClassLayers");

	struct UnlinkAnimClassLayers_Params {
		struct UClass* InClass;
	}; UnlinkAnimClassLayers_Params Params;

	Params.InClass = InClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.TryGetPawnOwner
inline struct APawn UAnimInstance::TryGetPawnOwner() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.TryGetPawnOwner");

	struct TryGetPawnOwner_Params {
		
		struct APawn ReturnValue;

	}; TryGetPawnOwner_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.StopSlotAnimation
inline void UAnimInstance::StopSlotAnimation(float InBlendOutTime, struct FName SlotNodeName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.StopSlotAnimation");

	struct StopSlotAnimation_Params {
		float InBlendOutTime;
		struct FName SlotNodeName;
	}; StopSlotAnimation_Params Params;

	Params.InBlendOutTime = InBlendOutTime;
	Params.SlotNodeName = SlotNodeName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.SnapshotPose
inline void UAnimInstance::SnapshotPose(struct FPoseSnapshot& Snapshot) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.SnapshotPose");

	struct SnapshotPose_Params {
		struct FPoseSnapshot& Snapshot;
	}; SnapshotPose_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Snapshot = Params.Snapshot;

}

// Function Engine.AnimInstance.SetRootMotionMode
inline void UAnimInstance::SetRootMotionMode(enum class ERootMotionMode Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.SetRootMotionMode");

	struct SetRootMotionMode_Params {
		enum class ERootMotionMode Value;
	}; SetRootMotionMode_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.SetReceiveNotifiesFromLinkedInstances
inline void UAnimInstance::SetReceiveNotifiesFromLinkedInstances(bool bSet) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.SetReceiveNotifiesFromLinkedInstances");

	struct SetReceiveNotifiesFromLinkedInstances_Params {
		bool bSet;
	}; SetReceiveNotifiesFromLinkedInstances_Params Params;

	Params.bSet = bSet;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.SetPropagateNotifiesToLinkedInstances
inline void UAnimInstance::SetPropagateNotifiesToLinkedInstances(bool bSet) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.SetPropagateNotifiesToLinkedInstances");

	struct SetPropagateNotifiesToLinkedInstances_Params {
		bool bSet;
	}; SetPropagateNotifiesToLinkedInstances_Params Params;

	Params.bSet = bSet;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.SetMorphTarget
inline void UAnimInstance::SetMorphTarget(struct FName MorphTargetName, float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.SetMorphTarget");

	struct SetMorphTarget_Params {
		struct FName MorphTargetName;
		float Value;
	}; SetMorphTarget_Params Params;

	Params.MorphTargetName = MorphTargetName;
	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.SavePoseSnapshot
inline void UAnimInstance::SavePoseSnapshot(struct FName SnapshotName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.SavePoseSnapshot");

	struct SavePoseSnapshot_Params {
		struct FName SnapshotName;
	}; SavePoseSnapshot_Params Params;

	Params.SnapshotName = SnapshotName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.ResetDynamics
inline void UAnimInstance::ResetDynamics(enum class ETeleportType InTeleportType) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.ResetDynamics");

	struct ResetDynamics_Params {
		enum class ETeleportType InTeleportType;
	}; ResetDynamics_Params Params;

	Params.InTeleportType = InTeleportType;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage
inline struct UAnimMontage UAnimInstance::PlaySlotAnimationAsDynamicMontage(struct UAnimSequenceBase Asset, struct FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32_t LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage");

	struct PlaySlotAnimationAsDynamicMontage_Params {
		struct UAnimSequenceBase Asset;
		struct FName SlotNodeName;
		float BlendInTime;
		float BlendOutTime;
		float InPlayRate;
		int32_t LoopCount;
		float BlendOutTriggerTime;
		float InTimeToStartMontageAt;
		struct UAnimMontage ReturnValue;

	}; PlaySlotAnimationAsDynamicMontage_Params Params;

	Params.Asset = Asset;
	Params.SlotNodeName = SlotNodeName;
	Params.BlendInTime = BlendInTime;
	Params.BlendOutTime = BlendOutTime;
	Params.InPlayRate = InPlayRate;
	Params.LoopCount = LoopCount;
	Params.BlendOutTriggerTime = BlendOutTriggerTime;
	Params.InTimeToStartMontageAt = InTimeToStartMontageAt;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.PlaySlotAnimation
inline float UAnimInstance::PlaySlotAnimation(struct UAnimSequenceBase Asset, struct FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32_t LoopCount) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.PlaySlotAnimation");

	struct PlaySlotAnimation_Params {
		struct UAnimSequenceBase Asset;
		struct FName SlotNodeName;
		float BlendInTime;
		float BlendOutTime;
		float InPlayRate;
		int32_t LoopCount;
		float ReturnValue;

	}; PlaySlotAnimation_Params Params;

	Params.Asset = Asset;
	Params.SlotNodeName = SlotNodeName;
	Params.BlendInTime = BlendInTime;
	Params.BlendOutTime = BlendOutTime;
	Params.InPlayRate = InPlayRate;
	Params.LoopCount = LoopCount;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.Montage_StopGroupByName
inline void UAnimInstance::Montage_StopGroupByName(float InBlendOutTime, struct FName GroupName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_StopGroupByName");

	struct Montage_StopGroupByName_Params {
		float InBlendOutTime;
		struct FName GroupName;
	}; Montage_StopGroupByName_Params Params;

	Params.InBlendOutTime = InBlendOutTime;
	Params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.Montage_Stop
inline void UAnimInstance::Montage_Stop(float InBlendOutTime, struct UAnimMontage Montage) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_Stop");

	struct Montage_Stop_Params {
		float InBlendOutTime;
		struct UAnimMontage Montage;
	}; Montage_Stop_Params Params;

	Params.InBlendOutTime = InBlendOutTime;
	Params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.Montage_SetPosition
inline void UAnimInstance::Montage_SetPosition(struct UAnimMontage Montage, float NewPosition) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_SetPosition");

	struct Montage_SetPosition_Params {
		struct UAnimMontage Montage;
		float NewPosition;
	}; Montage_SetPosition_Params Params;

	Params.Montage = Montage;
	Params.NewPosition = NewPosition;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.Montage_SetPlayRate
inline void UAnimInstance::Montage_SetPlayRate(struct UAnimMontage Montage, float NewPlayRate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_SetPlayRate");

	struct Montage_SetPlayRate_Params {
		struct UAnimMontage Montage;
		float NewPlayRate;
	}; Montage_SetPlayRate_Params Params;

	Params.Montage = Montage;
	Params.NewPlayRate = NewPlayRate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.Montage_SetNextSection
inline void UAnimInstance::Montage_SetNextSection(struct FName SectionNameToChange, struct FName NextSection, struct UAnimMontage Montage) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_SetNextSection");

	struct Montage_SetNextSection_Params {
		struct FName SectionNameToChange;
		struct FName NextSection;
		struct UAnimMontage Montage;
	}; Montage_SetNextSection_Params Params;

	Params.SectionNameToChange = SectionNameToChange;
	Params.NextSection = NextSection;
	Params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.Montage_Resume
inline void UAnimInstance::Montage_Resume(struct UAnimMontage Montage) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_Resume");

	struct Montage_Resume_Params {
		struct UAnimMontage Montage;
	}; Montage_Resume_Params Params;

	Params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.Montage_Play
inline float UAnimInstance::Montage_Play(struct UAnimMontage MontageToPlay, float InPlayRate, enum class EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_Play");

	struct Montage_Play_Params {
		struct UAnimMontage MontageToPlay;
		float InPlayRate;
		enum class EMontagePlayReturnType ReturnValueType;
		float InTimeToStartMontageAt;
		bool bStopAllMontages;
		float ReturnValue;

	}; Montage_Play_Params Params;

	Params.MontageToPlay = MontageToPlay;
	Params.InPlayRate = InPlayRate;
	Params.ReturnValueType = ReturnValueType;
	Params.InTimeToStartMontageAt = InTimeToStartMontageAt;
	Params.bStopAllMontages = bStopAllMontages;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.Montage_Pause
inline void UAnimInstance::Montage_Pause(struct UAnimMontage Montage) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_Pause");

	struct Montage_Pause_Params {
		struct UAnimMontage Montage;
	}; Montage_Pause_Params Params;

	Params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.Montage_JumpToSectionsEnd
inline void UAnimInstance::Montage_JumpToSectionsEnd(struct FName SectionName, struct UAnimMontage Montage) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_JumpToSectionsEnd");

	struct Montage_JumpToSectionsEnd_Params {
		struct FName SectionName;
		struct UAnimMontage Montage;
	}; Montage_JumpToSectionsEnd_Params Params;

	Params.SectionName = SectionName;
	Params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.Montage_JumpToSection
inline void UAnimInstance::Montage_JumpToSection(struct FName SectionName, struct UAnimMontage Montage) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_JumpToSection");

	struct Montage_JumpToSection_Params {
		struct FName SectionName;
		struct UAnimMontage Montage;
	}; Montage_JumpToSection_Params Params;

	Params.SectionName = SectionName;
	Params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.Montage_IsPlaying
inline bool UAnimInstance::Montage_IsPlaying(struct UAnimMontage Montage) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_IsPlaying");

	struct Montage_IsPlaying_Params {
		struct UAnimMontage Montage;
		bool ReturnValue;

	}; Montage_IsPlaying_Params Params;

	Params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.Montage_IsActive
inline bool UAnimInstance::Montage_IsActive(struct UAnimMontage Montage) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_IsActive");

	struct Montage_IsActive_Params {
		struct UAnimMontage Montage;
		bool ReturnValue;

	}; Montage_IsActive_Params Params;

	Params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.Montage_GetPosition
inline float UAnimInstance::Montage_GetPosition(struct UAnimMontage Montage) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_GetPosition");

	struct Montage_GetPosition_Params {
		struct UAnimMontage Montage;
		float ReturnValue;

	}; Montage_GetPosition_Params Params;

	Params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.Montage_GetPlayRate
inline float UAnimInstance::Montage_GetPlayRate(struct UAnimMontage Montage) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_GetPlayRate");

	struct Montage_GetPlayRate_Params {
		struct UAnimMontage Montage;
		float ReturnValue;

	}; Montage_GetPlayRate_Params Params;

	Params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.Montage_GetIsStopped
inline bool UAnimInstance::Montage_GetIsStopped(struct UAnimMontage Montage) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_GetIsStopped");

	struct Montage_GetIsStopped_Params {
		struct UAnimMontage Montage;
		bool ReturnValue;

	}; Montage_GetIsStopped_Params Params;

	Params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.Montage_GetCurrentSection
inline struct FName UAnimInstance::Montage_GetCurrentSection(struct UAnimMontage Montage) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_GetCurrentSection");

	struct Montage_GetCurrentSection_Params {
		struct UAnimMontage Montage;
		struct FName ReturnValue;

	}; Montage_GetCurrentSection_Params Params;

	Params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.Montage_GetBlendTime
inline float UAnimInstance::Montage_GetBlendTime(struct UAnimMontage Montage) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_GetBlendTime");

	struct Montage_GetBlendTime_Params {
		struct UAnimMontage Montage;
		float ReturnValue;

	}; Montage_GetBlendTime_Params Params;

	Params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.LockAIResources
inline void UAnimInstance::LockAIResources(bool bLockMovement, bool LockAILogic) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.LockAIResources");

	struct LockAIResources_Params {
		bool bLockMovement;
		bool LockAILogic;
	}; LockAIResources_Params Params;

	Params.bLockMovement = bLockMovement;
	Params.LockAILogic = LockAILogic;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.LinkAnimGraphByTag
inline void UAnimInstance::LinkAnimGraphByTag(struct FName InTag, struct UClass* InClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.LinkAnimGraphByTag");

	struct LinkAnimGraphByTag_Params {
		struct FName InTag;
		struct UClass* InClass;
	}; LinkAnimGraphByTag_Params Params;

	Params.InTag = InTag;
	Params.InClass = InClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.LinkAnimClassLayers
inline void UAnimInstance::LinkAnimClassLayers(struct UClass* InClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.LinkAnimClassLayers");

	struct LinkAnimClassLayers_Params {
		struct UClass* InClass;
	}; LinkAnimClassLayers_Params Params;

	Params.InClass = InClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.IsSyncGroupBetweenMarkers
inline bool UAnimInstance::IsSyncGroupBetweenMarkers(struct FName InSyncGroupName, struct FName PreviousMarker, struct FName NextMarker, bool bRespectMarkerOrder) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.IsSyncGroupBetweenMarkers");

	struct IsSyncGroupBetweenMarkers_Params {
		struct FName InSyncGroupName;
		struct FName PreviousMarker;
		struct FName NextMarker;
		bool bRespectMarkerOrder;
		bool ReturnValue;

	}; IsSyncGroupBetweenMarkers_Params Params;

	Params.InSyncGroupName = InSyncGroupName;
	Params.PreviousMarker = PreviousMarker;
	Params.NextMarker = NextMarker;
	Params.bRespectMarkerOrder = bRespectMarkerOrder;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.IsPlayingSlotAnimation
inline bool UAnimInstance::IsPlayingSlotAnimation(struct UAnimSequenceBase Asset, struct FName SlotNodeName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.IsPlayingSlotAnimation");

	struct IsPlayingSlotAnimation_Params {
		struct UAnimSequenceBase Asset;
		struct FName SlotNodeName;
		bool ReturnValue;

	}; IsPlayingSlotAnimation_Params Params;

	Params.Asset = Asset;
	Params.SlotNodeName = SlotNodeName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.IsAnyMontagePlaying
inline bool UAnimInstance::IsAnyMontagePlaying() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.IsAnyMontagePlaying");

	struct IsAnyMontagePlaying_Params {
		
		bool ReturnValue;

	}; IsAnyMontagePlaying_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.HasMarkerBeenHitThisFrame
inline bool UAnimInstance::HasMarkerBeenHitThisFrame(struct FName SyncGroup, struct FName MarkerName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.HasMarkerBeenHitThisFrame");

	struct HasMarkerBeenHitThisFrame_Params {
		struct FName SyncGroup;
		struct FName MarkerName;
		bool ReturnValue;

	}; HasMarkerBeenHitThisFrame_Params Params;

	Params.SyncGroup = SyncGroup;
	Params.MarkerName = MarkerName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetTimeToClosestMarker
inline bool UAnimInstance::GetTimeToClosestMarker(struct FName SyncGroup, struct FName MarkerName, float& OutMarkerTime) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetTimeToClosestMarker");

	struct GetTimeToClosestMarker_Params {
		struct FName SyncGroup;
		struct FName MarkerName;
		float& OutMarkerTime;
		bool ReturnValue;

	}; GetTimeToClosestMarker_Params Params;

	Params.SyncGroup = SyncGroup;
	Params.MarkerName = MarkerName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutMarkerTime = Params.OutMarkerTime;


	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetSyncGroupPosition
inline struct FMarkerSyncAnimPosition UAnimInstance::GetSyncGroupPosition(struct FName InSyncGroupName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetSyncGroupPosition");

	struct GetSyncGroupPosition_Params {
		struct FName InSyncGroupName;
		struct FMarkerSyncAnimPosition ReturnValue;

	}; GetSyncGroupPosition_Params Params;

	Params.InSyncGroupName = InSyncGroupName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetRelevantAnimTimeRemainingFraction
inline float UAnimInstance::GetRelevantAnimTimeRemainingFraction(int32_t MachineIndex, int32_t StateIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetRelevantAnimTimeRemainingFraction");

	struct GetRelevantAnimTimeRemainingFraction_Params {
		int32_t MachineIndex;
		int32_t StateIndex;
		float ReturnValue;

	}; GetRelevantAnimTimeRemainingFraction_Params Params;

	Params.MachineIndex = MachineIndex;
	Params.StateIndex = StateIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetRelevantAnimTimeRemaining
inline float UAnimInstance::GetRelevantAnimTimeRemaining(int32_t MachineIndex, int32_t StateIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetRelevantAnimTimeRemaining");

	struct GetRelevantAnimTimeRemaining_Params {
		int32_t MachineIndex;
		int32_t StateIndex;
		float ReturnValue;

	}; GetRelevantAnimTimeRemaining_Params Params;

	Params.MachineIndex = MachineIndex;
	Params.StateIndex = StateIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetRelevantAnimTimeFraction
inline float UAnimInstance::GetRelevantAnimTimeFraction(int32_t MachineIndex, int32_t StateIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetRelevantAnimTimeFraction");

	struct GetRelevantAnimTimeFraction_Params {
		int32_t MachineIndex;
		int32_t StateIndex;
		float ReturnValue;

	}; GetRelevantAnimTimeFraction_Params Params;

	Params.MachineIndex = MachineIndex;
	Params.StateIndex = StateIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetRelevantAnimTime
inline float UAnimInstance::GetRelevantAnimTime(int32_t MachineIndex, int32_t StateIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetRelevantAnimTime");

	struct GetRelevantAnimTime_Params {
		int32_t MachineIndex;
		int32_t StateIndex;
		float ReturnValue;

	}; GetRelevantAnimTime_Params Params;

	Params.MachineIndex = MachineIndex;
	Params.StateIndex = StateIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetRelevantAnimLength
inline float UAnimInstance::GetRelevantAnimLength(int32_t MachineIndex, int32_t StateIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetRelevantAnimLength");

	struct GetRelevantAnimLength_Params {
		int32_t MachineIndex;
		int32_t StateIndex;
		float ReturnValue;

	}; GetRelevantAnimLength_Params Params;

	Params.MachineIndex = MachineIndex;
	Params.StateIndex = StateIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetReceiveNotifiesFromLinkedInstances
inline bool UAnimInstance::GetReceiveNotifiesFromLinkedInstances() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetReceiveNotifiesFromLinkedInstances");

	struct GetReceiveNotifiesFromLinkedInstances_Params {
		
		bool ReturnValue;

	}; GetReceiveNotifiesFromLinkedInstances_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetPropagateNotifiesToLinkedInstances
inline bool UAnimInstance::GetPropagateNotifiesToLinkedInstances() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetPropagateNotifiesToLinkedInstances");

	struct GetPropagateNotifiesToLinkedInstances_Params {
		
		bool ReturnValue;

	}; GetPropagateNotifiesToLinkedInstances_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetOwningComponent
inline struct USkeletalMeshComponent UAnimInstance::GetOwningComponent() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetOwningComponent");

	struct GetOwningComponent_Params {
		
		struct USkeletalMeshComponent ReturnValue;

	}; GetOwningComponent_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetOwningActor
inline struct UActor UAnimInstance::GetOwningActor() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetOwningActor");

	struct GetOwningActor_Params {
		
		struct UActor ReturnValue;

	}; GetOwningActor_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByGroup
inline struct UAnimInstance UAnimInstance::GetLinkedAnimLayerInstanceByGroup(struct FName InGroup) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByGroup");

	struct GetLinkedAnimLayerInstanceByGroup_Params {
		struct FName InGroup;
		struct UAnimInstance ReturnValue;

	}; GetLinkedAnimLayerInstanceByGroup_Params Params;

	Params.InGroup = InGroup;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByClass
inline struct UAnimInstance UAnimInstance::GetLinkedAnimLayerInstanceByClass(struct UClass* InClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByClass");

	struct GetLinkedAnimLayerInstanceByClass_Params {
		struct UClass* InClass;
		struct UAnimInstance ReturnValue;

	}; GetLinkedAnimLayerInstanceByClass_Params Params;

	Params.InClass = InClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetLinkedAnimGraphInstancesByTag
inline void UAnimInstance::GetLinkedAnimGraphInstancesByTag(struct FName InTag, struct TArray<struct UAnimInstance>& OutLinkedInstances) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetLinkedAnimGraphInstancesByTag");

	struct GetLinkedAnimGraphInstancesByTag_Params {
		struct FName InTag;
		struct TArray<struct UAnimInstance>& OutLinkedInstances;
	}; GetLinkedAnimGraphInstancesByTag_Params Params;

	Params.InTag = InTag;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutLinkedInstances = Params.OutLinkedInstances;

}

// Function Engine.AnimInstance.GetLinkedAnimGraphInstanceByTag
inline struct UAnimInstance UAnimInstance::GetLinkedAnimGraphInstanceByTag(struct FName InTag) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetLinkedAnimGraphInstanceByTag");

	struct GetLinkedAnimGraphInstanceByTag_Params {
		struct FName InTag;
		struct UAnimInstance ReturnValue;

	}; GetLinkedAnimGraphInstanceByTag_Params Params;

	Params.InTag = InTag;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetInstanceTransitionTimeElapsedFraction
inline float UAnimInstance::GetInstanceTransitionTimeElapsedFraction(int32_t MachineIndex, int32_t TransitionIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetInstanceTransitionTimeElapsedFraction");

	struct GetInstanceTransitionTimeElapsedFraction_Params {
		int32_t MachineIndex;
		int32_t TransitionIndex;
		float ReturnValue;

	}; GetInstanceTransitionTimeElapsedFraction_Params Params;

	Params.MachineIndex = MachineIndex;
	Params.TransitionIndex = TransitionIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetInstanceTransitionTimeElapsed
inline float UAnimInstance::GetInstanceTransitionTimeElapsed(int32_t MachineIndex, int32_t TransitionIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetInstanceTransitionTimeElapsed");

	struct GetInstanceTransitionTimeElapsed_Params {
		int32_t MachineIndex;
		int32_t TransitionIndex;
		float ReturnValue;

	}; GetInstanceTransitionTimeElapsed_Params Params;

	Params.MachineIndex = MachineIndex;
	Params.TransitionIndex = TransitionIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetInstanceTransitionCrossfadeDuration
inline float UAnimInstance::GetInstanceTransitionCrossfadeDuration(int32_t MachineIndex, int32_t TransitionIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetInstanceTransitionCrossfadeDuration");

	struct GetInstanceTransitionCrossfadeDuration_Params {
		int32_t MachineIndex;
		int32_t TransitionIndex;
		float ReturnValue;

	}; GetInstanceTransitionCrossfadeDuration_Params Params;

	Params.MachineIndex = MachineIndex;
	Params.TransitionIndex = TransitionIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetInstanceStateWeight
inline float UAnimInstance::GetInstanceStateWeight(int32_t MachineIndex, int32_t StateIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetInstanceStateWeight");

	struct GetInstanceStateWeight_Params {
		int32_t MachineIndex;
		int32_t StateIndex;
		float ReturnValue;

	}; GetInstanceStateWeight_Params Params;

	Params.MachineIndex = MachineIndex;
	Params.StateIndex = StateIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetInstanceMachineWeight
inline float UAnimInstance::GetInstanceMachineWeight(int32_t MachineIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetInstanceMachineWeight");

	struct GetInstanceMachineWeight_Params {
		int32_t MachineIndex;
		float ReturnValue;

	}; GetInstanceMachineWeight_Params Params;

	Params.MachineIndex = MachineIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetInstanceCurrentStateElapsedTime
inline float UAnimInstance::GetInstanceCurrentStateElapsedTime(int32_t MachineIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetInstanceCurrentStateElapsedTime");

	struct GetInstanceCurrentStateElapsedTime_Params {
		int32_t MachineIndex;
		float ReturnValue;

	}; GetInstanceCurrentStateElapsedTime_Params Params;

	Params.MachineIndex = MachineIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEndFraction
inline float UAnimInstance::GetInstanceAssetPlayerTimeFromEndFraction(int32_t AssetPlayerIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEndFraction");

	struct GetInstanceAssetPlayerTimeFromEndFraction_Params {
		int32_t AssetPlayerIndex;
		float ReturnValue;

	}; GetInstanceAssetPlayerTimeFromEndFraction_Params Params;

	Params.AssetPlayerIndex = AssetPlayerIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEnd
inline float UAnimInstance::GetInstanceAssetPlayerTimeFromEnd(int32_t AssetPlayerIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEnd");

	struct GetInstanceAssetPlayerTimeFromEnd_Params {
		int32_t AssetPlayerIndex;
		float ReturnValue;

	}; GetInstanceAssetPlayerTimeFromEnd_Params Params;

	Params.AssetPlayerIndex = AssetPlayerIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFraction
inline float UAnimInstance::GetInstanceAssetPlayerTimeFraction(int32_t AssetPlayerIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFraction");

	struct GetInstanceAssetPlayerTimeFraction_Params {
		int32_t AssetPlayerIndex;
		float ReturnValue;

	}; GetInstanceAssetPlayerTimeFraction_Params Params;

	Params.AssetPlayerIndex = AssetPlayerIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetInstanceAssetPlayerTime
inline float UAnimInstance::GetInstanceAssetPlayerTime(int32_t AssetPlayerIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetInstanceAssetPlayerTime");

	struct GetInstanceAssetPlayerTime_Params {
		int32_t AssetPlayerIndex;
		float ReturnValue;

	}; GetInstanceAssetPlayerTime_Params Params;

	Params.AssetPlayerIndex = AssetPlayerIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetInstanceAssetPlayerLength
inline float UAnimInstance::GetInstanceAssetPlayerLength(int32_t AssetPlayerIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetInstanceAssetPlayerLength");

	struct GetInstanceAssetPlayerLength_Params {
		int32_t AssetPlayerIndex;
		float ReturnValue;

	}; GetInstanceAssetPlayerLength_Params Params;

	Params.AssetPlayerIndex = AssetPlayerIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetCurveValue
inline float UAnimInstance::GetCurveValue(struct FName CurveName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetCurveValue");

	struct GetCurveValue_Params {
		struct FName CurveName;
		float ReturnValue;

	}; GetCurveValue_Params Params;

	Params.CurveName = CurveName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetCurrentStateName
inline struct FName UAnimInstance::GetCurrentStateName(int32_t MachineIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetCurrentStateName");

	struct GetCurrentStateName_Params {
		int32_t MachineIndex;
		struct FName ReturnValue;

	}; GetCurrentStateName_Params Params;

	Params.MachineIndex = MachineIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetCurrentActiveMontage
inline struct UAnimMontage UAnimInstance::GetCurrentActiveMontage() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetCurrentActiveMontage");

	struct GetCurrentActiveMontage_Params {
		
		struct UAnimMontage ReturnValue;

	}; GetCurrentActiveMontage_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetAllCurveNames
inline void UAnimInstance::GetAllCurveNames(struct TArray<struct FName>& OutNames) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetAllCurveNames");

	struct GetAllCurveNames_Params {
		struct TArray<struct FName>& OutNames;
	}; GetAllCurveNames_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutNames = Params.OutNames;

}

// Function Engine.AnimInstance.GetActiveCurveNames
inline void UAnimInstance::GetActiveCurveNames(enum class EAnimCurveType CurveType, struct TArray<struct FName>& OutNames) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetActiveCurveNames");

	struct GetActiveCurveNames_Params {
		enum class EAnimCurveType CurveType;
		struct TArray<struct FName>& OutNames;
	}; GetActiveCurveNames_Params Params;

	Params.CurveType = CurveType;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutNames = Params.OutNames;

}

// Function Engine.AnimInstance.ClearMorphTargets
inline void UAnimInstance::ClearMorphTargets() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.ClearMorphTargets");

	struct ClearMorphTargets_Params {
		
	}; ClearMorphTargets_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.CalculateDirection
inline float UAnimInstance::CalculateDirection(struct FVector& Velocity, struct FRotator& BaseRotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.CalculateDirection");

	struct CalculateDirection_Params {
		struct FVector& Velocity;
		struct FRotator& BaseRotation;
		float ReturnValue;

	}; CalculateDirection_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Velocity = Params.Velocity;
	BaseRotation = Params.BaseRotation;


	return params.ReturnValue;
}

// Function Engine.AnimInstance.BlueprintUpdateAnimation
inline void UAnimInstance::BlueprintUpdateAnimation(float DeltaTimeX) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.BlueprintUpdateAnimation");

	struct BlueprintUpdateAnimation_Params {
		float DeltaTimeX;
	}; BlueprintUpdateAnimation_Params Params;

	Params.DeltaTimeX = DeltaTimeX;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.BlueprintPostEvaluateAnimation
inline void UAnimInstance::BlueprintPostEvaluateAnimation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.BlueprintPostEvaluateAnimation");

	struct BlueprintPostEvaluateAnimation_Params {
		
	}; BlueprintPostEvaluateAnimation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.BlueprintLinkedAnimationLayersInitialized
inline void UAnimInstance::BlueprintLinkedAnimationLayersInitialized() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.BlueprintLinkedAnimationLayersInitialized");

	struct BlueprintLinkedAnimationLayersInitialized_Params {
		
	}; BlueprintLinkedAnimationLayersInitialized_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.BlueprintInitializeAnimation
inline void UAnimInstance::BlueprintInitializeAnimation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.BlueprintInitializeAnimation");

	struct BlueprintInitializeAnimation_Params {
		
	}; BlueprintInitializeAnimation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.BlueprintBeginPlay
inline void UAnimInstance::BlueprintBeginPlay() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.BlueprintBeginPlay");

	struct BlueprintBeginPlay_Params {
		
	}; BlueprintBeginPlay_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.StopDelayed
inline void UAudioComponent::StopDelayed(float DelayTime) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.StopDelayed");

	struct StopDelayed_Params {
		float DelayTime;
	}; StopDelayed_Params Params;

	Params.DelayTime = DelayTime;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.Stop
inline void UAudioComponent::Stop() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.Stop");

	struct Stop_Params {
		
	}; Stop_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.SetWaveParameter
inline void UAudioComponent::SetWaveParameter(struct FName InName, struct USoundWave InWave) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetWaveParameter");

	struct SetWaveParameter_Params {
		struct FName InName;
		struct USoundWave InWave;
	}; SetWaveParameter_Params Params;

	Params.InName = InName;
	Params.InWave = InWave;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.SetVolumeMultiplier
inline void UAudioComponent::SetVolumeMultiplier(float NewVolumeMultiplier) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetVolumeMultiplier");

	struct SetVolumeMultiplier_Params {
		float NewVolumeMultiplier;
	}; SetVolumeMultiplier_Params Params;

	Params.NewVolumeMultiplier = NewVolumeMultiplier;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.SetUISound
inline void UAudioComponent::SetUISound(bool bInUISound) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetUISound");

	struct SetUISound_Params {
		bool bInUISound;
	}; SetUISound_Params Params;

	Params.bInUISound = bInUISound;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.SetSubmixSend
inline void UAudioComponent::SetSubmixSend(struct USoundSubmixBase Submix, float SendLevel) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetSubmixSend");

	struct SetSubmixSend_Params {
		struct USoundSubmixBase Submix;
		float SendLevel;
	}; SetSubmixSend_Params Params;

	Params.Submix = Submix;
	Params.SendLevel = SendLevel;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.SetSourceBusSendPreEffect
inline void UAudioComponent::SetSourceBusSendPreEffect(struct USoundSourceBus SoundSourceBus, float SourceBusSendLevel) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetSourceBusSendPreEffect");

	struct SetSourceBusSendPreEffect_Params {
		struct USoundSourceBus SoundSourceBus;
		float SourceBusSendLevel;
	}; SetSourceBusSendPreEffect_Params Params;

	Params.SoundSourceBus = SoundSourceBus;
	Params.SourceBusSendLevel = SourceBusSendLevel;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.SetSourceBusSendPostEffect
inline void UAudioComponent::SetSourceBusSendPostEffect(struct USoundSourceBus SoundSourceBus, float SourceBusSendLevel) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetSourceBusSendPostEffect");

	struct SetSourceBusSendPostEffect_Params {
		struct USoundSourceBus SoundSourceBus;
		float SourceBusSendLevel;
	}; SetSourceBusSendPostEffect_Params Params;

	Params.SoundSourceBus = SoundSourceBus;
	Params.SourceBusSendLevel = SourceBusSendLevel;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.SetSound
inline void UAudioComponent::SetSound(struct USoundBase NewSound) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetSound");

	struct SetSound_Params {
		struct USoundBase NewSound;
	}; SetSound_Params Params;

	Params.NewSound = NewSound;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.SetPitchMultiplier
inline void UAudioComponent::SetPitchMultiplier(float NewPitchMultiplier) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetPitchMultiplier");

	struct SetPitchMultiplier_Params {
		float NewPitchMultiplier;
	}; SetPitchMultiplier_Params Params;

	Params.NewPitchMultiplier = NewPitchMultiplier;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.SetPaused
inline void UAudioComponent::SetPaused(bool bPause) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetPaused");

	struct SetPaused_Params {
		bool bPause;
	}; SetPaused_Params Params;

	Params.bPause = bPause;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.SetLowPassFilterFrequency
inline void UAudioComponent::SetLowPassFilterFrequency(float InLowPassFilterFrequency) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetLowPassFilterFrequency");

	struct SetLowPassFilterFrequency_Params {
		float InLowPassFilterFrequency;
	}; SetLowPassFilterFrequency_Params Params;

	Params.InLowPassFilterFrequency = InLowPassFilterFrequency;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.SetLowPassFilterEnabled
inline void UAudioComponent::SetLowPassFilterEnabled(bool InLowPassFilterEnabled) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetLowPassFilterEnabled");

	struct SetLowPassFilterEnabled_Params {
		bool InLowPassFilterEnabled;
	}; SetLowPassFilterEnabled_Params Params;

	Params.InLowPassFilterEnabled = InLowPassFilterEnabled;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.SetIntParameter
inline void UAudioComponent::SetIntParameter(struct FName InName, int32_t inInt) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetIntParameter");

	struct SetIntParameter_Params {
		struct FName InName;
		int32_t inInt;
	}; SetIntParameter_Params Params;

	Params.InName = InName;
	Params.inInt = inInt;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.SetFloatParameter
inline void UAudioComponent::SetFloatParameter(struct FName InName, float InFloat) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetFloatParameter");

	struct SetFloatParameter_Params {
		struct FName InName;
		float InFloat;
	}; SetFloatParameter_Params Params;

	Params.InName = InName;
	Params.InFloat = InFloat;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.SetBoolParameter
inline void UAudioComponent::SetBoolParameter(struct FName InName, bool InBool) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetBoolParameter");

	struct SetBoolParameter_Params {
		struct FName InName;
		bool InBool;
	}; SetBoolParameter_Params Params;

	Params.InName = InName;
	Params.InBool = InBool;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.Play
inline void UAudioComponent::Play(float StartTime) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.Play");

	struct Play_Params {
		float StartTime;
	}; Play_Params Params;

	Params.StartTime = StartTime;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.IsPlaying
inline bool UAudioComponent::IsPlaying() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.IsPlaying");

	struct IsPlaying_Params {
		
		bool ReturnValue;

	}; IsPlaying_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AudioComponent.HasCookedFFTData
inline bool UAudioComponent::HasCookedFFTData() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.HasCookedFFTData");

	struct HasCookedFFTData_Params {
		
		bool ReturnValue;

	}; HasCookedFFTData_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AudioComponent.HasCookedAmplitudeEnvelopeData
inline bool UAudioComponent::HasCookedAmplitudeEnvelopeData() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.HasCookedAmplitudeEnvelopeData");

	struct HasCookedAmplitudeEnvelopeData_Params {
		
		bool ReturnValue;

	}; HasCookedAmplitudeEnvelopeData_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AudioComponent.GetPlayState
inline enum class EAudioComponentPlayState UAudioComponent::GetPlayState() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.GetPlayState");

	struct GetPlayState_Params {
		
		enum class EAudioComponentPlayState ReturnValue;

	}; GetPlayState_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AudioComponent.GetCookedFFTDataForAllPlayingSounds
inline bool UAudioComponent::GetCookedFFTDataForAllPlayingSounds(struct TArray<struct FSoundWaveSpectralDataPerSound>& OutSoundWaveSpectralData) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.GetCookedFFTDataForAllPlayingSounds");

	struct GetCookedFFTDataForAllPlayingSounds_Params {
		struct TArray<struct FSoundWaveSpectralDataPerSound>& OutSoundWaveSpectralData;
		bool ReturnValue;

	}; GetCookedFFTDataForAllPlayingSounds_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutSoundWaveSpectralData = Params.OutSoundWaveSpectralData;


	return params.ReturnValue;
}

// Function Engine.AudioComponent.GetCookedFFTData
inline bool UAudioComponent::GetCookedFFTData(struct TArray<float>& FrequenciesToGet, struct TArray<struct FSoundWaveSpectralData>& OutSoundWaveSpectralData) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.GetCookedFFTData");

	struct GetCookedFFTData_Params {
		struct TArray<float>& FrequenciesToGet;
		struct TArray<struct FSoundWaveSpectralData>& OutSoundWaveSpectralData;
		bool ReturnValue;

	}; GetCookedFFTData_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	FrequenciesToGet = Params.FrequenciesToGet;
	OutSoundWaveSpectralData = Params.OutSoundWaveSpectralData;


	return params.ReturnValue;
}

// Function Engine.AudioComponent.GetCookedEnvelopeDataForAllPlayingSounds
inline bool UAudioComponent::GetCookedEnvelopeDataForAllPlayingSounds(struct TArray<struct FSoundWaveEnvelopeDataPerSound>& OutEnvelopeData) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.GetCookedEnvelopeDataForAllPlayingSounds");

	struct GetCookedEnvelopeDataForAllPlayingSounds_Params {
		struct TArray<struct FSoundWaveEnvelopeDataPerSound>& OutEnvelopeData;
		bool ReturnValue;

	}; GetCookedEnvelopeDataForAllPlayingSounds_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutEnvelopeData = Params.OutEnvelopeData;


	return params.ReturnValue;
}

// Function Engine.AudioComponent.GetCookedEnvelopeData
inline bool UAudioComponent::GetCookedEnvelopeData(float& OutEnvelopeData) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.GetCookedEnvelopeData");

	struct GetCookedEnvelopeData_Params {
		float& OutEnvelopeData;
		bool ReturnValue;

	}; GetCookedEnvelopeData_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutEnvelopeData = Params.OutEnvelopeData;


	return params.ReturnValue;
}

// Function Engine.AudioComponent.FadeOut
inline void UAudioComponent::FadeOut(float FadeOutDuration, float FadeVolumeLevel, enum class EAudioFaderCurve FadeCurve) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.FadeOut");

	struct FadeOut_Params {
		float FadeOutDuration;
		float FadeVolumeLevel;
		enum class EAudioFaderCurve FadeCurve;
	}; FadeOut_Params Params;

	Params.FadeOutDuration = FadeOutDuration;
	Params.FadeVolumeLevel = FadeVolumeLevel;
	Params.FadeCurve = FadeCurve;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.FadeIn
inline void UAudioComponent::FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, enum class EAudioFaderCurve FadeCurve) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.FadeIn");

	struct FadeIn_Params {
		float FadeInDuration;
		float FadeVolumeLevel;
		float StartTime;
		enum class EAudioFaderCurve FadeCurve;
	}; FadeIn_Params Params;

	Params.FadeInDuration = FadeInDuration;
	Params.FadeVolumeLevel = FadeVolumeLevel;
	Params.StartTime = StartTime;
	Params.FadeCurve = FadeCurve;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.BP_GetAttenuationSettingsToApply
inline bool UAudioComponent::BP_GetAttenuationSettingsToApply(struct FSoundAttenuationSettings& OutAttenuationSettings) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.BP_GetAttenuationSettingsToApply");

	struct BP_GetAttenuationSettingsToApply_Params {
		struct FSoundAttenuationSettings& OutAttenuationSettings;
		bool ReturnValue;

	}; BP_GetAttenuationSettingsToApply_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutAttenuationSettings = Params.OutAttenuationSettings;


	return params.ReturnValue;
}

// Function Engine.AudioComponent.AdjustVolume
inline void UAudioComponent::AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, enum class EAudioFaderCurve FadeCurve) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.AdjustVolume");

	struct AdjustVolume_Params {
		float AdjustVolumeDuration;
		float AdjustVolumeLevel;
		enum class EAudioFaderCurve FadeCurve;
	}; AdjustVolume_Params Params;

	Params.AdjustVolumeDuration = AdjustVolumeDuration;
	Params.AdjustVolumeLevel = AdjustVolumeLevel;
	Params.FadeCurve = FadeCurve;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.AdjustAttenuation
inline void UAudioComponent::AdjustAttenuation(struct FSoundAttenuationSettings& InAttenuationSettings) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.AdjustAttenuation");

	struct AdjustAttenuation_Params {
		struct FSoundAttenuationSettings& InAttenuationSettings;
	}; AdjustAttenuation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InAttenuationSettings = Params.InAttenuationSettings;

}

// Function Engine.GameModeBase.StartPlay
inline void AGameModeBase::StartPlay() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.StartPlay");

	struct StartPlay_Params {
		
	}; StartPlay_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameModeBase.SpawnDefaultPawnFor
inline struct APawn AGameModeBase::SpawnDefaultPawnFor(struct AController NewPlayer, struct UActor StartSpot) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.SpawnDefaultPawnFor");

	struct SpawnDefaultPawnFor_Params {
		struct AController NewPlayer;
		struct UActor StartSpot;
		struct APawn ReturnValue;

	}; SpawnDefaultPawnFor_Params Params;

	Params.NewPlayer = NewPlayer;
	Params.StartSpot = StartSpot;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameModeBase.SpawnDefaultPawnAtTransform
inline struct APawn AGameModeBase::SpawnDefaultPawnAtTransform(struct AController NewPlayer, struct FTransform& SpawnTransform) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.SpawnDefaultPawnAtTransform");

	struct SpawnDefaultPawnAtTransform_Params {
		struct AController NewPlayer;
		struct FTransform& SpawnTransform;
		struct APawn ReturnValue;

	}; SpawnDefaultPawnAtTransform_Params Params;

	Params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SpawnTransform = Params.SpawnTransform;


	return params.ReturnValue;
}

// Function Engine.GameModeBase.ShouldReset
inline bool AGameModeBase::ShouldReset(struct UActor ActorToReset) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.ShouldReset");

	struct ShouldReset_Params {
		struct UActor ActorToReset;
		bool ReturnValue;

	}; ShouldReset_Params Params;

	Params.ActorToReset = ActorToReset;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameModeBase.ReturnToMainMenuHost
inline void AGameModeBase::ReturnToMainMenuHost() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.ReturnToMainMenuHost");

	struct ReturnToMainMenuHost_Params {
		
	}; ReturnToMainMenuHost_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameModeBase.RestartPlayerAtTransform
inline void AGameModeBase::RestartPlayerAtTransform(struct AController NewPlayer, struct FTransform& SpawnTransform) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.RestartPlayerAtTransform");

	struct RestartPlayerAtTransform_Params {
		struct AController NewPlayer;
		struct FTransform& SpawnTransform;
	}; RestartPlayerAtTransform_Params Params;

	Params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SpawnTransform = Params.SpawnTransform;

}

// Function Engine.GameModeBase.RestartPlayerAtPlayerStart
inline void AGameModeBase::RestartPlayerAtPlayerStart(struct AController NewPlayer, struct UActor StartSpot) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.RestartPlayerAtPlayerStart");

	struct RestartPlayerAtPlayerStart_Params {
		struct AController NewPlayer;
		struct UActor StartSpot;
	}; RestartPlayerAtPlayerStart_Params Params;

	Params.NewPlayer = NewPlayer;
	Params.StartSpot = StartSpot;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameModeBase.RestartPlayer
inline void AGameModeBase::RestartPlayer(struct AController NewPlayer) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.RestartPlayer");

	struct RestartPlayer_Params {
		struct AController NewPlayer;
	}; RestartPlayer_Params Params;

	Params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameModeBase.ResetLevel
inline void AGameModeBase::ResetLevel() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.ResetLevel");

	struct ResetLevel_Params {
		
	}; ResetLevel_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameModeBase.PlayerCanRestart
inline bool AGameModeBase::PlayerCanRestart(struct APlayerController Player) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.PlayerCanRestart");

	struct PlayerCanRestart_Params {
		struct APlayerController Player;
		bool ReturnValue;

	}; PlayerCanRestart_Params Params;

	Params.Player = Player;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameModeBase.MustSpectate
inline bool AGameModeBase::MustSpectate(struct APlayerController NewPlayerController) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.MustSpectate");

	struct MustSpectate_Params {
		struct APlayerController NewPlayerController;
		bool ReturnValue;

	}; MustSpectate_Params Params;

	Params.NewPlayerController = NewPlayerController;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameModeBase.K2_PostLogin
inline void AGameModeBase::K2_PostLogin(struct APlayerController NewPlayer) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.K2_PostLogin");

	struct K2_PostLogin_Params {
		struct APlayerController NewPlayer;
	}; K2_PostLogin_Params Params;

	Params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameModeBase.K2_OnSwapPlayerControllers
inline void AGameModeBase::K2_OnSwapPlayerControllers(struct APlayerController OldPC, struct APlayerController NewPC) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.K2_OnSwapPlayerControllers");

	struct K2_OnSwapPlayerControllers_Params {
		struct APlayerController OldPC;
		struct APlayerController NewPC;
	}; K2_OnSwapPlayerControllers_Params Params;

	Params.OldPC = OldPC;
	Params.NewPC = NewPC;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameModeBase.K2_OnRestartPlayer
inline void AGameModeBase::K2_OnRestartPlayer(struct AController NewPlayer) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.K2_OnRestartPlayer");

	struct K2_OnRestartPlayer_Params {
		struct AController NewPlayer;
	}; K2_OnRestartPlayer_Params Params;

	Params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameModeBase.K2_OnLogout
inline void AGameModeBase::K2_OnLogout(struct AController ExitingController) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.K2_OnLogout");

	struct K2_OnLogout_Params {
		struct AController ExitingController;
	}; K2_OnLogout_Params Params;

	Params.ExitingController = ExitingController;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameModeBase.K2_OnChangeName
inline void AGameModeBase::K2_OnChangeName(struct AController Other, struct FString NewName, bool bNameChange) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.K2_OnChangeName");

	struct K2_OnChangeName_Params {
		struct AController Other;
		struct FString NewName;
		bool bNameChange;
	}; K2_OnChangeName_Params Params;

	Params.Other = Other;
	Params.NewName = NewName;
	Params.bNameChange = bNameChange;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameModeBase.K2_FindPlayerStart
inline struct UActor AGameModeBase::K2_FindPlayerStart(struct AController Player, struct FString IncomingName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.K2_FindPlayerStart");

	struct K2_FindPlayerStart_Params {
		struct AController Player;
		struct FString IncomingName;
		struct UActor ReturnValue;

	}; K2_FindPlayerStart_Params Params;

	Params.Player = Player;
	Params.IncomingName = IncomingName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameModeBase.InitStartSpot
inline void AGameModeBase::InitStartSpot(struct UActor StartSpot, struct AController NewPlayer) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.InitStartSpot");

	struct InitStartSpot_Params {
		struct UActor StartSpot;
		struct AController NewPlayer;
	}; InitStartSpot_Params Params;

	Params.StartSpot = StartSpot;
	Params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameModeBase.InitializeHUDForPlayer
inline void AGameModeBase::InitializeHUDForPlayer(struct APlayerController NewPlayer) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.InitializeHUDForPlayer");

	struct InitializeHUDForPlayer_Params {
		struct APlayerController NewPlayer;
	}; InitializeHUDForPlayer_Params Params;

	Params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameModeBase.HasMatchStarted
inline bool AGameModeBase::HasMatchStarted() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.HasMatchStarted");

	struct HasMatchStarted_Params {
		
		bool ReturnValue;

	}; HasMatchStarted_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameModeBase.HandleStartingNewPlayer
inline void AGameModeBase::HandleStartingNewPlayer(struct APlayerController NewPlayer) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.HandleStartingNewPlayer");

	struct HandleStartingNewPlayer_Params {
		struct APlayerController NewPlayer;
	}; HandleStartingNewPlayer_Params Params;

	Params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameModeBase.GetNumSpectators
inline int32_t AGameModeBase::GetNumSpectators() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.GetNumSpectators");

	struct GetNumSpectators_Params {
		
		int32_t ReturnValue;

	}; GetNumSpectators_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameModeBase.GetNumPlayers
inline int32_t AGameModeBase::GetNumPlayers() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.GetNumPlayers");

	struct GetNumPlayers_Params {
		
		int32_t ReturnValue;

	}; GetNumPlayers_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameModeBase.GetDefaultPawnClassForController
inline struct UClass* AGameModeBase::GetDefaultPawnClassForController(struct AController InController) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.GetDefaultPawnClassForController");

	struct GetDefaultPawnClassForController_Params {
		struct AController InController;
		struct UClass* ReturnValue;

	}; GetDefaultPawnClassForController_Params Params;

	Params.InController = InController;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameModeBase.FindPlayerStart
inline struct UActor AGameModeBase::FindPlayerStart(struct AController Player, struct FString IncomingName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.FindPlayerStart");

	struct FindPlayerStart_Params {
		struct AController Player;
		struct FString IncomingName;
		struct UActor ReturnValue;

	}; FindPlayerStart_Params Params;

	Params.Player = Player;
	Params.IncomingName = IncomingName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameModeBase.ChoosePlayerStart
inline struct UActor AGameModeBase::ChoosePlayerStart(struct AController Player) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.ChoosePlayerStart");

	struct ChoosePlayerStart_Params {
		struct AController Player;
		struct UActor ReturnValue;

	}; ChoosePlayerStart_Params Params;

	Params.Player = Player;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameModeBase.ChangeName
inline void AGameModeBase::ChangeName(struct AController Controller, struct FString NewName, bool bNameChange) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.ChangeName");

	struct ChangeName_Params {
		struct AController Controller;
		struct FString NewName;
		bool bNameChange;
	}; ChangeName_Params Params;

	Params.Controller = Controller;
	Params.NewName = NewName;
	Params.bNameChange = bNameChange;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameModeBase.CanSpectate
inline bool AGameModeBase::CanSpectate(struct APlayerController Viewer, struct APlayerState ViewTarget) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.CanSpectate");

	struct CanSpectate_Params {
		struct APlayerController Viewer;
		struct APlayerState ViewTarget;
		bool ReturnValue;

	}; CanSpectate_Params Params;

	Params.Viewer = Viewer;
	Params.ViewTarget = ViewTarget;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameMode.StartMatch
inline void AGameMode::StartMatch() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.StartMatch");

	struct StartMatch_Params {
		
	}; StartMatch_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameMode.SetBandwidthLimit
inline void AGameMode::SetBandwidthLimit(float AsyncIOBandwidthLimit) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.SetBandwidthLimit");

	struct SetBandwidthLimit_Params {
		float AsyncIOBandwidthLimit;
	}; SetBandwidthLimit_Params Params;

	Params.AsyncIOBandwidthLimit = AsyncIOBandwidthLimit;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameMode.Say
inline void AGameMode::Say(struct FString Msg) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.Say");

	struct Say_Params {
		struct FString Msg;
	}; Say_Params Params;

	Params.Msg = Msg;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameMode.RestartGame
inline void AGameMode::RestartGame() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.RestartGame");

	struct RestartGame_Params {
		
	}; RestartGame_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameMode.ReadyToStartMatch
inline bool AGameMode::ReadyToStartMatch() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.ReadyToStartMatch");

	struct ReadyToStartMatch_Params {
		
		bool ReturnValue;

	}; ReadyToStartMatch_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameMode.ReadyToEndMatch
inline bool AGameMode::ReadyToEndMatch() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.ReadyToEndMatch");

	struct ReadyToEndMatch_Params {
		
		bool ReturnValue;

	}; ReadyToEndMatch_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameMode.K2_OnSetMatchState
inline void AGameMode::K2_OnSetMatchState(struct FName NewState) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.K2_OnSetMatchState");

	struct K2_OnSetMatchState_Params {
		struct FName NewState;
	}; K2_OnSetMatchState_Params Params;

	Params.NewState = NewState;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameMode.IsMatchInProgress
inline bool AGameMode::IsMatchInProgress() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.IsMatchInProgress");

	struct IsMatchInProgress_Params {
		
		bool ReturnValue;

	}; IsMatchInProgress_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameMode.HasMatchEnded
inline bool AGameMode::HasMatchEnded() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.HasMatchEnded");

	struct HasMatchEnded_Params {
		
		bool ReturnValue;

	}; HasMatchEnded_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameMode.GetMatchState
inline struct FName AGameMode::GetMatchState() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.GetMatchState");

	struct GetMatchState_Params {
		
		struct FName ReturnValue;

	}; GetMatchState_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameMode.EndMatch
inline void AGameMode::EndMatch() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.EndMatch");

	struct EndMatch_Params {
		
	}; EndMatch_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameMode.AbortMatch
inline void AGameMode::AbortMatch() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.AbortMatch");

	struct AbortMatch_Params {
		
	}; AbortMatch_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameStateBase.OnRep_SpectatorClass
inline void AGameStateBase::OnRep_SpectatorClass() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStateBase.OnRep_SpectatorClass");

	struct OnRep_SpectatorClass_Params {
		
	}; OnRep_SpectatorClass_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameStateBase.OnRep_ReplicatedWorldTimeSeconds
inline void AGameStateBase::OnRep_ReplicatedWorldTimeSeconds() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStateBase.OnRep_ReplicatedWorldTimeSeconds");

	struct OnRep_ReplicatedWorldTimeSeconds_Params {
		
	}; OnRep_ReplicatedWorldTimeSeconds_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameStateBase.OnRep_ReplicatedHasBegunPlay
inline void AGameStateBase::OnRep_ReplicatedHasBegunPlay() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStateBase.OnRep_ReplicatedHasBegunPlay");

	struct OnRep_ReplicatedHasBegunPlay_Params {
		
	}; OnRep_ReplicatedHasBegunPlay_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameStateBase.OnRep_GameModeClass
inline void AGameStateBase::OnRep_GameModeClass() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStateBase.OnRep_GameModeClass");

	struct OnRep_GameModeClass_Params {
		
	}; OnRep_GameModeClass_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameStateBase.HasMatchStarted
inline bool AGameStateBase::HasMatchStarted() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStateBase.HasMatchStarted");

	struct HasMatchStarted_Params {
		
		bool ReturnValue;

	}; HasMatchStarted_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameStateBase.HasBegunPlay
inline bool AGameStateBase::HasBegunPlay() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStateBase.HasBegunPlay");

	struct HasBegunPlay_Params {
		
		bool ReturnValue;

	}; HasBegunPlay_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameStateBase.GetServerWorldTimeSeconds
inline float AGameStateBase::GetServerWorldTimeSeconds() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStateBase.GetServerWorldTimeSeconds");

	struct GetServerWorldTimeSeconds_Params {
		
		float ReturnValue;

	}; GetServerWorldTimeSeconds_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameStateBase.GetPlayerStartTime
inline float AGameStateBase::GetPlayerStartTime(struct AController Controller) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStateBase.GetPlayerStartTime");

	struct GetPlayerStartTime_Params {
		struct AController Controller;
		float ReturnValue;

	}; GetPlayerStartTime_Params Params;

	Params.Controller = Controller;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameStateBase.GetPlayerRespawnDelay
inline float AGameStateBase::GetPlayerRespawnDelay(struct AController Controller) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStateBase.GetPlayerRespawnDelay");

	struct GetPlayerRespawnDelay_Params {
		struct AController Controller;
		float ReturnValue;

	}; GetPlayerRespawnDelay_Params Params;

	Params.Controller = Controller;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameState.OnRep_MatchState
inline void AGameState::OnRep_MatchState() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameState.OnRep_MatchState");

	struct OnRep_MatchState_Params {
		
	}; OnRep_MatchState_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameState.OnRep_ElapsedTime
inline void AGameState::OnRep_ElapsedTime() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameState.OnRep_ElapsedTime");

	struct OnRep_ElapsedTime_Params {
		
	}; OnRep_ElapsedTime_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Controller.UnPossess
inline void AController::UnPossess() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.UnPossess");

	struct UnPossess_Params {
		
	}; UnPossess_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Controller.StopMovement
inline void AController::StopMovement() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.StopMovement");

	struct StopMovement_Params {
		
	}; StopMovement_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Controller.SetInitialLocationAndRotation
inline void AController::SetInitialLocationAndRotation(struct FVector& NewLocation, struct FRotator& NewRotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetInitialLocationAndRotation");

	struct SetInitialLocationAndRotation_Params {
		struct FVector& NewLocation;
		struct FRotator& NewRotation;
	}; SetInitialLocationAndRotation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewLocation = Params.NewLocation;
	NewRotation = Params.NewRotation;

}

// Function Engine.Controller.SetIgnoreMoveInput
inline void AController::SetIgnoreMoveInput(bool bNewMoveInput) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetIgnoreMoveInput");

	struct SetIgnoreMoveInput_Params {
		bool bNewMoveInput;
	}; SetIgnoreMoveInput_Params Params;

	Params.bNewMoveInput = bNewMoveInput;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Controller.SetIgnoreLookInput
inline void AController::SetIgnoreLookInput(bool bNewLookInput) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetIgnoreLookInput");

	struct SetIgnoreLookInput_Params {
		bool bNewLookInput;
	}; SetIgnoreLookInput_Params Params;

	Params.bNewLookInput = bNewLookInput;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Controller.SetControlRotation
inline void AController::SetControlRotation(struct FRotator& NewRotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetControlRotation");

	struct SetControlRotation_Params {
		struct FRotator& NewRotation;
	}; SetControlRotation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewRotation = Params.NewRotation;

}

// Function Engine.Controller.ResetIgnoreMoveInput
inline void AController::ResetIgnoreMoveInput() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ResetIgnoreMoveInput");

	struct ResetIgnoreMoveInput_Params {
		
	}; ResetIgnoreMoveInput_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Controller.ResetIgnoreLookInput
inline void AController::ResetIgnoreLookInput() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ResetIgnoreLookInput");

	struct ResetIgnoreLookInput_Params {
		
	}; ResetIgnoreLookInput_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Controller.ResetIgnoreInputFlags
inline void AController::ResetIgnoreInputFlags() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ResetIgnoreInputFlags");

	struct ResetIgnoreInputFlags_Params {
		
	}; ResetIgnoreInputFlags_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Controller.ReceiveUnPossess
inline void AController::ReceiveUnPossess(struct APawn UnpossessedPawn) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ReceiveUnPossess");

	struct ReceiveUnPossess_Params {
		struct APawn UnpossessedPawn;
	}; ReceiveUnPossess_Params Params;

	Params.UnpossessedPawn = UnpossessedPawn;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Controller.ReceivePossess
inline void AController::ReceivePossess(struct APawn PossessedPawn) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ReceivePossess");

	struct ReceivePossess_Params {
		struct APawn PossessedPawn;
	}; ReceivePossess_Params Params;

	Params.PossessedPawn = PossessedPawn;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Controller.ReceiveInstigatedAnyDamage
inline void AController::ReceiveInstigatedAnyDamage(float Damage, struct UDamageType DamageType, struct UActor DamagedActor, struct UActor DamageCauser) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ReceiveInstigatedAnyDamage");

	struct ReceiveInstigatedAnyDamage_Params {
		float Damage;
		struct UDamageType DamageType;
		struct UActor DamagedActor;
		struct UActor DamageCauser;
	}; ReceiveInstigatedAnyDamage_Params Params;

	Params.Damage = Damage;
	Params.DamageType = DamageType;
	Params.DamagedActor = DamagedActor;
	Params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Controller.Possess
inline void AController::Possess(struct APawn InPawn) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.Possess");

	struct Possess_Params {
		struct APawn InPawn;
	}; Possess_Params Params;

	Params.InPawn = InPawn;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Controller.OnRep_PlayerState
inline void AController::OnRep_PlayerState() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnRep_PlayerState");

	struct OnRep_PlayerState_Params {
		
	}; OnRep_PlayerState_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Controller.OnRep_Pawn
inline void AController::OnRep_Pawn() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnRep_Pawn");

	struct OnRep_Pawn_Params {
		
	}; OnRep_Pawn_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Controller.LineOfSightTo
inline bool AController::LineOfSightTo(struct UActor Other, struct FVector ViewPoint, bool bAlternateChecks) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.LineOfSightTo");

	struct LineOfSightTo_Params {
		struct UActor Other;
		struct FVector ViewPoint;
		bool bAlternateChecks;
		bool ReturnValue;

	}; LineOfSightTo_Params Params;

	Params.Other = Other;
	Params.ViewPoint = ViewPoint;
	Params.bAlternateChecks = bAlternateChecks;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Controller.K2_GetPawn
inline struct APawn AController::K2_GetPawn() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.K2_GetPawn");

	struct K2_GetPawn_Params {
		
		struct APawn ReturnValue;

	}; K2_GetPawn_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Controller.IsPlayerController
inline bool AController::IsPlayerController() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsPlayerController");

	struct IsPlayerController_Params {
		
		bool ReturnValue;

	}; IsPlayerController_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Controller.IsMoveInputIgnored
inline bool AController::IsMoveInputIgnored() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsMoveInputIgnored");

	struct IsMoveInputIgnored_Params {
		
		bool ReturnValue;

	}; IsMoveInputIgnored_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Controller.IsLookInputIgnored
inline bool AController::IsLookInputIgnored() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsLookInputIgnored");

	struct IsLookInputIgnored_Params {
		
		bool ReturnValue;

	}; IsLookInputIgnored_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Controller.IsLocalPlayerController
inline bool AController::IsLocalPlayerController() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsLocalPlayerController");

	struct IsLocalPlayerController_Params {
		
		bool ReturnValue;

	}; IsLocalPlayerController_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Controller.IsLocalController
inline bool AController::IsLocalController() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsLocalController");

	struct IsLocalController_Params {
		
		bool ReturnValue;

	}; IsLocalController_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Controller.GetViewTarget
inline struct UActor AController::GetViewTarget() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetViewTarget");

	struct GetViewTarget_Params {
		
		struct UActor ReturnValue;

	}; GetViewTarget_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Controller.GetDesiredRotation
inline struct FRotator AController::GetDesiredRotation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetDesiredRotation");

	struct GetDesiredRotation_Params {
		
		struct FRotator ReturnValue;

	}; GetDesiredRotation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Controller.GetControlRotation
inline struct FRotator AController::GetControlRotation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetControlRotation");

	struct GetControlRotation_Params {
		
		struct FRotator ReturnValue;

	}; GetControlRotation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Controller.ClientSetRotation
inline void AController::ClientSetRotation(struct FRotator NewRotation, bool bResetCamera) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientSetRotation");

	struct ClientSetRotation_Params {
		struct FRotator NewRotation;
		bool bResetCamera;
	}; ClientSetRotation_Params Params;

	Params.NewRotation = NewRotation;
	Params.bResetCamera = bResetCamera;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Controller.ClientSetLocation
inline void AController::ClientSetLocation(struct FVector NewLocation, struct FRotator NewRotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientSetLocation");

	struct ClientSetLocation_Params {
		struct FVector NewLocation;
		struct FRotator NewRotation;
	}; ClientSetLocation_Params Params;

	Params.NewLocation = NewLocation;
	Params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Controller.CastToPlayerController
inline struct APlayerController AController::CastToPlayerController() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.CastToPlayerController");

	struct CastToPlayerController_Params {
		
		struct APlayerController ReturnValue;

	}; CastToPlayerController_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerController.WasInputKeyJustReleased
inline bool APlayerController::WasInputKeyJustReleased(struct FKey Key) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.WasInputKeyJustReleased");

	struct WasInputKeyJustReleased_Params {
		struct FKey Key;
		bool ReturnValue;

	}; WasInputKeyJustReleased_Params Params;

	Params.Key = Key;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerController.WasInputKeyJustPressed
inline bool APlayerController::WasInputKeyJustPressed(struct FKey Key) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.WasInputKeyJustPressed");

	struct WasInputKeyJustPressed_Params {
		struct FKey Key;
		bool ReturnValue;

	}; WasInputKeyJustPressed_Params Params;

	Params.Key = Key;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerController.ToggleSpeaking
inline void APlayerController::ToggleSpeaking(bool bInSpeaking) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ToggleSpeaking");

	struct ToggleSpeaking_Params {
		bool bInSpeaking;
	}; ToggleSpeaking_Params Params;

	Params.bInSpeaking = bInSpeaking;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.TestServerLevelVisibilityChange
inline void APlayerController::TestServerLevelVisibilityChange(struct FName PackageName, struct FName Filename) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.TestServerLevelVisibilityChange");

	struct TestServerLevelVisibilityChange_Params {
		struct FName PackageName;
		struct FName Filename;
	}; TestServerLevelVisibilityChange_Params Params;

	Params.PackageName = PackageName;
	Params.Filename = Filename;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.SwitchLevel
inline void APlayerController::SwitchLevel(struct FString URL) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SwitchLevel");

	struct SwitchLevel_Params {
		struct FString URL;
	}; SwitchLevel_Params Params;

	Params.URL = URL;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.StopHapticEffect
inline void APlayerController::StopHapticEffect(enum class EControllerHand Hand) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.StopHapticEffect");

	struct StopHapticEffect_Params {
		enum class EControllerHand Hand;
	}; StopHapticEffect_Params Params;

	Params.Hand = Hand;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.StartFire
inline void APlayerController::StartFire(char FireModeNum) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.StartFire");

	struct StartFire_Params {
		char FireModeNum;
	}; StartFire_Params Params;

	Params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.SetVirtualJoystickVisibility
inline void APlayerController::SetVirtualJoystickVisibility(bool bVisible) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetVirtualJoystickVisibility");

	struct SetVirtualJoystickVisibility_Params {
		bool bVisible;
	}; SetVirtualJoystickVisibility_Params Params;

	Params.bVisible = bVisible;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.SetViewTargetWithBlend
inline void APlayerController::SetViewTargetWithBlend(struct UActor NewViewTarget, float BlendTime, enum class EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetViewTargetWithBlend");

	struct SetViewTargetWithBlend_Params {
		struct UActor NewViewTarget;
		float BlendTime;
		enum class EViewTargetBlendFunction BlendFunc;
		float BlendExp;
		bool bLockOutgoing;
	}; SetViewTargetWithBlend_Params Params;

	Params.NewViewTarget = NewViewTarget;
	Params.BlendTime = BlendTime;
	Params.BlendFunc = BlendFunc;
	Params.BlendExp = BlendExp;
	Params.bLockOutgoing = bLockOutgoing;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.SetName
inline void APlayerController::SetName(struct FString S) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetName");

	struct SetName_Params {
		struct FString S;
	}; SetName_Params Params;

	Params.S = S;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.SetMouseLocation
inline void APlayerController::SetMouseLocation(int32_t X, int32_t Y) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetMouseLocation");

	struct SetMouseLocation_Params {
		int32_t X;
		int32_t Y;
	}; SetMouseLocation_Params Params;

	Params.X = X;
	Params.Y = Y;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.SetMouseCursorWidget
inline void APlayerController::SetMouseCursorWidget(enum class EMouseCursor Cursor, struct UUserWidget CursorWidget) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetMouseCursorWidget");

	struct SetMouseCursorWidget_Params {
		enum class EMouseCursor Cursor;
		struct UUserWidget CursorWidget;
	}; SetMouseCursorWidget_Params Params;

	Params.Cursor = Cursor;
	Params.CursorWidget = CursorWidget;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.SetHapticsByValue
inline void APlayerController::SetHapticsByValue(float Frequency, float Amplitude, enum class EControllerHand Hand) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetHapticsByValue");

	struct SetHapticsByValue_Params {
		float Frequency;
		float Amplitude;
		enum class EControllerHand Hand;
	}; SetHapticsByValue_Params Params;

	Params.Frequency = Frequency;
	Params.Amplitude = Amplitude;
	Params.Hand = Hand;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.SetDisableHaptics
inline void APlayerController::SetDisableHaptics(bool bNewDisabled) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetDisableHaptics");

	struct SetDisableHaptics_Params {
		bool bNewDisabled;
	}; SetDisableHaptics_Params Params;

	Params.bNewDisabled = bNewDisabled;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.SetControllerLightColor
inline void APlayerController::SetControllerLightColor(struct FColor Color) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetControllerLightColor");

	struct SetControllerLightColor_Params {
		struct FColor Color;
	}; SetControllerLightColor_Params Params;

	Params.Color = Color;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.SetCinematicMode
inline void APlayerController::SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetCinematicMode");

	struct SetCinematicMode_Params {
		bool bInCinematicMode;
		bool bHidePlayer;
		bool bAffectsHUD;
		bool bAffectsMovement;
		bool bAffectsTurning;
	}; SetCinematicMode_Params Params;

	Params.bInCinematicMode = bInCinematicMode;
	Params.bHidePlayer = bHidePlayer;
	Params.bAffectsHUD = bAffectsHUD;
	Params.bAffectsMovement = bAffectsMovement;
	Params.bAffectsTurning = bAffectsTurning;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.SetAudioListenerOverride
inline void APlayerController::SetAudioListenerOverride(struct USceneComponent AttachToComponent, struct FVector Location, struct FRotator Rotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetAudioListenerOverride");

	struct SetAudioListenerOverride_Params {
		struct USceneComponent AttachToComponent;
		struct FVector Location;
		struct FRotator Rotation;
	}; SetAudioListenerOverride_Params Params;

	Params.AttachToComponent = AttachToComponent;
	Params.Location = Location;
	Params.Rotation = Rotation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.SetAudioListenerAttenuationOverride
inline void APlayerController::SetAudioListenerAttenuationOverride(struct USceneComponent AttachToComponent, struct FVector AttenuationLocationOVerride) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetAudioListenerAttenuationOverride");

	struct SetAudioListenerAttenuationOverride_Params {
		struct USceneComponent AttachToComponent;
		struct FVector AttenuationLocationOVerride;
	}; SetAudioListenerAttenuationOverride_Params Params;

	Params.AttachToComponent = AttachToComponent;
	Params.AttenuationLocationOVerride = AttenuationLocationOVerride;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerViewSelf
inline void APlayerController::ServerViewSelf(struct FViewTargetTransitionParams TransitionParams) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerViewSelf");

	struct ServerViewSelf_Params {
		struct FViewTargetTransitionParams TransitionParams;
	}; ServerViewSelf_Params Params;

	Params.TransitionParams = TransitionParams;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerViewPrevPlayer
inline void APlayerController::ServerViewPrevPlayer() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerViewPrevPlayer");

	struct ServerViewPrevPlayer_Params {
		
	}; ServerViewPrevPlayer_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerViewNextPlayer
inline void APlayerController::ServerViewNextPlayer() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerViewNextPlayer");

	struct ServerViewNextPlayer_Params {
		
	}; ServerViewNextPlayer_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerVerifyViewTarget
inline void APlayerController::ServerVerifyViewTarget() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerVerifyViewTarget");

	struct ServerVerifyViewTarget_Params {
		
	}; ServerVerifyViewTarget_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerUpdateMultipleLevelsVisibility
inline void APlayerController::ServerUpdateMultipleLevelsVisibility(struct TArray<struct FUpdateLevelVisibilityLevelInfo> LevelVisibilities) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUpdateMultipleLevelsVisibility");

	struct ServerUpdateMultipleLevelsVisibility_Params {
		struct TArray<struct FUpdateLevelVisibilityLevelInfo> LevelVisibilities;
	}; ServerUpdateMultipleLevelsVisibility_Params Params;

	Params.LevelVisibilities = LevelVisibilities;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerUpdateLevelVisibility
inline void APlayerController::ServerUpdateLevelVisibility(struct FUpdateLevelVisibilityLevelInfo LevelVisibility) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUpdateLevelVisibility");

	struct ServerUpdateLevelVisibility_Params {
		struct FUpdateLevelVisibilityLevelInfo LevelVisibility;
	}; ServerUpdateLevelVisibility_Params Params;

	Params.LevelVisibility = LevelVisibility;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerUpdateCamera
inline void APlayerController::ServerUpdateCamera(struct FVector_NetQuantize CamLoc, int32_t CamPitchAndYaw) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUpdateCamera");

	struct ServerUpdateCamera_Params {
		struct FVector_NetQuantize CamLoc;
		int32_t CamPitchAndYaw;
	}; ServerUpdateCamera_Params Params;

	Params.CamLoc = CamLoc;
	Params.CamPitchAndYaw = CamPitchAndYaw;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerUnmutePlayer
inline void APlayerController::ServerUnmutePlayer(struct FUniqueNetIdRepl PlayerId) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUnmutePlayer");

	struct ServerUnmutePlayer_Params {
		struct FUniqueNetIdRepl PlayerId;
	}; ServerUnmutePlayer_Params Params;

	Params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerToggleAILogging
inline void APlayerController::ServerToggleAILogging() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerToggleAILogging");

	struct ServerToggleAILogging_Params {
		
	}; ServerToggleAILogging_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerShortTimeout
inline void APlayerController::ServerShortTimeout() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerShortTimeout");

	struct ServerShortTimeout_Params {
		
	}; ServerShortTimeout_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerSetSpectatorWaiting
inline void APlayerController::ServerSetSpectatorWaiting(bool bWaiting) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSetSpectatorWaiting");

	struct ServerSetSpectatorWaiting_Params {
		bool bWaiting;
	}; ServerSetSpectatorWaiting_Params Params;

	Params.bWaiting = bWaiting;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerSetSpectatorLocation
inline void APlayerController::ServerSetSpectatorLocation(struct FVector NewLoc, struct FRotator NewRot) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSetSpectatorLocation");

	struct ServerSetSpectatorLocation_Params {
		struct FVector NewLoc;
		struct FRotator NewRot;
	}; ServerSetSpectatorLocation_Params Params;

	Params.NewLoc = NewLoc;
	Params.NewRot = NewRot;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerRestartPlayer
inline void APlayerController::ServerRestartPlayer() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerRestartPlayer");

	struct ServerRestartPlayer_Params {
		
	}; ServerRestartPlayer_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerPause
inline void APlayerController::ServerPause() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerPause");

	struct ServerPause_Params {
		
	}; ServerPause_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerNotifyLoadedWorld
inline void APlayerController::ServerNotifyLoadedWorld(struct FName WorldPackageName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerNotifyLoadedWorld");

	struct ServerNotifyLoadedWorld_Params {
		struct FName WorldPackageName;
	}; ServerNotifyLoadedWorld_Params Params;

	Params.WorldPackageName = WorldPackageName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerMutePlayer
inline void APlayerController::ServerMutePlayer(struct FUniqueNetIdRepl PlayerId) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerMutePlayer");

	struct ServerMutePlayer_Params {
		struct FUniqueNetIdRepl PlayerId;
	}; ServerMutePlayer_Params Params;

	Params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerExecRPC
inline void APlayerController::ServerExecRPC(struct FString Msg) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerExecRPC");

	struct ServerExecRPC_Params {
		struct FString Msg;
	}; ServerExecRPC_Params Params;

	Params.Msg = Msg;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerExec
inline void APlayerController::ServerExec(struct FString Msg) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerExec");

	struct ServerExec_Params {
		struct FString Msg;
	}; ServerExec_Params Params;

	Params.Msg = Msg;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerCheckClientPossessionReliable
inline void APlayerController::ServerCheckClientPossessionReliable() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerCheckClientPossessionReliable");

	struct ServerCheckClientPossessionReliable_Params {
		
	}; ServerCheckClientPossessionReliable_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerCheckClientPossession
inline void APlayerController::ServerCheckClientPossession() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerCheckClientPossession");

	struct ServerCheckClientPossession_Params {
		
	}; ServerCheckClientPossession_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerChangeName
inline void APlayerController::ServerChangeName(struct FString S) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerChangeName");

	struct ServerChangeName_Params {
		struct FString S;
	}; ServerChangeName_Params Params;

	Params.S = S;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerCamera
inline void APlayerController::ServerCamera(struct FName NewMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerCamera");

	struct ServerCamera_Params {
		struct FName NewMode;
	}; ServerCamera_Params Params;

	Params.NewMode = NewMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerAcknowledgePossession
inline void APlayerController::ServerAcknowledgePossession(struct APawn P) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerAcknowledgePossession");

	struct ServerAcknowledgePossession_Params {
		struct APawn P;
	}; ServerAcknowledgePossession_Params Params;

	Params.P = P;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.SendToConsole
inline void APlayerController::SendToConsole(struct FString Command) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SendToConsole");

	struct SendToConsole_Params {
		struct FString Command;
	}; SendToConsole_Params Params;

	Params.Command = Command;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.RestartLevel
inline void APlayerController::RestartLevel() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RestartLevel");

	struct RestartLevel_Params {
		
	}; RestartLevel_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ResetControllerLightColor
inline void APlayerController::ResetControllerLightColor() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ResetControllerLightColor");

	struct ResetControllerLightColor_Params {
		
	}; ResetControllerLightColor_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ProjectWorldLocationToScreen
inline bool APlayerController::ProjectWorldLocationToScreen(struct FVector WorldLocation, struct FVector2D& ScreenLocation, bool bPlayerViewportRelative) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ProjectWorldLocationToScreen");

	struct ProjectWorldLocationToScreen_Params {
		struct FVector WorldLocation;
		struct FVector2D& ScreenLocation;
		bool bPlayerViewportRelative;
		bool ReturnValue;

	}; ProjectWorldLocationToScreen_Params Params;

	Params.WorldLocation = WorldLocation;
	Params.bPlayerViewportRelative = bPlayerViewportRelative;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	ScreenLocation = Params.ScreenLocation;


	return params.ReturnValue;
}

// Function Engine.PlayerController.PlayHapticEffect
inline void APlayerController::PlayHapticEffect(struct UHapticFeedbackEffect_Base HapticEffect, enum class EControllerHand Hand, float Scale, bool bLoop) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PlayHapticEffect");

	struct PlayHapticEffect_Params {
		struct UHapticFeedbackEffect_Base HapticEffect;
		enum class EControllerHand Hand;
		float Scale;
		bool bLoop;
	}; PlayHapticEffect_Params Params;

	Params.HapticEffect = HapticEffect;
	Params.Hand = Hand;
	Params.Scale = Scale;
	Params.bLoop = bLoop;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.PlayDynamicForceFeedback
inline void APlayerController::PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, enum class EDynamicForceFeedbackAction Action, struct FLatentActionInfo LatentInfo) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PlayDynamicForceFeedback");

	struct PlayDynamicForceFeedback_Params {
		float Intensity;
		float Duration;
		bool bAffectsLeftLarge;
		bool bAffectsLeftSmall;
		bool bAffectsRightLarge;
		bool bAffectsRightSmall;
		enum class EDynamicForceFeedbackAction Action;
		struct FLatentActionInfo LatentInfo;
	}; PlayDynamicForceFeedback_Params Params;

	Params.Intensity = Intensity;
	Params.Duration = Duration;
	Params.bAffectsLeftLarge = bAffectsLeftLarge;
	Params.bAffectsLeftSmall = bAffectsLeftSmall;
	Params.bAffectsRightLarge = bAffectsRightLarge;
	Params.bAffectsRightSmall = bAffectsRightSmall;
	Params.Action = Action;
	Params.LatentInfo = LatentInfo;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.Pause
inline void APlayerController::Pause() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Pause");

	struct Pause_Params {
		
	}; Pause_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.OnServerStartedVisualLogger
inline void APlayerController::OnServerStartedVisualLogger(bool bIsLogging) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnServerStartedVisualLogger");

	struct OnServerStartedVisualLogger_Params {
		bool bIsLogging;
	}; OnServerStartedVisualLogger_Params Params;

	Params.bIsLogging = bIsLogging;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.LocalTravel
inline void APlayerController::LocalTravel(struct FString URL) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LocalTravel");

	struct LocalTravel_Params {
		struct FString URL;
	}; LocalTravel_Params Params;

	Params.URL = URL;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.K2_ClientPlayForceFeedback
inline void APlayerController::K2_ClientPlayForceFeedback(struct UForceFeedbackEffect ForceFeedbackEffect, struct FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.K2_ClientPlayForceFeedback");

	struct K2_ClientPlayForceFeedback_Params {
		struct UForceFeedbackEffect ForceFeedbackEffect;
		struct FName Tag;
		bool bLooping;
		bool bIgnoreTimeDilation;
		bool bPlayWhilePaused;
	}; K2_ClientPlayForceFeedback_Params Params;

	Params.ForceFeedbackEffect = ForceFeedbackEffect;
	Params.Tag = Tag;
	Params.bLooping = bLooping;
	Params.bIgnoreTimeDilation = bIgnoreTimeDilation;
	Params.bPlayWhilePaused = bPlayWhilePaused;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.IsInputKeyDown
inline bool APlayerController::IsInputKeyDown(struct FKey Key) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsInputKeyDown");

	struct IsInputKeyDown_Params {
		struct FKey Key;
		bool ReturnValue;

	}; IsInputKeyDown_Params Params;

	Params.Key = Key;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerController.GetViewportSize
inline void APlayerController::GetViewportSize(int32_t& SizeX, int32_t& SizeY) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetViewportSize");

	struct GetViewportSize_Params {
		int32_t& SizeX;
		int32_t& SizeY;
	}; GetViewportSize_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SizeX = Params.SizeX;
	SizeY = Params.SizeY;

}

// Function Engine.PlayerController.GetSpectatorPawn
inline struct ASpectatorPawn APlayerController::GetSpectatorPawn() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetSpectatorPawn");

	struct GetSpectatorPawn_Params {
		
		struct ASpectatorPawn ReturnValue;

	}; GetSpectatorPawn_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerController.GetMousePosition
inline bool APlayerController::GetMousePosition(float& LocationX, float& LocationY) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetMousePosition");

	struct GetMousePosition_Params {
		float& LocationX;
		float& LocationY;
		bool ReturnValue;

	}; GetMousePosition_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	LocationX = Params.LocationX;
	LocationY = Params.LocationY;


	return params.ReturnValue;
}

// Function Engine.PlayerController.GetInputVectorKeyState
inline struct FVector APlayerController::GetInputVectorKeyState(struct FKey Key) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetInputVectorKeyState");

	struct GetInputVectorKeyState_Params {
		struct FKey Key;
		struct FVector ReturnValue;

	}; GetInputVectorKeyState_Params Params;

	Params.Key = Key;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerController.GetInputTouchState
inline void APlayerController::GetInputTouchState(enum class ETouchIndex FingerIndex, float& LocationX, float& LocationY, bool& bIsCurrentlyPressed) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetInputTouchState");

	struct GetInputTouchState_Params {
		enum class ETouchIndex FingerIndex;
		float& LocationX;
		float& LocationY;
		bool& bIsCurrentlyPressed;
	}; GetInputTouchState_Params Params;

	Params.FingerIndex = FingerIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	LocationX = Params.LocationX;
	LocationY = Params.LocationY;
	bIsCurrentlyPressed = Params.bIsCurrentlyPressed;

}

// Function Engine.PlayerController.GetInputMouseDelta
inline void APlayerController::GetInputMouseDelta(float& DeltaX, float& DeltaY) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetInputMouseDelta");

	struct GetInputMouseDelta_Params {
		float& DeltaX;
		float& DeltaY;
	}; GetInputMouseDelta_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	DeltaX = Params.DeltaX;
	DeltaY = Params.DeltaY;

}

// Function Engine.PlayerController.GetInputMotionState
inline void APlayerController::GetInputMotionState(struct FVector& Tilt, struct FVector& RotationRate, struct FVector& Gravity, struct FVector& Acceleration) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetInputMotionState");

	struct GetInputMotionState_Params {
		struct FVector& Tilt;
		struct FVector& RotationRate;
		struct FVector& Gravity;
		struct FVector& Acceleration;
	}; GetInputMotionState_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Tilt = Params.Tilt;
	RotationRate = Params.RotationRate;
	Gravity = Params.Gravity;
	Acceleration = Params.Acceleration;

}

// Function Engine.PlayerController.GetInputKeyTimeDown
inline float APlayerController::GetInputKeyTimeDown(struct FKey Key) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetInputKeyTimeDown");

	struct GetInputKeyTimeDown_Params {
		struct FKey Key;
		float ReturnValue;

	}; GetInputKeyTimeDown_Params Params;

	Params.Key = Key;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerController.GetInputAnalogStickState
inline void APlayerController::GetInputAnalogStickState(enum class EControllerAnalogStick WhichStick, float& StickX, float& StickY) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetInputAnalogStickState");

	struct GetInputAnalogStickState_Params {
		enum class EControllerAnalogStick WhichStick;
		float& StickX;
		float& StickY;
	}; GetInputAnalogStickState_Params Params;

	Params.WhichStick = WhichStick;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	StickX = Params.StickX;
	StickY = Params.StickY;

}

// Function Engine.PlayerController.GetInputAnalogKeyState
inline float APlayerController::GetInputAnalogKeyState(struct FKey Key) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetInputAnalogKeyState");

	struct GetInputAnalogKeyState_Params {
		struct FKey Key;
		float ReturnValue;

	}; GetInputAnalogKeyState_Params Params;

	Params.Key = Key;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerController.GetHUD
inline struct AHUD APlayerController::GetHUD() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetHUD");

	struct GetHUD_Params {
		
		struct AHUD ReturnValue;

	}; GetHUD_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerController.GetHitResultUnderFingerForObjects
inline bool APlayerController::GetHitResultUnderFingerForObjects(enum class ETouchIndex FingerIndex, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct FHitResult& HitResult) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetHitResultUnderFingerForObjects");

	struct GetHitResultUnderFingerForObjects_Params {
		enum class ETouchIndex FingerIndex;
		struct TArray<enum class EObjectTypeQuery>& ObjectTypes;
		bool bTraceComplex;
		struct FHitResult& HitResult;
		bool ReturnValue;

	}; GetHitResultUnderFingerForObjects_Params Params;

	Params.FingerIndex = FingerIndex;
	Params.bTraceComplex = bTraceComplex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	ObjectTypes = Params.ObjectTypes;
	HitResult = Params.HitResult;


	return params.ReturnValue;
}

// Function Engine.PlayerController.GetHitResultUnderFingerByChannel
inline bool APlayerController::GetHitResultUnderFingerByChannel(enum class ETouchIndex FingerIndex, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct FHitResult& HitResult) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetHitResultUnderFingerByChannel");

	struct GetHitResultUnderFingerByChannel_Params {
		enum class ETouchIndex FingerIndex;
		enum class ETraceTypeQuery TraceChannel;
		bool bTraceComplex;
		struct FHitResult& HitResult;
		bool ReturnValue;

	}; GetHitResultUnderFingerByChannel_Params Params;

	Params.FingerIndex = FingerIndex;
	Params.TraceChannel = TraceChannel;
	Params.bTraceComplex = bTraceComplex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	HitResult = Params.HitResult;


	return params.ReturnValue;
}

// Function Engine.PlayerController.GetHitResultUnderFinger
inline bool APlayerController::GetHitResultUnderFinger(enum class ETouchIndex FingerIndex, enum class ECollisionChannel TraceChannel, bool bTraceComplex, struct FHitResult& HitResult) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetHitResultUnderFinger");

	struct GetHitResultUnderFinger_Params {
		enum class ETouchIndex FingerIndex;
		enum class ECollisionChannel TraceChannel;
		bool bTraceComplex;
		struct FHitResult& HitResult;
		bool ReturnValue;

	}; GetHitResultUnderFinger_Params Params;

	Params.FingerIndex = FingerIndex;
	Params.TraceChannel = TraceChannel;
	Params.bTraceComplex = bTraceComplex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	HitResult = Params.HitResult;


	return params.ReturnValue;
}

// Function Engine.PlayerController.GetHitResultUnderCursorForObjects
inline bool APlayerController::GetHitResultUnderCursorForObjects(struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct FHitResult& HitResult) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetHitResultUnderCursorForObjects");

	struct GetHitResultUnderCursorForObjects_Params {
		struct TArray<enum class EObjectTypeQuery>& ObjectTypes;
		bool bTraceComplex;
		struct FHitResult& HitResult;
		bool ReturnValue;

	}; GetHitResultUnderCursorForObjects_Params Params;

	Params.bTraceComplex = bTraceComplex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	ObjectTypes = Params.ObjectTypes;
	HitResult = Params.HitResult;


	return params.ReturnValue;
}

// Function Engine.PlayerController.GetHitResultUnderCursorByChannel
inline bool APlayerController::GetHitResultUnderCursorByChannel(enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct FHitResult& HitResult) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetHitResultUnderCursorByChannel");

	struct GetHitResultUnderCursorByChannel_Params {
		enum class ETraceTypeQuery TraceChannel;
		bool bTraceComplex;
		struct FHitResult& HitResult;
		bool ReturnValue;

	}; GetHitResultUnderCursorByChannel_Params Params;

	Params.TraceChannel = TraceChannel;
	Params.bTraceComplex = bTraceComplex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	HitResult = Params.HitResult;


	return params.ReturnValue;
}

// Function Engine.PlayerController.GetHitResultUnderCursor
inline bool APlayerController::GetHitResultUnderCursor(enum class ECollisionChannel TraceChannel, bool bTraceComplex, struct FHitResult& HitResult) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetHitResultUnderCursor");

	struct GetHitResultUnderCursor_Params {
		enum class ECollisionChannel TraceChannel;
		bool bTraceComplex;
		struct FHitResult& HitResult;
		bool ReturnValue;

	}; GetHitResultUnderCursor_Params Params;

	Params.TraceChannel = TraceChannel;
	Params.bTraceComplex = bTraceComplex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	HitResult = Params.HitResult;


	return params.ReturnValue;
}

// Function Engine.PlayerController.GetFocalLocation
inline struct FVector APlayerController::GetFocalLocation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetFocalLocation");

	struct GetFocalLocation_Params {
		
		struct FVector ReturnValue;

	}; GetFocalLocation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerController.FOV
inline void APlayerController::FOV(float NewFOV) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FOV");

	struct FOV_Params {
		float NewFOV;
	}; FOV_Params Params;

	Params.NewFOV = NewFOV;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.EnableCheats
inline void APlayerController::EnableCheats() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.EnableCheats");

	struct EnableCheats_Params {
		
	}; EnableCheats_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.DeprojectScreenPositionToWorld
inline bool APlayerController::DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, struct FVector& WorldLocation, struct FVector& WorldDirection) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DeprojectScreenPositionToWorld");

	struct DeprojectScreenPositionToWorld_Params {
		float ScreenX;
		float ScreenY;
		struct FVector& WorldLocation;
		struct FVector& WorldDirection;
		bool ReturnValue;

	}; DeprojectScreenPositionToWorld_Params Params;

	Params.ScreenX = ScreenX;
	Params.ScreenY = ScreenY;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	WorldLocation = Params.WorldLocation;
	WorldDirection = Params.WorldDirection;


	return params.ReturnValue;
}

// Function Engine.PlayerController.DeprojectMousePositionToWorld
inline bool APlayerController::DeprojectMousePositionToWorld(struct FVector& WorldLocation, struct FVector& WorldDirection) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DeprojectMousePositionToWorld");

	struct DeprojectMousePositionToWorld_Params {
		struct FVector& WorldLocation;
		struct FVector& WorldDirection;
		bool ReturnValue;

	}; DeprojectMousePositionToWorld_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	WorldLocation = Params.WorldLocation;
	WorldDirection = Params.WorldDirection;


	return params.ReturnValue;
}

// Function Engine.PlayerController.ConsoleKey
inline void APlayerController::ConsoleKey(struct FKey Key) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ConsoleKey");

	struct ConsoleKey_Params {
		struct FKey Key;
	}; ConsoleKey_Params Params;

	Params.Key = Key;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientWasKicked
inline void APlayerController::ClientWasKicked(struct FText KickReason) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientWasKicked");

	struct ClientWasKicked_Params {
		struct FText KickReason;
	}; ClientWasKicked_Params Params;

	Params.KickReason = KickReason;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientVoiceHandshakeComplete
inline void APlayerController::ClientVoiceHandshakeComplete() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientVoiceHandshakeComplete");

	struct ClientVoiceHandshakeComplete_Params {
		
	}; ClientVoiceHandshakeComplete_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientUpdateMultipleLevelsStreamingStatus
inline void APlayerController::ClientUpdateMultipleLevelsStreamingStatus(struct TArray<struct FUpdateLevelStreamingLevelStatus> LevelStatuses) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientUpdateMultipleLevelsStreamingStatus");

	struct ClientUpdateMultipleLevelsStreamingStatus_Params {
		struct TArray<struct FUpdateLevelStreamingLevelStatus> LevelStatuses;
	}; ClientUpdateMultipleLevelsStreamingStatus_Params Params;

	Params.LevelStatuses = LevelStatuses;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientUpdateLevelStreamingStatus
inline void APlayerController::ClientUpdateLevelStreamingStatus(struct FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int32_t LODIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientUpdateLevelStreamingStatus");

	struct ClientUpdateLevelStreamingStatus_Params {
		struct FName PackageName;
		bool bNewShouldBeLoaded;
		bool bNewShouldBeVisible;
		bool bNewShouldBlockOnLoad;
		int32_t LODIndex;
	}; ClientUpdateLevelStreamingStatus_Params Params;

	Params.PackageName = PackageName;
	Params.bNewShouldBeLoaded = bNewShouldBeLoaded;
	Params.bNewShouldBeVisible = bNewShouldBeVisible;
	Params.bNewShouldBlockOnLoad = bNewShouldBlockOnLoad;
	Params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientUnmutePlayer
inline void APlayerController::ClientUnmutePlayer(struct FUniqueNetIdRepl PlayerId) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientUnmutePlayer");

	struct ClientUnmutePlayer_Params {
		struct FUniqueNetIdRepl PlayerId;
	}; ClientUnmutePlayer_Params Params;

	Params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientTravelInternal
inline void APlayerController::ClientTravelInternal(struct FString URL, enum class ETravelType TravelType, bool bSeamless, struct FGuid MapPackageGuid) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientTravelInternal");

	struct ClientTravelInternal_Params {
		struct FString URL;
		enum class ETravelType TravelType;
		bool bSeamless;
		struct FGuid MapPackageGuid;
	}; ClientTravelInternal_Params Params;

	Params.URL = URL;
	Params.TravelType = TravelType;
	Params.bSeamless = bSeamless;
	Params.MapPackageGuid = MapPackageGuid;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientTravel
inline void APlayerController::ClientTravel(struct FString URL, enum class ETravelType TravelType, bool bSeamless, struct FGuid MapPackageGuid) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientTravel");

	struct ClientTravel_Params {
		struct FString URL;
		enum class ETravelType TravelType;
		bool bSeamless;
		struct FGuid MapPackageGuid;
	}; ClientTravel_Params Params;

	Params.URL = URL;
	Params.TravelType = TravelType;
	Params.bSeamless = bSeamless;
	Params.MapPackageGuid = MapPackageGuid;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientTeamMessage
inline void APlayerController::ClientTeamMessage(struct APlayerState SenderPlayerState, struct FString S, struct FName Type, float MsgLifeTime) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientTeamMessage");

	struct ClientTeamMessage_Params {
		struct APlayerState SenderPlayerState;
		struct FString S;
		struct FName Type;
		float MsgLifeTime;
	}; ClientTeamMessage_Params Params;

	Params.SenderPlayerState = SenderPlayerState;
	Params.S = S;
	Params.Type = Type;
	Params.MsgLifeTime = MsgLifeTime;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientStopForceFeedback
inline void APlayerController::ClientStopForceFeedback(struct UForceFeedbackEffect ForceFeedbackEffect, struct FName Tag) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStopForceFeedback");

	struct ClientStopForceFeedback_Params {
		struct UForceFeedbackEffect ForceFeedbackEffect;
		struct FName Tag;
	}; ClientStopForceFeedback_Params Params;

	Params.ForceFeedbackEffect = ForceFeedbackEffect;
	Params.Tag = Tag;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientStopCameraShakesFromSource
inline void APlayerController::ClientStopCameraShakesFromSource(struct UCameraShakeSourceComponent SourceComponent, bool bImmediately) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStopCameraShakesFromSource");

	struct ClientStopCameraShakesFromSource_Params {
		struct UCameraShakeSourceComponent SourceComponent;
		bool bImmediately;
	}; ClientStopCameraShakesFromSource_Params Params;

	Params.SourceComponent = SourceComponent;
	Params.bImmediately = bImmediately;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientStopCameraShake
inline void APlayerController::ClientStopCameraShake(struct UClass* Shake, bool bImmediately) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStopCameraShake");

	struct ClientStopCameraShake_Params {
		struct UClass* Shake;
		bool bImmediately;
	}; ClientStopCameraShake_Params Params;

	Params.Shake = Shake;
	Params.bImmediately = bImmediately;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientStopCameraAnim
inline void APlayerController::ClientStopCameraAnim(struct UCameraAnim AnimToStop) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStopCameraAnim");

	struct ClientStopCameraAnim_Params {
		struct UCameraAnim AnimToStop;
	}; ClientStopCameraAnim_Params Params;

	Params.AnimToStop = AnimToStop;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientStartOnlineSession
inline void APlayerController::ClientStartOnlineSession() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStartOnlineSession");

	struct ClientStartOnlineSession_Params {
		
	}; ClientStartOnlineSession_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientSpawnCameraLensEffect
inline void APlayerController::ClientSpawnCameraLensEffect(struct UClass* LensEffectEmitterClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSpawnCameraLensEffect");

	struct ClientSpawnCameraLensEffect_Params {
		struct UClass* LensEffectEmitterClass;
	}; ClientSpawnCameraLensEffect_Params Params;

	Params.LensEffectEmitterClass = LensEffectEmitterClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientSetViewTarget
inline void APlayerController::ClientSetViewTarget(struct UActor A, struct FViewTargetTransitionParams TransitionParams) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetViewTarget");

	struct ClientSetViewTarget_Params {
		struct UActor A;
		struct FViewTargetTransitionParams TransitionParams;
	}; ClientSetViewTarget_Params Params;

	Params.A = A;
	Params.TransitionParams = TransitionParams;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientSetSpectatorWaiting
inline void APlayerController::ClientSetSpectatorWaiting(bool bWaiting) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetSpectatorWaiting");

	struct ClientSetSpectatorWaiting_Params {
		bool bWaiting;
	}; ClientSetSpectatorWaiting_Params Params;

	Params.bWaiting = bWaiting;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientSetHUD
inline void APlayerController::ClientSetHUD(struct UClass* NewHUDClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetHUD");

	struct ClientSetHUD_Params {
		struct UClass* NewHUDClass;
	}; ClientSetHUD_Params Params;

	Params.NewHUDClass = NewHUDClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientSetForceMipLevelsToBeResident
inline void APlayerController::ClientSetForceMipLevelsToBeResident(struct UMaterialInterface Material, float ForceDuration, int32_t CinematicTextureGroups) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetForceMipLevelsToBeResident");

	struct ClientSetForceMipLevelsToBeResident_Params {
		struct UMaterialInterface Material;
		float ForceDuration;
		int32_t CinematicTextureGroups;
	}; ClientSetForceMipLevelsToBeResident_Params Params;

	Params.Material = Material;
	Params.ForceDuration = ForceDuration;
	Params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientSetCinematicMode
inline void APlayerController::ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetCinematicMode");

	struct ClientSetCinematicMode_Params {
		bool bInCinematicMode;
		bool bAffectsMovement;
		bool bAffectsTurning;
		bool bAffectsHUD;
	}; ClientSetCinematicMode_Params Params;

	Params.bInCinematicMode = bInCinematicMode;
	Params.bAffectsMovement = bAffectsMovement;
	Params.bAffectsTurning = bAffectsTurning;
	Params.bAffectsHUD = bAffectsHUD;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientSetCameraMode
inline void APlayerController::ClientSetCameraMode(struct FName NewCamMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetCameraMode");

	struct ClientSetCameraMode_Params {
		struct FName NewCamMode;
	}; ClientSetCameraMode_Params Params;

	Params.NewCamMode = NewCamMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientSetCameraFade
inline void APlayerController::ClientSetCameraFade(bool bEnableFading, struct FColor FadeColor, struct FVector2D FadeAlpha, float FadeTime, bool bFadeAudio) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetCameraFade");

	struct ClientSetCameraFade_Params {
		bool bEnableFading;
		struct FColor FadeColor;
		struct FVector2D FadeAlpha;
		float FadeTime;
		bool bFadeAudio;
	}; ClientSetCameraFade_Params Params;

	Params.bEnableFading = bEnableFading;
	Params.FadeColor = FadeColor;
	Params.FadeAlpha = FadeAlpha;
	Params.FadeTime = FadeTime;
	Params.bFadeAudio = bFadeAudio;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientSetBlockOnAsyncLoading
inline void APlayerController::ClientSetBlockOnAsyncLoading() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetBlockOnAsyncLoading");

	struct ClientSetBlockOnAsyncLoading_Params {
		
	}; ClientSetBlockOnAsyncLoading_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientReturnToMainMenuWithTextReason
inline void APlayerController::ClientReturnToMainMenuWithTextReason(struct FText ReturnReason) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientReturnToMainMenuWithTextReason");

	struct ClientReturnToMainMenuWithTextReason_Params {
		struct FText ReturnReason;
	}; ClientReturnToMainMenuWithTextReason_Params Params;

	Params.ReturnReason = ReturnReason;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientReturnToMainMenu
inline void APlayerController::ClientReturnToMainMenu(struct FString ReturnReason) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientReturnToMainMenu");

	struct ClientReturnToMainMenu_Params {
		struct FString ReturnReason;
	}; ClientReturnToMainMenu_Params Params;

	Params.ReturnReason = ReturnReason;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientRetryClientRestart
inline void APlayerController::ClientRetryClientRestart(struct APawn NewPawn) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientRetryClientRestart");

	struct ClientRetryClientRestart_Params {
		struct APawn NewPawn;
	}; ClientRetryClientRestart_Params Params;

	Params.NewPawn = NewPawn;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientRestart
inline void APlayerController::ClientRestart(struct APawn NewPawn) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientRestart");

	struct ClientRestart_Params {
		struct APawn NewPawn;
	}; ClientRestart_Params Params;

	Params.NewPawn = NewPawn;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientReset
inline void APlayerController::ClientReset() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientReset");

	struct ClientReset_Params {
		
	}; ClientReset_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientRepObjRef
inline void APlayerController::ClientRepObjRef(struct Object Object) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientRepObjRef");

	struct ClientRepObjRef_Params {
		struct Object Object;
	}; ClientRepObjRef_Params Params;

	Params.Object = Object;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientReceiveLocalizedMessage
inline void APlayerController::ClientReceiveLocalizedMessage(struct UClass* Message, int32_t Switch, struct APlayerState RelatedPlayerState_2, struct APlayerState RelatedPlayerState_3, struct Object OptionalObject) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientReceiveLocalizedMessage");

	struct ClientReceiveLocalizedMessage_Params {
		struct UClass* Message;
		int32_t Switch;
		struct APlayerState RelatedPlayerState_2;
		struct APlayerState RelatedPlayerState_3;
		struct Object OptionalObject;
	}; ClientReceiveLocalizedMessage_Params Params;

	Params.Message = Message;
	Params.Switch = Switch;
	Params.RelatedPlayerState_2 = RelatedPlayerState_2;
	Params.RelatedPlayerState_3 = RelatedPlayerState_3;
	Params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientPrestreamTextures
inline void APlayerController::ClientPrestreamTextures(struct UActor ForcedActor, float ForceDuration, bool bEnableStreaming, int32_t CinematicTextureGroups) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPrestreamTextures");

	struct ClientPrestreamTextures_Params {
		struct UActor ForcedActor;
		float ForceDuration;
		bool bEnableStreaming;
		int32_t CinematicTextureGroups;
	}; ClientPrestreamTextures_Params Params;

	Params.ForcedActor = ForcedActor;
	Params.ForceDuration = ForceDuration;
	Params.bEnableStreaming = bEnableStreaming;
	Params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientPrepareMapChange
inline void APlayerController::ClientPrepareMapChange(struct FName LevelName, bool bFirst, bool bLast) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPrepareMapChange");

	struct ClientPrepareMapChange_Params {
		struct FName LevelName;
		bool bFirst;
		bool bLast;
	}; ClientPrepareMapChange_Params Params;

	Params.LevelName = LevelName;
	Params.bFirst = bFirst;
	Params.bLast = bLast;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientPlaySoundAtLocation
inline void APlayerController::ClientPlaySoundAtLocation(struct USoundBase Sound, struct FVector Location, float VolumeMultiplier, float PitchMultiplier) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlaySoundAtLocation");

	struct ClientPlaySoundAtLocation_Params {
		struct USoundBase Sound;
		struct FVector Location;
		float VolumeMultiplier;
		float PitchMultiplier;
	}; ClientPlaySoundAtLocation_Params Params;

	Params.Sound = Sound;
	Params.Location = Location;
	Params.VolumeMultiplier = VolumeMultiplier;
	Params.PitchMultiplier = PitchMultiplier;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientPlaySound
inline void APlayerController::ClientPlaySound(struct USoundBase Sound, float VolumeMultiplier, float PitchMultiplier) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlaySound");

	struct ClientPlaySound_Params {
		struct USoundBase Sound;
		float VolumeMultiplier;
		float PitchMultiplier;
	}; ClientPlaySound_Params Params;

	Params.Sound = Sound;
	Params.VolumeMultiplier = VolumeMultiplier;
	Params.PitchMultiplier = PitchMultiplier;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientPlayForceFeedback_Internal
inline void APlayerController::ClientPlayForceFeedback_Internal(struct UForceFeedbackEffect ForceFeedbackEffect, struct FForceFeedbackParameters Params) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlayForceFeedback_Internal");

	struct ClientPlayForceFeedback_Internal_Params {
		struct UForceFeedbackEffect ForceFeedbackEffect;
		struct FForceFeedbackParameters Params;
	}; ClientPlayForceFeedback_Internal_Params Params;

	Params.ForceFeedbackEffect = ForceFeedbackEffect;
	Params.Params = Params;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientPlayCameraShakeFromSource
inline void APlayerController::ClientPlayCameraShakeFromSource(struct UClass* Shake, struct UCameraShakeSourceComponent SourceComponent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlayCameraShakeFromSource");

	struct ClientPlayCameraShakeFromSource_Params {
		struct UClass* Shake;
		struct UCameraShakeSourceComponent SourceComponent;
	}; ClientPlayCameraShakeFromSource_Params Params;

	Params.Shake = Shake;
	Params.SourceComponent = SourceComponent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientPlayCameraShake
inline void APlayerController::ClientPlayCameraShake(struct UClass* Shake, float Scale, enum class ECameraAnimPlaySpace PlaySpace, struct FRotator UserPlaySpaceRot) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlayCameraShake");

	struct ClientPlayCameraShake_Params {
		struct UClass* Shake;
		float Scale;
		enum class ECameraAnimPlaySpace PlaySpace;
		struct FRotator UserPlaySpaceRot;
	}; ClientPlayCameraShake_Params Params;

	Params.Shake = Shake;
	Params.Scale = Scale;
	Params.PlaySpace = PlaySpace;
	Params.UserPlaySpaceRot = UserPlaySpaceRot;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientPlayCameraAnim
inline void APlayerController::ClientPlayCameraAnim(struct UCameraAnim AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, enum class ECameraAnimPlaySpace Space, struct FRotator CustomPlaySpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlayCameraAnim");

	struct ClientPlayCameraAnim_Params {
		struct UCameraAnim AnimToPlay;
		float Scale;
		float Rate;
		float BlendInTime;
		float BlendOutTime;
		bool bLoop;
		bool bRandomStartTime;
		enum class ECameraAnimPlaySpace Space;
		struct FRotator CustomPlaySpace;
	}; ClientPlayCameraAnim_Params Params;

	Params.AnimToPlay = AnimToPlay;
	Params.Scale = Scale;
	Params.Rate = Rate;
	Params.BlendInTime = BlendInTime;
	Params.BlendOutTime = BlendOutTime;
	Params.bLoop = bLoop;
	Params.bRandomStartTime = bRandomStartTime;
	Params.Space = Space;
	Params.CustomPlaySpace = CustomPlaySpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientMutePlayer
inline void APlayerController::ClientMutePlayer(struct FUniqueNetIdRepl PlayerId) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientMutePlayer");

	struct ClientMutePlayer_Params {
		struct FUniqueNetIdRepl PlayerId;
	}; ClientMutePlayer_Params Params;

	Params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientMessage
inline void APlayerController::ClientMessage(struct FString S, struct FName Type, float MsgLifeTime) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientMessage");

	struct ClientMessage_Params {
		struct FString S;
		struct FName Type;
		float MsgLifeTime;
	}; ClientMessage_Params Params;

	Params.S = S;
	Params.Type = Type;
	Params.MsgLifeTime = MsgLifeTime;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientIgnoreMoveInput
inline void APlayerController::ClientIgnoreMoveInput(bool bIgnore) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientIgnoreMoveInput");

	struct ClientIgnoreMoveInput_Params {
		bool bIgnore;
	}; ClientIgnoreMoveInput_Params Params;

	Params.bIgnore = bIgnore;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientIgnoreLookInput
inline void APlayerController::ClientIgnoreLookInput(bool bIgnore) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientIgnoreLookInput");

	struct ClientIgnoreLookInput_Params {
		bool bIgnore;
	}; ClientIgnoreLookInput_Params Params;

	Params.bIgnore = bIgnore;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientGotoState
inline void APlayerController::ClientGotoState(struct FName NewState) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientGotoState");

	struct ClientGotoState_Params {
		struct FName NewState;
	}; ClientGotoState_Params Params;

	Params.NewState = NewState;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientGameEnded
inline void APlayerController::ClientGameEnded(struct UActor EndGameFocus, bool bIsWinner) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientGameEnded");

	struct ClientGameEnded_Params {
		struct UActor EndGameFocus;
		bool bIsWinner;
	}; ClientGameEnded_Params Params;

	Params.EndGameFocus = EndGameFocus;
	Params.bIsWinner = bIsWinner;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientForceGarbageCollection
inline void APlayerController::ClientForceGarbageCollection() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientForceGarbageCollection");

	struct ClientForceGarbageCollection_Params {
		
	}; ClientForceGarbageCollection_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientFlushLevelStreaming
inline void APlayerController::ClientFlushLevelStreaming() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientFlushLevelStreaming");

	struct ClientFlushLevelStreaming_Params {
		
	}; ClientFlushLevelStreaming_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientEndOnlineSession
inline void APlayerController::ClientEndOnlineSession() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientEndOnlineSession");

	struct ClientEndOnlineSession_Params {
		
	}; ClientEndOnlineSession_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientEnableNetworkVoice
inline void APlayerController::ClientEnableNetworkVoice(bool bEnable) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientEnableNetworkVoice");

	struct ClientEnableNetworkVoice_Params {
		bool bEnable;
	}; ClientEnableNetworkVoice_Params Params;

	Params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientCommitMapChange
inline void APlayerController::ClientCommitMapChange() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientCommitMapChange");

	struct ClientCommitMapChange_Params {
		
	}; ClientCommitMapChange_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientClearCameraLensEffects
inline void APlayerController::ClientClearCameraLensEffects() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientClearCameraLensEffects");

	struct ClientClearCameraLensEffects_Params {
		
	}; ClientClearCameraLensEffects_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientCapBandwidth
inline void APlayerController::ClientCapBandwidth(int32_t Cap) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientCapBandwidth");

	struct ClientCapBandwidth_Params {
		int32_t Cap;
	}; ClientCapBandwidth_Params Params;

	Params.Cap = Cap;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientCancelPendingMapChange
inline void APlayerController::ClientCancelPendingMapChange() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientCancelPendingMapChange");

	struct ClientCancelPendingMapChange_Params {
		
	}; ClientCancelPendingMapChange_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientAddTextureStreamingLoc
inline void APlayerController::ClientAddTextureStreamingLoc(struct FVector InLoc, float Duration, bool bOverrideLocation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientAddTextureStreamingLoc");

	struct ClientAddTextureStreamingLoc_Params {
		struct FVector InLoc;
		float Duration;
		bool bOverrideLocation;
	}; ClientAddTextureStreamingLoc_Params Params;

	Params.InLoc = InLoc;
	Params.Duration = Duration;
	Params.bOverrideLocation = bOverrideLocation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClearAudioListenerOverride
inline void APlayerController::ClearAudioListenerOverride() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClearAudioListenerOverride");

	struct ClearAudioListenerOverride_Params {
		
	}; ClearAudioListenerOverride_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClearAudioListenerAttenuationOverride
inline void APlayerController::ClearAudioListenerAttenuationOverride() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClearAudioListenerAttenuationOverride");

	struct ClearAudioListenerAttenuationOverride_Params {
		
	}; ClearAudioListenerAttenuationOverride_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.CanRestartPlayer
inline bool APlayerController::CanRestartPlayer() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CanRestartPlayer");

	struct CanRestartPlayer_Params {
		
		bool ReturnValue;

	}; CanRestartPlayer_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerController.Camera
inline void APlayerController::Camera(struct FName NewMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Camera");

	struct Camera_Params {
		struct FName NewMode;
	}; Camera_Params Params;

	Params.NewMode = NewMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.AddYawInput
inline void APlayerController::AddYawInput(float Val) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AddYawInput");

	struct AddYawInput_Params {
		float Val;
	}; AddYawInput_Params Params;

	Params.Val = Val;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.AddRollInput
inline void APlayerController::AddRollInput(float Val) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AddRollInput");

	struct AddRollInput_Params {
		float Val;
	}; AddRollInput_Params Params;

	Params.Val = Val;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.AddPitchInput
inline void APlayerController::AddPitchInput(float Val) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AddPitchInput");

	struct AddPitchInput_Params {
		float Val;
	}; AddPitchInput_Params Params;

	Params.Val = Val;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ActivateTouchInterface
inline void APlayerController::ActivateTouchInterface(struct UTouchInterface NewTouchInterface) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ActivateTouchInterface");

	struct ActivateTouchInterface_Params {
		struct UTouchInterface NewTouchInterface;
	}; ActivateTouchInterface_Params Params;

	Params.NewTouchInterface = NewTouchInterface;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraActor.GetAutoActivatePlayerIndex
inline int32_t ACameraActor::GetAutoActivatePlayerIndex() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraActor.GetAutoActivatePlayerIndex");

	struct GetAutoActivatePlayerIndex_Params {
		
		int32_t ReturnValue;

	}; GetAutoActivatePlayerIndex_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StaticMeshComponent.SetStaticMesh
inline bool UStaticMeshComponent::SetStaticMesh(struct UStaticMesh NewMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.SetStaticMesh");

	struct SetStaticMesh_Params {
		struct UStaticMesh NewMesh;
		bool ReturnValue;

	}; SetStaticMesh_Params Params;

	Params.NewMesh = NewMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StaticMeshComponent.SetReverseCulling
inline void UStaticMeshComponent::SetReverseCulling(bool ReverseCulling) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.SetReverseCulling");

	struct SetReverseCulling_Params {
		bool ReverseCulling;
	}; SetReverseCulling_Params Params;

	Params.ReverseCulling = ReverseCulling;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.StaticMeshComponent.SetForcedLodModel
inline void UStaticMeshComponent::SetForcedLodModel(int32_t NewForcedLodModel) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.SetForcedLodModel");

	struct SetForcedLodModel_Params {
		int32_t NewForcedLodModel;
	}; SetForcedLodModel_Params Params;

	Params.NewForcedLodModel = NewForcedLodModel;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.StaticMeshComponent.SetDistanceFieldSelfShadowBias
inline void UStaticMeshComponent::SetDistanceFieldSelfShadowBias(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.SetDistanceFieldSelfShadowBias");

	struct SetDistanceFieldSelfShadowBias_Params {
		float NewValue;
	}; SetDistanceFieldSelfShadowBias_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.StaticMeshComponent.OnRep_StaticMesh
inline void UStaticMeshComponent::OnRep_StaticMesh(struct UStaticMesh OldStaticMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.OnRep_StaticMesh");

	struct OnRep_StaticMesh_Params {
		struct UStaticMesh OldStaticMesh;
	}; OnRep_StaticMesh_Params Params;

	Params.OldStaticMesh = OldStaticMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.StaticMeshComponent.GetLocalBounds
inline void UStaticMeshComponent::GetLocalBounds(struct FVector& Min, struct FVector& Max) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.GetLocalBounds");

	struct GetLocalBounds_Params {
		struct FVector& Min;
		struct FVector& Max;
	}; GetLocalBounds_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Min = Params.Min;
	Max = Params.Max;

}

// Function Engine.CameraShake.ReceiveStopShake
inline void UCameraShake::ReceiveStopShake(bool bImmediately) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraShake.ReceiveStopShake");

	struct ReceiveStopShake_Params {
		bool bImmediately;
	}; ReceiveStopShake_Params Params;

	Params.bImmediately = bImmediately;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraShake.ReceivePlayShake
inline void UCameraShake::ReceivePlayShake(float Scale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraShake.ReceivePlayShake");

	struct ReceivePlayShake_Params {
		float Scale;
	}; ReceivePlayShake_Params Params;

	Params.Scale = Scale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraShake.ReceiveIsFinished
inline bool UCameraShake::ReceiveIsFinished() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraShake.ReceiveIsFinished");

	struct ReceiveIsFinished_Params {
		
		bool ReturnValue;

	}; ReceiveIsFinished_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CameraShake.BlueprintUpdateCameraShake
inline void UCameraShake::BlueprintUpdateCameraShake(float DeltaTime, float Alpha, struct FMinimalViewInfo& POV, struct FMinimalViewInfo& ModifiedPOV) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraShake.BlueprintUpdateCameraShake");

	struct BlueprintUpdateCameraShake_Params {
		float DeltaTime;
		float Alpha;
		struct FMinimalViewInfo& POV;
		struct FMinimalViewInfo& ModifiedPOV;
	}; BlueprintUpdateCameraShake_Params Params;

	Params.DeltaTime = DeltaTime;
	Params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	POV = Params.POV;
	ModifiedPOV = Params.ModifiedPOV;

}

// Function Engine.CheatManager.Walk
inline void UCheatManager::Walk() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Walk");

	struct Walk_Params {
		
	}; Walk_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.ViewSelf
inline void UCheatManager::ViewSelf() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewSelf");

	struct ViewSelf_Params {
		
	}; ViewSelf_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.ViewPlayer
inline void UCheatManager::ViewPlayer(struct FString S) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewPlayer");

	struct ViewPlayer_Params {
		struct FString S;
	}; ViewPlayer_Params Params;

	Params.S = S;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.ViewClass
inline void UCheatManager::ViewClass(struct UClass* DesiredClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewClass");

	struct ViewClass_Params {
		struct UClass* DesiredClass;
	}; ViewClass_Params Params;

	Params.DesiredClass = DesiredClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.ViewActor
inline void UCheatManager::ViewActor(struct FName ActorName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewActor");

	struct ViewActor_Params {
		struct FName ActorName;
	}; ViewActor_Params Params;

	Params.ActorName = ActorName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.UpdateSafeArea
inline void UCheatManager::UpdateSafeArea() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.UpdateSafeArea");

	struct UpdateSafeArea_Params {
		
	}; UpdateSafeArea_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.ToggleServerStatReplicatorUpdateStatNet
inline void UCheatManager::ToggleServerStatReplicatorUpdateStatNet() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ToggleServerStatReplicatorUpdateStatNet");

	struct ToggleServerStatReplicatorUpdateStatNet_Params {
		
	}; ToggleServerStatReplicatorUpdateStatNet_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.ToggleServerStatReplicatorClientOverwrite
inline void UCheatManager::ToggleServerStatReplicatorClientOverwrite() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ToggleServerStatReplicatorClientOverwrite");

	struct ToggleServerStatReplicatorClientOverwrite_Params {
		
	}; ToggleServerStatReplicatorClientOverwrite_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.ToggleDebugCamera
inline void UCheatManager::ToggleDebugCamera() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ToggleDebugCamera");

	struct ToggleDebugCamera_Params {
		
	}; ToggleDebugCamera_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.ToggleAILogging
inline void UCheatManager::ToggleAILogging() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ToggleAILogging");

	struct ToggleAILogging_Params {
		
	}; ToggleAILogging_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.TestCollisionDistance
inline void UCheatManager::TestCollisionDistance() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.TestCollisionDistance");

	struct TestCollisionDistance_Params {
		
	}; TestCollisionDistance_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.Teleport
inline void UCheatManager::Teleport() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Teleport");

	struct Teleport_Params {
		
	}; Teleport_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.Summon
inline void UCheatManager::Summon(struct FString ClassName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Summon");

	struct Summon_Params {
		struct FString ClassName;
	}; Summon_Params Params;

	Params.ClassName = ClassName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.StreamLevelOut
inline void UCheatManager::StreamLevelOut(struct FName PackageName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.StreamLevelOut");

	struct StreamLevelOut_Params {
		struct FName PackageName;
	}; StreamLevelOut_Params Params;

	Params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.StreamLevelIn
inline void UCheatManager::StreamLevelIn(struct FName PackageName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.StreamLevelIn");

	struct StreamLevelIn_Params {
		struct FName PackageName;
	}; StreamLevelIn_Params Params;

	Params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.SpawnServerStatReplicator
inline void UCheatManager::SpawnServerStatReplicator() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SpawnServerStatReplicator");

	struct SpawnServerStatReplicator_Params {
		
	}; SpawnServerStatReplicator_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.Slomo
inline void UCheatManager::Slomo(float NewTimeDilation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Slomo");

	struct Slomo_Params {
		float NewTimeDilation;
	}; Slomo_Params Params;

	Params.NewTimeDilation = NewTimeDilation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.SetWorldOrigin
inline void UCheatManager::SetWorldOrigin() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetWorldOrigin");

	struct SetWorldOrigin_Params {
		
	}; SetWorldOrigin_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.SetMouseSensitivityToDefault
inline void UCheatManager::SetMouseSensitivityToDefault() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetMouseSensitivityToDefault");

	struct SetMouseSensitivityToDefault_Params {
		
	}; SetMouseSensitivityToDefault_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.ServerToggleAILogging
inline void UCheatManager::ServerToggleAILogging() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ServerToggleAILogging");

	struct ServerToggleAILogging_Params {
		
	}; ServerToggleAILogging_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.ReceiveInitCheatManager
inline void UCheatManager::ReceiveInitCheatManager() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ReceiveInitCheatManager");

	struct ReceiveInitCheatManager_Params {
		
	}; ReceiveInitCheatManager_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.ReceiveEndPlay
inline void UCheatManager::ReceiveEndPlay() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ReceiveEndPlay");

	struct ReceiveEndPlay_Params {
		
	}; ReceiveEndPlay_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.PlayersOnly
inline void UCheatManager::PlayersOnly() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.PlayersOnly");

	struct PlayersOnly_Params {
		
	}; PlayersOnly_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.OnlyLoadLevel
inline void UCheatManager::OnlyLoadLevel(struct FName PackageName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.OnlyLoadLevel");

	struct OnlyLoadLevel_Params {
		struct FName PackageName;
	}; OnlyLoadLevel_Params Params;

	Params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.LogLoc
inline void UCheatManager::LogLoc() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.LogLoc");

	struct LogLoc_Params {
		
	}; LogLoc_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.InvertMouse
inline void UCheatManager::InvertMouse() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.InvertMouse");

	struct InvertMouse_Params {
		
	}; InvertMouse_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.God
inline void UCheatManager::God() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.God");

	struct God_Params {
		
	}; God_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.Ghost
inline void UCheatManager::Ghost() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Ghost");

	struct Ghost_Params {
		
	}; Ghost_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.FreezeFrame
inline void UCheatManager::FreezeFrame(float Delay) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.FreezeFrame");

	struct FreezeFrame_Params {
		float Delay;
	}; FreezeFrame_Params Params;

	Params.Delay = Delay;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.Fly
inline void UCheatManager::Fly() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Fly");

	struct Fly_Params {
		
	}; Fly_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.FlushLog
inline void UCheatManager::FlushLog() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.FlushLog");

	struct FlushLog_Params {
		
	}; FlushLog_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.EnableDebugCamera
inline void UCheatManager::EnableDebugCamera() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.EnableDebugCamera");

	struct EnableDebugCamera_Params {
		
	}; EnableDebugCamera_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DumpVoiceMutingState
inline void UCheatManager::DumpVoiceMutingState() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DumpVoiceMutingState");

	struct DumpVoiceMutingState_Params {
		
	}; DumpVoiceMutingState_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DumpPartyState
inline void UCheatManager::DumpPartyState() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DumpPartyState");

	struct DumpPartyState_Params {
		
	}; DumpPartyState_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DumpOnlineSessionState
inline void UCheatManager::DumpOnlineSessionState() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DumpOnlineSessionState");

	struct DumpOnlineSessionState_Params {
		
	}; DumpOnlineSessionState_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DumpChatState
inline void UCheatManager::DumpChatState() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DumpChatState");

	struct DumpChatState_Params {
		
	}; DumpChatState_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DisableDebugCamera
inline void UCheatManager::DisableDebugCamera() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DisableDebugCamera");

	struct DisableDebugCamera_Params {
		
	}; DisableDebugCamera_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DestroyTarget
inline void UCheatManager::DestroyTarget() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DestroyTarget");

	struct DestroyTarget_Params {
		
	}; DestroyTarget_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DestroyServerStatReplicator
inline void UCheatManager::DestroyServerStatReplicator() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DestroyServerStatReplicator");

	struct DestroyServerStatReplicator_Params {
		
	}; DestroyServerStatReplicator_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DestroyPawns
inline void UCheatManager::DestroyPawns(struct UClass* aClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DestroyPawns");

	struct DestroyPawns_Params {
		struct UClass* aClass;
	}; DestroyPawns_Params Params;

	Params.aClass = aClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DestroyAllPawnsExceptTarget
inline void UCheatManager::DestroyAllPawnsExceptTarget() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DestroyAllPawnsExceptTarget");

	struct DestroyAllPawnsExceptTarget_Params {
		
	}; DestroyAllPawnsExceptTarget_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DestroyAll
inline void UCheatManager::DestroyAll(struct UClass* aClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DestroyAll");

	struct DestroyAll_Params {
		struct UClass* aClass;
	}; DestroyAll_Params Params;

	Params.aClass = aClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DebugCapsuleSweepSize
inline void UCheatManager::DebugCapsuleSweepSize(float HalfHeight, float Radius) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugCapsuleSweepSize");

	struct DebugCapsuleSweepSize_Params {
		float HalfHeight;
		float Radius;
	}; DebugCapsuleSweepSize_Params Params;

	Params.HalfHeight = HalfHeight;
	Params.Radius = Radius;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DebugCapsuleSweepPawn
inline void UCheatManager::DebugCapsuleSweepPawn() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugCapsuleSweepPawn");

	struct DebugCapsuleSweepPawn_Params {
		
	}; DebugCapsuleSweepPawn_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DebugCapsuleSweepComplex
inline void UCheatManager::DebugCapsuleSweepComplex(bool bTraceComplex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugCapsuleSweepComplex");

	struct DebugCapsuleSweepComplex_Params {
		bool bTraceComplex;
	}; DebugCapsuleSweepComplex_Params Params;

	Params.bTraceComplex = bTraceComplex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DebugCapsuleSweepClear
inline void UCheatManager::DebugCapsuleSweepClear() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugCapsuleSweepClear");

	struct DebugCapsuleSweepClear_Params {
		
	}; DebugCapsuleSweepClear_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DebugCapsuleSweepChannel
inline void UCheatManager::DebugCapsuleSweepChannel(enum class ECollisionChannel Channel) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugCapsuleSweepChannel");

	struct DebugCapsuleSweepChannel_Params {
		enum class ECollisionChannel Channel;
	}; DebugCapsuleSweepChannel_Params Params;

	Params.Channel = Channel;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DebugCapsuleSweepCapture
inline void UCheatManager::DebugCapsuleSweepCapture() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugCapsuleSweepCapture");

	struct DebugCapsuleSweepCapture_Params {
		
	}; DebugCapsuleSweepCapture_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DebugCapsuleSweep
inline void UCheatManager::DebugCapsuleSweep() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugCapsuleSweep");

	struct DebugCapsuleSweep_Params {
		
	}; DebugCapsuleSweep_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DamageTarget
inline void UCheatManager::DamageTarget(float DamageAmount) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DamageTarget");

	struct DamageTarget_Params {
		float DamageAmount;
	}; DamageTarget_Params Params;

	Params.DamageAmount = DamageAmount;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.CheatScript
inline void UCheatManager::CheatScript(struct FString ScriptName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.CheatScript");

	struct CheatScript_Params {
		struct FString ScriptName;
	}; CheatScript_Params Params;

	Params.ScriptName = ScriptName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.ChangeSize
inline void UCheatManager::ChangeSize(float F) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ChangeSize");

	struct ChangeSize_Params {
		float F;
	}; ChangeSize_Params Params;

	Params.F = F;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.BugItStringCreator
inline void UCheatManager::BugItStringCreator(struct FVector ViewLocation, struct FRotator ViewRotation, struct FString& GoString, struct FString& LocString) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.BugItStringCreator");

	struct BugItStringCreator_Params {
		struct FVector ViewLocation;
		struct FRotator ViewRotation;
		struct FString& GoString;
		struct FString& LocString;
	}; BugItStringCreator_Params Params;

	Params.ViewLocation = ViewLocation;
	Params.ViewRotation = ViewRotation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	GoString = Params.GoString;
	LocString = Params.LocString;

}

// Function Engine.CheatManager.BugItGo
inline void UCheatManager::BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.BugItGo");

	struct BugItGo_Params {
		float X;
		float Y;
		float Z;
		float Pitch;
		float Yaw;
		float Roll;
	}; BugItGo_Params Params;

	Params.X = X;
	Params.Y = Y;
	Params.Z = Z;
	Params.Pitch = Pitch;
	Params.Yaw = Yaw;
	Params.Roll = Roll;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.BugIt
inline void UCheatManager::BugIt(struct FString ScreenShotDescription) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.BugIt");

	struct BugIt_Params {
		struct FString ScreenShotDescription;
	}; BugIt_Params Params;

	Params.ScreenShotDescription = ScreenShotDescription;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SpringArmComponent.IsCollisionFixApplied
inline bool USpringArmComponent::IsCollisionFixApplied() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpringArmComponent.IsCollisionFixApplied");

	struct IsCollisionFixApplied_Params {
		
		bool ReturnValue;

	}; IsCollisionFixApplied_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SpringArmComponent.GetUnfixedCameraPosition
inline struct FVector USpringArmComponent::GetUnfixedCameraPosition() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpringArmComponent.GetUnfixedCameraPosition");

	struct GetUnfixedCameraPosition_Params {
		
		struct FVector ReturnValue;

	}; GetUnfixedCameraPosition_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SpringArmComponent.GetTargetRotation
inline struct FRotator USpringArmComponent::GetTargetRotation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpringArmComponent.GetTargetRotation");

	struct GetTargetRotation_Params {
		
		struct FRotator ReturnValue;

	}; GetTargetRotation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SphereComponent.SetSphereRadius
inline void USphereComponent::SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SphereComponent.SetSphereRadius");

	struct SetSphereRadius_Params {
		float InSphereRadius;
		bool bUpdateOverlaps;
	}; SetSphereRadius_Params Params;

	Params.InSphereRadius = InSphereRadius;
	Params.bUpdateOverlaps = bUpdateOverlaps;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SphereComponent.GetUnscaledSphereRadius
inline float USphereComponent::GetUnscaledSphereRadius() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SphereComponent.GetUnscaledSphereRadius");

	struct GetUnscaledSphereRadius_Params {
		
		float ReturnValue;

	}; GetUnscaledSphereRadius_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SphereComponent.GetShapeScale
inline float USphereComponent::GetShapeScale() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SphereComponent.GetShapeScale");

	struct GetShapeScale_Params {
		
		float ReturnValue;

	}; GetShapeScale_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SphereComponent.GetScaledSphereRadius
inline float USphereComponent::GetScaledSphereRadius() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SphereComponent.GetScaledSphereRadius");

	struct GetScaledSphereRadius_Params {
		
		float ReturnValue;

	}; GetScaledSphereRadius_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameInstance.ReceiveShutdown
inline void UGameInstance::ReceiveShutdown() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInstance.ReceiveShutdown");

	struct ReceiveShutdown_Params {
		
	}; ReceiveShutdown_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameInstance.ReceiveInit
inline void UGameInstance::ReceiveInit() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInstance.ReceiveInit");

	struct ReceiveInit_Params {
		
	}; ReceiveInit_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameInstance.HandleTravelError
inline void UGameInstance::HandleTravelError(enum class ETravelFailure FailureType) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInstance.HandleTravelError");

	struct HandleTravelError_Params {
		enum class ETravelFailure FailureType;
	}; HandleTravelError_Params Params;

	Params.FailureType = FailureType;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameInstance.HandleNetworkError
inline void UGameInstance::HandleNetworkError(enum class ENetworkFailure FailureType, bool bIsServer) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInstance.HandleNetworkError");

	struct HandleNetworkError_Params {
		enum class ENetworkFailure FailureType;
		bool bIsServer;
	}; HandleNetworkError_Params Params;

	Params.FailureType = FailureType;
	Params.bIsServer = bIsServer;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameInstance.DebugRemovePlayer
inline void UGameInstance::DebugRemovePlayer(int32_t ControllerId) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInstance.DebugRemovePlayer");

	struct DebugRemovePlayer_Params {
		int32_t ControllerId;
	}; DebugRemovePlayer_Params Params;

	Params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameInstance.DebugCreatePlayer
inline void UGameInstance::DebugCreatePlayer(int32_t ControllerId) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInstance.DebugCreatePlayer");

	struct DebugCreatePlayer_Params {
		int32_t ControllerId;
	}; DebugCreatePlayer_Params Params;

	Params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameViewportClient.SSSwapControllers
inline void UGameViewportClient::SSSwapControllers() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.SSSwapControllers");

	struct SSSwapControllers_Params {
		
	}; SSSwapControllers_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameViewportClient.ShowTitleSafeArea
inline void UGameViewportClient::ShowTitleSafeArea() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.ShowTitleSafeArea");

	struct ShowTitleSafeArea_Params {
		
	}; ShowTitleSafeArea_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameViewportClient.SetConsoleTarget
inline void UGameViewportClient::SetConsoleTarget(int32_t PlayerIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.SetConsoleTarget");

	struct SetConsoleTarget_Params {
		int32_t PlayerIndex;
	}; SetConsoleTarget_Params Params;

	Params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ChildActorComponent.SetChildActorClass
inline void UChildActorComponent::SetChildActorClass(struct UClass* InClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ChildActorComponent.SetChildActorClass");

	struct SetChildActorClass_Params {
		struct UClass* InClass;
	}; SetChildActorClass_Params Params;

	Params.InClass = InClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyLight.OnRep_bEnabled
inline void ASkyLight::OnRep_bEnabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLight.OnRep_bEnabled");

	struct OnRep_bEnabled_Params {
		
	}; OnRep_bEnabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.InstancedStaticMeshComponent.UpdateInstanceTransform
inline bool UInstancedStaticMeshComponent::UpdateInstanceTransform(int32_t InstanceIndex, struct FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.UpdateInstanceTransform");

	struct UpdateInstanceTransform_Params {
		int32_t InstanceIndex;
		struct FTransform& NewInstanceTransform;
		bool bWorldSpace;
		bool bMarkRenderStateDirty;
		bool bTeleport;
		bool ReturnValue;

	}; UpdateInstanceTransform_Params Params;

	Params.InstanceIndex = InstanceIndex;
	Params.bWorldSpace = bWorldSpace;
	Params.bMarkRenderStateDirty = bMarkRenderStateDirty;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewInstanceTransform = Params.NewInstanceTransform;


	return params.ReturnValue;
}

// Function Engine.InstancedStaticMeshComponent.SetCustomDataValue
inline bool UInstancedStaticMeshComponent::SetCustomDataValue(int32_t InstanceIndex, int32_t CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.SetCustomDataValue");

	struct SetCustomDataValue_Params {
		int32_t InstanceIndex;
		int32_t CustomDataIndex;
		float CustomDataValue;
		bool bMarkRenderStateDirty;
		bool ReturnValue;

	}; SetCustomDataValue_Params Params;

	Params.InstanceIndex = InstanceIndex;
	Params.CustomDataIndex = CustomDataIndex;
	Params.CustomDataValue = CustomDataValue;
	Params.bMarkRenderStateDirty = bMarkRenderStateDirty;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.InstancedStaticMeshComponent.SetCullDistances
inline void UInstancedStaticMeshComponent::SetCullDistances(int32_t StartCullDistance, int32_t EndCullDistance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.SetCullDistances");

	struct SetCullDistances_Params {
		int32_t StartCullDistance;
		int32_t EndCullDistance;
	}; SetCullDistances_Params Params;

	Params.StartCullDistance = StartCullDistance;
	Params.EndCullDistance = EndCullDistance;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.InstancedStaticMeshComponent.RemoveInstance
inline bool UInstancedStaticMeshComponent::RemoveInstance(int32_t InstanceIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.RemoveInstance");

	struct RemoveInstance_Params {
		int32_t InstanceIndex;
		bool ReturnValue;

	}; RemoveInstance_Params Params;

	Params.InstanceIndex = InstanceIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.InstancedStaticMeshComponent.GetInstanceTransform
inline bool UInstancedStaticMeshComponent::GetInstanceTransform(int32_t InstanceIndex, struct FTransform& OutInstanceTransform, bool bWorldSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.GetInstanceTransform");

	struct GetInstanceTransform_Params {
		int32_t InstanceIndex;
		struct FTransform& OutInstanceTransform;
		bool bWorldSpace;
		bool ReturnValue;

	}; GetInstanceTransform_Params Params;

	Params.InstanceIndex = InstanceIndex;
	Params.bWorldSpace = bWorldSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutInstanceTransform = Params.OutInstanceTransform;


	return params.ReturnValue;
}

// Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingSphere
inline struct TArray<int32_t> UInstancedStaticMeshComponent::GetInstancesOverlappingSphere(struct FVector& Center, float Radius, bool bSphereInWorldSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingSphere");

	struct GetInstancesOverlappingSphere_Params {
		struct FVector& Center;
		float Radius;
		bool bSphereInWorldSpace;
		struct TArray<int32_t> ReturnValue;

	}; GetInstancesOverlappingSphere_Params Params;

	Params.Radius = Radius;
	Params.bSphereInWorldSpace = bSphereInWorldSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Center = Params.Center;


	return params.ReturnValue;
}

// Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingBox
inline struct TArray<int32_t> UInstancedStaticMeshComponent::GetInstancesOverlappingBox(struct FBox& Box, bool bBoxInWorldSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingBox");

	struct GetInstancesOverlappingBox_Params {
		struct FBox& Box;
		bool bBoxInWorldSpace;
		struct TArray<int32_t> ReturnValue;

	}; GetInstancesOverlappingBox_Params Params;

	Params.bBoxInWorldSpace = bBoxInWorldSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Box = Params.Box;


	return params.ReturnValue;
}

// Function Engine.InstancedStaticMeshComponent.GetInstanceCount
inline int32_t UInstancedStaticMeshComponent::GetInstanceCount() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.GetInstanceCount");

	struct GetInstanceCount_Params {
		
		int32_t ReturnValue;

	}; GetInstanceCount_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.InstancedStaticMeshComponent.ClearInstances
inline void UInstancedStaticMeshComponent::ClearInstances() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.ClearInstances");

	struct ClearInstances_Params {
		
	}; ClearInstances_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransforms
inline bool UInstancedStaticMeshComponent::BatchUpdateInstancesTransforms(int32_t StartInstanceIndex, struct TArray<struct FTransform>& NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransforms");

	struct BatchUpdateInstancesTransforms_Params {
		int32_t StartInstanceIndex;
		struct TArray<struct FTransform>& NewInstancesTransforms;
		bool bWorldSpace;
		bool bMarkRenderStateDirty;
		bool bTeleport;
		bool ReturnValue;

	}; BatchUpdateInstancesTransforms_Params Params;

	Params.StartInstanceIndex = StartInstanceIndex;
	Params.bWorldSpace = bWorldSpace;
	Params.bMarkRenderStateDirty = bMarkRenderStateDirty;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewInstancesTransforms = Params.NewInstancesTransforms;


	return params.ReturnValue;
}

// Function Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransform
inline bool UInstancedStaticMeshComponent::BatchUpdateInstancesTransform(int32_t StartInstanceIndex, int32_t NumInstances, struct FTransform& NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransform");

	struct BatchUpdateInstancesTransform_Params {
		int32_t StartInstanceIndex;
		int32_t NumInstances;
		struct FTransform& NewInstancesTransform;
		bool bWorldSpace;
		bool bMarkRenderStateDirty;
		bool bTeleport;
		bool ReturnValue;

	}; BatchUpdateInstancesTransform_Params Params;

	Params.StartInstanceIndex = StartInstanceIndex;
	Params.NumInstances = NumInstances;
	Params.bWorldSpace = bWorldSpace;
	Params.bMarkRenderStateDirty = bMarkRenderStateDirty;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewInstancesTransform = Params.NewInstancesTransform;


	return params.ReturnValue;
}

// Function Engine.InstancedStaticMeshComponent.AddInstanceWorldSpace
inline int32_t UInstancedStaticMeshComponent::AddInstanceWorldSpace(struct FTransform& WorldTransform) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.AddInstanceWorldSpace");

	struct AddInstanceWorldSpace_Params {
		struct FTransform& WorldTransform;
		int32_t ReturnValue;

	}; AddInstanceWorldSpace_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	WorldTransform = Params.WorldTransform;


	return params.ReturnValue;
}

// Function Engine.InstancedStaticMeshComponent.AddInstance
inline int32_t UInstancedStaticMeshComponent::AddInstance(struct FTransform& InstanceTransform) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.AddInstance");

	struct AddInstance_Params {
		struct FTransform& InstanceTransform;
		int32_t ReturnValue;

	}; AddInstance_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InstanceTransform = Params.InstanceTransform;


	return params.ReturnValue;
}

// Function Engine.HierarchicalInstancedStaticMeshComponent.RemoveInstances
inline bool UHierarchicalInstancedStaticMeshComponent::RemoveInstances(struct TArray<int32_t>& InstancesToRemove) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HierarchicalInstancedStaticMeshComponent.RemoveInstances");

	struct RemoveInstances_Params {
		struct TArray<int32_t>& InstancesToRemove;
		bool ReturnValue;

	}; RemoveInstances_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InstancesToRemove = Params.InstancesToRemove;


	return params.ReturnValue;
}

// Function Engine.StaticMeshActor.SetMobility
inline void AStaticMeshActor::SetMobility(enum class EComponentMobility InMobility) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshActor.SetMobility");

	struct SetMobility_Params {
		enum class EComponentMobility InMobility;
	}; SetMobility_Params Params;

	Params.InMobility = InMobility;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MaterialInterface.SetForceMipLevelsToBeResident
inline void UMaterialInterface::SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int32_t CinematicTextureGroups, bool bFastResponse) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.SetForceMipLevelsToBeResident");

	struct SetForceMipLevelsToBeResident_Params {
		bool OverrideForceMiplevelsToBeResident;
		bool bForceMiplevelsToBeResidentValue;
		float ForceDuration;
		int32_t CinematicTextureGroups;
		bool bFastResponse;
	}; SetForceMipLevelsToBeResident_Params Params;

	Params.OverrideForceMiplevelsToBeResident = OverrideForceMiplevelsToBeResident;
	Params.bForceMiplevelsToBeResidentValue = bForceMiplevelsToBeResidentValue;
	Params.ForceDuration = ForceDuration;
	Params.CinematicTextureGroups = CinematicTextureGroups;
	Params.bFastResponse = bFastResponse;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MaterialInterface.GetPhysicalMaterialMask
inline struct UPhysicalMaterialMask UMaterialInterface::GetPhysicalMaterialMask() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetPhysicalMaterialMask");

	struct GetPhysicalMaterialMask_Params {
		
		struct UPhysicalMaterialMask ReturnValue;

	}; GetPhysicalMaterialMask_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MaterialInterface.GetPhysicalMaterialFromMap
inline struct UPhysicalMaterial UMaterialInterface::GetPhysicalMaterialFromMap(int32_t Index) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetPhysicalMaterialFromMap");

	struct GetPhysicalMaterialFromMap_Params {
		int32_t Index;
		struct UPhysicalMaterial ReturnValue;

	}; GetPhysicalMaterialFromMap_Params Params;

	Params.Index = Index;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MaterialInterface.GetPhysicalMaterial
inline struct UPhysicalMaterial UMaterialInterface::GetPhysicalMaterial() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetPhysicalMaterial");

	struct GetPhysicalMaterial_Params {
		
		struct UPhysicalMaterial ReturnValue;

	}; GetPhysicalMaterial_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MaterialInterface.GetParameterInfo
inline struct FMaterialParameterInfo UMaterialInterface::GetParameterInfo(enum class EMaterialParameterAssociation Association, struct FName ParameterName, struct UMaterialFunctionInterface LayerFunction) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetParameterInfo");

	struct GetParameterInfo_Params {
		enum class EMaterialParameterAssociation Association;
		struct FName ParameterName;
		struct UMaterialFunctionInterface LayerFunction;
		struct FMaterialParameterInfo ReturnValue;

	}; GetParameterInfo_Params Params;

	Params.Association = Association;
	Params.ParameterName = ParameterName;
	Params.LayerFunction = LayerFunction;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MaterialInterface.GetBaseMaterial
inline struct UMaterial UMaterialInterface::GetBaseMaterial() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetBaseMaterial");

	struct GetBaseMaterial_Params {
		
		struct UMaterial ReturnValue;

	}; GetBaseMaterial_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MaterialInstanceConstant.K2_GetVectorParameterValue
inline struct FLinearColor UMaterialInstanceConstant::K2_GetVectorParameterValue(struct FName ParameterName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.K2_GetVectorParameterValue");

	struct K2_GetVectorParameterValue_Params {
		struct FName ParameterName;
		struct FLinearColor ReturnValue;

	}; K2_GetVectorParameterValue_Params Params;

	Params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MaterialInstanceConstant.K2_GetTextureParameterValue
inline struct UTexture UMaterialInstanceConstant::K2_GetTextureParameterValue(struct FName ParameterName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.K2_GetTextureParameterValue");

	struct K2_GetTextureParameterValue_Params {
		struct FName ParameterName;
		struct UTexture ReturnValue;

	}; K2_GetTextureParameterValue_Params Params;

	Params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MaterialInstanceConstant.K2_GetScalarParameterValue
inline float UMaterialInstanceConstant::K2_GetScalarParameterValue(struct FName ParameterName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.K2_GetScalarParameterValue");

	struct K2_GetScalarParameterValue_Params {
		struct FName ParameterName;
		float ReturnValue;

	}; K2_GetScalarParameterValue_Params Params;

	Params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CameraComponent.SetUseFieldOfViewForLOD
inline void UCameraComponent::SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.SetUseFieldOfViewForLOD");

	struct SetUseFieldOfViewForLOD_Params {
		bool bInUseFieldOfViewForLOD;
	}; SetUseFieldOfViewForLOD_Params Params;

	Params.bInUseFieldOfViewForLOD = bInUseFieldOfViewForLOD;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraComponent.SetProjectionMode
inline void UCameraComponent::SetProjectionMode(enum class ECameraProjectionMode InProjectionMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.SetProjectionMode");

	struct SetProjectionMode_Params {
		enum class ECameraProjectionMode InProjectionMode;
	}; SetProjectionMode_Params Params;

	Params.InProjectionMode = InProjectionMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraComponent.SetPostProcessBlendWeight
inline void UCameraComponent::SetPostProcessBlendWeight(float InPostProcessBlendWeight) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.SetPostProcessBlendWeight");

	struct SetPostProcessBlendWeight_Params {
		float InPostProcessBlendWeight;
	}; SetPostProcessBlendWeight_Params Params;

	Params.InPostProcessBlendWeight = InPostProcessBlendWeight;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraComponent.SetOrthoWidth
inline void UCameraComponent::SetOrthoWidth(float InOrthoWidth) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.SetOrthoWidth");

	struct SetOrthoWidth_Params {
		float InOrthoWidth;
	}; SetOrthoWidth_Params Params;

	Params.InOrthoWidth = InOrthoWidth;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraComponent.SetOrthoNearClipPlane
inline void UCameraComponent::SetOrthoNearClipPlane(float InOrthoNearClipPlane) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.SetOrthoNearClipPlane");

	struct SetOrthoNearClipPlane_Params {
		float InOrthoNearClipPlane;
	}; SetOrthoNearClipPlane_Params Params;

	Params.InOrthoNearClipPlane = InOrthoNearClipPlane;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraComponent.SetOrthoFarClipPlane
inline void UCameraComponent::SetOrthoFarClipPlane(float InOrthoFarClipPlane) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.SetOrthoFarClipPlane");

	struct SetOrthoFarClipPlane_Params {
		float InOrthoFarClipPlane;
	}; SetOrthoFarClipPlane_Params Params;

	Params.InOrthoFarClipPlane = InOrthoFarClipPlane;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraComponent.SetFieldOfView
inline void UCameraComponent::SetFieldOfView(float InFieldOfView) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.SetFieldOfView");

	struct SetFieldOfView_Params {
		float InFieldOfView;
	}; SetFieldOfView_Params Params;

	Params.InFieldOfView = InFieldOfView;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraComponent.SetConstraintAspectRatio
inline void UCameraComponent::SetConstraintAspectRatio(bool bInConstrainAspectRatio) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.SetConstraintAspectRatio");

	struct SetConstraintAspectRatio_Params {
		bool bInConstrainAspectRatio;
	}; SetConstraintAspectRatio_Params Params;

	Params.bInConstrainAspectRatio = bInConstrainAspectRatio;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraComponent.SetAspectRatio
inline void UCameraComponent::SetAspectRatio(float InAspectRatio) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.SetAspectRatio");

	struct SetAspectRatio_Params {
		float InAspectRatio;
	}; SetAspectRatio_Params Params;

	Params.InAspectRatio = InAspectRatio;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraComponent.RemoveBlendable
inline void UCameraComponent::RemoveBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.RemoveBlendable");

	struct RemoveBlendable_Params {
		struct TScriptInterface<IBlendableInterface> InBlendableObject;
	}; RemoveBlendable_Params Params;

	Params.InBlendableObject = InBlendableObject;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraComponent.OnCameraMeshHiddenChanged
inline void UCameraComponent::OnCameraMeshHiddenChanged() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.OnCameraMeshHiddenChanged");

	struct OnCameraMeshHiddenChanged_Params {
		
	}; OnCameraMeshHiddenChanged_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraComponent.GetCameraView
inline void UCameraComponent::GetCameraView(float DeltaTime, struct FMinimalViewInfo& DesiredView) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.GetCameraView");

	struct GetCameraView_Params {
		float DeltaTime;
		struct FMinimalViewInfo& DesiredView;
	}; GetCameraView_Params Params;

	Params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	DesiredView = Params.DesiredView;

}

// Function Engine.CameraComponent.AddOrUpdateBlendable
inline void UCameraComponent::AddOrUpdateBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.AddOrUpdateBlendable");

	struct AddOrUpdateBlendable_Params {
		struct TScriptInterface<IBlendableInterface> InBlendableObject;
		float InWeight;
	}; AddOrUpdateBlendable_Params Params;

	Params.InBlendableObject = InBlendableObject;
	Params.InWeight = InWeight;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AmbientSound.Stop
inline void AAmbientSound::Stop() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSound.Stop");

	struct Stop_Params {
		
	}; Stop_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AmbientSound.Play
inline void AAmbientSound::Play(float StartTime) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSound.Play");

	struct Play_Params {
		float StartTime;
	}; Play_Params Params;

	Params.StartTime = StartTime;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AmbientSound.FadeOut
inline void AAmbientSound::FadeOut(float FadeOutDuration, float FadeVolumeLevel) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSound.FadeOut");

	struct FadeOut_Params {
		float FadeOutDuration;
		float FadeVolumeLevel;
	}; FadeOut_Params Params;

	Params.FadeOutDuration = FadeOutDuration;
	Params.FadeVolumeLevel = FadeVolumeLevel;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AmbientSound.FadeIn
inline void AAmbientSound::FadeIn(float FadeInDuration, float FadeVolumeLevel) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSound.FadeIn");

	struct FadeIn_Params {
		float FadeInDuration;
		float FadeVolumeLevel;
	}; FadeIn_Params Params;

	Params.FadeInDuration = FadeInDuration;
	Params.FadeVolumeLevel = FadeVolumeLevel;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AmbientSound.AdjustVolume
inline void AAmbientSound::AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSound.AdjustVolume");

	struct AdjustVolume_Params {
		float AdjustVolumeDuration;
		float AdjustVolumeLevel;
	}; AdjustVolume_Params Params;

	Params.AdjustVolumeDuration = AdjustVolumeDuration;
	Params.AdjustVolumeLevel = AdjustVolumeLevel;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimSequenceBase.GetPlayLength
inline float UAnimSequenceBase::GetPlayLength() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSequenceBase.GetPlayLength");

	struct GetPlayLength_Params {
		
		float ReturnValue;

	}; GetPlayLength_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimMontage.GetDefaultBlendOutTime
inline float UAnimMontage::GetDefaultBlendOutTime() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimMontage.GetDefaultBlendOutTime");

	struct GetDefaultBlendOutTime_Params {
		
		float ReturnValue;

	}; GetDefaultBlendOutTime_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimNotifyState_Trail.OverridePSTemplate
inline struct UParticleSystem UAnimNotifyState_Trail::OverridePSTemplate(struct USkeletalMeshComponent MeshComp, struct UAnimSequenceBase Animation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNotifyState_Trail.OverridePSTemplate");

	struct OverridePSTemplate_Params {
		struct USkeletalMeshComponent MeshComp;
		struct UAnimSequenceBase Animation;
		struct UParticleSystem ReturnValue;

	}; OverridePSTemplate_Params Params;

	Params.MeshComp = MeshComp;
	Params.Animation = Animation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimSingleNodeInstance.StopAnim
inline void UAnimSingleNodeInstance::StopAnim() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.StopAnim");

	struct StopAnim_Params {
		
	}; StopAnim_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimSingleNodeInstance.SetReverse
inline void UAnimSingleNodeInstance::SetReverse(bool bInReverse) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetReverse");

	struct SetReverse_Params {
		bool bInReverse;
	}; SetReverse_Params Params;

	Params.bInReverse = bInReverse;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimSingleNodeInstance.SetPreviewCurveOverride
inline void UAnimSingleNodeInstance::SetPreviewCurveOverride(struct FName& PoseName, float Value, bool bRemoveIfZero) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetPreviewCurveOverride");

	struct SetPreviewCurveOverride_Params {
		struct FName& PoseName;
		float Value;
		bool bRemoveIfZero;
	}; SetPreviewCurveOverride_Params Params;

	Params.Value = Value;
	Params.bRemoveIfZero = bRemoveIfZero;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	PoseName = Params.PoseName;

}

// Function Engine.AnimSingleNodeInstance.SetPositionWithPreviousTime
inline void UAnimSingleNodeInstance::SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetPositionWithPreviousTime");

	struct SetPositionWithPreviousTime_Params {
		float InPosition;
		float InPreviousTime;
		bool bFireNotifies;
	}; SetPositionWithPreviousTime_Params Params;

	Params.InPosition = InPosition;
	Params.InPreviousTime = InPreviousTime;
	Params.bFireNotifies = bFireNotifies;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimSingleNodeInstance.SetPosition
inline void UAnimSingleNodeInstance::SetPosition(float InPosition, bool bFireNotifies) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetPosition");

	struct SetPosition_Params {
		float InPosition;
		bool bFireNotifies;
	}; SetPosition_Params Params;

	Params.InPosition = InPosition;
	Params.bFireNotifies = bFireNotifies;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimSingleNodeInstance.SetPlayRate
inline void UAnimSingleNodeInstance::SetPlayRate(float InPlayRate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetPlayRate");

	struct SetPlayRate_Params {
		float InPlayRate;
	}; SetPlayRate_Params Params;

	Params.InPlayRate = InPlayRate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimSingleNodeInstance.SetPlaying
inline void UAnimSingleNodeInstance::SetPlaying(bool bIsPlaying) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetPlaying");

	struct SetPlaying_Params {
		bool bIsPlaying;
	}; SetPlaying_Params Params;

	Params.bIsPlaying = bIsPlaying;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimSingleNodeInstance.SetLooping
inline void UAnimSingleNodeInstance::SetLooping(bool bIsLooping) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetLooping");

	struct SetLooping_Params {
		bool bIsLooping;
	}; SetLooping_Params Params;

	Params.bIsLooping = bIsLooping;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimSingleNodeInstance.SetBlendSpaceInput
inline void UAnimSingleNodeInstance::SetBlendSpaceInput(struct FVector& InBlendInput) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetBlendSpaceInput");

	struct SetBlendSpaceInput_Params {
		struct FVector& InBlendInput;
	}; SetBlendSpaceInput_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InBlendInput = Params.InBlendInput;

}

// Function Engine.AnimSingleNodeInstance.SetAnimationAsset
inline void UAnimSingleNodeInstance::SetAnimationAsset(struct UAnimationAsset NewAsset, bool bIsLooping, float InPlayRate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetAnimationAsset");

	struct SetAnimationAsset_Params {
		struct UAnimationAsset NewAsset;
		bool bIsLooping;
		float InPlayRate;
	}; SetAnimationAsset_Params Params;

	Params.NewAsset = NewAsset;
	Params.bIsLooping = bIsLooping;
	Params.InPlayRate = InPlayRate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimSingleNodeInstance.PlayAnim
inline void UAnimSingleNodeInstance::PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.PlayAnim");

	struct PlayAnim_Params {
		bool bIsLooping;
		float InPlayRate;
		float InStartPosition;
	}; PlayAnim_Params Params;

	Params.bIsLooping = bIsLooping;
	Params.InPlayRate = InPlayRate;
	Params.InStartPosition = InStartPosition;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimSingleNodeInstance.GetLength
inline float UAnimSingleNodeInstance::GetLength() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.GetLength");

	struct GetLength_Params {
		
		float ReturnValue;

	}; GetLength_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimSingleNodeInstance.GetAnimationAsset
inline struct UAnimationAsset UAnimSingleNodeInstance::GetAnimationAsset() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.GetAnimationAsset");

	struct GetAnimationAsset_Params {
		
		struct UAnimationAsset ReturnValue;

	}; GetAnimationAsset_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.ArrowComponent.SetArrowColor
inline void UArrowComponent::SetArrowColor(struct FLinearColor NewColor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ArrowComponent.SetArrowColor");

	struct SetArrowColor_Params {
		struct FLinearColor NewColor;
	}; SetArrowColor_Params Params;

	Params.NewColor = NewColor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AsyncActionHandleSaveGame.AsyncSaveGameToSlot
inline struct UAsyncActionHandleSaveGame UAsyncActionHandleSaveGame::AsyncSaveGameToSlot(struct Object WorldContextObject, struct USaveGame SaveGameObject, struct FString SlotName, int32_t UserIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AsyncActionHandleSaveGame.AsyncSaveGameToSlot");

	struct AsyncSaveGameToSlot_Params {
		struct Object WorldContextObject;
		struct USaveGame SaveGameObject;
		struct FString SlotName;
		int32_t UserIndex;
		struct UAsyncActionHandleSaveGame ReturnValue;

	}; AsyncSaveGameToSlot_Params Params;

	Params.WorldContextObject = WorldContextObject;
	Params.SaveGameObject = SaveGameObject;
	Params.SlotName = SlotName;
	Params.UserIndex = UserIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AsyncActionHandleSaveGame.AsyncLoadGameFromSlot
inline struct UAsyncActionHandleSaveGame UAsyncActionHandleSaveGame::AsyncLoadGameFromSlot(struct Object WorldContextObject, struct FString SlotName, int32_t UserIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AsyncActionHandleSaveGame.AsyncLoadGameFromSlot");

	struct AsyncLoadGameFromSlot_Params {
		struct Object WorldContextObject;
		struct FString SlotName;
		int32_t UserIndex;
		struct UAsyncActionHandleSaveGame ReturnValue;

	}; AsyncLoadGameFromSlot_Params Params;

	Params.WorldContextObject = WorldContextObject;
	Params.SlotName = SlotName;
	Params.UserIndex = UserIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AsyncActionLoadPrimaryAsset.AsyncLoadPrimaryAsset
inline struct UAsyncActionLoadPrimaryAsset UAsyncActionLoadPrimaryAsset::AsyncLoadPrimaryAsset(struct Object WorldContextObject, struct FPrimaryAssetId PrimaryAsset, struct TArray<struct FName>& LoadBundles) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AsyncActionLoadPrimaryAsset.AsyncLoadPrimaryAsset");

	struct AsyncLoadPrimaryAsset_Params {
		struct Object WorldContextObject;
		struct FPrimaryAssetId PrimaryAsset;
		struct TArray<struct FName>& LoadBundles;
		struct UAsyncActionLoadPrimaryAsset ReturnValue;

	}; AsyncLoadPrimaryAsset_Params Params;

	Params.WorldContextObject = WorldContextObject;
	Params.PrimaryAsset = PrimaryAsset;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	LoadBundles = Params.LoadBundles;


	return params.ReturnValue;
}

// Function Engine.AsyncActionLoadPrimaryAssetClass.AsyncLoadPrimaryAssetClass
inline struct UAsyncActionLoadPrimaryAssetClass UAsyncActionLoadPrimaryAssetClass::AsyncLoadPrimaryAssetClass(struct Object WorldContextObject, struct FPrimaryAssetId PrimaryAsset, struct TArray<struct FName>& LoadBundles) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AsyncActionLoadPrimaryAssetClass.AsyncLoadPrimaryAssetClass");

	struct AsyncLoadPrimaryAssetClass_Params {
		struct Object WorldContextObject;
		struct FPrimaryAssetId PrimaryAsset;
		struct TArray<struct FName>& LoadBundles;
		struct UAsyncActionLoadPrimaryAssetClass ReturnValue;

	}; AsyncLoadPrimaryAssetClass_Params Params;

	Params.WorldContextObject = WorldContextObject;
	Params.PrimaryAsset = PrimaryAsset;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	LoadBundles = Params.LoadBundles;


	return params.ReturnValue;
}

// Function Engine.AsyncActionLoadPrimaryAssetList.AsyncLoadPrimaryAssetList
inline struct UAsyncActionLoadPrimaryAssetList UAsyncActionLoadPrimaryAssetList::AsyncLoadPrimaryAssetList(struct Object WorldContextObject, struct TArray<struct FPrimaryAssetId>& PrimaryAssetList, struct TArray<struct FName>& LoadBundles) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AsyncActionLoadPrimaryAssetList.AsyncLoadPrimaryAssetList");

	struct AsyncLoadPrimaryAssetList_Params {
		struct Object WorldContextObject;
		struct TArray<struct FPrimaryAssetId>& PrimaryAssetList;
		struct TArray<struct FName>& LoadBundles;
		struct UAsyncActionLoadPrimaryAssetList ReturnValue;

	}; AsyncLoadPrimaryAssetList_Params Params;

	Params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	PrimaryAssetList = Params.PrimaryAssetList;
	LoadBundles = Params.LoadBundles;


	return params.ReturnValue;
}

// Function Engine.AsyncActionLoadPrimaryAssetClassList.AsyncLoadPrimaryAssetClassList
inline struct UAsyncActionLoadPrimaryAssetClassList UAsyncActionLoadPrimaryAssetClassList::AsyncLoadPrimaryAssetClassList(struct Object WorldContextObject, struct TArray<struct FPrimaryAssetId>& PrimaryAssetList, struct TArray<struct FName>& LoadBundles) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AsyncActionLoadPrimaryAssetClassList.AsyncLoadPrimaryAssetClassList");

	struct AsyncLoadPrimaryAssetClassList_Params {
		struct Object WorldContextObject;
		struct TArray<struct FPrimaryAssetId>& PrimaryAssetList;
		struct TArray<struct FName>& LoadBundles;
		struct UAsyncActionLoadPrimaryAssetClassList ReturnValue;

	}; AsyncLoadPrimaryAssetClassList_Params Params;

	Params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	PrimaryAssetList = Params.PrimaryAssetList;
	LoadBundles = Params.LoadBundles;


	return params.ReturnValue;
}

// Function Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForPrimaryAssetList
inline struct UAsyncActionChangePrimaryAssetBundles UAsyncActionChangePrimaryAssetBundles::AsyncChangeBundleStateForPrimaryAssetList(struct Object WorldContextObject, struct TArray<struct FPrimaryAssetId>& PrimaryAssetList, struct TArray<struct FName>& AddBundles, struct TArray<struct FName>& RemoveBundles) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForPrimaryAssetList");

	struct AsyncChangeBundleStateForPrimaryAssetList_Params {
		struct Object WorldContextObject;
		struct TArray<struct FPrimaryAssetId>& PrimaryAssetList;
		struct TArray<struct FName>& AddBundles;
		struct TArray<struct FName>& RemoveBundles;
		struct UAsyncActionChangePrimaryAssetBundles ReturnValue;

	}; AsyncChangeBundleStateForPrimaryAssetList_Params Params;

	Params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	PrimaryAssetList = Params.PrimaryAssetList;
	AddBundles = Params.AddBundles;
	RemoveBundles = Params.RemoveBundles;


	return params.ReturnValue;
}

// Function Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForMatchingPrimaryAssets
inline struct UAsyncActionChangePrimaryAssetBundles UAsyncActionChangePrimaryAssetBundles::AsyncChangeBundleStateForMatchingPrimaryAssets(struct Object WorldContextObject, struct TArray<struct FName>& NewBundles, struct TArray<struct FName>& OldBundles) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForMatchingPrimaryAssets");

	struct AsyncChangeBundleStateForMatchingPrimaryAssets_Params {
		struct Object WorldContextObject;
		struct TArray<struct FName>& NewBundles;
		struct TArray<struct FName>& OldBundles;
		struct UAsyncActionChangePrimaryAssetBundles ReturnValue;

	}; AsyncChangeBundleStateForMatchingPrimaryAssets_Params Params;

	Params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewBundles = Params.NewBundles;
	OldBundles = Params.OldBundles;


	return params.ReturnValue;
}

// Function Engine.AtmosphericFogComponent.StartPrecompute
inline void UAtmosphericFogComponent::StartPrecompute() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.StartPrecompute");

	struct StartPrecompute_Params {
		
	}; StartPrecompute_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AtmosphericFogComponent.SetSunMultiplier
inline void UAtmosphericFogComponent::SetSunMultiplier(float NewSunMultiplier) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetSunMultiplier");

	struct SetSunMultiplier_Params {
		float NewSunMultiplier;
	}; SetSunMultiplier_Params Params;

	Params.NewSunMultiplier = NewSunMultiplier;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AtmosphericFogComponent.SetStartDistance
inline void UAtmosphericFogComponent::SetStartDistance(float NewStartDistance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetStartDistance");

	struct SetStartDistance_Params {
		float NewStartDistance;
	}; SetStartDistance_Params Params;

	Params.NewStartDistance = NewStartDistance;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AtmosphericFogComponent.SetPrecomputeParams
inline void UAtmosphericFogComponent::SetPrecomputeParams(float DensityHeight, int32_t MaxScatteringOrder, int32_t InscatterAltitudeSampleNum) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetPrecomputeParams");

	struct SetPrecomputeParams_Params {
		float DensityHeight;
		int32_t MaxScatteringOrder;
		int32_t InscatterAltitudeSampleNum;
	}; SetPrecomputeParams_Params Params;

	Params.DensityHeight = DensityHeight;
	Params.MaxScatteringOrder = MaxScatteringOrder;
	Params.InscatterAltitudeSampleNum = InscatterAltitudeSampleNum;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AtmosphericFogComponent.SetFogMultiplier
inline void UAtmosphericFogComponent::SetFogMultiplier(float NewFogMultiplier) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetFogMultiplier");

	struct SetFogMultiplier_Params {
		float NewFogMultiplier;
	}; SetFogMultiplier_Params Params;

	Params.NewFogMultiplier = NewFogMultiplier;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AtmosphericFogComponent.SetDistanceScale
inline void UAtmosphericFogComponent::SetDistanceScale(float NewDistanceScale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetDistanceScale");

	struct SetDistanceScale_Params {
		float NewDistanceScale;
	}; SetDistanceScale_Params Params;

	Params.NewDistanceScale = NewDistanceScale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AtmosphericFogComponent.SetDistanceOffset
inline void UAtmosphericFogComponent::SetDistanceOffset(float NewDistanceOffset) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetDistanceOffset");

	struct SetDistanceOffset_Params {
		float NewDistanceOffset;
	}; SetDistanceOffset_Params Params;

	Params.NewDistanceOffset = NewDistanceOffset;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AtmosphericFogComponent.SetDensityOffset
inline void UAtmosphericFogComponent::SetDensityOffset(float NewDensityOffset) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetDensityOffset");

	struct SetDensityOffset_Params {
		float NewDensityOffset;
	}; SetDensityOffset_Params Params;

	Params.NewDensityOffset = NewDensityOffset;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AtmosphericFogComponent.SetDensityMultiplier
inline void UAtmosphericFogComponent::SetDensityMultiplier(float NewDensityMultiplier) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetDensityMultiplier");

	struct SetDensityMultiplier_Params {
		float NewDensityMultiplier;
	}; SetDensityMultiplier_Params Params;

	Params.NewDensityMultiplier = NewDensityMultiplier;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AtmosphericFogComponent.SetDefaultLightColor
inline void UAtmosphericFogComponent::SetDefaultLightColor(struct FLinearColor NewLightColor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetDefaultLightColor");

	struct SetDefaultLightColor_Params {
		struct FLinearColor NewLightColor;
	}; SetDefaultLightColor_Params Params;

	Params.NewLightColor = NewLightColor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AtmosphericFogComponent.SetDefaultBrightness
inline void UAtmosphericFogComponent::SetDefaultBrightness(float NewBrightness) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetDefaultBrightness");

	struct SetDefaultBrightness_Params {
		float NewBrightness;
	}; SetDefaultBrightness_Params Params;

	Params.NewBrightness = NewBrightness;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AtmosphericFogComponent.SetAltitudeScale
inline void UAtmosphericFogComponent::SetAltitudeScale(float NewAltitudeScale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetAltitudeScale");

	struct SetAltitudeScale_Params {
		float NewAltitudeScale;
	}; SetAltitudeScale_Params Params;

	Params.NewAltitudeScale = NewAltitudeScale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AtmosphericFogComponent.DisableSunDisk
inline void UAtmosphericFogComponent::DisableSunDisk(bool NewSunDisk) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.DisableSunDisk");

	struct DisableSunDisk_Params {
		bool NewSunDisk;
	}; DisableSunDisk_Params Params;

	Params.NewSunDisk = NewSunDisk;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AtmosphericFogComponent.DisableGroundScattering
inline void UAtmosphericFogComponent::DisableGroundScattering(bool NewGroundScattering) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.DisableGroundScattering");

	struct DisableGroundScattering_Params {
		bool NewGroundScattering;
	}; DisableGroundScattering_Params Params;

	Params.NewGroundScattering = NewGroundScattering;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioVolume.SetReverbSettings
inline void AAudioVolume::SetReverbSettings(struct FReverbSettings& NewReverbSettings) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioVolume.SetReverbSettings");

	struct SetReverbSettings_Params {
		struct FReverbSettings& NewReverbSettings;
	}; SetReverbSettings_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewReverbSettings = Params.NewReverbSettings;

}

// Function Engine.AudioVolume.SetPriority
inline void AAudioVolume::SetPriority(float NewPriority) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioVolume.SetPriority");

	struct SetPriority_Params {
		float NewPriority;
	}; SetPriority_Params Params;

	Params.NewPriority = NewPriority;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioVolume.SetInteriorSettings
inline void AAudioVolume::SetInteriorSettings(struct FInteriorSettings& NewInteriorSettings) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioVolume.SetInteriorSettings");

	struct SetInteriorSettings_Params {
		struct FInteriorSettings& NewInteriorSettings;
	}; SetInteriorSettings_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewInteriorSettings = Params.NewInteriorSettings;

}

// Function Engine.AudioVolume.SetEnabled
inline void AAudioVolume::SetEnabled(bool bNewEnabled) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioVolume.SetEnabled");

	struct SetEnabled_Params {
		bool bNewEnabled;
	}; SetEnabled_Params Params;

	Params.bNewEnabled = bNewEnabled;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioVolume.OnRep_bEnabled
inline void AAudioVolume::OnRep_bEnabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioVolume.OnRep_bEnabled");

	struct OnRep_bEnabled_Params {
		
	}; OnRep_bEnabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AutoDestroySubsystem.OnActorEndPlay
inline void UAutoDestroySubsystem::OnActorEndPlay(struct UActor Actor, enum class EEndPlayReason EndPlayReason) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoDestroySubsystem.OnActorEndPlay");

	struct OnActorEndPlay_Params {
		struct UActor Actor;
		enum class EEndPlayReason EndPlayReason;
	}; OnActorEndPlay_Params Params;

	Params.Actor = Actor;
	Params.EndPlayReason = EndPlayReason;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AvoidanceManager.RegisterMovementComponent
inline bool UAvoidanceManager::RegisterMovementComponent(struct UMovementComponent MovementComp, float AvoidanceWeight) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AvoidanceManager.RegisterMovementComponent");

	struct RegisterMovementComponent_Params {
		struct UMovementComponent MovementComp;
		float AvoidanceWeight;
		bool ReturnValue;

	}; RegisterMovementComponent_Params Params;

	Params.MovementComp = MovementComp;
	Params.AvoidanceWeight = AvoidanceWeight;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AvoidanceManager.GetObjectCount
inline int32_t UAvoidanceManager::GetObjectCount() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AvoidanceManager.GetObjectCount");

	struct GetObjectCount_Params {
		
		int32_t ReturnValue;

	}; GetObjectCount_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AvoidanceManager.GetNewAvoidanceUID
inline int32_t UAvoidanceManager::GetNewAvoidanceUID() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AvoidanceManager.GetNewAvoidanceUID");

	struct GetNewAvoidanceUID_Params {
		
		int32_t ReturnValue;

	}; GetNewAvoidanceUID_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AvoidanceManager.GetAvoidanceVelocityForComponent
inline struct FVector UAvoidanceManager::GetAvoidanceVelocityForComponent(struct UMovementComponent MovementComp) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AvoidanceManager.GetAvoidanceVelocityForComponent");

	struct GetAvoidanceVelocityForComponent_Params {
		struct UMovementComponent MovementComp;
		struct FVector ReturnValue;

	}; GetAvoidanceVelocityForComponent_Params Params;

	Params.MovementComp = MovementComp;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.BillboardComponent.SetUV
inline void UBillboardComponent::SetUV(int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BillboardComponent.SetUV");

	struct SetUV_Params {
		int32_t NewU;
		int32_t NewUL;
		int32_t NewV;
		int32_t NewVL;
	}; SetUV_Params Params;

	Params.NewU = NewU;
	Params.NewUL = NewUL;
	Params.NewV = NewV;
	Params.NewVL = NewVL;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.BillboardComponent.SetSpriteAndUV
inline void UBillboardComponent::SetSpriteAndUV(struct UTexture2D NewSprite, int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BillboardComponent.SetSpriteAndUV");

	struct SetSpriteAndUV_Params {
		struct UTexture2D NewSprite;
		int32_t NewU;
		int32_t NewUL;
		int32_t NewV;
		int32_t NewVL;
	}; SetSpriteAndUV_Params Params;

	Params.NewSprite = NewSprite;
	Params.NewU = NewU;
	Params.NewUL = NewUL;
	Params.NewV = NewV;
	Params.NewVL = NewVL;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.BillboardComponent.SetSprite
inline void UBillboardComponent::SetSprite(struct UTexture2D NewSprite) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BillboardComponent.SetSprite");

	struct SetSprite_Params {
		struct UTexture2D NewSprite;
	}; SetSprite_Params Params;

	Params.NewSprite = NewSprite;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraAnimInst.Stop
inline void UCameraAnimInst::Stop(bool bImmediate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraAnimInst.Stop");

	struct Stop_Params {
		bool bImmediate;
	}; Stop_Params Params;

	Params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraAnimInst.SetScale
inline void UCameraAnimInst::SetScale(float NewDuration) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraAnimInst.SetScale");

	struct SetScale_Params {
		float NewDuration;
	}; SetScale_Params Params;

	Params.NewDuration = NewDuration;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraAnimInst.SetDuration
inline void UCameraAnimInst::SetDuration(float NewDuration) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraAnimInst.SetDuration");

	struct SetDuration_Params {
		float NewDuration;
	}; SetDuration_Params Params;

	Params.NewDuration = NewDuration;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraModifier.IsDisabled
inline bool UCameraModifier::IsDisabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.IsDisabled");

	struct IsDisabled_Params {
		
		bool ReturnValue;

	}; IsDisabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CameraModifier.GetViewTarget
inline struct UActor UCameraModifier::GetViewTarget() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.GetViewTarget");

	struct GetViewTarget_Params {
		
		struct UActor ReturnValue;

	}; GetViewTarget_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CameraModifier.EnableModifier
inline void UCameraModifier::EnableModifier() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.EnableModifier");

	struct EnableModifier_Params {
		
	}; EnableModifier_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraModifier.DisableModifier
inline void UCameraModifier::DisableModifier(bool bImmediate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.DisableModifier");

	struct DisableModifier_Params {
		bool bImmediate;
	}; DisableModifier_Params Params;

	Params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraModifier.BlueprintModifyPostProcess
inline void UCameraModifier::BlueprintModifyPostProcess(float DeltaTime, float& PostProcessBlendWeight, struct FPostProcessSettings& PostProcessSettings) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.BlueprintModifyPostProcess");

	struct BlueprintModifyPostProcess_Params {
		float DeltaTime;
		float& PostProcessBlendWeight;
		struct FPostProcessSettings& PostProcessSettings;
	}; BlueprintModifyPostProcess_Params Params;

	Params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	PostProcessBlendWeight = Params.PostProcessBlendWeight;
	PostProcessSettings = Params.PostProcessSettings;

}

// Function Engine.CameraModifier.BlueprintModifyCamera
inline void UCameraModifier::BlueprintModifyCamera(float DeltaTime, struct FVector ViewLocation, struct FRotator ViewRotation, float FOV, struct FVector& NewViewLocation, struct FRotator& NewViewRotation, float& NewFOV) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.BlueprintModifyCamera");

	struct BlueprintModifyCamera_Params {
		float DeltaTime;
		struct FVector ViewLocation;
		struct FRotator ViewRotation;
		float FOV;
		struct FVector& NewViewLocation;
		struct FRotator& NewViewRotation;
		float& NewFOV;
	}; BlueprintModifyCamera_Params Params;

	Params.DeltaTime = DeltaTime;
	Params.ViewLocation = ViewLocation;
	Params.ViewRotation = ViewRotation;
	Params.FOV = FOV;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewViewLocation = Params.NewViewLocation;
	NewViewRotation = Params.NewViewRotation;
	NewFOV = Params.NewFOV;

}

// Function Engine.CameraShakeSourceComponent.StopAllCameraShakes
inline void UCameraShakeSourceComponent::StopAllCameraShakes(bool bImmediately) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraShakeSourceComponent.StopAllCameraShakes");

	struct StopAllCameraShakes_Params {
		bool bImmediately;
	}; StopAllCameraShakes_Params Params;

	Params.bImmediately = bImmediately;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraShakeSourceComponent.PlayCameraShake
inline void UCameraShakeSourceComponent::PlayCameraShake(struct UClass* InCameraShake) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraShakeSourceComponent.PlayCameraShake");

	struct PlayCameraShake_Params {
		struct UClass* InCameraShake;
	}; PlayCameraShake_Params Params;

	Params.InCameraShake = InCameraShake;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraShakeSourceComponent.Play
inline void UCameraShakeSourceComponent::Play() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraShakeSourceComponent.Play");

	struct Play_Params {
		
	}; Play_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraShakeSourceComponent.GetAttenuationFactor
inline float UCameraShakeSourceComponent::GetAttenuationFactor(struct FVector& Location) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraShakeSourceComponent.GetAttenuationFactor");

	struct GetAttenuationFactor_Params {
		struct FVector& Location;
		float ReturnValue;

	}; GetAttenuationFactor_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Location = Params.Location;


	return params.ReturnValue;
}

// Function Engine.Canvas.K2_TextSize
inline struct FVector2D UCanvas::K2_TextSize(struct UFont RenderFont, struct FString RenderText, struct FVector2D Scale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_TextSize");

	struct K2_TextSize_Params {
		struct UFont RenderFont;
		struct FString RenderText;
		struct FVector2D Scale;
		struct FVector2D ReturnValue;

	}; K2_TextSize_Params Params;

	Params.RenderFont = RenderFont;
	Params.RenderText = RenderText;
	Params.Scale = Scale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Canvas.K2_StrLen
inline struct FVector2D UCanvas::K2_StrLen(struct UFont RenderFont, struct FString RenderText) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_StrLen");

	struct K2_StrLen_Params {
		struct UFont RenderFont;
		struct FString RenderText;
		struct FVector2D ReturnValue;

	}; K2_StrLen_Params Params;

	Params.RenderFont = RenderFont;
	Params.RenderText = RenderText;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Canvas.K2_Project
inline struct FVector UCanvas::K2_Project(struct FVector WorldLocation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_Project");

	struct K2_Project_Params {
		struct FVector WorldLocation;
		struct FVector ReturnValue;

	}; K2_Project_Params Params;

	Params.WorldLocation = WorldLocation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Canvas.K2_DrawTriangle
inline void UCanvas::K2_DrawTriangle(struct UTexture RenderTexture, struct TArray<struct FCanvasUVTri> Triangles) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawTriangle");

	struct K2_DrawTriangle_Params {
		struct UTexture RenderTexture;
		struct TArray<struct FCanvasUVTri> Triangles;
	}; K2_DrawTriangle_Params Params;

	Params.RenderTexture = RenderTexture;
	Params.Triangles = Triangles;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Canvas.K2_DrawTexture
inline void UCanvas::K2_DrawTexture(struct UTexture RenderTexture, struct FVector2D ScreenPosition, struct FVector2D ScreenSize, struct FVector2D CoordinatePosition, struct FVector2D CoordinateSize, struct FLinearColor RenderColor, enum class EBlendMode BlendMode, float Rotation, struct FVector2D PivotPoint) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawTexture");

	struct K2_DrawTexture_Params {
		struct UTexture RenderTexture;
		struct FVector2D ScreenPosition;
		struct FVector2D ScreenSize;
		struct FVector2D CoordinatePosition;
		struct FVector2D CoordinateSize;
		struct FLinearColor RenderColor;
		enum class EBlendMode BlendMode;
		float Rotation;
		struct FVector2D PivotPoint;
	}; K2_DrawTexture_Params Params;

	Params.RenderTexture = RenderTexture;
	Params.ScreenPosition = ScreenPosition;
	Params.ScreenSize = ScreenSize;
	Params.CoordinatePosition = CoordinatePosition;
	Params.CoordinateSize = CoordinateSize;
	Params.RenderColor = RenderColor;
	Params.BlendMode = BlendMode;
	Params.Rotation = Rotation;
	Params.PivotPoint = PivotPoint;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Canvas.K2_DrawText
inline void UCanvas::K2_DrawText(struct UFont RenderFont, struct FString RenderText, struct FVector2D ScreenPosition, struct FVector2D Scale, struct FLinearColor RenderColor, float Kerning, struct FLinearColor ShadowColor, struct FVector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, struct FLinearColor OutlineColor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawText");

	struct K2_DrawText_Params {
		struct UFont RenderFont;
		struct FString RenderText;
		struct FVector2D ScreenPosition;
		struct FVector2D Scale;
		struct FLinearColor RenderColor;
		float Kerning;
		struct FLinearColor ShadowColor;
		struct FVector2D ShadowOffset;
		bool bCentreX;
		bool bCentreY;
		bool bOutlined;
		struct FLinearColor OutlineColor;
	}; K2_DrawText_Params Params;

	Params.RenderFont = RenderFont;
	Params.RenderText = RenderText;
	Params.ScreenPosition = ScreenPosition;
	Params.Scale = Scale;
	Params.RenderColor = RenderColor;
	Params.Kerning = Kerning;
	Params.ShadowColor = ShadowColor;
	Params.ShadowOffset = ShadowOffset;
	Params.bCentreX = bCentreX;
	Params.bCentreY = bCentreY;
	Params.bOutlined = bOutlined;
	Params.OutlineColor = OutlineColor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Canvas.K2_DrawPolygon
inline void UCanvas::K2_DrawPolygon(struct UTexture RenderTexture, struct FVector2D ScreenPosition, struct FVector2D Radius, int32_t NumberOfSides, struct FLinearColor RenderColor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawPolygon");

	struct K2_DrawPolygon_Params {
		struct UTexture RenderTexture;
		struct FVector2D ScreenPosition;
		struct FVector2D Radius;
		int32_t NumberOfSides;
		struct FLinearColor RenderColor;
	}; K2_DrawPolygon_Params Params;

	Params.RenderTexture = RenderTexture;
	Params.ScreenPosition = ScreenPosition;
	Params.Radius = Radius;
	Params.NumberOfSides = NumberOfSides;
	Params.RenderColor = RenderColor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Canvas.K2_DrawMaterialTriangle
inline void UCanvas::K2_DrawMaterialTriangle(struct UMaterialInterface RenderMaterial, struct TArray<struct FCanvasUVTri> Triangles) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawMaterialTriangle");

	struct K2_DrawMaterialTriangle_Params {
		struct UMaterialInterface RenderMaterial;
		struct TArray<struct FCanvasUVTri> Triangles;
	}; K2_DrawMaterialTriangle_Params Params;

	Params.RenderMaterial = RenderMaterial;
	Params.Triangles = Triangles;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Canvas.K2_DrawMaterial
inline void UCanvas::K2_DrawMaterial(struct UMaterialInterface RenderMaterial, struct FVector2D ScreenPosition, struct FVector2D ScreenSize, struct FVector2D CoordinatePosition, struct FVector2D CoordinateSize, float Rotation, struct FVector2D PivotPoint) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawMaterial");

	struct K2_DrawMaterial_Params {
		struct UMaterialInterface RenderMaterial;
		struct FVector2D ScreenPosition;
		struct FVector2D ScreenSize;
		struct FVector2D CoordinatePosition;
		struct FVector2D CoordinateSize;
		float Rotation;
		struct FVector2D PivotPoint;
	}; K2_DrawMaterial_Params Params;

	Params.RenderMaterial = RenderMaterial;
	Params.ScreenPosition = ScreenPosition;
	Params.ScreenSize = ScreenSize;
	Params.CoordinatePosition = CoordinatePosition;
	Params.CoordinateSize = CoordinateSize;
	Params.Rotation = Rotation;
	Params.PivotPoint = PivotPoint;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Canvas.K2_DrawLine
inline void UCanvas::K2_DrawLine(struct FVector2D ScreenPositionA, struct FVector2D ScreenPositionB, float Thickness, struct FLinearColor RenderColor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawLine");

	struct K2_DrawLine_Params {
		struct FVector2D ScreenPositionA;
		struct FVector2D ScreenPositionB;
		float Thickness;
		struct FLinearColor RenderColor;
	}; K2_DrawLine_Params Params;

	Params.ScreenPositionA = ScreenPositionA;
	Params.ScreenPositionB = ScreenPositionB;
	Params.Thickness = Thickness;
	Params.RenderColor = RenderColor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Canvas.K2_DrawBox
inline void UCanvas::K2_DrawBox(struct FVector2D ScreenPosition, struct FVector2D ScreenSize, float Thickness, struct FLinearColor RenderColor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawBox");

	struct K2_DrawBox_Params {
		struct FVector2D ScreenPosition;
		struct FVector2D ScreenSize;
		float Thickness;
		struct FLinearColor RenderColor;
	}; K2_DrawBox_Params Params;

	Params.ScreenPosition = ScreenPosition;
	Params.ScreenSize = ScreenSize;
	Params.Thickness = Thickness;
	Params.RenderColor = RenderColor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Canvas.K2_DrawBorder
inline void UCanvas::K2_DrawBorder(struct UTexture BorderTexture, struct UTexture BackgroundTexture, struct UTexture LeftBorderTexture, struct UTexture RightBorderTexture, struct UTexture TopBorderTexture, struct UTexture BottomBorderTexture, struct FVector2D ScreenPosition, struct FVector2D ScreenSize, struct FVector2D CoordinatePosition, struct FVector2D CoordinateSize, struct FLinearColor RenderColor, struct FVector2D BorderScale, struct FVector2D BackgroundScale, float Rotation, struct FVector2D PivotPoint, struct FVector2D CornerSize) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawBorder");

	struct K2_DrawBorder_Params {
		struct UTexture BorderTexture;
		struct UTexture BackgroundTexture;
		struct UTexture LeftBorderTexture;
		struct UTexture RightBorderTexture;
		struct UTexture TopBorderTexture;
		struct UTexture BottomBorderTexture;
		struct FVector2D ScreenPosition;
		struct FVector2D ScreenSize;
		struct FVector2D CoordinatePosition;
		struct FVector2D CoordinateSize;
		struct FLinearColor RenderColor;
		struct FVector2D BorderScale;
		struct FVector2D BackgroundScale;
		float Rotation;
		struct FVector2D PivotPoint;
		struct FVector2D CornerSize;
	}; K2_DrawBorder_Params Params;

	Params.BorderTexture = BorderTexture;
	Params.BackgroundTexture = BackgroundTexture;
	Params.LeftBorderTexture = LeftBorderTexture;
	Params.RightBorderTexture = RightBorderTexture;
	Params.TopBorderTexture = TopBorderTexture;
	Params.BottomBorderTexture = BottomBorderTexture;
	Params.ScreenPosition = ScreenPosition;
	Params.ScreenSize = ScreenSize;
	Params.CoordinatePosition = CoordinatePosition;
	Params.CoordinateSize = CoordinateSize;
	Params.RenderColor = RenderColor;
	Params.BorderScale = BorderScale;
	Params.BackgroundScale = BackgroundScale;
	Params.Rotation = Rotation;
	Params.PivotPoint = PivotPoint;
	Params.CornerSize = CornerSize;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Canvas.K2_Deproject
inline void UCanvas::K2_Deproject(struct FVector2D ScreenPosition, struct FVector& WorldOrigin, struct FVector& WorldDirection) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_Deproject");

	struct K2_Deproject_Params {
		struct FVector2D ScreenPosition;
		struct FVector& WorldOrigin;
		struct FVector& WorldDirection;
	}; K2_Deproject_Params Params;

	Params.ScreenPosition = ScreenPosition;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	WorldOrigin = Params.WorldOrigin;
	WorldDirection = Params.WorldDirection;

}

// Function Engine.CanvasRenderTarget2D.UpdateResource
inline void UCanvasRenderTarget2D::UpdateResource() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CanvasRenderTarget2D.UpdateResource");

	struct UpdateResource_Params {
		
	}; UpdateResource_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CanvasRenderTarget2D.ReceiveUpdate
inline void UCanvasRenderTarget2D::ReceiveUpdate(struct UCanvas Canvas, int32_t Width, int32_t Height) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CanvasRenderTarget2D.ReceiveUpdate");

	struct ReceiveUpdate_Params {
		struct UCanvas Canvas;
		int32_t Width;
		int32_t Height;
	}; ReceiveUpdate_Params Params;

	Params.Canvas = Canvas;
	Params.Width = Width;
	Params.Height = Height;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CanvasRenderTarget2D.GetSize
inline void UCanvasRenderTarget2D::GetSize(int32_t& Width, int32_t& Height) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CanvasRenderTarget2D.GetSize");

	struct GetSize_Params {
		int32_t& Width;
		int32_t& Height;
	}; GetSize_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Width = Params.Width;
	Height = Params.Height;

}

// Function Engine.CanvasRenderTarget2D.CreateCanvasRenderTarget2D
inline struct UCanvasRenderTarget2D UCanvasRenderTarget2D::CreateCanvasRenderTarget2D(struct Object WorldContextObject, struct UClass* CanvasRenderTarget2DClass, int32_t Width, int32_t Height) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CanvasRenderTarget2D.CreateCanvasRenderTarget2D");

	struct CreateCanvasRenderTarget2D_Params {
		struct Object WorldContextObject;
		struct UClass* CanvasRenderTarget2DClass;
		int32_t Width;
		int32_t Height;
		struct UCanvasRenderTarget2D ReturnValue;

	}; CreateCanvasRenderTarget2D_Params Params;

	Params.WorldContextObject = WorldContextObject;
	Params.CanvasRenderTarget2DClass = CanvasRenderTarget2DClass;
	Params.Width = Width;
	Params.Height = Height;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CapsuleComponent.SetCapsuleSize
inline void UCapsuleComponent::SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.SetCapsuleSize");

	struct SetCapsuleSize_Params {
		float InRadius;
		float InHalfHeight;
		bool bUpdateOverlaps;
	}; SetCapsuleSize_Params Params;

	Params.InRadius = InRadius;
	Params.InHalfHeight = InHalfHeight;
	Params.bUpdateOverlaps = bUpdateOverlaps;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CapsuleComponent.SetCapsuleRadius
inline void UCapsuleComponent::SetCapsuleRadius(float Radius, bool bUpdateOverlaps) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.SetCapsuleRadius");

	struct SetCapsuleRadius_Params {
		float Radius;
		bool bUpdateOverlaps;
	}; SetCapsuleRadius_Params Params;

	Params.Radius = Radius;
	Params.bUpdateOverlaps = bUpdateOverlaps;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CapsuleComponent.SetCapsuleHalfHeight
inline void UCapsuleComponent::SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.SetCapsuleHalfHeight");

	struct SetCapsuleHalfHeight_Params {
		float HalfHeight;
		bool bUpdateOverlaps;
	}; SetCapsuleHalfHeight_Params Params;

	Params.HalfHeight = HalfHeight;
	Params.bUpdateOverlaps = bUpdateOverlaps;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CapsuleComponent.GetUnscaledCapsuleSize_WithoutHemisphere
inline void UCapsuleComponent::GetUnscaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetUnscaledCapsuleSize_WithoutHemisphere");

	struct GetUnscaledCapsuleSize_WithoutHemisphere_Params {
		float& OutRadius;
		float& OutHalfHeightWithoutHemisphere;
	}; GetUnscaledCapsuleSize_WithoutHemisphere_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutRadius = Params.OutRadius;
	OutHalfHeightWithoutHemisphere = Params.OutHalfHeightWithoutHemisphere;

}

// Function Engine.CapsuleComponent.GetUnscaledCapsuleSize
inline void UCapsuleComponent::GetUnscaledCapsuleSize(float& OutRadius, float& OutHalfHeight) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetUnscaledCapsuleSize");

	struct GetUnscaledCapsuleSize_Params {
		float& OutRadius;
		float& OutHalfHeight;
	}; GetUnscaledCapsuleSize_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutRadius = Params.OutRadius;
	OutHalfHeight = Params.OutHalfHeight;

}

// Function Engine.CapsuleComponent.GetUnscaledCapsuleRadius
inline float UCapsuleComponent::GetUnscaledCapsuleRadius() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetUnscaledCapsuleRadius");

	struct GetUnscaledCapsuleRadius_Params {
		
		float ReturnValue;

	}; GetUnscaledCapsuleRadius_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight_WithoutHemisphere
inline float UCapsuleComponent::GetUnscaledCapsuleHalfHeight_WithoutHemisphere() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight_WithoutHemisphere");

	struct GetUnscaledCapsuleHalfHeight_WithoutHemisphere_Params {
		
		float ReturnValue;

	}; GetUnscaledCapsuleHalfHeight_WithoutHemisphere_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight
inline float UCapsuleComponent::GetUnscaledCapsuleHalfHeight() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight");

	struct GetUnscaledCapsuleHalfHeight_Params {
		
		float ReturnValue;

	}; GetUnscaledCapsuleHalfHeight_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CapsuleComponent.GetShapeScale
inline float UCapsuleComponent::GetShapeScale() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetShapeScale");

	struct GetShapeScale_Params {
		
		float ReturnValue;

	}; GetShapeScale_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CapsuleComponent.GetScaledCapsuleSize_WithoutHemisphere
inline void UCapsuleComponent::GetScaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetScaledCapsuleSize_WithoutHemisphere");

	struct GetScaledCapsuleSize_WithoutHemisphere_Params {
		float& OutRadius;
		float& OutHalfHeightWithoutHemisphere;
	}; GetScaledCapsuleSize_WithoutHemisphere_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutRadius = Params.OutRadius;
	OutHalfHeightWithoutHemisphere = Params.OutHalfHeightWithoutHemisphere;

}

// Function Engine.CapsuleComponent.GetScaledCapsuleSize
inline void UCapsuleComponent::GetScaledCapsuleSize(float& OutRadius, float& OutHalfHeight) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetScaledCapsuleSize");

	struct GetScaledCapsuleSize_Params {
		float& OutRadius;
		float& OutHalfHeight;
	}; GetScaledCapsuleSize_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutRadius = Params.OutRadius;
	OutHalfHeight = Params.OutHalfHeight;

}

// Function Engine.CapsuleComponent.GetScaledCapsuleRadius
inline float UCapsuleComponent::GetScaledCapsuleRadius() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetScaledCapsuleRadius");

	struct GetScaledCapsuleRadius_Params {
		
		float ReturnValue;

	}; GetScaledCapsuleRadius_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight_WithoutHemisphere
inline float UCapsuleComponent::GetScaledCapsuleHalfHeight_WithoutHemisphere() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight_WithoutHemisphere");

	struct GetScaledCapsuleHalfHeight_WithoutHemisphere_Params {
		
		float ReturnValue;

	}; GetScaledCapsuleHalfHeight_WithoutHemisphere_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight
inline float UCapsuleComponent::GetScaledCapsuleHalfHeight() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight");

	struct GetScaledCapsuleHalfHeight_Params {
		
		float ReturnValue;

	}; GetScaledCapsuleHalfHeight_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CurveFloat.GetFloatValue
inline float UCurveFloat::GetFloatValue(float InTime) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CurveFloat.GetFloatValue");

	struct GetFloatValue_Params {
		float InTime;
		float ReturnValue;

	}; GetFloatValue_Params Params;

	Params.InTime = InTime;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CurveLinearColor.GetLinearColorValue
inline struct FLinearColor UCurveLinearColor::GetLinearColorValue(float InTime) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CurveLinearColor.GetLinearColorValue");

	struct GetLinearColorValue_Params {
		float InTime;
		struct FLinearColor ReturnValue;

	}; GetLinearColorValue_Params Params;

	Params.InTime = InTime;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CurveLinearColor.GetClampedLinearColorValue
inline struct FLinearColor UCurveLinearColor::GetClampedLinearColorValue(float InTime) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CurveLinearColor.GetClampedLinearColorValue");

	struct GetClampedLinearColorValue_Params {
		float InTime;
		struct FLinearColor ReturnValue;

	}; GetClampedLinearColorValue_Params Params;

	Params.InTime = InTime;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Texture2D.Blueprint_GetSizeY
inline int32_t UTexture2D::Blueprint_GetSizeY() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Texture2D.Blueprint_GetSizeY");

	struct Blueprint_GetSizeY_Params {
		
		int32_t ReturnValue;

	}; Blueprint_GetSizeY_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Texture2D.Blueprint_GetSizeX
inline int32_t UTexture2D::Blueprint_GetSizeX() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Texture2D.Blueprint_GetSizeX");

	struct Blueprint_GetSizeX_Params {
		
		int32_t ReturnValue;

	}; Blueprint_GetSizeX_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CurveLinearColorAtlas.GetCurvePosition
inline bool UCurveLinearColorAtlas::GetCurvePosition(struct UCurveLinearColor InCurve, float& Position) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CurveLinearColorAtlas.GetCurvePosition");

	struct GetCurvePosition_Params {
		struct UCurveLinearColor InCurve;
		float& Position;
		bool ReturnValue;

	}; GetCurvePosition_Params Params;

	Params.InCurve = InCurve;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Position = Params.Position;


	return params.ReturnValue;
}

// Function Engine.CurveVector.GetVectorValue
inline struct FVector UCurveVector::GetVectorValue(float InTime) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CurveVector.GetVectorValue");

	struct GetVectorValue_Params {
		float InTime;
		struct FVector ReturnValue;

	}; GetVectorValue_Params Params;

	Params.InTime = InTime;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.DebugCameraController.ToggleDisplay
inline void ADebugCameraController::ToggleDisplay() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.ToggleDisplay");

	struct ToggleDisplay_Params {
		
	}; ToggleDisplay_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DebugCameraController.ShowDebugSelectedInfo
inline void ADebugCameraController::ShowDebugSelectedInfo() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.ShowDebugSelectedInfo");

	struct ShowDebugSelectedInfo_Params {
		
	}; ShowDebugSelectedInfo_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DebugCameraController.SetPawnMovementSpeedScale
inline void ADebugCameraController::SetPawnMovementSpeedScale(float NewSpeedScale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.SetPawnMovementSpeedScale");

	struct SetPawnMovementSpeedScale_Params {
		float NewSpeedScale;
	}; SetPawnMovementSpeedScale_Params Params;

	Params.NewSpeedScale = NewSpeedScale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DebugCameraController.ReceiveOnDeactivate
inline void ADebugCameraController::ReceiveOnDeactivate(struct APlayerController RestoredPC) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.ReceiveOnDeactivate");

	struct ReceiveOnDeactivate_Params {
		struct APlayerController RestoredPC;
	}; ReceiveOnDeactivate_Params Params;

	Params.RestoredPC = RestoredPC;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DebugCameraController.ReceiveOnActorSelected
inline void ADebugCameraController::ReceiveOnActorSelected(struct UActor NewSelectedActor, struct FVector& SelectHitLocation, struct FVector& SelectHitNormal, struct FHitResult& Hit) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.ReceiveOnActorSelected");

	struct ReceiveOnActorSelected_Params {
		struct UActor NewSelectedActor;
		struct FVector& SelectHitLocation;
		struct FVector& SelectHitNormal;
		struct FHitResult& Hit;
	}; ReceiveOnActorSelected_Params Params;

	Params.NewSelectedActor = NewSelectedActor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SelectHitLocation = Params.SelectHitLocation;
	SelectHitNormal = Params.SelectHitNormal;
	Hit = Params.Hit;

}

// Function Engine.DebugCameraController.ReceiveOnActivate
inline void ADebugCameraController::ReceiveOnActivate(struct APlayerController OriginalPC) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.ReceiveOnActivate");

	struct ReceiveOnActivate_Params {
		struct APlayerController OriginalPC;
	}; ReceiveOnActivate_Params Params;

	Params.OriginalPC = OriginalPC;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DebugCameraController.GetSelectedActor
inline struct UActor ADebugCameraController::GetSelectedActor() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.GetSelectedActor");

	struct GetSelectedActor_Params {
		
		struct UActor ReturnValue;

	}; GetSelectedActor_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.HUD.ShowHUD
inline void AHUD::ShowHUD() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowHUD");

	struct ShowHUD_Params {
		
	}; ShowHUD_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.ShowDebugToggleSubCategory
inline void AHUD::ShowDebugToggleSubCategory(struct FName Category) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowDebugToggleSubCategory");

	struct ShowDebugToggleSubCategory_Params {
		struct FName Category;
	}; ShowDebugToggleSubCategory_Params Params;

	Params.Category = Category;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.ShowDebugForReticleTargetToggle
inline void AHUD::ShowDebugForReticleTargetToggle(struct UClass* DesiredClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowDebugForReticleTargetToggle");

	struct ShowDebugForReticleTargetToggle_Params {
		struct UClass* DesiredClass;
	}; ShowDebugForReticleTargetToggle_Params Params;

	Params.DesiredClass = DesiredClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.ShowDebug
inline void AHUD::ShowDebug(struct FName DebugType) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowDebug");

	struct ShowDebug_Params {
		struct FName DebugType;
	}; ShowDebug_Params Params;

	Params.DebugType = DebugType;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.RemoveDebugText
inline void AHUD::RemoveDebugText(struct UActor SrcActor, bool bLeaveDurationText) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.RemoveDebugText");

	struct RemoveDebugText_Params {
		struct UActor SrcActor;
		bool bLeaveDurationText;
	}; RemoveDebugText_Params Params;

	Params.SrcActor = SrcActor;
	Params.bLeaveDurationText = bLeaveDurationText;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.RemoveAllDebugStrings
inline void AHUD::RemoveAllDebugStrings() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.RemoveAllDebugStrings");

	struct RemoveAllDebugStrings_Params {
		
	}; RemoveAllDebugStrings_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.ReceiveHitBoxRelease
inline void AHUD::ReceiveHitBoxRelease(struct FName BoxName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ReceiveHitBoxRelease");

	struct ReceiveHitBoxRelease_Params {
		struct FName BoxName;
	}; ReceiveHitBoxRelease_Params Params;

	Params.BoxName = BoxName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.ReceiveHitBoxEndCursorOver
inline void AHUD::ReceiveHitBoxEndCursorOver(struct FName BoxName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ReceiveHitBoxEndCursorOver");

	struct ReceiveHitBoxEndCursorOver_Params {
		struct FName BoxName;
	}; ReceiveHitBoxEndCursorOver_Params Params;

	Params.BoxName = BoxName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.ReceiveHitBoxClick
inline void AHUD::ReceiveHitBoxClick(struct FName BoxName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ReceiveHitBoxClick");

	struct ReceiveHitBoxClick_Params {
		struct FName BoxName;
	}; ReceiveHitBoxClick_Params Params;

	Params.BoxName = BoxName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.ReceiveHitBoxBeginCursorOver
inline void AHUD::ReceiveHitBoxBeginCursorOver(struct FName BoxName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ReceiveHitBoxBeginCursorOver");

	struct ReceiveHitBoxBeginCursorOver_Params {
		struct FName BoxName;
	}; ReceiveHitBoxBeginCursorOver_Params Params;

	Params.BoxName = BoxName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.ReceiveDrawHUD
inline void AHUD::ReceiveDrawHUD(int32_t SizeX, int32_t SizeY) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ReceiveDrawHUD");

	struct ReceiveDrawHUD_Params {
		int32_t SizeX;
		int32_t SizeY;
	}; ReceiveDrawHUD_Params Params;

	Params.SizeX = SizeX;
	Params.SizeY = SizeY;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.Project
inline struct FVector AHUD::Project(struct FVector Location) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.Project");

	struct Project_Params {
		struct FVector Location;
		struct FVector ReturnValue;

	}; Project_Params Params;

	Params.Location = Location;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.HUD.PreviousDebugTarget
inline void AHUD::PreviousDebugTarget() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.PreviousDebugTarget");

	struct PreviousDebugTarget_Params {
		
	}; PreviousDebugTarget_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.NextDebugTarget
inline void AHUD::NextDebugTarget() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.NextDebugTarget");

	struct NextDebugTarget_Params {
		
	}; NextDebugTarget_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.GetTextSize
inline void AHUD::GetTextSize(struct FString Text, float& OutWidth, float& OutHeight, struct UFont Font, float Scale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.GetTextSize");

	struct GetTextSize_Params {
		struct FString Text;
		float& OutWidth;
		float& OutHeight;
		struct UFont Font;
		float Scale;
	}; GetTextSize_Params Params;

	Params.Text = Text;
	Params.Font = Font;
	Params.Scale = Scale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutWidth = Params.OutWidth;
	OutHeight = Params.OutHeight;

}

// Function Engine.HUD.GetOwningPlayerController
inline struct APlayerController AHUD::GetOwningPlayerController() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.GetOwningPlayerController");

	struct GetOwningPlayerController_Params {
		
		struct APlayerController ReturnValue;

	}; GetOwningPlayerController_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.HUD.GetOwningPawn
inline struct APawn AHUD::GetOwningPawn() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.GetOwningPawn");

	struct GetOwningPawn_Params {
		
		struct APawn ReturnValue;

	}; GetOwningPawn_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.HUD.GetActorsInSelectionRectangle
inline void AHUD::GetActorsInSelectionRectangle(struct UClass* ClassFilter, struct FVector2D& FirstPoint, struct FVector2D& SecondPoint, struct TArray<struct UActor>& OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.GetActorsInSelectionRectangle");

	struct GetActorsInSelectionRectangle_Params {
		struct UClass* ClassFilter;
		struct FVector2D& FirstPoint;
		struct FVector2D& SecondPoint;
		struct TArray<struct UActor>& OutActors;
		bool bIncludeNonCollidingComponents;
		bool bActorMustBeFullyEnclosed;
	}; GetActorsInSelectionRectangle_Params Params;

	Params.ClassFilter = ClassFilter;
	Params.bIncludeNonCollidingComponents = bIncludeNonCollidingComponents;
	Params.bActorMustBeFullyEnclosed = bActorMustBeFullyEnclosed;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	FirstPoint = Params.FirstPoint;
	SecondPoint = Params.SecondPoint;
	OutActors = Params.OutActors;

}

// Function Engine.HUD.DrawTextureSimple
inline void AHUD::DrawTextureSimple(struct UTexture Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawTextureSimple");

	struct DrawTextureSimple_Params {
		struct UTexture Texture;
		float ScreenX;
		float ScreenY;
		float Scale;
		bool bScalePosition;
	}; DrawTextureSimple_Params Params;

	Params.Texture = Texture;
	Params.ScreenX = ScreenX;
	Params.ScreenY = ScreenY;
	Params.Scale = Scale;
	Params.bScalePosition = bScalePosition;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.DrawTexture
inline void AHUD::DrawTexture(struct UTexture Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, struct FLinearColor TintColor, enum class EBlendMode BlendMode, float Scale, bool bScalePosition, float Rotation, struct FVector2D RotPivot) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawTexture");

	struct DrawTexture_Params {
		struct UTexture Texture;
		float ScreenX;
		float ScreenY;
		float ScreenW;
		float ScreenH;
		float TextureU;
		float TextureV;
		float TextureUWidth;
		float TextureVHeight;
		struct FLinearColor TintColor;
		enum class EBlendMode BlendMode;
		float Scale;
		bool bScalePosition;
		float Rotation;
		struct FVector2D RotPivot;
	}; DrawTexture_Params Params;

	Params.Texture = Texture;
	Params.ScreenX = ScreenX;
	Params.ScreenY = ScreenY;
	Params.ScreenW = ScreenW;
	Params.ScreenH = ScreenH;
	Params.TextureU = TextureU;
	Params.TextureV = TextureV;
	Params.TextureUWidth = TextureUWidth;
	Params.TextureVHeight = TextureVHeight;
	Params.TintColor = TintColor;
	Params.BlendMode = BlendMode;
	Params.Scale = Scale;
	Params.bScalePosition = bScalePosition;
	Params.Rotation = Rotation;
	Params.RotPivot = RotPivot;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.DrawText
inline void AHUD::DrawText(struct FString Text, struct FLinearColor TextColor, float ScreenX, float ScreenY, struct UFont Font, float Scale, bool bScalePosition) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawText");

	struct DrawText_Params {
		struct FString Text;
		struct FLinearColor TextColor;
		float ScreenX;
		float ScreenY;
		struct UFont Font;
		float Scale;
		bool bScalePosition;
	}; DrawText_Params Params;

	Params.Text = Text;
	Params.TextColor = TextColor;
	Params.ScreenX = ScreenX;
	Params.ScreenY = ScreenY;
	Params.Font = Font;
	Params.Scale = Scale;
	Params.bScalePosition = bScalePosition;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.DrawRect
inline void AHUD::DrawRect(struct FLinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawRect");

	struct DrawRect_Params {
		struct FLinearColor RectColor;
		float ScreenX;
		float ScreenY;
		float ScreenW;
		float ScreenH;
	}; DrawRect_Params Params;

	Params.RectColor = RectColor;
	Params.ScreenX = ScreenX;
	Params.ScreenY = ScreenY;
	Params.ScreenW = ScreenW;
	Params.ScreenH = ScreenH;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.DrawMaterialTriangle
inline void AHUD::DrawMaterialTriangle(struct UMaterialInterface Material, struct FVector2D V0_Pos, struct FVector2D V1_Pos, struct FVector2D V2_Pos, struct FVector2D V0_UV, struct FVector2D V1_UV, struct FVector2D V2_UV, struct FLinearColor V0_Color, struct FLinearColor V1_Color, struct FLinearColor V2_Color) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawMaterialTriangle");

	struct DrawMaterialTriangle_Params {
		struct UMaterialInterface Material;
		struct FVector2D V0_Pos;
		struct FVector2D V1_Pos;
		struct FVector2D V2_Pos;
		struct FVector2D V0_UV;
		struct FVector2D V1_UV;
		struct FVector2D V2_UV;
		struct FLinearColor V0_Color;
		struct FLinearColor V1_Color;
		struct FLinearColor V2_Color;
	}; DrawMaterialTriangle_Params Params;

	Params.Material = Material;
	Params.V0_Pos = V0_Pos;
	Params.V1_Pos = V1_Pos;
	Params.V2_Pos = V2_Pos;
	Params.V0_UV = V0_UV;
	Params.V1_UV = V1_UV;
	Params.V2_UV = V2_UV;
	Params.V0_Color = V0_Color;
	Params.V1_Color = V1_Color;
	Params.V2_Color = V2_Color;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.DrawMaterialSimple
inline void AHUD::DrawMaterialSimple(struct UMaterialInterface Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawMaterialSimple");

	struct DrawMaterialSimple_Params {
		struct UMaterialInterface Material;
		float ScreenX;
		float ScreenY;
		float ScreenW;
		float ScreenH;
		float Scale;
		bool bScalePosition;
	}; DrawMaterialSimple_Params Params;

	Params.Material = Material;
	Params.ScreenX = ScreenX;
	Params.ScreenY = ScreenY;
	Params.ScreenW = ScreenW;
	Params.ScreenH = ScreenH;
	Params.Scale = Scale;
	Params.bScalePosition = bScalePosition;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.DrawMaterial
inline void AHUD::DrawMaterial(struct UMaterialInterface Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, struct FVector2D RotPivot) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawMaterial");

	struct DrawMaterial_Params {
		struct UMaterialInterface Material;
		float ScreenX;
		float ScreenY;
		float ScreenW;
		float ScreenH;
		float MaterialU;
		float MaterialV;
		float MaterialUWidth;
		float MaterialVHeight;
		float Scale;
		bool bScalePosition;
		float Rotation;
		struct FVector2D RotPivot;
	}; DrawMaterial_Params Params;

	Params.Material = Material;
	Params.ScreenX = ScreenX;
	Params.ScreenY = ScreenY;
	Params.ScreenW = ScreenW;
	Params.ScreenH = ScreenH;
	Params.MaterialU = MaterialU;
	Params.MaterialV = MaterialV;
	Params.MaterialUWidth = MaterialUWidth;
	Params.MaterialVHeight = MaterialVHeight;
	Params.Scale = Scale;
	Params.bScalePosition = bScalePosition;
	Params.Rotation = Rotation;
	Params.RotPivot = RotPivot;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.DrawLine
inline void AHUD::DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, struct FLinearColor LineColor, float LineThickness) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawLine");

	struct DrawLine_Params {
		float StartScreenX;
		float StartScreenY;
		float EndScreenX;
		float EndScreenY;
		struct FLinearColor LineColor;
		float LineThickness;
	}; DrawLine_Params Params;

	Params.StartScreenX = StartScreenX;
	Params.StartScreenY = StartScreenY;
	Params.EndScreenX = EndScreenX;
	Params.EndScreenY = EndScreenY;
	Params.LineColor = LineColor;
	Params.LineThickness = LineThickness;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.Deproject
inline void AHUD::Deproject(float ScreenX, float ScreenY, struct FVector& WorldPosition, struct FVector& WorldDirection) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.Deproject");

	struct Deproject_Params {
		float ScreenX;
		float ScreenY;
		struct FVector& WorldPosition;
		struct FVector& WorldDirection;
	}; Deproject_Params Params;

	Params.ScreenX = ScreenX;
	Params.ScreenY = ScreenY;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	WorldPosition = Params.WorldPosition;
	WorldDirection = Params.WorldDirection;

}

// Function Engine.HUD.AddHitBox
inline void AHUD::AddHitBox(struct FVector2D Position, struct FVector2D Size, struct FName InName, bool bConsumesInput, int32_t Priority) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.AddHitBox");

	struct AddHitBox_Params {
		struct FVector2D Position;
		struct FVector2D Size;
		struct FName InName;
		bool bConsumesInput;
		int32_t Priority;
	}; AddHitBox_Params Params;

	Params.Position = Position;
	Params.Size = Size;
	Params.InName = InName;
	Params.bConsumesInput = bConsumesInput;
	Params.Priority = Priority;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.AddDebugText
inline void AHUD::AddDebugText(struct FString DebugText, struct UActor SrcActor, float Duration, struct FVector Offset, struct FVector DesiredOffset, struct FColor TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, struct UFont InFont, float FontScale, bool bDrawShadow) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.AddDebugText");

	struct AddDebugText_Params {
		struct FString DebugText;
		struct UActor SrcActor;
		float Duration;
		struct FVector Offset;
		struct FVector DesiredOffset;
		struct FColor TextColor;
		bool bSkipOverwriteCheck;
		bool bAbsoluteLocation;
		bool bKeepAttachedToActor;
		struct UFont InFont;
		float FontScale;
		bool bDrawShadow;
	}; AddDebugText_Params Params;

	Params.DebugText = DebugText;
	Params.SrcActor = SrcActor;
	Params.Duration = Duration;
	Params.Offset = Offset;
	Params.DesiredOffset = DesiredOffset;
	Params.TextColor = TextColor;
	Params.bSkipOverwriteCheck = bSkipOverwriteCheck;
	Params.bAbsoluteLocation = bAbsoluteLocation;
	Params.bKeepAttachedToActor = bKeepAttachedToActor;
	Params.InFont = InFont;
	Params.FontScale = FontScale;
	Params.bDrawShadow = bDrawShadow;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DecalActor.SetDecalMaterial
inline void ADecalActor::SetDecalMaterial(struct UMaterialInterface NewDecalMaterial) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalActor.SetDecalMaterial");

	struct SetDecalMaterial_Params {
		struct UMaterialInterface NewDecalMaterial;
	}; SetDecalMaterial_Params Params;

	Params.NewDecalMaterial = NewDecalMaterial;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DecalActor.GetDecalMaterial
inline struct UMaterialInterface ADecalActor::GetDecalMaterial() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalActor.GetDecalMaterial");

	struct GetDecalMaterial_Params {
		
		struct UMaterialInterface ReturnValue;

	}; GetDecalMaterial_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.DecalActor.CreateDynamicMaterialInstance
inline struct UMaterialInstanceDynamic ADecalActor::CreateDynamicMaterialInstance() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalActor.CreateDynamicMaterialInstance");

	struct CreateDynamicMaterialInstance_Params {
		
		struct UMaterialInstanceDynamic ReturnValue;

	}; CreateDynamicMaterialInstance_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.DecalComponent.SetSortOrder
inline void UDecalComponent::SetSortOrder(int32_t Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.SetSortOrder");

	struct SetSortOrder_Params {
		int32_t Value;
	}; SetSortOrder_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DecalComponent.SetFadeScreenSize
inline void UDecalComponent::SetFadeScreenSize(float NewFadeScreenSize) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.SetFadeScreenSize");

	struct SetFadeScreenSize_Params {
		float NewFadeScreenSize;
	}; SetFadeScreenSize_Params Params;

	Params.NewFadeScreenSize = NewFadeScreenSize;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DecalComponent.SetFadeOut
inline void UDecalComponent::SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.SetFadeOut");

	struct SetFadeOut_Params {
		float StartDelay;
		float Duration;
		bool DestroyOwnerAfterFade;
	}; SetFadeOut_Params Params;

	Params.StartDelay = StartDelay;
	Params.Duration = Duration;
	Params.DestroyOwnerAfterFade = DestroyOwnerAfterFade;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DecalComponent.SetFadeIn
inline void UDecalComponent::SetFadeIn(float StartDelay, float Duaration) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.SetFadeIn");

	struct SetFadeIn_Params {
		float StartDelay;
		float Duaration;
	}; SetFadeIn_Params Params;

	Params.StartDelay = StartDelay;
	Params.Duaration = Duaration;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DecalComponent.SetDecalMaterial
inline void UDecalComponent::SetDecalMaterial(struct UMaterialInterface NewDecalMaterial) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.SetDecalMaterial");

	struct SetDecalMaterial_Params {
		struct UMaterialInterface NewDecalMaterial;
	}; SetDecalMaterial_Params Params;

	Params.NewDecalMaterial = NewDecalMaterial;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DecalComponent.GetFadeStartDelay
inline float UDecalComponent::GetFadeStartDelay() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.GetFadeStartDelay");

	struct GetFadeStartDelay_Params {
		
		float ReturnValue;

	}; GetFadeStartDelay_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.DecalComponent.GetFadeInStartDelay
inline float UDecalComponent::GetFadeInStartDelay() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.GetFadeInStartDelay");

	struct GetFadeInStartDelay_Params {
		
		float ReturnValue;

	}; GetFadeInStartDelay_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.DecalComponent.GetFadeInDuration
inline float UDecalComponent::GetFadeInDuration() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.GetFadeInDuration");

	struct GetFadeInDuration_Params {
		
		float ReturnValue;

	}; GetFadeInDuration_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.DecalComponent.GetFadeDuration
inline float UDecalComponent::GetFadeDuration() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.GetFadeDuration");

	struct GetFadeDuration_Params {
		
		float ReturnValue;

	}; GetFadeDuration_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.DecalComponent.GetDecalMaterial
inline struct UMaterialInterface UDecalComponent::GetDecalMaterial() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.GetDecalMaterial");

	struct GetDecalMaterial_Params {
		
		struct UMaterialInterface ReturnValue;

	}; GetDecalMaterial_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.DecalComponent.CreateDynamicMaterialInstance
inline struct UMaterialInstanceDynamic UDecalComponent::CreateDynamicMaterialInstance() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.CreateDynamicMaterialInstance");

	struct CreateDynamicMaterialInstance_Params {
		
		struct UMaterialInstanceDynamic ReturnValue;

	}; CreateDynamicMaterialInstance_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.DefaultPawn.TurnAtRate
inline void ADefaultPawn::TurnAtRate(float Rate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DefaultPawn.TurnAtRate");

	struct TurnAtRate_Params {
		float Rate;
	}; TurnAtRate_Params Params;

	Params.Rate = Rate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DefaultPawn.MoveUp_World
inline void ADefaultPawn::MoveUp_World(float Val) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DefaultPawn.MoveUp_World");

	struct MoveUp_World_Params {
		float Val;
	}; MoveUp_World_Params Params;

	Params.Val = Val;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DefaultPawn.MoveRight
inline void ADefaultPawn::MoveRight(float Val) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DefaultPawn.MoveRight");

	struct MoveRight_Params {
		float Val;
	}; MoveRight_Params Params;

	Params.Val = Val;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DefaultPawn.MoveForward
inline void ADefaultPawn::MoveForward(float Val) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DefaultPawn.MoveForward");

	struct MoveForward_Params {
		float Val;
	}; MoveForward_Params Params;

	Params.Val = Val;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DefaultPawn.LookUpAtRate
inline void ADefaultPawn::LookUpAtRate(float Rate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DefaultPawn.LookUpAtRate");

	struct LookUpAtRate_Params {
		float Rate;
	}; LookUpAtRate_Params Params;

	Params.Rate = Rate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Light.ToggleEnabled
inline void ALight::ToggleEnabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.ToggleEnabled");

	struct ToggleEnabled_Params {
		
	}; ToggleEnabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Light.SetLightFunctionScale
inline void ALight::SetLightFunctionScale(struct FVector NewLightFunctionScale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.SetLightFunctionScale");

	struct SetLightFunctionScale_Params {
		struct FVector NewLightFunctionScale;
	}; SetLightFunctionScale_Params Params;

	Params.NewLightFunctionScale = NewLightFunctionScale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Light.SetLightFunctionMaterial
inline void ALight::SetLightFunctionMaterial(struct UMaterialInterface NewLightFunctionMaterial) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.SetLightFunctionMaterial");

	struct SetLightFunctionMaterial_Params {
		struct UMaterialInterface NewLightFunctionMaterial;
	}; SetLightFunctionMaterial_Params Params;

	Params.NewLightFunctionMaterial = NewLightFunctionMaterial;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Light.SetLightFunctionFadeDistance
inline void ALight::SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.SetLightFunctionFadeDistance");

	struct SetLightFunctionFadeDistance_Params {
		float NewLightFunctionFadeDistance;
	}; SetLightFunctionFadeDistance_Params Params;

	Params.NewLightFunctionFadeDistance = NewLightFunctionFadeDistance;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Light.SetLightColor
inline void ALight::SetLightColor(struct FLinearColor NewLightColor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.SetLightColor");

	struct SetLightColor_Params {
		struct FLinearColor NewLightColor;
	}; SetLightColor_Params Params;

	Params.NewLightColor = NewLightColor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Light.SetEnabled
inline void ALight::SetEnabled(bool bSetEnabled) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.SetEnabled");

	struct SetEnabled_Params {
		bool bSetEnabled;
	}; SetEnabled_Params Params;

	Params.bSetEnabled = bSetEnabled;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Light.SetCastShadows
inline void ALight::SetCastShadows(bool bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.SetCastShadows");

	struct SetCastShadows_Params {
		bool bNewValue;
	}; SetCastShadows_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Light.SetBrightness
inline void ALight::SetBrightness(float NewBrightness) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.SetBrightness");

	struct SetBrightness_Params {
		float NewBrightness;
	}; SetBrightness_Params Params;

	Params.NewBrightness = NewBrightness;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Light.SetAffectTranslucentLighting
inline void ALight::SetAffectTranslucentLighting(bool bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.SetAffectTranslucentLighting");

	struct SetAffectTranslucentLighting_Params {
		bool bNewValue;
	}; SetAffectTranslucentLighting_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Light.OnRep_bEnabled
inline void ALight::OnRep_bEnabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.OnRep_bEnabled");

	struct OnRep_bEnabled_Params {
		
	}; OnRep_bEnabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Light.IsEnabled
inline bool ALight::IsEnabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.IsEnabled");

	struct IsEnabled_Params {
		
		bool ReturnValue;

	}; IsEnabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Light.GetLightColor
inline struct FLinearColor ALight::GetLightColor() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.GetLightColor");

	struct GetLightColor_Params {
		
		struct FLinearColor ReturnValue;

	}; GetLightColor_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Light.GetBrightness
inline float ALight::GetBrightness() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.GetBrightness");

	struct GetBrightness_Params {
		
		float ReturnValue;

	}; GetBrightness_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.LightComponentBase.SetSamplesPerPixel
inline void ULightComponentBase::SetSamplesPerPixel(int32_t NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponentBase.SetSamplesPerPixel");

	struct SetSamplesPerPixel_Params {
		int32_t NewValue;
	}; SetSamplesPerPixel_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponentBase.SetCastVolumetricShadow
inline void ULightComponentBase::SetCastVolumetricShadow(bool bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponentBase.SetCastVolumetricShadow");

	struct SetCastVolumetricShadow_Params {
		bool bNewValue;
	}; SetCastVolumetricShadow_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponentBase.SetCastShadows
inline void ULightComponentBase::SetCastShadows(bool bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponentBase.SetCastShadows");

	struct SetCastShadows_Params {
		bool bNewValue;
	}; SetCastShadows_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponentBase.SetCastRaytracedShadow
inline void ULightComponentBase::SetCastRaytracedShadow(bool bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponentBase.SetCastRaytracedShadow");

	struct SetCastRaytracedShadow_Params {
		bool bNewValue;
	}; SetCastRaytracedShadow_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponentBase.SetCastDeepShadow
inline void ULightComponentBase::SetCastDeepShadow(bool bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponentBase.SetCastDeepShadow");

	struct SetCastDeepShadow_Params {
		bool bNewValue;
	}; SetCastDeepShadow_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponentBase.SetAffectReflection
inline void ULightComponentBase::SetAffectReflection(bool bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponentBase.SetAffectReflection");

	struct SetAffectReflection_Params {
		bool bNewValue;
	}; SetAffectReflection_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponentBase.SetAffectGlobalIllumination
inline void ULightComponentBase::SetAffectGlobalIllumination(bool bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponentBase.SetAffectGlobalIllumination");

	struct SetAffectGlobalIllumination_Params {
		bool bNewValue;
	}; SetAffectGlobalIllumination_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponentBase.GetLightColor
inline struct FLinearColor ULightComponentBase::GetLightColor() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponentBase.GetLightColor");

	struct GetLightColor_Params {
		
		struct FLinearColor ReturnValue;

	}; GetLightColor_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.LightComponent.SetVolumetricScatteringIntensity
inline void ULightComponent::SetVolumetricScatteringIntensity(float NewIntensity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetVolumetricScatteringIntensity");

	struct SetVolumetricScatteringIntensity_Params {
		float NewIntensity;
	}; SetVolumetricScatteringIntensity_Params Params;

	Params.NewIntensity = NewIntensity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetUseIESBrightness
inline void ULightComponent::SetUseIESBrightness(bool bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetUseIESBrightness");

	struct SetUseIESBrightness_Params {
		bool bNewValue;
	}; SetUseIESBrightness_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetTransmission
inline void ULightComponent::SetTransmission(bool bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetTransmission");

	struct SetTransmission_Params {
		bool bNewValue;
	}; SetTransmission_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetTemperature
inline void ULightComponent::SetTemperature(float NewTemperature) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetTemperature");

	struct SetTemperature_Params {
		float NewTemperature;
	}; SetTemperature_Params Params;

	Params.NewTemperature = NewTemperature;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetSpecularScale
inline void ULightComponent::SetSpecularScale(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetSpecularScale");

	struct SetSpecularScale_Params {
		float NewValue;
	}; SetSpecularScale_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetShadowSlopeBias
inline void ULightComponent::SetShadowSlopeBias(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetShadowSlopeBias");

	struct SetShadowSlopeBias_Params {
		float NewValue;
	}; SetShadowSlopeBias_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetShadowBias
inline void ULightComponent::SetShadowBias(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetShadowBias");

	struct SetShadowBias_Params {
		float NewValue;
	}; SetShadowBias_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetLightingChannels
inline void ULightComponent::SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetLightingChannels");

	struct SetLightingChannels_Params {
		bool bChannel0;
		bool bChannel1;
		bool bChannel2;
	}; SetLightingChannels_Params Params;

	Params.bChannel0 = bChannel0;
	Params.bChannel1 = bChannel1;
	Params.bChannel2 = bChannel2;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetLightFunctionScale
inline void ULightComponent::SetLightFunctionScale(struct FVector NewLightFunctionScale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetLightFunctionScale");

	struct SetLightFunctionScale_Params {
		struct FVector NewLightFunctionScale;
	}; SetLightFunctionScale_Params Params;

	Params.NewLightFunctionScale = NewLightFunctionScale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetLightFunctionMaterial
inline void ULightComponent::SetLightFunctionMaterial(struct UMaterialInterface NewLightFunctionMaterial) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetLightFunctionMaterial");

	struct SetLightFunctionMaterial_Params {
		struct UMaterialInterface NewLightFunctionMaterial;
	}; SetLightFunctionMaterial_Params Params;

	Params.NewLightFunctionMaterial = NewLightFunctionMaterial;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetLightFunctionFadeDistance
inline void ULightComponent::SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetLightFunctionFadeDistance");

	struct SetLightFunctionFadeDistance_Params {
		float NewLightFunctionFadeDistance;
	}; SetLightFunctionFadeDistance_Params Params;

	Params.NewLightFunctionFadeDistance = NewLightFunctionFadeDistance;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetLightFunctionDisabledBrightness
inline void ULightComponent::SetLightFunctionDisabledBrightness(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetLightFunctionDisabledBrightness");

	struct SetLightFunctionDisabledBrightness_Params {
		float NewValue;
	}; SetLightFunctionDisabledBrightness_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetLightColor
inline void ULightComponent::SetLightColor(struct FLinearColor NewLightColor, bool bSRGB) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetLightColor");

	struct SetLightColor_Params {
		struct FLinearColor NewLightColor;
		bool bSRGB;
	}; SetLightColor_Params Params;

	Params.NewLightColor = NewLightColor;
	Params.bSRGB = bSRGB;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetIntensity
inline void ULightComponent::SetIntensity(float NewIntensity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetIntensity");

	struct SetIntensity_Params {
		float NewIntensity;
	}; SetIntensity_Params Params;

	Params.NewIntensity = NewIntensity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetIndirectLightingIntensity
inline void ULightComponent::SetIndirectLightingIntensity(float NewIntensity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetIndirectLightingIntensity");

	struct SetIndirectLightingIntensity_Params {
		float NewIntensity;
	}; SetIndirectLightingIntensity_Params Params;

	Params.NewIntensity = NewIntensity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetIESTexture
inline void ULightComponent::SetIESTexture(struct UTextureLightProfile NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetIESTexture");

	struct SetIESTexture_Params {
		struct UTextureLightProfile NewValue;
	}; SetIESTexture_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetIESBrightnessScale
inline void ULightComponent::SetIESBrightnessScale(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetIESBrightnessScale");

	struct SetIESBrightnessScale_Params {
		float NewValue;
	}; SetIESBrightnessScale_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetForceCachedShadowsForMovablePrimitives
inline void ULightComponent::SetForceCachedShadowsForMovablePrimitives(bool bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetForceCachedShadowsForMovablePrimitives");

	struct SetForceCachedShadowsForMovablePrimitives_Params {
		bool bNewValue;
	}; SetForceCachedShadowsForMovablePrimitives_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetEnableLightShaftBloom
inline void ULightComponent::SetEnableLightShaftBloom(bool bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetEnableLightShaftBloom");

	struct SetEnableLightShaftBloom_Params {
		bool bNewValue;
	}; SetEnableLightShaftBloom_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetBloomTint
inline void ULightComponent::SetBloomTint(struct FColor NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetBloomTint");

	struct SetBloomTint_Params {
		struct FColor NewValue;
	}; SetBloomTint_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetBloomThreshold
inline void ULightComponent::SetBloomThreshold(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetBloomThreshold");

	struct SetBloomThreshold_Params {
		float NewValue;
	}; SetBloomThreshold_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetBloomScale
inline void ULightComponent::SetBloomScale(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetBloomScale");

	struct SetBloomScale_Params {
		float NewValue;
	}; SetBloomScale_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetBloomMaxBrightness
inline void ULightComponent::SetBloomMaxBrightness(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetBloomMaxBrightness");

	struct SetBloomMaxBrightness_Params {
		float NewValue;
	}; SetBloomMaxBrightness_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetAffectTranslucentLighting
inline void ULightComponent::SetAffectTranslucentLighting(bool bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetAffectTranslucentLighting");

	struct SetAffectTranslucentLighting_Params {
		bool bNewValue;
	}; SetAffectTranslucentLighting_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetAffectDynamicIndirectLighting
inline void ULightComponent::SetAffectDynamicIndirectLighting(bool bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetAffectDynamicIndirectLighting");

	struct SetAffectDynamicIndirectLighting_Params {
		bool bNewValue;
	}; SetAffectDynamicIndirectLighting_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DirectionalLightComponent.SetShadowDistanceFadeoutFraction
inline void UDirectionalLightComponent::SetShadowDistanceFadeoutFraction(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetShadowDistanceFadeoutFraction");

	struct SetShadowDistanceFadeoutFraction_Params {
		float NewValue;
	}; SetShadowDistanceFadeoutFraction_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DirectionalLightComponent.SetShadowAmount
inline void UDirectionalLightComponent::SetShadowAmount(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetShadowAmount");

	struct SetShadowAmount_Params {
		float NewValue;
	}; SetShadowAmount_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DirectionalLightComponent.SetOcclusionMaskDarkness
inline void UDirectionalLightComponent::SetOcclusionMaskDarkness(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetOcclusionMaskDarkness");

	struct SetOcclusionMaskDarkness_Params {
		float NewValue;
	}; SetOcclusionMaskDarkness_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DirectionalLightComponent.SetLightShaftOverrideDirection
inline void UDirectionalLightComponent::SetLightShaftOverrideDirection(struct FVector NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetLightShaftOverrideDirection");

	struct SetLightShaftOverrideDirection_Params {
		struct FVector NewValue;
	}; SetLightShaftOverrideDirection_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DirectionalLightComponent.SetEnableLightShaftOcclusion
inline void UDirectionalLightComponent::SetEnableLightShaftOcclusion(bool bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetEnableLightShaftOcclusion");

	struct SetEnableLightShaftOcclusion_Params {
		bool bNewValue;
	}; SetEnableLightShaftOcclusion_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceStationaryLight
inline void UDirectionalLightComponent::SetDynamicShadowDistanceStationaryLight(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceStationaryLight");

	struct SetDynamicShadowDistanceStationaryLight_Params {
		float NewValue;
	}; SetDynamicShadowDistanceStationaryLight_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceMovableLight
inline void UDirectionalLightComponent::SetDynamicShadowDistanceMovableLight(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceMovableLight");

	struct SetDynamicShadowDistanceMovableLight_Params {
		float NewValue;
	}; SetDynamicShadowDistanceMovableLight_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DirectionalLightComponent.SetDynamicShadowCascades
inline void UDirectionalLightComponent::SetDynamicShadowCascades(int32_t NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetDynamicShadowCascades");

	struct SetDynamicShadowCascades_Params {
		int32_t NewValue;
	}; SetDynamicShadowCascades_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DirectionalLightComponent.SetCascadeTransitionFraction
inline void UDirectionalLightComponent::SetCascadeTransitionFraction(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetCascadeTransitionFraction");

	struct SetCascadeTransitionFraction_Params {
		float NewValue;
	}; SetCascadeTransitionFraction_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DirectionalLightComponent.SetCascadeDistributionExponent
inline void UDirectionalLightComponent::SetCascadeDistributionExponent(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetCascadeDistributionExponent");

	struct SetCascadeDistributionExponent_Params {
		float NewValue;
	}; SetCascadeDistributionExponent_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Emitter.ToggleActive
inline void AEmitter::ToggleActive() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.ToggleActive");

	struct ToggleActive_Params {
		
	}; ToggleActive_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Emitter.SetVectorParameter
inline void AEmitter::SetVectorParameter(struct FName ParameterName, struct FVector Param) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetVectorParameter");

	struct SetVectorParameter_Params {
		struct FName ParameterName;
		struct FVector Param;
	}; SetVectorParameter_Params Params;

	Params.ParameterName = ParameterName;
	Params.Param = Param;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Emitter.SetTemplate
inline void AEmitter::SetTemplate(struct UParticleSystem NewTemplate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetTemplate");

	struct SetTemplate_Params {
		struct UParticleSystem NewTemplate;
	}; SetTemplate_Params Params;

	Params.NewTemplate = NewTemplate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Emitter.SetMaterialParameter
inline void AEmitter::SetMaterialParameter(struct FName ParameterName, struct UMaterialInterface Param) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetMaterialParameter");

	struct SetMaterialParameter_Params {
		struct FName ParameterName;
		struct UMaterialInterface Param;
	}; SetMaterialParameter_Params Params;

	Params.ParameterName = ParameterName;
	Params.Param = Param;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Emitter.SetFloatParameter
inline void AEmitter::SetFloatParameter(struct FName ParameterName, float Param) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetFloatParameter");

	struct SetFloatParameter_Params {
		struct FName ParameterName;
		float Param;
	}; SetFloatParameter_Params Params;

	Params.ParameterName = ParameterName;
	Params.Param = Param;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Emitter.SetColorParameter
inline void AEmitter::SetColorParameter(struct FName ParameterName, struct FLinearColor Param) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetColorParameter");

	struct SetColorParameter_Params {
		struct FName ParameterName;
		struct FLinearColor Param;
	}; SetColorParameter_Params Params;

	Params.ParameterName = ParameterName;
	Params.Param = Param;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Emitter.SetActorParameter
inline void AEmitter::SetActorParameter(struct FName ParameterName, struct UActor Param) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetActorParameter");

	struct SetActorParameter_Params {
		struct FName ParameterName;
		struct UActor Param;
	}; SetActorParameter_Params Params;

	Params.ParameterName = ParameterName;
	Params.Param = Param;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Emitter.OnRep_bCurrentlyActive
inline void AEmitter::OnRep_bCurrentlyActive() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.OnRep_bCurrentlyActive");

	struct OnRep_bCurrentlyActive_Params {
		
	}; OnRep_bCurrentlyActive_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Emitter.OnParticleSystemFinished
inline void AEmitter::OnParticleSystemFinished(struct UParticleSystemComponent FinishedComponent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.OnParticleSystemFinished");

	struct OnParticleSystemFinished_Params {
		struct UParticleSystemComponent FinishedComponent;
	}; OnParticleSystemFinished_Params Params;

	Params.FinishedComponent = FinishedComponent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Emitter.IsActive
inline bool AEmitter::IsActive() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.IsActive");

	struct IsActive_Params {
		
		bool ReturnValue;

	}; IsActive_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Emitter.Deactivate
inline void AEmitter::Deactivate() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.Deactivate");

	struct Deactivate_Params {
		
	}; Deactivate_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Emitter.Activate
inline void AEmitter::Activate() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.Activate");

	struct Activate_Params {
		
	}; Activate_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFog.OnRep_bEnabled
inline void AExponentialHeightFog::OnRep_bEnabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFog.OnRep_bEnabled");

	struct OnRep_bEnabled_Params {
		
	}; OnRep_bEnabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetVolumetricFogScatteringDistribution
inline void UExponentialHeightFogComponent::SetVolumetricFogScatteringDistribution(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetVolumetricFogScatteringDistribution");

	struct SetVolumetricFogScatteringDistribution_Params {
		float NewValue;
	}; SetVolumetricFogScatteringDistribution_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetVolumetricFogExtinctionScale
inline void UExponentialHeightFogComponent::SetVolumetricFogExtinctionScale(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetVolumetricFogExtinctionScale");

	struct SetVolumetricFogExtinctionScale_Params {
		float NewValue;
	}; SetVolumetricFogExtinctionScale_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetVolumetricFogEmissive
inline void UExponentialHeightFogComponent::SetVolumetricFogEmissive(struct FLinearColor NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetVolumetricFogEmissive");

	struct SetVolumetricFogEmissive_Params {
		struct FLinearColor NewValue;
	}; SetVolumetricFogEmissive_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetVolumetricFogDistance
inline void UExponentialHeightFogComponent::SetVolumetricFogDistance(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetVolumetricFogDistance");

	struct SetVolumetricFogDistance_Params {
		float NewValue;
	}; SetVolumetricFogDistance_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetVolumetricFogAlbedo
inline void UExponentialHeightFogComponent::SetVolumetricFogAlbedo(struct FColor NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetVolumetricFogAlbedo");

	struct SetVolumetricFogAlbedo_Params {
		struct FColor NewValue;
	}; SetVolumetricFogAlbedo_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetVolumetricFog
inline void UExponentialHeightFogComponent::SetVolumetricFog(bool bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetVolumetricFog");

	struct SetVolumetricFog_Params {
		bool bNewValue;
	}; SetVolumetricFog_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetStartDistance
inline void UExponentialHeightFogComponent::SetStartDistance(float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetStartDistance");

	struct SetStartDistance_Params {
		float Value;
	}; SetStartDistance_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetNonDirectionalInscatteringColorDistance
inline void UExponentialHeightFogComponent::SetNonDirectionalInscatteringColorDistance(float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetNonDirectionalInscatteringColorDistance");

	struct SetNonDirectionalInscatteringColorDistance_Params {
		float Value;
	}; SetNonDirectionalInscatteringColorDistance_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetInscatteringTextureTint
inline void UExponentialHeightFogComponent::SetInscatteringTextureTint(struct FLinearColor Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetInscatteringTextureTint");

	struct SetInscatteringTextureTint_Params {
		struct FLinearColor Value;
	}; SetInscatteringTextureTint_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemapAngle
inline void UExponentialHeightFogComponent::SetInscatteringColorCubemapAngle(float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemapAngle");

	struct SetInscatteringColorCubemapAngle_Params {
		float Value;
	}; SetInscatteringColorCubemapAngle_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemap
inline void UExponentialHeightFogComponent::SetInscatteringColorCubemap(struct UTextureCube Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemap");

	struct SetInscatteringColorCubemap_Params {
		struct UTextureCube Value;
	}; SetInscatteringColorCubemap_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetFullyDirectionalInscatteringColorDistance
inline void UExponentialHeightFogComponent::SetFullyDirectionalInscatteringColorDistance(float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetFullyDirectionalInscatteringColorDistance");

	struct SetFullyDirectionalInscatteringColorDistance_Params {
		float Value;
	}; SetFullyDirectionalInscatteringColorDistance_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetFogMaxOpacity
inline void UExponentialHeightFogComponent::SetFogMaxOpacity(float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetFogMaxOpacity");

	struct SetFogMaxOpacity_Params {
		float Value;
	}; SetFogMaxOpacity_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetFogInscatteringColor
inline void UExponentialHeightFogComponent::SetFogInscatteringColor(struct FLinearColor Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetFogInscatteringColor");

	struct SetFogInscatteringColor_Params {
		struct FLinearColor Value;
	}; SetFogInscatteringColor_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetFogHeightFalloff
inline void UExponentialHeightFogComponent::SetFogHeightFalloff(float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetFogHeightFalloff");

	struct SetFogHeightFalloff_Params {
		float Value;
	}; SetFogHeightFalloff_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetFogDensity
inline void UExponentialHeightFogComponent::SetFogDensity(float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetFogDensity");

	struct SetFogDensity_Params {
		float Value;
	}; SetFogDensity_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetFogCutoffDistance
inline void UExponentialHeightFogComponent::SetFogCutoffDistance(float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetFogCutoffDistance");

	struct SetFogCutoffDistance_Params {
		float Value;
	}; SetFogCutoffDistance_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartDistance
inline void UExponentialHeightFogComponent::SetDirectionalInscatteringStartDistance(float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartDistance");

	struct SetDirectionalInscatteringStartDistance_Params {
		float Value;
	}; SetDirectionalInscatteringStartDistance_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringExponent
inline void UExponentialHeightFogComponent::SetDirectionalInscatteringExponent(float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringExponent");

	struct SetDirectionalInscatteringExponent_Params {
		float Value;
	}; SetDirectionalInscatteringExponent_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringColor
inline void UExponentialHeightFogComponent::SetDirectionalInscatteringColor(struct FLinearColor Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringColor");

	struct SetDirectionalInscatteringColor_Params {
		struct FLinearColor Value;
	}; SetDirectionalInscatteringColor_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Exporter.ScriptRunAssetExportTask
inline bool UExporter::ScriptRunAssetExportTask(struct UAssetExportTask Task) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Exporter.ScriptRunAssetExportTask");

	struct ScriptRunAssetExportTask_Params {
		struct UAssetExportTask Task;
		bool ReturnValue;

	}; ScriptRunAssetExportTask_Params Params;

	Params.Task = Task;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Exporter.RunAssetExportTasks
inline bool UExporter::RunAssetExportTasks(struct TArray<struct UAssetExportTask>& ExportTasks) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Exporter.RunAssetExportTasks");

	struct RunAssetExportTasks_Params {
		struct TArray<struct UAssetExportTask>& ExportTasks;
		bool ReturnValue;

	}; RunAssetExportTasks_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	ExportTasks = Params.ExportTasks;


	return params.ReturnValue;
}

// Function Engine.Exporter.RunAssetExportTask
inline bool UExporter::RunAssetExportTask(struct UAssetExportTask Task) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Exporter.RunAssetExportTask");

	struct RunAssetExportTask_Params {
		struct UAssetExportTask Task;
		bool ReturnValue;

	}; RunAssetExportTask_Params Params;

	Params.Task = Task;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.ForceFeedbackComponent.Stop
inline void UForceFeedbackComponent::Stop() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFeedbackComponent.Stop");

	struct Stop_Params {
		
	}; Stop_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ForceFeedbackComponent.SetIntensityMultiplier
inline void UForceFeedbackComponent::SetIntensityMultiplier(float NewIntensityMultiplier) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFeedbackComponent.SetIntensityMultiplier");

	struct SetIntensityMultiplier_Params {
		float NewIntensityMultiplier;
	}; SetIntensityMultiplier_Params Params;

	Params.NewIntensityMultiplier = NewIntensityMultiplier;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ForceFeedbackComponent.SetForceFeedbackEffect
inline void UForceFeedbackComponent::SetForceFeedbackEffect(struct UForceFeedbackEffect NewForceFeedbackEffect) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFeedbackComponent.SetForceFeedbackEffect");

	struct SetForceFeedbackEffect_Params {
		struct UForceFeedbackEffect NewForceFeedbackEffect;
	}; SetForceFeedbackEffect_Params Params;

	Params.NewForceFeedbackEffect = NewForceFeedbackEffect;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ForceFeedbackComponent.Play
inline void UForceFeedbackComponent::Play(float StartTime) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFeedbackComponent.Play");

	struct Play_Params {
		float StartTime;
	}; Play_Params Params;

	Params.StartTime = StartTime;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ForceFeedbackComponent.BP_GetAttenuationSettingsToApply
inline bool UForceFeedbackComponent::BP_GetAttenuationSettingsToApply(struct FForceFeedbackAttenuationSettings& OutAttenuationSettings) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFeedbackComponent.BP_GetAttenuationSettingsToApply");

	struct BP_GetAttenuationSettingsToApply_Params {
		struct FForceFeedbackAttenuationSettings& OutAttenuationSettings;
		bool ReturnValue;

	}; BP_GetAttenuationSettingsToApply_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutAttenuationSettings = Params.OutAttenuationSettings;


	return params.ReturnValue;
}

// Function Engine.ForceFeedbackComponent.AdjustAttenuation
inline void UForceFeedbackComponent::AdjustAttenuation(struct FForceFeedbackAttenuationSettings& InAttenuationSettings) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFeedbackComponent.AdjustAttenuation");

	struct AdjustAttenuation_Params {
		struct FForceFeedbackAttenuationSettings& InAttenuationSettings;
	}; AdjustAttenuation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InAttenuationSettings = Params.InAttenuationSettings;

}

// Function Engine.GameUserSettings.ValidateSettings
inline void UGameUserSettings::ValidateSettings() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.ValidateSettings");

	struct ValidateSettings_Params {
		
	}; ValidateSettings_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SupportsHDRDisplayOutput
inline bool UGameUserSettings::SupportsHDRDisplayOutput() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SupportsHDRDisplayOutput");

	struct SupportsHDRDisplayOutput_Params {
		
		bool ReturnValue;

	}; SupportsHDRDisplayOutput_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.SetVSyncEnabled
inline void UGameUserSettings::SetVSyncEnabled(bool bEnable) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetVSyncEnabled");

	struct SetVSyncEnabled_Params {
		bool bEnable;
	}; SetVSyncEnabled_Params Params;

	Params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetVisualEffectQuality
inline void UGameUserSettings::SetVisualEffectQuality(int32_t Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetVisualEffectQuality");

	struct SetVisualEffectQuality_Params {
		int32_t Value;
	}; SetVisualEffectQuality_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetViewDistanceQuality
inline void UGameUserSettings::SetViewDistanceQuality(int32_t Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetViewDistanceQuality");

	struct SetViewDistanceQuality_Params {
		int32_t Value;
	}; SetViewDistanceQuality_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetToDefaults
inline void UGameUserSettings::SetToDefaults() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetToDefaults");

	struct SetToDefaults_Params {
		
	}; SetToDefaults_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetTextureQuality
inline void UGameUserSettings::SetTextureQuality(int32_t Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetTextureQuality");

	struct SetTextureQuality_Params {
		int32_t Value;
	}; SetTextureQuality_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetShadowQuality
inline void UGameUserSettings::SetShadowQuality(int32_t Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetShadowQuality");

	struct SetShadowQuality_Params {
		int32_t Value;
	}; SetShadowQuality_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetShadingQuality
inline void UGameUserSettings::SetShadingQuality(int32_t Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetShadingQuality");

	struct SetShadingQuality_Params {
		int32_t Value;
	}; SetShadingQuality_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetScreenResolution
inline void UGameUserSettings::SetScreenResolution(struct FIntPoint Resolution) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetScreenResolution");

	struct SetScreenResolution_Params {
		struct FIntPoint Resolution;
	}; SetScreenResolution_Params Params;

	Params.Resolution = Resolution;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetResolutionScaleValueEx
inline void UGameUserSettings::SetResolutionScaleValueEx(float NewScaleValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetResolutionScaleValueEx");

	struct SetResolutionScaleValueEx_Params {
		float NewScaleValue;
	}; SetResolutionScaleValueEx_Params Params;

	Params.NewScaleValue = NewScaleValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetResolutionScaleValue
inline void UGameUserSettings::SetResolutionScaleValue(int32_t NewScaleValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetResolutionScaleValue");

	struct SetResolutionScaleValue_Params {
		int32_t NewScaleValue;
	}; SetResolutionScaleValue_Params Params;

	Params.NewScaleValue = NewScaleValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetResolutionScaleNormalized
inline void UGameUserSettings::SetResolutionScaleNormalized(float NewScaleNormalized) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetResolutionScaleNormalized");

	struct SetResolutionScaleNormalized_Params {
		float NewScaleNormalized;
	}; SetResolutionScaleNormalized_Params Params;

	Params.NewScaleNormalized = NewScaleNormalized;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetPostProcessingQuality
inline void UGameUserSettings::SetPostProcessingQuality(int32_t Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetPostProcessingQuality");

	struct SetPostProcessingQuality_Params {
		int32_t Value;
	}; SetPostProcessingQuality_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetOverallScalabilityLevel
inline void UGameUserSettings::SetOverallScalabilityLevel(int32_t Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetOverallScalabilityLevel");

	struct SetOverallScalabilityLevel_Params {
		int32_t Value;
	}; SetOverallScalabilityLevel_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetFullscreenMode
inline void UGameUserSettings::SetFullscreenMode(enum class EWindowMode InFullscreenMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetFullscreenMode");

	struct SetFullscreenMode_Params {
		enum class EWindowMode InFullscreenMode;
	}; SetFullscreenMode_Params Params;

	Params.InFullscreenMode = InFullscreenMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetFrameRateLimit
inline void UGameUserSettings::SetFrameRateLimit(float NewLimit) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetFrameRateLimit");

	struct SetFrameRateLimit_Params {
		float NewLimit;
	}; SetFrameRateLimit_Params Params;

	Params.NewLimit = NewLimit;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetFoliageQuality
inline void UGameUserSettings::SetFoliageQuality(int32_t Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetFoliageQuality");

	struct SetFoliageQuality_Params {
		int32_t Value;
	}; SetFoliageQuality_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetDynamicResolutionEnabled
inline void UGameUserSettings::SetDynamicResolutionEnabled(bool bEnable) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetDynamicResolutionEnabled");

	struct SetDynamicResolutionEnabled_Params {
		bool bEnable;
	}; SetDynamicResolutionEnabled_Params Params;

	Params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetBenchmarkFallbackValues
inline void UGameUserSettings::SetBenchmarkFallbackValues() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetBenchmarkFallbackValues");

	struct SetBenchmarkFallbackValues_Params {
		
	}; SetBenchmarkFallbackValues_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetAudioQualityLevel
inline void UGameUserSettings::SetAudioQualityLevel(int32_t QualityLevel) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetAudioQualityLevel");

	struct SetAudioQualityLevel_Params {
		int32_t QualityLevel;
	}; SetAudioQualityLevel_Params Params;

	Params.QualityLevel = QualityLevel;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetAntiAliasingQuality
inline void UGameUserSettings::SetAntiAliasingQuality(int32_t Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetAntiAliasingQuality");

	struct SetAntiAliasingQuality_Params {
		int32_t Value;
	}; SetAntiAliasingQuality_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SaveSettings
inline void UGameUserSettings::SaveSettings() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SaveSettings");

	struct SaveSettings_Params {
		
	}; SaveSettings_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.RunHardwareBenchmark
inline void UGameUserSettings::RunHardwareBenchmark(int32_t WorkScale, float CPUMultiplier, float GPUMultiplier) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.RunHardwareBenchmark");

	struct RunHardwareBenchmark_Params {
		int32_t WorkScale;
		float CPUMultiplier;
		float GPUMultiplier;
	}; RunHardwareBenchmark_Params Params;

	Params.WorkScale = WorkScale;
	Params.CPUMultiplier = CPUMultiplier;
	Params.GPUMultiplier = GPUMultiplier;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.RevertVideoMode
inline void UGameUserSettings::RevertVideoMode() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.RevertVideoMode");

	struct RevertVideoMode_Params {
		
	}; RevertVideoMode_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.ResetToCurrentSettings
inline void UGameUserSettings::ResetToCurrentSettings() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.ResetToCurrentSettings");

	struct ResetToCurrentSettings_Params {
		
	}; ResetToCurrentSettings_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.LoadSettings
inline void UGameUserSettings::LoadSettings(bool bForceReload) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.LoadSettings");

	struct LoadSettings_Params {
		bool bForceReload;
	}; LoadSettings_Params Params;

	Params.bForceReload = bForceReload;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.IsVSyncEnabled
inline bool UGameUserSettings::IsVSyncEnabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.IsVSyncEnabled");

	struct IsVSyncEnabled_Params {
		
		bool ReturnValue;

	}; IsVSyncEnabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.IsVSyncDirty
inline bool UGameUserSettings::IsVSyncDirty() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.IsVSyncDirty");

	struct IsVSyncDirty_Params {
		
		bool ReturnValue;

	}; IsVSyncDirty_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.IsScreenResolutionDirty
inline bool UGameUserSettings::IsScreenResolutionDirty() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.IsScreenResolutionDirty");

	struct IsScreenResolutionDirty_Params {
		
		bool ReturnValue;

	}; IsScreenResolutionDirty_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.IsHDREnabled
inline bool UGameUserSettings::IsHDREnabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.IsHDREnabled");

	struct IsHDREnabled_Params {
		
		bool ReturnValue;

	}; IsHDREnabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.IsFullscreenModeDirty
inline bool UGameUserSettings::IsFullscreenModeDirty() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.IsFullscreenModeDirty");

	struct IsFullscreenModeDirty_Params {
		
		bool ReturnValue;

	}; IsFullscreenModeDirty_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.IsDynamicResolutionEnabled
inline bool UGameUserSettings::IsDynamicResolutionEnabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.IsDynamicResolutionEnabled");

	struct IsDynamicResolutionEnabled_Params {
		
		bool ReturnValue;

	}; IsDynamicResolutionEnabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.IsDynamicResolutionDirty
inline bool UGameUserSettings::IsDynamicResolutionDirty() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.IsDynamicResolutionDirty");

	struct IsDynamicResolutionDirty_Params {
		
		bool ReturnValue;

	}; IsDynamicResolutionDirty_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.IsDirty
inline bool UGameUserSettings::IsDirty() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.IsDirty");

	struct IsDirty_Params {
		
		bool ReturnValue;

	}; IsDirty_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetVisualEffectQuality
inline int32_t UGameUserSettings::GetVisualEffectQuality() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetVisualEffectQuality");

	struct GetVisualEffectQuality_Params {
		
		int32_t ReturnValue;

	}; GetVisualEffectQuality_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetViewDistanceQuality
inline int32_t UGameUserSettings::GetViewDistanceQuality() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetViewDistanceQuality");

	struct GetViewDistanceQuality_Params {
		
		int32_t ReturnValue;

	}; GetViewDistanceQuality_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetTextureQuality
inline int32_t UGameUserSettings::GetTextureQuality() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetTextureQuality");

	struct GetTextureQuality_Params {
		
		int32_t ReturnValue;

	}; GetTextureQuality_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetSyncInterval
inline int32_t UGameUserSettings::GetSyncInterval() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetSyncInterval");

	struct GetSyncInterval_Params {
		
		int32_t ReturnValue;

	}; GetSyncInterval_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetShadowQuality
inline int32_t UGameUserSettings::GetShadowQuality() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetShadowQuality");

	struct GetShadowQuality_Params {
		
		int32_t ReturnValue;

	}; GetShadowQuality_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetShadingQuality
inline int32_t UGameUserSettings::GetShadingQuality() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetShadingQuality");

	struct GetShadingQuality_Params {
		
		int32_t ReturnValue;

	}; GetShadingQuality_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetScreenResolution
inline struct FIntPoint UGameUserSettings::GetScreenResolution() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetScreenResolution");

	struct GetScreenResolution_Params {
		
		struct FIntPoint ReturnValue;

	}; GetScreenResolution_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetResolutionScaleNormalized
inline float UGameUserSettings::GetResolutionScaleNormalized() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetResolutionScaleNormalized");

	struct GetResolutionScaleNormalized_Params {
		
		float ReturnValue;

	}; GetResolutionScaleNormalized_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetResolutionScaleInformationEx
inline void UGameUserSettings::GetResolutionScaleInformationEx(float& CurrentScaleNormalized, float& CurrentScaleValue, float& MinScaleValue, float& MaxScaleValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetResolutionScaleInformationEx");

	struct GetResolutionScaleInformationEx_Params {
		float& CurrentScaleNormalized;
		float& CurrentScaleValue;
		float& MinScaleValue;
		float& MaxScaleValue;
	}; GetResolutionScaleInformationEx_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	CurrentScaleNormalized = Params.CurrentScaleNormalized;
	CurrentScaleValue = Params.CurrentScaleValue;
	MinScaleValue = Params.MinScaleValue;
	MaxScaleValue = Params.MaxScaleValue;

}

// Function Engine.GameUserSettings.GetResolutionScaleInformation
inline void UGameUserSettings::GetResolutionScaleInformation(float& CurrentScaleNormalized, int32_t& CurrentScaleValue, int32_t& MinScaleValue, int32_t& MaxScaleValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetResolutionScaleInformation");

	struct GetResolutionScaleInformation_Params {
		float& CurrentScaleNormalized;
		int32_t& CurrentScaleValue;
		int32_t& MinScaleValue;
		int32_t& MaxScaleValue;
	}; GetResolutionScaleInformation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	CurrentScaleNormalized = Params.CurrentScaleNormalized;
	CurrentScaleValue = Params.CurrentScaleValue;
	MinScaleValue = Params.MinScaleValue;
	MaxScaleValue = Params.MaxScaleValue;

}

// Function Engine.GameUserSettings.GetRecommendedResolutionScale
inline float UGameUserSettings::GetRecommendedResolutionScale() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetRecommendedResolutionScale");

	struct GetRecommendedResolutionScale_Params {
		
		float ReturnValue;

	}; GetRecommendedResolutionScale_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetPreferredFullscreenMode
inline enum class EWindowMode UGameUserSettings::GetPreferredFullscreenMode() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetPreferredFullscreenMode");

	struct GetPreferredFullscreenMode_Params {
		
		enum class EWindowMode ReturnValue;

	}; GetPreferredFullscreenMode_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetPostProcessingQuality
inline int32_t UGameUserSettings::GetPostProcessingQuality() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetPostProcessingQuality");

	struct GetPostProcessingQuality_Params {
		
		int32_t ReturnValue;

	}; GetPostProcessingQuality_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetOverallScalabilityLevel
inline int32_t UGameUserSettings::GetOverallScalabilityLevel() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetOverallScalabilityLevel");

	struct GetOverallScalabilityLevel_Params {
		
		int32_t ReturnValue;

	}; GetOverallScalabilityLevel_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetLastConfirmedScreenResolution
inline struct FIntPoint UGameUserSettings::GetLastConfirmedScreenResolution() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetLastConfirmedScreenResolution");

	struct GetLastConfirmedScreenResolution_Params {
		
		struct FIntPoint ReturnValue;

	}; GetLastConfirmedScreenResolution_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetLastConfirmedFullscreenMode
inline enum class EWindowMode UGameUserSettings::GetLastConfirmedFullscreenMode() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetLastConfirmedFullscreenMode");

	struct GetLastConfirmedFullscreenMode_Params {
		
		enum class EWindowMode ReturnValue;

	}; GetLastConfirmedFullscreenMode_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetGameUserSettings
inline struct UGameUserSettings UGameUserSettings::GetGameUserSettings() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetGameUserSettings");

	struct GetGameUserSettings_Params {
		
		struct UGameUserSettings ReturnValue;

	}; GetGameUserSettings_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetFullscreenMode
inline enum class EWindowMode UGameUserSettings::GetFullscreenMode() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetFullscreenMode");

	struct GetFullscreenMode_Params {
		
		enum class EWindowMode ReturnValue;

	}; GetFullscreenMode_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetFrameRateLimit
inline float UGameUserSettings::GetFrameRateLimit() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetFrameRateLimit");

	struct GetFrameRateLimit_Params {
		
		float ReturnValue;

	}; GetFrameRateLimit_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetFramePace
inline int32_t UGameUserSettings::GetFramePace() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetFramePace");

	struct GetFramePace_Params {
		
		int32_t ReturnValue;

	}; GetFramePace_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetFoliageQuality
inline int32_t UGameUserSettings::GetFoliageQuality() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetFoliageQuality");

	struct GetFoliageQuality_Params {
		
		int32_t ReturnValue;

	}; GetFoliageQuality_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetDesktopResolution
inline struct FIntPoint UGameUserSettings::GetDesktopResolution() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetDesktopResolution");

	struct GetDesktopResolution_Params {
		
		struct FIntPoint ReturnValue;

	}; GetDesktopResolution_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetDefaultWindowPosition
inline struct FIntPoint UGameUserSettings::GetDefaultWindowPosition() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetDefaultWindowPosition");

	struct GetDefaultWindowPosition_Params {
		
		struct FIntPoint ReturnValue;

	}; GetDefaultWindowPosition_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetDefaultWindowMode
inline enum class EWindowMode UGameUserSettings::GetDefaultWindowMode() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetDefaultWindowMode");

	struct GetDefaultWindowMode_Params {
		
		enum class EWindowMode ReturnValue;

	}; GetDefaultWindowMode_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetDefaultResolutionScale
inline float UGameUserSettings::GetDefaultResolutionScale() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetDefaultResolutionScale");

	struct GetDefaultResolutionScale_Params {
		
		float ReturnValue;

	}; GetDefaultResolutionScale_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetDefaultResolution
inline struct FIntPoint UGameUserSettings::GetDefaultResolution() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetDefaultResolution");

	struct GetDefaultResolution_Params {
		
		struct FIntPoint ReturnValue;

	}; GetDefaultResolution_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetCurrentHDRDisplayNits
inline int32_t UGameUserSettings::GetCurrentHDRDisplayNits() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetCurrentHDRDisplayNits");

	struct GetCurrentHDRDisplayNits_Params {
		
		int32_t ReturnValue;

	}; GetCurrentHDRDisplayNits_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetAudioQualityLevel
inline int32_t UGameUserSettings::GetAudioQualityLevel() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetAudioQualityLevel");

	struct GetAudioQualityLevel_Params {
		
		int32_t ReturnValue;

	}; GetAudioQualityLevel_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetAntiAliasingQuality
inline int32_t UGameUserSettings::GetAntiAliasingQuality() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetAntiAliasingQuality");

	struct GetAntiAliasingQuality_Params {
		
		int32_t ReturnValue;

	}; GetAntiAliasingQuality_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.EnableHDRDisplayOutput
inline void UGameUserSettings::EnableHDRDisplayOutput(bool bEnable, int32_t DisplayNits) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.EnableHDRDisplayOutput");

	struct EnableHDRDisplayOutput_Params {
		bool bEnable;
		int32_t DisplayNits;
	}; EnableHDRDisplayOutput_Params Params;

	Params.bEnable = bEnable;
	Params.DisplayNits = DisplayNits;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.ConfirmVideoMode
inline void UGameUserSettings::ConfirmVideoMode() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.ConfirmVideoMode");

	struct ConfirmVideoMode_Params {
		
	}; ConfirmVideoMode_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.ApplySettings
inline void UGameUserSettings::ApplySettings(bool bCheckForCommandLineOverrides) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.ApplySettings");

	struct ApplySettings_Params {
		bool bCheckForCommandLineOverrides;
	}; ApplySettings_Params Params;

	Params.bCheckForCommandLineOverrides = bCheckForCommandLineOverrides;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.ApplyResolutionSettings
inline void UGameUserSettings::ApplyResolutionSettings(bool bCheckForCommandLineOverrides) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.ApplyResolutionSettings");

	struct ApplyResolutionSettings_Params {
		bool bCheckForCommandLineOverrides;
	}; ApplyResolutionSettings_Params Params;

	Params.bCheckForCommandLineOverrides = bCheckForCommandLineOverrides;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.ApplyNonResolutionSettings
inline void UGameUserSettings::ApplyNonResolutionSettings() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.ApplyNonResolutionSettings");

	struct ApplyNonResolutionSettings_Params {
		
	}; ApplyNonResolutionSettings_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.ApplyHardwareBenchmarkResults
inline void UGameUserSettings::ApplyHardwareBenchmarkResults() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.ApplyHardwareBenchmarkResults");

	struct ApplyHardwareBenchmarkResults_Params {
		
	}; ApplyHardwareBenchmarkResults_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SpotLight.SetOuterConeAngle
inline void ASpotLight::SetOuterConeAngle(float NewOuterConeAngle) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpotLight.SetOuterConeAngle");

	struct SetOuterConeAngle_Params {
		float NewOuterConeAngle;
	}; SetOuterConeAngle_Params Params;

	Params.NewOuterConeAngle = NewOuterConeAngle;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SpotLight.SetInnerConeAngle
inline void ASpotLight::SetInnerConeAngle(float NewInnerConeAngle) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpotLight.SetInnerConeAngle");

	struct SetInnerConeAngle_Params {
		float NewInnerConeAngle;
	}; SetInnerConeAngle_Params Params;

	Params.NewInnerConeAngle = NewInnerConeAngle;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.InputComponent.WasControllerKeyJustReleased
inline bool UInputComponent::WasControllerKeyJustReleased(struct FKey Key) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.WasControllerKeyJustReleased");

	struct WasControllerKeyJustReleased_Params {
		struct FKey Key;
		bool ReturnValue;

	}; WasControllerKeyJustReleased_Params Params;

	Params.Key = Key;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.InputComponent.WasControllerKeyJustPressed
inline bool UInputComponent::WasControllerKeyJustPressed(struct FKey Key) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.WasControllerKeyJustPressed");

	struct WasControllerKeyJustPressed_Params {
		struct FKey Key;
		bool ReturnValue;

	}; WasControllerKeyJustPressed_Params Params;

	Params.Key = Key;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.InputComponent.IsControllerKeyDown
inline bool UInputComponent::IsControllerKeyDown(struct FKey Key) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.IsControllerKeyDown");

	struct IsControllerKeyDown_Params {
		struct FKey Key;
		bool ReturnValue;

	}; IsControllerKeyDown_Params Params;

	Params.Key = Key;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.InputComponent.GetTouchState
inline void UInputComponent::GetTouchState(int32_t FingerIndex, float& LocationX, float& LocationY, bool& bIsCurrentlyPressed) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.GetTouchState");

	struct GetTouchState_Params {
		int32_t FingerIndex;
		float& LocationX;
		float& LocationY;
		bool& bIsCurrentlyPressed;
	}; GetTouchState_Params Params;

	Params.FingerIndex = FingerIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	LocationX = Params.LocationX;
	LocationY = Params.LocationY;
	bIsCurrentlyPressed = Params.bIsCurrentlyPressed;

}

// Function Engine.InputComponent.GetControllerVectorKeyState
inline struct FVector UInputComponent::GetControllerVectorKeyState(struct FKey Key) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.GetControllerVectorKeyState");

	struct GetControllerVectorKeyState_Params {
		struct FKey Key;
		struct FVector ReturnValue;

	}; GetControllerVectorKeyState_Params Params;

	Params.Key = Key;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.InputComponent.GetControllerMouseDelta
inline void UInputComponent::GetControllerMouseDelta(float& DeltaX, float& DeltaY) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.GetControllerMouseDelta");

	struct GetControllerMouseDelta_Params {
		float& DeltaX;
		float& DeltaY;
	}; GetControllerMouseDelta_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	DeltaX = Params.DeltaX;
	DeltaY = Params.DeltaY;

}

// Function Engine.InputComponent.GetControllerKeyTimeDown
inline float UInputComponent::GetControllerKeyTimeDown(struct FKey Key) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.GetControllerKeyTimeDown");

	struct GetControllerKeyTimeDown_Params {
		struct FKey Key;
		float ReturnValue;

	}; GetControllerKeyTimeDown_Params Params;

	Params.Key = Key;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.InputComponent.GetControllerAnalogStickState
inline void UInputComponent::GetControllerAnalogStickState(enum class EControllerAnalogStick WhichStick, float& StickX, float& StickY) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.GetControllerAnalogStickState");

	struct GetControllerAnalogStickState_Params {
		enum class EControllerAnalogStick WhichStick;
		float& StickX;
		float& StickY;
	}; GetControllerAnalogStickState_Params Params;

	Params.WhichStick = WhichStick;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	StickX = Params.StickX;
	StickY = Params.StickY;

}

// Function Engine.InputComponent.GetControllerAnalogKeyState
inline float UInputComponent::GetControllerAnalogKeyState(struct FKey Key) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.GetControllerAnalogKeyState");

	struct GetControllerAnalogKeyState_Params {
		struct FKey Key;
		float ReturnValue;

	}; GetControllerAnalogKeyState_Params Params;

	Params.Key = Key;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.InputSettings.SaveKeyMappings
inline void UInputSettings::SaveKeyMappings() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputSettings.SaveKeyMappings");

	struct SaveKeyMappings_Params {
		
	}; SaveKeyMappings_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.InputSettings.RemoveAxisMapping
inline void UInputSettings::RemoveAxisMapping(struct FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputSettings.RemoveAxisMapping");

	struct RemoveAxisMapping_Params {
		struct FInputAxisKeyMapping& KeyMapping;
		bool bForceRebuildKeymaps;
	}; RemoveAxisMapping_Params Params;

	Params.bForceRebuildKeymaps = bForceRebuildKeymaps;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	KeyMapping = Params.KeyMapping;

}

// Function Engine.InputSettings.RemoveActionMapping
inline void UInputSettings::RemoveActionMapping(struct FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputSettings.RemoveActionMapping");

	struct RemoveActionMapping_Params {
		struct FInputActionKeyMapping& KeyMapping;
		bool bForceRebuildKeymaps;
	}; RemoveActionMapping_Params Params;

	Params.bForceRebuildKeymaps = bForceRebuildKeymaps;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	KeyMapping = Params.KeyMapping;

}

// Function Engine.InputSettings.GetInputSettings
inline struct UInputSettings UInputSettings::GetInputSettings() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputSettings.GetInputSettings");

	struct GetInputSettings_Params {
		
		struct UInputSettings ReturnValue;

	}; GetInputSettings_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.InputSettings.GetAxisNames
inline void UInputSettings::GetAxisNames(struct TArray<struct FName>& AxisNames) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputSettings.GetAxisNames");

	struct GetAxisNames_Params {
		struct TArray<struct FName>& AxisNames;
	}; GetAxisNames_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	AxisNames = Params.AxisNames;

}

// Function Engine.InputSettings.GetAxisMappingByName
inline void UInputSettings::GetAxisMappingByName(struct FName InAxisName, struct TArray<struct FInputAxisKeyMapping>& OutMappings) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputSettings.GetAxisMappingByName");

	struct GetAxisMappingByName_Params {
		struct FName InAxisName;
		struct TArray<struct FInputAxisKeyMapping>& OutMappings;
	}; GetAxisMappingByName_Params Params;

	Params.InAxisName = InAxisName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutMappings = Params.OutMappings;

}

// Function Engine.InputSettings.GetActionNames
inline void UInputSettings::GetActionNames(struct TArray<struct FName>& ActionNames) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputSettings.GetActionNames");

	struct GetActionNames_Params {
		struct TArray<struct FName>& ActionNames;
	}; GetActionNames_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	ActionNames = Params.ActionNames;

}

// Function Engine.InputSettings.GetActionMappingByName
inline void UInputSettings::GetActionMappingByName(struct FName InActionName, struct TArray<struct FInputActionKeyMapping>& OutMappings) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputSettings.GetActionMappingByName");

	struct GetActionMappingByName_Params {
		struct FName InActionName;
		struct TArray<struct FInputActionKeyMapping>& OutMappings;
	}; GetActionMappingByName_Params Params;

	Params.InActionName = InActionName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutMappings = Params.OutMappings;

}

// Function Engine.InputSettings.ForceRebuildKeymaps
inline void UInputSettings::ForceRebuildKeymaps() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputSettings.ForceRebuildKeymaps");

	struct ForceRebuildKeymaps_Params {
		
	}; ForceRebuildKeymaps_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.InputSettings.AddAxisMapping
inline void UInputSettings::AddAxisMapping(struct FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputSettings.AddAxisMapping");

	struct AddAxisMapping_Params {
		struct FInputAxisKeyMapping& KeyMapping;
		bool bForceRebuildKeymaps;
	}; AddAxisMapping_Params Params;

	Params.bForceRebuildKeymaps = bForceRebuildKeymaps;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	KeyMapping = Params.KeyMapping;

}

// Function Engine.InputSettings.AddActionMapping
inline void UInputSettings::AddActionMapping(struct FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputSettings.AddActionMapping");

	struct AddActionMapping_Params {
		struct FInputActionKeyMapping& KeyMapping;
		bool bForceRebuildKeymaps;
	}; AddActionMapping_Params Params;

	Params.bForceRebuildKeymaps = bForceRebuildKeymaps;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	KeyMapping = Params.KeyMapping;

}

// Function Engine.InterpToMovementComponent.StopSimulating
inline void UInterpToMovementComponent::StopSimulating(struct FHitResult& HitResult) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpToMovementComponent.StopSimulating");

	struct StopSimulating_Params {
		struct FHitResult& HitResult;
	}; StopSimulating_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	HitResult = Params.HitResult;

}

// Function Engine.InterpToMovementComponent.RestartMovement
inline void UInterpToMovementComponent::RestartMovement(float InitialDirection) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpToMovementComponent.RestartMovement");

	struct RestartMovement_Params {
		float InitialDirection;
	}; RestartMovement_Params Params;

	Params.InitialDirection = InitialDirection;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitEndDelegate__DelegateSignature
inline void UInterpToMovementComponent::OnInterpToWaitEndDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time) {
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitEndDelegate__DelegateSignature");

	struct OnInterpToWaitEndDelegate__DelegateSignature_Params {
		struct FHitResult& ImpactResult;
		float Time;
	}; OnInterpToWaitEndDelegate__DelegateSignature_Params Params;

	Params.Time = Time;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	ImpactResult = Params.ImpactResult;

}

// DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitBeginDelegate__DelegateSignature
inline void UInterpToMovementComponent::OnInterpToWaitBeginDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time) {
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitBeginDelegate__DelegateSignature");

	struct OnInterpToWaitBeginDelegate__DelegateSignature_Params {
		struct FHitResult& ImpactResult;
		float Time;
	}; OnInterpToWaitBeginDelegate__DelegateSignature_Params Params;

	Params.Time = Time;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	ImpactResult = Params.ImpactResult;

}

// DelegateFunction Engine.InterpToMovementComponent.OnInterpToStopDelegate__DelegateSignature
inline void UInterpToMovementComponent::OnInterpToStopDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time) {
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.InterpToMovementComponent.OnInterpToStopDelegate__DelegateSignature");

	struct OnInterpToStopDelegate__DelegateSignature_Params {
		struct FHitResult& ImpactResult;
		float Time;
	}; OnInterpToStopDelegate__DelegateSignature_Params Params;

	Params.Time = Time;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	ImpactResult = Params.ImpactResult;

}

// DelegateFunction Engine.InterpToMovementComponent.OnInterpToReverseDelegate__DelegateSignature
inline void UInterpToMovementComponent::OnInterpToReverseDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time) {
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.InterpToMovementComponent.OnInterpToReverseDelegate__DelegateSignature");

	struct OnInterpToReverseDelegate__DelegateSignature_Params {
		struct FHitResult& ImpactResult;
		float Time;
	}; OnInterpToReverseDelegate__DelegateSignature_Params Params;

	Params.Time = Time;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	ImpactResult = Params.ImpactResult;

}

// DelegateFunction Engine.InterpToMovementComponent.OnInterpToResetDelegate__DelegateSignature
inline void UInterpToMovementComponent::OnInterpToResetDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time) {
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.InterpToMovementComponent.OnInterpToResetDelegate__DelegateSignature");

	struct OnInterpToResetDelegate__DelegateSignature_Params {
		struct FHitResult& ImpactResult;
		float Time;
	}; OnInterpToResetDelegate__DelegateSignature_Params Params;

	Params.Time = Time;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	ImpactResult = Params.ImpactResult;

}

// Function Engine.InterpToMovementComponent.FinaliseControlPoints
inline void UInterpToMovementComponent::FinaliseControlPoints() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpToMovementComponent.FinaliseControlPoints");

	struct FinaliseControlPoints_Params {
		
	}; FinaliseControlPoints_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LevelScriptActor.WorldOriginLocationChanged
inline void ALevelScriptActor::WorldOriginLocationChanged(struct FIntVector OldOriginLocation, struct FIntVector NewOriginLocation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelScriptActor.WorldOriginLocationChanged");

	struct WorldOriginLocationChanged_Params {
		struct FIntVector OldOriginLocation;
		struct FIntVector NewOriginLocation;
	}; WorldOriginLocationChanged_Params Params;

	Params.OldOriginLocation = OldOriginLocation;
	Params.NewOriginLocation = NewOriginLocation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LevelScriptActor.SetCinematicMode
inline void ALevelScriptActor::SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelScriptActor.SetCinematicMode");

	struct SetCinematicMode_Params {
		bool bCinematicMode;
		bool bHidePlayer;
		bool bAffectsHUD;
		bool bAffectsMovement;
		bool bAffectsTurning;
	}; SetCinematicMode_Params Params;

	Params.bCinematicMode = bCinematicMode;
	Params.bHidePlayer = bHidePlayer;
	Params.bAffectsHUD = bAffectsHUD;
	Params.bAffectsMovement = bAffectsMovement;
	Params.bAffectsTurning = bAffectsTurning;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LevelScriptActor.RemoteEvent
inline bool ALevelScriptActor::RemoteEvent(struct FName EventName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelScriptActor.RemoteEvent");

	struct RemoteEvent_Params {
		struct FName EventName;
		bool ReturnValue;

	}; RemoteEvent_Params Params;

	Params.EventName = EventName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.LevelScriptActor.LevelReset
inline void ALevelScriptActor::LevelReset() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelScriptActor.LevelReset");

	struct LevelReset_Params {
		
	}; LevelReset_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LevelStreaming.ShouldBeLoaded
inline bool ULevelStreaming::ShouldBeLoaded() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.ShouldBeLoaded");

	struct ShouldBeLoaded_Params {
		
		bool ReturnValue;

	}; ShouldBeLoaded_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.LevelStreaming.SetShouldBeVisible
inline void ULevelStreaming::SetShouldBeVisible(bool bInShouldBeVisible) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.SetShouldBeVisible");

	struct SetShouldBeVisible_Params {
		bool bInShouldBeVisible;
	}; SetShouldBeVisible_Params Params;

	Params.bInShouldBeVisible = bInShouldBeVisible;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LevelStreaming.SetShouldBeLoaded
inline void ULevelStreaming::SetShouldBeLoaded(bool bInShouldBeLoaded) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.SetShouldBeLoaded");

	struct SetShouldBeLoaded_Params {
		bool bInShouldBeLoaded;
	}; SetShouldBeLoaded_Params Params;

	Params.bInShouldBeLoaded = bInShouldBeLoaded;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LevelStreaming.SetPriority
inline void ULevelStreaming::SetPriority(int32_t NewPriority) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.SetPriority");

	struct SetPriority_Params {
		int32_t NewPriority;
	}; SetPriority_Params Params;

	Params.NewPriority = NewPriority;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LevelStreaming.SetLevelLODIndex
inline void ULevelStreaming::SetLevelLODIndex(int32_t LODIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.SetLevelLODIndex");

	struct SetLevelLODIndex_Params {
		int32_t LODIndex;
	}; SetLevelLODIndex_Params Params;

	Params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LevelStreaming.IsStreamingStatePending
inline bool ULevelStreaming::IsStreamingStatePending() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.IsStreamingStatePending");

	struct IsStreamingStatePending_Params {
		
		bool ReturnValue;

	}; IsStreamingStatePending_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.LevelStreaming.IsLevelVisible
inline bool ULevelStreaming::IsLevelVisible() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.IsLevelVisible");

	struct IsLevelVisible_Params {
		
		bool ReturnValue;

	}; IsLevelVisible_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.LevelStreaming.IsLevelLoaded
inline bool ULevelStreaming::IsLevelLoaded() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.IsLevelLoaded");

	struct IsLevelLoaded_Params {
		
		bool ReturnValue;

	}; IsLevelLoaded_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.LevelStreaming.GetWorldAssetPackageFName
inline struct FName ULevelStreaming::GetWorldAssetPackageFName() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.GetWorldAssetPackageFName");

	struct GetWorldAssetPackageFName_Params {
		
		struct FName ReturnValue;

	}; GetWorldAssetPackageFName_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.LevelStreaming.GetLoadedLevel
inline struct ULevel ULevelStreaming::GetLoadedLevel() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.GetLoadedLevel");

	struct GetLoadedLevel_Params {
		
		struct ULevel ReturnValue;

	}; GetLoadedLevel_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.LevelStreaming.GetLevelScriptActor
inline struct ALevelScriptActor ULevelStreaming::GetLevelScriptActor() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.GetLevelScriptActor");

	struct GetLevelScriptActor_Params {
		
		struct ALevelScriptActor ReturnValue;

	}; GetLevelScriptActor_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.LevelStreaming.CreateInstance
inline struct ULevelStreaming ULevelStreaming::CreateInstance(struct FString UniqueInstanceName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.CreateInstance");

	struct CreateInstance_Params {
		struct FString UniqueInstanceName;
		struct ULevelStreaming ReturnValue;

	}; CreateInstance_Params Params;

	Params.UniqueInstanceName = UniqueInstanceName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.LevelStreamingDynamic.LoadLevelInstanceBySoftObjectPtr
inline struct ULevelStreamingDynamic ULevelStreamingDynamic::LoadLevelInstanceBySoftObjectPtr(struct Object WorldContextObject, struct TSoftObjectPtr<UWorld> Level, struct FVector Location, struct FRotator Rotation, bool& bOutSuccess) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreamingDynamic.LoadLevelInstanceBySoftObjectPtr");

	struct LoadLevelInstanceBySoftObjectPtr_Params {
		struct Object WorldContextObject;
		struct TSoftObjectPtr<UWorld> Level;
		struct FVector Location;
		struct FRotator Rotation;
		bool& bOutSuccess;
		struct ULevelStreamingDynamic ReturnValue;

	}; LoadLevelInstanceBySoftObjectPtr_Params Params;

	Params.WorldContextObject = WorldContextObject;
	Params.Level = Level;
	Params.Location = Location;
	Params.Rotation = Rotation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	bOutSuccess = Params.bOutSuccess;


	return params.ReturnValue;
}

// Function Engine.LevelStreamingDynamic.LoadLevelInstance
inline struct ULevelStreamingDynamic ULevelStreamingDynamic::LoadLevelInstance(struct Object WorldContextObject, struct FString LevelName, struct FVector Location, struct FRotator Rotation, bool& bOutSuccess) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreamingDynamic.LoadLevelInstance");

	struct LoadLevelInstance_Params {
		struct Object WorldContextObject;
		struct FString LevelName;
		struct FVector Location;
		struct FRotator Rotation;
		bool& bOutSuccess;
		struct ULevelStreamingDynamic ReturnValue;

	}; LoadLevelInstance_Params Params;

	Params.WorldContextObject = WorldContextObject;
	Params.LevelName = LevelName;
	Params.Location = Location;
	Params.Rotation = Rotation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	bOutSuccess = Params.bOutSuccess;


	return params.ReturnValue;
}

// Function Engine.LocalLightComponent.SetIntensityUnits
inline void ULocalLightComponent::SetIntensityUnits(enum class ELightUnits NewIntensityUnits) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalLightComponent.SetIntensityUnits");

	struct SetIntensityUnits_Params {
		enum class ELightUnits NewIntensityUnits;
	}; SetIntensityUnits_Params Params;

	Params.NewIntensityUnits = NewIntensityUnits;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LocalLightComponent.SetAttenuationRadius
inline void ULocalLightComponent::SetAttenuationRadius(float NewRadius) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalLightComponent.SetAttenuationRadius");

	struct SetAttenuationRadius_Params {
		float NewRadius;
	}; SetAttenuationRadius_Params Params;

	Params.NewRadius = NewRadius;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LocalLightComponent.GetUnitsConversionFactor
inline float ULocalLightComponent::GetUnitsConversionFactor(enum class ELightUnits SrcUnits, enum class ELightUnits TargetUnits, float CosHalfConeAngle) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalLightComponent.GetUnitsConversionFactor");

	struct GetUnitsConversionFactor_Params {
		enum class ELightUnits SrcUnits;
		enum class ELightUnits TargetUnits;
		float CosHalfConeAngle;
		float ReturnValue;

	}; GetUnitsConversionFactor_Params Params;

	Params.SrcUnits = SrcUnits;
	Params.TargetUnits = TargetUnits;
	Params.CosHalfConeAngle = CosHalfConeAngle;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MaterialBillboardComponent.SetElements
inline void UMaterialBillboardComponent::SetElements(struct TArray<struct FMaterialSpriteElement>& NewElements) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialBillboardComponent.SetElements");

	struct SetElements_Params {
		struct TArray<struct FMaterialSpriteElement>& NewElements;
	}; SetElements_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewElements = Params.NewElements;

}

// Function Engine.MaterialBillboardComponent.AddElement
inline void UMaterialBillboardComponent::AddElement(struct UMaterialInterface Material, struct UCurveFloat DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, struct UCurveFloat DistanceToSizeCurve) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialBillboardComponent.AddElement");

	struct AddElement_Params {
		struct UMaterialInterface Material;
		struct UCurveFloat DistanceToOpacityCurve;
		bool bSizeIsInScreenSpace;
		float BaseSizeX;
		float BaseSizeY;
		struct UCurveFloat DistanceToSizeCurve;
	}; AddElement_Params Params;

	Params.Material = Material;
	Params.DistanceToOpacityCurve = DistanceToOpacityCurve;
	Params.bSizeIsInScreenSpace = bSizeIsInScreenSpace;
	Params.BaseSizeX = BaseSizeX;
	Params.BaseSizeY = BaseSizeY;
	Params.DistanceToSizeCurve = DistanceToSizeCurve;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MatineeActor.Stop
inline void AMatineeActor::Stop() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.Stop");

	struct Stop_Params {
		
	}; Stop_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MatineeActor.SetPosition
inline void AMatineeActor::SetPosition(float NewPosition, bool bJump) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.SetPosition");

	struct SetPosition_Params {
		float NewPosition;
		bool bJump;
	}; SetPosition_Params Params;

	Params.NewPosition = NewPosition;
	Params.bJump = bJump;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MatineeActor.SetLoopingState
inline void AMatineeActor::SetLoopingState(bool bNewLooping) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.SetLoopingState");

	struct SetLoopingState_Params {
		bool bNewLooping;
	}; SetLoopingState_Params Params;

	Params.bNewLooping = bNewLooping;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MatineeActor.Reverse
inline void AMatineeActor::Reverse() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.Reverse");

	struct Reverse_Params {
		
	}; Reverse_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MatineeActor.Play
inline void AMatineeActor::Play() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.Play");

	struct Play_Params {
		
	}; Play_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MatineeActor.Pause
inline void AMatineeActor::Pause() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.Pause");

	struct Pause_Params {
		
	}; Pause_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MatineeActor.EnableGroupByName
inline void AMatineeActor::EnableGroupByName(struct FString GroupName, bool bEnable) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.EnableGroupByName");

	struct EnableGroupByName_Params {
		struct FString GroupName;
		bool bEnable;
	}; EnableGroupByName_Params Params;

	Params.GroupName = GroupName;
	Params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MatineeActor.ChangePlaybackDirection
inline void AMatineeActor::ChangePlaybackDirection() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.ChangePlaybackDirection");

	struct ChangePlaybackDirection_Params {
		
	}; ChangePlaybackDirection_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ParticleSystem.ContainsEmitterType
inline bool UParticleSystem::ContainsEmitterType(struct UClass* TypeData) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystem.ContainsEmitterType");

	struct ContainsEmitterType_Params {
		struct UClass* TypeData;
		bool ReturnValue;

	}; ContainsEmitterType_Params Params;

	Params.TypeData = TypeData;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.ParticleSystemComponent.SetTrailSourceData
inline void UParticleSystemComponent::SetTrailSourceData(struct FName InFirstSocketName, struct FName InSecondSocketName, enum class ETrailWidthMode InWidthMode, float InWidth) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetTrailSourceData");

	struct SetTrailSourceData_Params {
		struct FName InFirstSocketName;
		struct FName InSecondSocketName;
		enum class ETrailWidthMode InWidthMode;
		float InWidth;
	}; SetTrailSourceData_Params Params;

	Params.InFirstSocketName = InFirstSocketName;
	Params.InSecondSocketName = InSecondSocketName;
	Params.InWidthMode = InWidthMode;
	Params.InWidth = InWidth;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ParticleSystemComponent.SetTemplate
inline void UParticleSystemComponent::SetTemplate(struct UParticleSystem NewTemplate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetTemplate");

	struct SetTemplate_Params {
		struct UParticleSystem NewTemplate;
	}; SetTemplate_Params Params;

	Params.NewTemplate = NewTemplate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ParticleSystemComponent.SetMaterialParameter
inline void UParticleSystemComponent::SetMaterialParameter(struct FName ParameterName, struct UMaterialInterface Param) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetMaterialParameter");

	struct SetMaterialParameter_Params {
		struct FName ParameterName;
		struct UMaterialInterface Param;
	}; SetMaterialParameter_Params Params;

	Params.ParameterName = ParameterName;
	Params.Param = Param;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ParticleSystemComponent.SetBeamTargetTangent
inline void UParticleSystemComponent::SetBeamTargetTangent(int32_t EmitterIndex, struct FVector NewTangentPoint, int32_t TargetIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamTargetTangent");

	struct SetBeamTargetTangent_Params {
		int32_t EmitterIndex;
		struct FVector NewTangentPoint;
		int32_t TargetIndex;
	}; SetBeamTargetTangent_Params Params;

	Params.EmitterIndex = EmitterIndex;
	Params.NewTangentPoint = NewTangentPoint;
	Params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ParticleSystemComponent.SetBeamTargetStrength
inline void UParticleSystemComponent::SetBeamTargetStrength(int32_t EmitterIndex, float NewTargetStrength, int32_t TargetIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamTargetStrength");

	struct SetBeamTargetStrength_Params {
		int32_t EmitterIndex;
		float NewTargetStrength;
		int32_t TargetIndex;
	}; SetBeamTargetStrength_Params Params;

	Params.EmitterIndex = EmitterIndex;
	Params.NewTargetStrength = NewTargetStrength;
	Params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ParticleSystemComponent.SetBeamTargetPoint
inline void UParticleSystemComponent::SetBeamTargetPoint(int32_t EmitterIndex, struct FVector NewTargetPoint, int32_t TargetIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamTargetPoint");

	struct SetBeamTargetPoint_Params {
		int32_t EmitterIndex;
		struct FVector NewTargetPoint;
		int32_t TargetIndex;
	}; SetBeamTargetPoint_Params Params;

	Params.EmitterIndex = EmitterIndex;
	Params.NewTargetPoint = NewTargetPoint;
	Params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ParticleSystemComponent.SetBeamSourceTangent
inline void UParticleSystemComponent::SetBeamSourceTangent(int32_t EmitterIndex, struct FVector NewTangentPoint, int32_t SourceIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamSourceTangent");

	struct SetBeamSourceTangent_Params {
		int32_t EmitterIndex;
		struct FVector NewTangentPoint;
		int32_t SourceIndex;
	}; SetBeamSourceTangent_Params Params;

	Params.EmitterIndex = EmitterIndex;
	Params.NewTangentPoint = NewTangentPoint;
	Params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ParticleSystemComponent.SetBeamSourceStrength
inline void UParticleSystemComponent::SetBeamSourceStrength(int32_t EmitterIndex, float NewSourceStrength, int32_t SourceIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamSourceStrength");

	struct SetBeamSourceStrength_Params {
		int32_t EmitterIndex;
		float NewSourceStrength;
		int32_t SourceIndex;
	}; SetBeamSourceStrength_Params Params;

	Params.EmitterIndex = EmitterIndex;
	Params.NewSourceStrength = NewSourceStrength;
	Params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ParticleSystemComponent.SetBeamSourcePoint
inline void UParticleSystemComponent::SetBeamSourcePoint(int32_t EmitterIndex, struct FVector NewSourcePoint, int32_t SourceIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamSourcePoint");

	struct SetBeamSourcePoint_Params {
		int32_t EmitterIndex;
		struct FVector NewSourcePoint;
		int32_t SourceIndex;
	}; SetBeamSourcePoint_Params Params;

	Params.EmitterIndex = EmitterIndex;
	Params.NewSourcePoint = NewSourcePoint;
	Params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ParticleSystemComponent.SetBeamEndPoint
inline void UParticleSystemComponent::SetBeamEndPoint(int32_t EmitterIndex, struct FVector NewEndPoint) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamEndPoint");

	struct SetBeamEndPoint_Params {
		int32_t EmitterIndex;
		struct FVector NewEndPoint;
	}; SetBeamEndPoint_Params Params;

	Params.EmitterIndex = EmitterIndex;
	Params.NewEndPoint = NewEndPoint;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ParticleSystemComponent.SetAutoAttachParams
inline void UParticleSystemComponent::SetAutoAttachParams(struct USceneComponent Parent, struct FName SocketName, enum class EAttachLocation LocationType) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetAutoAttachParams");

	struct SetAutoAttachParams_Params {
		struct USceneComponent Parent;
		struct FName SocketName;
		enum class EAttachLocation LocationType;
	}; SetAutoAttachParams_Params Params;

	Params.Parent = Parent;
	Params.SocketName = SocketName;
	Params.LocationType = LocationType;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ParticleSystemComponent.GetNumActiveParticles
inline int32_t UParticleSystemComponent::GetNumActiveParticles() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetNumActiveParticles");

	struct GetNumActiveParticles_Params {
		
		int32_t ReturnValue;

	}; GetNumActiveParticles_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.ParticleSystemComponent.GetNamedMaterial
inline struct UMaterialInterface UParticleSystemComponent::GetNamedMaterial(struct FName InName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetNamedMaterial");

	struct GetNamedMaterial_Params {
		struct FName InName;
		struct UMaterialInterface ReturnValue;

	}; GetNamedMaterial_Params Params;

	Params.InName = InName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.ParticleSystemComponent.GetBeamTargetTangent
inline bool UParticleSystemComponent::GetBeamTargetTangent(int32_t EmitterIndex, int32_t TargetIndex, struct FVector& OutTangentPoint) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetBeamTargetTangent");

	struct GetBeamTargetTangent_Params {
		int32_t EmitterIndex;
		int32_t TargetIndex;
		struct FVector& OutTangentPoint;
		bool ReturnValue;

	}; GetBeamTargetTangent_Params Params;

	Params.EmitterIndex = EmitterIndex;
	Params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutTangentPoint = Params.OutTangentPoint;


	return params.ReturnValue;
}

// Function Engine.ParticleSystemComponent.GetBeamTargetStrength
inline bool UParticleSystemComponent::GetBeamTargetStrength(int32_t EmitterIndex, int32_t TargetIndex, float& OutTargetStrength) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetBeamTargetStrength");

	struct GetBeamTargetStrength_Params {
		int32_t EmitterIndex;
		int32_t TargetIndex;
		float& OutTargetStrength;
		bool ReturnValue;

	}; GetBeamTargetStrength_Params Params;

	Params.EmitterIndex = EmitterIndex;
	Params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutTargetStrength = Params.OutTargetStrength;


	return params.ReturnValue;
}

// Function Engine.ParticleSystemComponent.GetBeamTargetPoint
inline bool UParticleSystemComponent::GetBeamTargetPoint(int32_t EmitterIndex, int32_t TargetIndex, struct FVector& OutTargetPoint) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetBeamTargetPoint");

	struct GetBeamTargetPoint_Params {
		int32_t EmitterIndex;
		int32_t TargetIndex;
		struct FVector& OutTargetPoint;
		bool ReturnValue;

	}; GetBeamTargetPoint_Params Params;

	Params.EmitterIndex = EmitterIndex;
	Params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutTargetPoint = Params.OutTargetPoint;


	return params.ReturnValue;
}

// Function Engine.ParticleSystemComponent.GetBeamSourceTangent
inline bool UParticleSystemComponent::GetBeamSourceTangent(int32_t EmitterIndex, int32_t SourceIndex, struct FVector& OutTangentPoint) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetBeamSourceTangent");

	struct GetBeamSourceTangent_Params {
		int32_t EmitterIndex;
		int32_t SourceIndex;
		struct FVector& OutTangentPoint;
		bool ReturnValue;

	}; GetBeamSourceTangent_Params Params;

	Params.EmitterIndex = EmitterIndex;
	Params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutTangentPoint = Params.OutTangentPoint;


	return params.ReturnValue;
}

// Function Engine.ParticleSystemComponent.GetBeamSourceStrength
inline bool UParticleSystemComponent::GetBeamSourceStrength(int32_t EmitterIndex, int32_t SourceIndex, float& OutSourceStrength) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetBeamSourceStrength");

	struct GetBeamSourceStrength_Params {
		int32_t EmitterIndex;
		int32_t SourceIndex;
		float& OutSourceStrength;
		bool ReturnValue;

	}; GetBeamSourceStrength_Params Params;

	Params.EmitterIndex = EmitterIndex;
	Params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutSourceStrength = Params.OutSourceStrength;


	return params.ReturnValue;
}

// Function Engine.ParticleSystemComponent.GetBeamSourcePoint
inline bool UParticleSystemComponent::GetBeamSourcePoint(int32_t EmitterIndex, int32_t SourceIndex, struct FVector& OutSourcePoint) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetBeamSourcePoint");

	struct GetBeamSourcePoint_Params {
		int32_t EmitterIndex;
		int32_t SourceIndex;
		struct FVector& OutSourcePoint;
		bool ReturnValue;

	}; GetBeamSourcePoint_Params Params;

	Params.EmitterIndex = EmitterIndex;
	Params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutSourcePoint = Params.OutSourcePoint;


	return params.ReturnValue;
}

// Function Engine.ParticleSystemComponent.GetBeamEndPoint
inline bool UParticleSystemComponent::GetBeamEndPoint(int32_t EmitterIndex, struct FVector& OutEndPoint) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetBeamEndPoint");

	struct GetBeamEndPoint_Params {
		int32_t EmitterIndex;
		struct FVector& OutEndPoint;
		bool ReturnValue;

	}; GetBeamEndPoint_Params Params;

	Params.EmitterIndex = EmitterIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutEndPoint = Params.OutEndPoint;


	return params.ReturnValue;
}

// Function Engine.ParticleSystemComponent.GenerateParticleEvent
inline void UParticleSystemComponent::GenerateParticleEvent(struct FName InEventName, float InEmitterTime, struct FVector InLocation, struct FVector InDirection, struct FVector InVelocity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GenerateParticleEvent");

	struct GenerateParticleEvent_Params {
		struct FName InEventName;
		float InEmitterTime;
		struct FVector InLocation;
		struct FVector InDirection;
		struct FVector InVelocity;
	}; GenerateParticleEvent_Params Params;

	Params.InEventName = InEventName;
	Params.InEmitterTime = InEmitterTime;
	Params.InLocation = InLocation;
	Params.InDirection = InDirection;
	Params.InVelocity = InVelocity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ParticleSystemComponent.EndTrails
inline void UParticleSystemComponent::EndTrails() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.EndTrails");

	struct EndTrails_Params {
		
	}; EndTrails_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ParticleSystemComponent.CreateNamedDynamicMaterialInstance
inline struct UMaterialInstanceDynamic UParticleSystemComponent::CreateNamedDynamicMaterialInstance(struct FName InName, struct UMaterialInterface SourceMaterial) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.CreateNamedDynamicMaterialInstance");

	struct CreateNamedDynamicMaterialInstance_Params {
		struct FName InName;
		struct UMaterialInterface SourceMaterial;
		struct UMaterialInstanceDynamic ReturnValue;

	}; CreateNamedDynamicMaterialInstance_Params Params;

	Params.InName = InName;
	Params.SourceMaterial = SourceMaterial;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.ParticleSystemComponent.BeginTrails
inline void UParticleSystemComponent::BeginTrails(struct FName InFirstSocketName, struct FName InSecondSocketName, enum class ETrailWidthMode InWidthMode, float InWidth) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.BeginTrails");

	struct BeginTrails_Params {
		struct FName InFirstSocketName;
		struct FName InSecondSocketName;
		enum class ETrailWidthMode InWidthMode;
		float InWidth;
	}; BeginTrails_Params Params;

	Params.InFirstSocketName = InFirstSocketName;
	Params.InSecondSocketName = InSecondSocketName;
	Params.InWidthMode = InWidthMode;
	Params.InWidth = InWidth;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PawnNoiseEmitterComponent.MakeNoise
inline void UPawnNoiseEmitterComponent::MakeNoise(struct UActor NoiseMaker, float Loudness, struct FVector& NoiseLocation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PawnNoiseEmitterComponent.MakeNoise");

	struct MakeNoise_Params {
		struct UActor NoiseMaker;
		float Loudness;
		struct FVector& NoiseLocation;
	}; MakeNoise_Params Params;

	Params.NoiseMaker = NoiseMaker;
	Params.Loudness = Loudness;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NoiseLocation = Params.NoiseLocation;

}

// Function Engine.PhysicalAnimationComponent.SetStrengthMultiplyer
inline void UPhysicalAnimationComponent::SetStrengthMultiplyer(float InStrengthMultiplyer) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicalAnimationComponent.SetStrengthMultiplyer");

	struct SetStrengthMultiplyer_Params {
		float InStrengthMultiplyer;
	}; SetStrengthMultiplyer_Params Params;

	Params.InStrengthMultiplyer = InStrengthMultiplyer;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicalAnimationComponent.SetSkeletalMeshComponent
inline void UPhysicalAnimationComponent::SetSkeletalMeshComponent(struct USkeletalMeshComponent InSkeletalMeshComponent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicalAnimationComponent.SetSkeletalMeshComponent");

	struct SetSkeletalMeshComponent_Params {
		struct USkeletalMeshComponent InSkeletalMeshComponent;
	}; SetSkeletalMeshComponent_Params Params;

	Params.InSkeletalMeshComponent = InSkeletalMeshComponent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicalAnimationComponent.GetBodyTargetTransform
inline struct FTransform UPhysicalAnimationComponent::GetBodyTargetTransform(struct FName BodyName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicalAnimationComponent.GetBodyTargetTransform");

	struct GetBodyTargetTransform_Params {
		struct FName BodyName;
		struct FTransform ReturnValue;

	}; GetBodyTargetTransform_Params Params;

	Params.BodyName = BodyName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettingsBelow
inline void UPhysicalAnimationComponent::ApplyPhysicalAnimationSettingsBelow(struct FName BodyName, struct FPhysicalAnimationData& PhysicalAnimationData, bool bIncludeSelf) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettingsBelow");

	struct ApplyPhysicalAnimationSettingsBelow_Params {
		struct FName BodyName;
		struct FPhysicalAnimationData& PhysicalAnimationData;
		bool bIncludeSelf;
	}; ApplyPhysicalAnimationSettingsBelow_Params Params;

	Params.BodyName = BodyName;
	Params.bIncludeSelf = bIncludeSelf;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	PhysicalAnimationData = Params.PhysicalAnimationData;

}

// Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettings
inline void UPhysicalAnimationComponent::ApplyPhysicalAnimationSettings(struct FName BodyName, struct FPhysicalAnimationData& PhysicalAnimationData) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettings");

	struct ApplyPhysicalAnimationSettings_Params {
		struct FName BodyName;
		struct FPhysicalAnimationData& PhysicalAnimationData;
	}; ApplyPhysicalAnimationSettings_Params Params;

	Params.BodyName = BodyName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	PhysicalAnimationData = Params.PhysicalAnimationData;

}

// Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationProfileBelow
inline void UPhysicalAnimationComponent::ApplyPhysicalAnimationProfileBelow(struct FName BodyName, struct FName ProfileName, bool bIncludeSelf, bool bClearNotFound) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationProfileBelow");

	struct ApplyPhysicalAnimationProfileBelow_Params {
		struct FName BodyName;
		struct FName ProfileName;
		bool bIncludeSelf;
		bool bClearNotFound;
	}; ApplyPhysicalAnimationProfileBelow_Params Params;

	Params.BodyName = BodyName;
	Params.ProfileName = ProfileName;
	Params.bIncludeSelf = bIncludeSelf;
	Params.bClearNotFound = bClearNotFound;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetOrientationDriveTwistAndSwing
inline void UPhysicsConstraintComponent::SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetOrientationDriveTwistAndSwing");

	struct SetOrientationDriveTwistAndSwing_Params {
		bool bEnableTwistDrive;
		bool bEnableSwingDrive;
	}; SetOrientationDriveTwistAndSwing_Params Params;

	Params.bEnableTwistDrive = bEnableTwistDrive;
	Params.bEnableSwingDrive = bEnableSwingDrive;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetOrientationDriveSLERP
inline void UPhysicsConstraintComponent::SetOrientationDriveSLERP(bool bEnableSLERP) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetOrientationDriveSLERP");

	struct SetOrientationDriveSLERP_Params {
		bool bEnableSLERP;
	}; SetOrientationDriveSLERP_Params Params;

	Params.bEnableSLERP = bEnableSLERP;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetLinearZLimit
inline void UPhysicsConstraintComponent::SetLinearZLimit(enum class ELinearConstraintMotion ConstraintType, float LimitSize) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearZLimit");

	struct SetLinearZLimit_Params {
		enum class ELinearConstraintMotion ConstraintType;
		float LimitSize;
	}; SetLinearZLimit_Params Params;

	Params.ConstraintType = ConstraintType;
	Params.LimitSize = LimitSize;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetLinearYLimit
inline void UPhysicsConstraintComponent::SetLinearYLimit(enum class ELinearConstraintMotion ConstraintType, float LimitSize) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearYLimit");

	struct SetLinearYLimit_Params {
		enum class ELinearConstraintMotion ConstraintType;
		float LimitSize;
	}; SetLinearYLimit_Params Params;

	Params.ConstraintType = ConstraintType;
	Params.LimitSize = LimitSize;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetLinearXLimit
inline void UPhysicsConstraintComponent::SetLinearXLimit(enum class ELinearConstraintMotion ConstraintType, float LimitSize) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearXLimit");

	struct SetLinearXLimit_Params {
		enum class ELinearConstraintMotion ConstraintType;
		float LimitSize;
	}; SetLinearXLimit_Params Params;

	Params.ConstraintType = ConstraintType;
	Params.LimitSize = LimitSize;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetLinearVelocityTarget
inline void UPhysicsConstraintComponent::SetLinearVelocityTarget(struct FVector& InVelTarget) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearVelocityTarget");

	struct SetLinearVelocityTarget_Params {
		struct FVector& InVelTarget;
	}; SetLinearVelocityTarget_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InVelTarget = Params.InVelTarget;

}

// Function Engine.PhysicsConstraintComponent.SetLinearVelocityDrive
inline void UPhysicsConstraintComponent::SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearVelocityDrive");

	struct SetLinearVelocityDrive_Params {
		bool bEnableDriveX;
		bool bEnableDriveY;
		bool bEnableDriveZ;
	}; SetLinearVelocityDrive_Params Params;

	Params.bEnableDriveX = bEnableDriveX;
	Params.bEnableDriveY = bEnableDriveY;
	Params.bEnableDriveZ = bEnableDriveZ;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetLinearPositionTarget
inline void UPhysicsConstraintComponent::SetLinearPositionTarget(struct FVector& InPosTarget) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearPositionTarget");

	struct SetLinearPositionTarget_Params {
		struct FVector& InPosTarget;
	}; SetLinearPositionTarget_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InPosTarget = Params.InPosTarget;

}

// Function Engine.PhysicsConstraintComponent.SetLinearPositionDrive
inline void UPhysicsConstraintComponent::SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearPositionDrive");

	struct SetLinearPositionDrive_Params {
		bool bEnableDriveX;
		bool bEnableDriveY;
		bool bEnableDriveZ;
	}; SetLinearPositionDrive_Params Params;

	Params.bEnableDriveX = bEnableDriveX;
	Params.bEnableDriveY = bEnableDriveY;
	Params.bEnableDriveZ = bEnableDriveZ;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetLinearDriveParams
inline void UPhysicsConstraintComponent::SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearDriveParams");

	struct SetLinearDriveParams_Params {
		float PositionStrength;
		float VelocityStrength;
		float InForceLimit;
	}; SetLinearDriveParams_Params Params;

	Params.PositionStrength = PositionStrength;
	Params.VelocityStrength = VelocityStrength;
	Params.InForceLimit = InForceLimit;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetLinearBreakable
inline void UPhysicsConstraintComponent::SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearBreakable");

	struct SetLinearBreakable_Params {
		bool bLinearBreakable;
		float LinearBreakThreshold;
	}; SetLinearBreakable_Params Params;

	Params.bLinearBreakable = bLinearBreakable;
	Params.LinearBreakThreshold = LinearBreakThreshold;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetDisableCollision
inline void UPhysicsConstraintComponent::SetDisableCollision(bool bDisableCollision) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetDisableCollision");

	struct SetDisableCollision_Params {
		bool bDisableCollision;
	}; SetDisableCollision_Params Params;

	Params.bDisableCollision = bDisableCollision;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetConstraintReferencePosition
inline void UPhysicsConstraintComponent::SetConstraintReferencePosition(enum class EConstraintFrame Frame, struct FVector& RefPosition) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetConstraintReferencePosition");

	struct SetConstraintReferencePosition_Params {
		enum class EConstraintFrame Frame;
		struct FVector& RefPosition;
	}; SetConstraintReferencePosition_Params Params;

	Params.Frame = Frame;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	RefPosition = Params.RefPosition;

}

// Function Engine.PhysicsConstraintComponent.SetConstraintReferenceOrientation
inline void UPhysicsConstraintComponent::SetConstraintReferenceOrientation(enum class EConstraintFrame Frame, struct FVector& PriAxis, struct FVector& SecAxis) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetConstraintReferenceOrientation");

	struct SetConstraintReferenceOrientation_Params {
		enum class EConstraintFrame Frame;
		struct FVector& PriAxis;
		struct FVector& SecAxis;
	}; SetConstraintReferenceOrientation_Params Params;

	Params.Frame = Frame;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	PriAxis = Params.PriAxis;
	SecAxis = Params.SecAxis;

}

// Function Engine.PhysicsConstraintComponent.SetConstraintReferenceFrame
inline void UPhysicsConstraintComponent::SetConstraintReferenceFrame(enum class EConstraintFrame Frame, struct FTransform& RefFrame) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetConstraintReferenceFrame");

	struct SetConstraintReferenceFrame_Params {
		enum class EConstraintFrame Frame;
		struct FTransform& RefFrame;
	}; SetConstraintReferenceFrame_Params Params;

	Params.Frame = Frame;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	RefFrame = Params.RefFrame;

}

// Function Engine.PhysicsConstraintComponent.SetConstrainedComponents
inline void UPhysicsConstraintComponent::SetConstrainedComponents(struct UPrimitiveComponent Component1, struct FName BoneName1, struct UPrimitiveComponent Component2, struct FName BoneName2) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetConstrainedComponents");

	struct SetConstrainedComponents_Params {
		struct UPrimitiveComponent Component1;
		struct FName BoneName1;
		struct UPrimitiveComponent Component2;
		struct FName BoneName2;
	}; SetConstrainedComponents_Params Params;

	Params.Component1 = Component1;
	Params.BoneName1 = BoneName1;
	Params.Component2 = Component2;
	Params.BoneName2 = BoneName2;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetAngularVelocityTarget
inline void UPhysicsConstraintComponent::SetAngularVelocityTarget(struct FVector& InVelTarget) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularVelocityTarget");

	struct SetAngularVelocityTarget_Params {
		struct FVector& InVelTarget;
	}; SetAngularVelocityTarget_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InVelTarget = Params.InVelTarget;

}

// Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveTwistAndSwing
inline void UPhysicsConstraintComponent::SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveTwistAndSwing");

	struct SetAngularVelocityDriveTwistAndSwing_Params {
		bool bEnableTwistDrive;
		bool bEnableSwingDrive;
	}; SetAngularVelocityDriveTwistAndSwing_Params Params;

	Params.bEnableTwistDrive = bEnableTwistDrive;
	Params.bEnableSwingDrive = bEnableSwingDrive;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveSLERP
inline void UPhysicsConstraintComponent::SetAngularVelocityDriveSLERP(bool bEnableSLERP) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveSLERP");

	struct SetAngularVelocityDriveSLERP_Params {
		bool bEnableSLERP;
	}; SetAngularVelocityDriveSLERP_Params Params;

	Params.bEnableSLERP = bEnableSLERP;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetAngularVelocityDrive
inline void UPhysicsConstraintComponent::SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularVelocityDrive");

	struct SetAngularVelocityDrive_Params {
		bool bEnableSwingDrive;
		bool bEnableTwistDrive;
	}; SetAngularVelocityDrive_Params Params;

	Params.bEnableSwingDrive = bEnableSwingDrive;
	Params.bEnableTwistDrive = bEnableTwistDrive;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetAngularTwistLimit
inline void UPhysicsConstraintComponent::SetAngularTwistLimit(enum class EAngularConstraintMotion ConstraintType, float TwistLimitAngle) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularTwistLimit");

	struct SetAngularTwistLimit_Params {
		enum class EAngularConstraintMotion ConstraintType;
		float TwistLimitAngle;
	}; SetAngularTwistLimit_Params Params;

	Params.ConstraintType = ConstraintType;
	Params.TwistLimitAngle = TwistLimitAngle;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetAngularSwing2Limit
inline void UPhysicsConstraintComponent::SetAngularSwing2Limit(enum class EAngularConstraintMotion MotionType, float Swing2LimitAngle) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularSwing2Limit");

	struct SetAngularSwing2Limit_Params {
		enum class EAngularConstraintMotion MotionType;
		float Swing2LimitAngle;
	}; SetAngularSwing2Limit_Params Params;

	Params.MotionType = MotionType;
	Params.Swing2LimitAngle = Swing2LimitAngle;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetAngularSwing1Limit
inline void UPhysicsConstraintComponent::SetAngularSwing1Limit(enum class EAngularConstraintMotion MotionType, float Swing1LimitAngle) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularSwing1Limit");

	struct SetAngularSwing1Limit_Params {
		enum class EAngularConstraintMotion MotionType;
		float Swing1LimitAngle;
	}; SetAngularSwing1Limit_Params Params;

	Params.MotionType = MotionType;
	Params.Swing1LimitAngle = Swing1LimitAngle;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetAngularOrientationTarget
inline void UPhysicsConstraintComponent::SetAngularOrientationTarget(struct FRotator& InPosTarget) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularOrientationTarget");

	struct SetAngularOrientationTarget_Params {
		struct FRotator& InPosTarget;
	}; SetAngularOrientationTarget_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InPosTarget = Params.InPosTarget;

}

// Function Engine.PhysicsConstraintComponent.SetAngularOrientationDrive
inline void UPhysicsConstraintComponent::SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularOrientationDrive");

	struct SetAngularOrientationDrive_Params {
		bool bEnableSwingDrive;
		bool bEnableTwistDrive;
	}; SetAngularOrientationDrive_Params Params;

	Params.bEnableSwingDrive = bEnableSwingDrive;
	Params.bEnableTwistDrive = bEnableTwistDrive;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetAngularDriveParams
inline void UPhysicsConstraintComponent::SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularDriveParams");

	struct SetAngularDriveParams_Params {
		float PositionStrength;
		float VelocityStrength;
		float InForceLimit;
	}; SetAngularDriveParams_Params Params;

	Params.PositionStrength = PositionStrength;
	Params.VelocityStrength = VelocityStrength;
	Params.InForceLimit = InForceLimit;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetAngularDriveMode
inline void UPhysicsConstraintComponent::SetAngularDriveMode(enum class EAngularDriveMode DriveMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularDriveMode");

	struct SetAngularDriveMode_Params {
		enum class EAngularDriveMode DriveMode;
	}; SetAngularDriveMode_Params Params;

	Params.DriveMode = DriveMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetAngularBreakable
inline void UPhysicsConstraintComponent::SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularBreakable");

	struct SetAngularBreakable_Params {
		bool bAngularBreakable;
		float AngularBreakThreshold;
	}; SetAngularBreakable_Params Params;

	Params.bAngularBreakable = bAngularBreakable;
	Params.AngularBreakThreshold = AngularBreakThreshold;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.IsBroken
inline bool UPhysicsConstraintComponent::IsBroken() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.IsBroken");

	struct IsBroken_Params {
		
		bool ReturnValue;

	}; IsBroken_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PhysicsConstraintComponent.GetCurrentTwist
inline float UPhysicsConstraintComponent::GetCurrentTwist() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.GetCurrentTwist");

	struct GetCurrentTwist_Params {
		
		float ReturnValue;

	}; GetCurrentTwist_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PhysicsConstraintComponent.GetCurrentSwing2
inline float UPhysicsConstraintComponent::GetCurrentSwing2() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.GetCurrentSwing2");

	struct GetCurrentSwing2_Params {
		
		float ReturnValue;

	}; GetCurrentSwing2_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PhysicsConstraintComponent.GetCurrentSwing1
inline float UPhysicsConstraintComponent::GetCurrentSwing1() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.GetCurrentSwing1");

	struct GetCurrentSwing1_Params {
		
		float ReturnValue;

	}; GetCurrentSwing1_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PhysicsConstraintComponent.GetConstraintForce
inline void UPhysicsConstraintComponent::GetConstraintForce(struct FVector& OutLinearForce, struct FVector& OutAngularForce) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.GetConstraintForce");

	struct GetConstraintForce_Params {
		struct FVector& OutLinearForce;
		struct FVector& OutAngularForce;
	}; GetConstraintForce_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutLinearForce = Params.OutLinearForce;
	OutAngularForce = Params.OutAngularForce;

}

// Function Engine.PhysicsConstraintComponent.BreakConstraint
inline void UPhysicsConstraintComponent::BreakConstraint() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.BreakConstraint");

	struct BreakConstraint_Params {
		
	}; BreakConstraint_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsHandleComponent.SetTargetRotation
inline void UPhysicsHandleComponent::SetTargetRotation(struct FRotator NewRotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.SetTargetRotation");

	struct SetTargetRotation_Params {
		struct FRotator NewRotation;
	}; SetTargetRotation_Params Params;

	Params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsHandleComponent.SetTargetLocationAndRotation
inline void UPhysicsHandleComponent::SetTargetLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.SetTargetLocationAndRotation");

	struct SetTargetLocationAndRotation_Params {
		struct FVector NewLocation;
		struct FRotator NewRotation;
	}; SetTargetLocationAndRotation_Params Params;

	Params.NewLocation = NewLocation;
	Params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsHandleComponent.SetTargetLocation
inline void UPhysicsHandleComponent::SetTargetLocation(struct FVector NewLocation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.SetTargetLocation");

	struct SetTargetLocation_Params {
		struct FVector NewLocation;
	}; SetTargetLocation_Params Params;

	Params.NewLocation = NewLocation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsHandleComponent.SetLinearStiffness
inline void UPhysicsHandleComponent::SetLinearStiffness(float NewLinearStiffness) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.SetLinearStiffness");

	struct SetLinearStiffness_Params {
		float NewLinearStiffness;
	}; SetLinearStiffness_Params Params;

	Params.NewLinearStiffness = NewLinearStiffness;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsHandleComponent.SetLinearDamping
inline void UPhysicsHandleComponent::SetLinearDamping(float NewLinearDamping) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.SetLinearDamping");

	struct SetLinearDamping_Params {
		float NewLinearDamping;
	}; SetLinearDamping_Params Params;

	Params.NewLinearDamping = NewLinearDamping;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsHandleComponent.SetInterpolationSpeed
inline void UPhysicsHandleComponent::SetInterpolationSpeed(float NewInterpolationSpeed) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.SetInterpolationSpeed");

	struct SetInterpolationSpeed_Params {
		float NewInterpolationSpeed;
	}; SetInterpolationSpeed_Params Params;

	Params.NewInterpolationSpeed = NewInterpolationSpeed;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsHandleComponent.SetAngularStiffness
inline void UPhysicsHandleComponent::SetAngularStiffness(float NewAngularStiffness) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.SetAngularStiffness");

	struct SetAngularStiffness_Params {
		float NewAngularStiffness;
	}; SetAngularStiffness_Params Params;

	Params.NewAngularStiffness = NewAngularStiffness;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsHandleComponent.SetAngularDamping
inline void UPhysicsHandleComponent::SetAngularDamping(float NewAngularDamping) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.SetAngularDamping");

	struct SetAngularDamping_Params {
		float NewAngularDamping;
	}; SetAngularDamping_Params Params;

	Params.NewAngularDamping = NewAngularDamping;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsHandleComponent.ReleaseComponent
inline void UPhysicsHandleComponent::ReleaseComponent() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.ReleaseComponent");

	struct ReleaseComponent_Params {
		
	}; ReleaseComponent_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsHandleComponent.GrabComponentAtLocationWithRotation
inline void UPhysicsHandleComponent::GrabComponentAtLocationWithRotation(struct UPrimitiveComponent Component, struct FName InBoneName, struct FVector Location, struct FRotator Rotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.GrabComponentAtLocationWithRotation");

	struct GrabComponentAtLocationWithRotation_Params {
		struct UPrimitiveComponent Component;
		struct FName InBoneName;
		struct FVector Location;
		struct FRotator Rotation;
	}; GrabComponentAtLocationWithRotation_Params Params;

	Params.Component = Component;
	Params.InBoneName = InBoneName;
	Params.Location = Location;
	Params.Rotation = Rotation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsHandleComponent.GrabComponentAtLocation
inline void UPhysicsHandleComponent::GrabComponentAtLocation(struct UPrimitiveComponent Component, struct FName InBoneName, struct FVector GrabLocation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.GrabComponentAtLocation");

	struct GrabComponentAtLocation_Params {
		struct UPrimitiveComponent Component;
		struct FName InBoneName;
		struct FVector GrabLocation;
	}; GrabComponentAtLocation_Params Params;

	Params.Component = Component;
	Params.InBoneName = InBoneName;
	Params.GrabLocation = GrabLocation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsHandleComponent.GrabComponent
inline void UPhysicsHandleComponent::GrabComponent(struct UPrimitiveComponent Component, struct FName InBoneName, struct FVector GrabLocation, bool bConstrainRotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.GrabComponent");

	struct GrabComponent_Params {
		struct UPrimitiveComponent Component;
		struct FName InBoneName;
		struct FVector GrabLocation;
		bool bConstrainRotation;
	}; GrabComponent_Params Params;

	Params.Component = Component;
	Params.InBoneName = InBoneName;
	Params.GrabLocation = GrabLocation;
	Params.bConstrainRotation = bConstrainRotation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsHandleComponent.GetTargetLocationAndRotation
inline void UPhysicsHandleComponent::GetTargetLocationAndRotation(struct FVector& TargetLocation, struct FRotator& TargetRotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.GetTargetLocationAndRotation");

	struct GetTargetLocationAndRotation_Params {
		struct FVector& TargetLocation;
		struct FRotator& TargetRotation;
	}; GetTargetLocationAndRotation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	TargetLocation = Params.TargetLocation;
	TargetRotation = Params.TargetRotation;

}

// Function Engine.PhysicsHandleComponent.GetGrabbedComponent
inline struct UPrimitiveComponent UPhysicsHandleComponent::GetGrabbedComponent() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.GetGrabbedComponent");

	struct GetGrabbedComponent_Params {
		
		struct UPrimitiveComponent ReturnValue;

	}; GetGrabbedComponent_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PhysicsSpringComponent.GetSpringRestingPoint
inline struct FVector UPhysicsSpringComponent::GetSpringRestingPoint() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsSpringComponent.GetSpringRestingPoint");

	struct GetSpringRestingPoint_Params {
		
		struct FVector ReturnValue;

	}; GetSpringRestingPoint_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PhysicsSpringComponent.GetSpringDirection
inline struct FVector UPhysicsSpringComponent::GetSpringDirection() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsSpringComponent.GetSpringDirection");

	struct GetSpringDirection_Params {
		
		struct FVector ReturnValue;

	}; GetSpringDirection_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PhysicsSpringComponent.GetSpringCurrentEndPoint
inline struct FVector UPhysicsSpringComponent::GetSpringCurrentEndPoint() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsSpringComponent.GetSpringCurrentEndPoint");

	struct GetSpringCurrentEndPoint_Params {
		
		struct FVector ReturnValue;

	}; GetSpringCurrentEndPoint_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PhysicsSpringComponent.GetNormalizedCompressionScalar
inline float UPhysicsSpringComponent::GetNormalizedCompressionScalar() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsSpringComponent.GetNormalizedCompressionScalar");

	struct GetNormalizedCompressionScalar_Params {
		
		float ReturnValue;

	}; GetNormalizedCompressionScalar_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlanarReflection.OnInterpToggle
inline void APlanarReflection::OnInterpToggle(bool bEnable) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlanarReflection.OnInterpToggle");

	struct OnInterpToggle_Params {
		bool bEnable;
	}; OnInterpToggle_Params Params;

	Params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneCaptureComponent.ShowOnlyComponent
inline void USceneCaptureComponent::ShowOnlyComponent(struct UPrimitiveComponent InComponent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.ShowOnlyComponent");

	struct ShowOnlyComponent_Params {
		struct UPrimitiveComponent InComponent;
	}; ShowOnlyComponent_Params Params;

	Params.InComponent = InComponent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneCaptureComponent.ShowOnlyActorComponents
inline void USceneCaptureComponent::ShowOnlyActorComponents(struct UActor InActor, bool bIncludeFromChildActors) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.ShowOnlyActorComponents");

	struct ShowOnlyActorComponents_Params {
		struct UActor InActor;
		bool bIncludeFromChildActors;
	}; ShowOnlyActorComponents_Params Params;

	Params.InActor = InActor;
	Params.bIncludeFromChildActors = bIncludeFromChildActors;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneCaptureComponent.SetCaptureSortPriority
inline void USceneCaptureComponent::SetCaptureSortPriority(int32_t NewCaptureSortPriority) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.SetCaptureSortPriority");

	struct SetCaptureSortPriority_Params {
		int32_t NewCaptureSortPriority;
	}; SetCaptureSortPriority_Params Params;

	Params.NewCaptureSortPriority = NewCaptureSortPriority;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneCaptureComponent.RemoveShowOnlyComponent
inline void USceneCaptureComponent::RemoveShowOnlyComponent(struct UPrimitiveComponent InComponent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.RemoveShowOnlyComponent");

	struct RemoveShowOnlyComponent_Params {
		struct UPrimitiveComponent InComponent;
	}; RemoveShowOnlyComponent_Params Params;

	Params.InComponent = InComponent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneCaptureComponent.RemoveShowOnlyActorComponents
inline void USceneCaptureComponent::RemoveShowOnlyActorComponents(struct UActor InActor, bool bIncludeFromChildActors) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.RemoveShowOnlyActorComponents");

	struct RemoveShowOnlyActorComponents_Params {
		struct UActor InActor;
		bool bIncludeFromChildActors;
	}; RemoveShowOnlyActorComponents_Params Params;

	Params.InActor = InActor;
	Params.bIncludeFromChildActors = bIncludeFromChildActors;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneCaptureComponent.HideComponent
inline void USceneCaptureComponent::HideComponent(struct UPrimitiveComponent InComponent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.HideComponent");

	struct HideComponent_Params {
		struct UPrimitiveComponent InComponent;
	}; HideComponent_Params Params;

	Params.InComponent = InComponent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneCaptureComponent.HideActorComponents
inline void USceneCaptureComponent::HideActorComponents(struct UActor InActor, bool bIncludeFromChildActors) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.HideActorComponents");

	struct HideActorComponents_Params {
		struct UActor InActor;
		bool bIncludeFromChildActors;
	}; HideActorComponents_Params Params;

	Params.InActor = InActor;
	Params.bIncludeFromChildActors = bIncludeFromChildActors;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneCaptureComponent.ClearShowOnlyComponents
inline void USceneCaptureComponent::ClearShowOnlyComponents() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.ClearShowOnlyComponents");

	struct ClearShowOnlyComponents_Params {
		
	}; ClearShowOnlyComponents_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneCaptureComponent.ClearHiddenComponents
inline void USceneCaptureComponent::ClearHiddenComponents() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.ClearHiddenComponents");

	struct ClearHiddenComponents_Params {
		
	}; ClearHiddenComponents_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlatformEventsComponent.SupportsConvertibleLaptops
inline bool UPlatformEventsComponent::SupportsConvertibleLaptops() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformEventsComponent.SupportsConvertibleLaptops");

	struct SupportsConvertibleLaptops_Params {
		
		bool ReturnValue;

	}; SupportsConvertibleLaptops_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// DelegateFunction Engine.PlatformEventsComponent.PlatformEventDelegate__DelegateSignature
inline void UPlatformEventsComponent::PlatformEventDelegate__DelegateSignature() {
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.PlatformEventsComponent.PlatformEventDelegate__DelegateSignature");

	struct PlatformEventDelegate__DelegateSignature_Params {
		
	}; PlatformEventDelegate__DelegateSignature_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlatformEventsComponent.IsInTabletMode
inline bool UPlatformEventsComponent::IsInTabletMode() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformEventsComponent.IsInTabletMode");

	struct IsInTabletMode_Params {
		
		bool ReturnValue;

	}; IsInTabletMode_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlatformEventsComponent.IsInLaptopMode
inline bool UPlatformEventsComponent::IsInLaptopMode() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformEventsComponent.IsInLaptopMode");

	struct IsInLaptopMode_Params {
		
		bool ReturnValue;

	}; IsInLaptopMode_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlatformInterfaceWebResponse.GetNumHeaders
inline int32_t UPlatformInterfaceWebResponse::GetNumHeaders() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceWebResponse.GetNumHeaders");

	struct GetNumHeaders_Params {
		
		int32_t ReturnValue;

	}; GetNumHeaders_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlatformInterfaceWebResponse.GetHeaderValue
inline struct FString UPlatformInterfaceWebResponse::GetHeaderValue(struct FString HeaderName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceWebResponse.GetHeaderValue");

	struct GetHeaderValue_Params {
		struct FString HeaderName;
		struct FString ReturnValue;

	}; GetHeaderValue_Params Params;

	Params.HeaderName = HeaderName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlatformInterfaceWebResponse.GetHeader
inline void UPlatformInterfaceWebResponse::GetHeader(int32_t HeaderIndex, struct FString& Header, struct FString& Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceWebResponse.GetHeader");

	struct GetHeader_Params {
		int32_t HeaderIndex;
		struct FString& Header;
		struct FString& Value;
	}; GetHeader_Params Params;

	Params.HeaderIndex = HeaderIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Header = Params.Header;
	Value = Params.Value;

}

// Function Engine.PlayerCameraManager.StopCameraShake
inline void APlayerCameraManager::StopCameraShake(struct UCameraShake ShakeInstance, bool bImmediately) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.StopCameraShake");

	struct StopCameraShake_Params {
		struct UCameraShake ShakeInstance;
		bool bImmediately;
	}; StopCameraShake_Params Params;

	Params.ShakeInstance = ShakeInstance;
	Params.bImmediately = bImmediately;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.StopCameraFade
inline void APlayerCameraManager::StopCameraFade() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.StopCameraFade");

	struct StopCameraFade_Params {
		
	}; StopCameraFade_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.StopCameraAnimInst
inline void APlayerCameraManager::StopCameraAnimInst(struct UCameraAnimInst AnimInst, bool bImmediate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.StopCameraAnimInst");

	struct StopCameraAnimInst_Params {
		struct UCameraAnimInst AnimInst;
		bool bImmediate;
	}; StopCameraAnimInst_Params Params;

	Params.AnimInst = AnimInst;
	Params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShakeFromSource
inline void APlayerCameraManager::StopAllInstancesOfCameraShakeFromSource(struct UCameraShakeSourceComponent SourceComponent, bool bImmediately) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShakeFromSource");

	struct StopAllInstancesOfCameraShakeFromSource_Params {
		struct UCameraShakeSourceComponent SourceComponent;
		bool bImmediately;
	}; StopAllInstancesOfCameraShakeFromSource_Params Params;

	Params.SourceComponent = SourceComponent;
	Params.bImmediately = bImmediately;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShake
inline void APlayerCameraManager::StopAllInstancesOfCameraShake(struct UClass* Shake, bool bImmediately) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShake");

	struct StopAllInstancesOfCameraShake_Params {
		struct UClass* Shake;
		bool bImmediately;
	}; StopAllInstancesOfCameraShake_Params Params;

	Params.Shake = Shake;
	Params.bImmediately = bImmediately;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.StopAllInstancesOfCameraAnim
inline void APlayerCameraManager::StopAllInstancesOfCameraAnim(struct UCameraAnim Anim, bool bImmediate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.StopAllInstancesOfCameraAnim");

	struct StopAllInstancesOfCameraAnim_Params {
		struct UCameraAnim Anim;
		bool bImmediate;
	}; StopAllInstancesOfCameraAnim_Params Params;

	Params.Anim = Anim;
	Params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.StopAllCameraShakes
inline void APlayerCameraManager::StopAllCameraShakes(bool bImmediately) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.StopAllCameraShakes");

	struct StopAllCameraShakes_Params {
		bool bImmediately;
	}; StopAllCameraShakes_Params Params;

	Params.bImmediately = bImmediately;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.StopAllCameraAnims
inline void APlayerCameraManager::StopAllCameraAnims(bool bImmediate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.StopAllCameraAnims");

	struct StopAllCameraAnims_Params {
		bool bImmediate;
	}; StopAllCameraAnims_Params Params;

	Params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.StartCameraFade
inline void APlayerCameraManager::StartCameraFade(float FromAlpha, float ToAlpha, float Duration, struct FLinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.StartCameraFade");

	struct StartCameraFade_Params {
		float FromAlpha;
		float ToAlpha;
		float Duration;
		struct FLinearColor Color;
		bool bShouldFadeAudio;
		bool bHoldWhenFinished;
	}; StartCameraFade_Params Params;

	Params.FromAlpha = FromAlpha;
	Params.ToAlpha = ToAlpha;
	Params.Duration = Duration;
	Params.Color = Color;
	Params.bShouldFadeAudio = bShouldFadeAudio;
	Params.bHoldWhenFinished = bHoldWhenFinished;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.SetManualCameraFade
inline void APlayerCameraManager::SetManualCameraFade(float InFadeAmount, struct FLinearColor Color, bool bInFadeAudio) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.SetManualCameraFade");

	struct SetManualCameraFade_Params {
		float InFadeAmount;
		struct FLinearColor Color;
		bool bInFadeAudio;
	}; SetManualCameraFade_Params Params;

	Params.InFadeAmount = InFadeAmount;
	Params.Color = Color;
	Params.bInFadeAudio = bInFadeAudio;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.SetGameCameraCutThisFrame
inline void APlayerCameraManager::SetGameCameraCutThisFrame() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.SetGameCameraCutThisFrame");

	struct SetGameCameraCutThisFrame_Params {
		
	}; SetGameCameraCutThisFrame_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.RemoveCameraModifier
inline bool APlayerCameraManager::RemoveCameraModifier(struct UCameraModifier ModifierToRemove) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.RemoveCameraModifier");

	struct RemoveCameraModifier_Params {
		struct UCameraModifier ModifierToRemove;
		bool ReturnValue;

	}; RemoveCameraModifier_Params Params;

	Params.ModifierToRemove = ModifierToRemove;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerCameraManager.RemoveCameraLensEffect
inline void APlayerCameraManager::RemoveCameraLensEffect(struct AEmitterCameraLensEffectBase Emitter) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.RemoveCameraLensEffect");

	struct RemoveCameraLensEffect_Params {
		struct AEmitterCameraLensEffectBase Emitter;
	}; RemoveCameraLensEffect_Params Params;

	Params.Emitter = Emitter;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.PlayCameraShakeFromSource
inline struct UCameraShake APlayerCameraManager::PlayCameraShakeFromSource(struct UClass* ShakeClass, struct UCameraShakeSourceComponent SourceComponent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.PlayCameraShakeFromSource");

	struct PlayCameraShakeFromSource_Params {
		struct UClass* ShakeClass;
		struct UCameraShakeSourceComponent SourceComponent;
		struct UCameraShake ReturnValue;

	}; PlayCameraShakeFromSource_Params Params;

	Params.ShakeClass = ShakeClass;
	Params.SourceComponent = SourceComponent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerCameraManager.PlayCameraShake
inline struct UCameraShake APlayerCameraManager::PlayCameraShake(struct UClass* ShakeClass, float Scale, enum class ECameraAnimPlaySpace PlaySpace, struct FRotator UserPlaySpaceRot) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.PlayCameraShake");

	struct PlayCameraShake_Params {
		struct UClass* ShakeClass;
		float Scale;
		enum class ECameraAnimPlaySpace PlaySpace;
		struct FRotator UserPlaySpaceRot;
		struct UCameraShake ReturnValue;

	}; PlayCameraShake_Params Params;

	Params.ShakeClass = ShakeClass;
	Params.Scale = Scale;
	Params.PlaySpace = PlaySpace;
	Params.UserPlaySpaceRot = UserPlaySpaceRot;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerCameraManager.PlayCameraAnim
inline struct UCameraAnimInst APlayerCameraManager::PlayCameraAnim(struct UCameraAnim Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, enum class ECameraAnimPlaySpace PlaySpace, struct FRotator UserPlaySpaceRot) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.PlayCameraAnim");

	struct PlayCameraAnim_Params {
		struct UCameraAnim Anim;
		float Rate;
		float Scale;
		float BlendInTime;
		float BlendOutTime;
		bool bLoop;
		bool bRandomStartTime;
		float Duration;
		enum class ECameraAnimPlaySpace PlaySpace;
		struct FRotator UserPlaySpaceRot;
		struct UCameraAnimInst ReturnValue;

	}; PlayCameraAnim_Params Params;

	Params.Anim = Anim;
	Params.Rate = Rate;
	Params.Scale = Scale;
	Params.BlendInTime = BlendInTime;
	Params.BlendOutTime = BlendOutTime;
	Params.bLoop = bLoop;
	Params.bRandomStartTime = bRandomStartTime;
	Params.Duration = Duration;
	Params.PlaySpace = PlaySpace;
	Params.UserPlaySpaceRot = UserPlaySpaceRot;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerCameraManager.PhotographyCameraModify
inline void APlayerCameraManager::PhotographyCameraModify(struct FVector NewCameraLocation, struct FVector PreviousCameraLocation, struct FVector OriginalCameraLocation, struct FVector& ResultCameraLocation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.PhotographyCameraModify");

	struct PhotographyCameraModify_Params {
		struct FVector NewCameraLocation;
		struct FVector PreviousCameraLocation;
		struct FVector OriginalCameraLocation;
		struct FVector& ResultCameraLocation;
	}; PhotographyCameraModify_Params Params;

	Params.NewCameraLocation = NewCameraLocation;
	Params.PreviousCameraLocation = PreviousCameraLocation;
	Params.OriginalCameraLocation = OriginalCameraLocation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	ResultCameraLocation = Params.ResultCameraLocation;

}

// Function Engine.PlayerCameraManager.OnPhotographySessionStart
inline void APlayerCameraManager::OnPhotographySessionStart() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.OnPhotographySessionStart");

	struct OnPhotographySessionStart_Params {
		
	}; OnPhotographySessionStart_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.OnPhotographySessionEnd
inline void APlayerCameraManager::OnPhotographySessionEnd() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.OnPhotographySessionEnd");

	struct OnPhotographySessionEnd_Params {
		
	}; OnPhotographySessionEnd_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureStart
inline void APlayerCameraManager::OnPhotographyMultiPartCaptureStart() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureStart");

	struct OnPhotographyMultiPartCaptureStart_Params {
		
	}; OnPhotographyMultiPartCaptureStart_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureEnd
inline void APlayerCameraManager::OnPhotographyMultiPartCaptureEnd() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureEnd");

	struct OnPhotographyMultiPartCaptureEnd_Params {
		
	}; OnPhotographyMultiPartCaptureEnd_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.GetOwningPlayerController
inline struct APlayerController APlayerCameraManager::GetOwningPlayerController() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.GetOwningPlayerController");

	struct GetOwningPlayerController_Params {
		
		struct APlayerController ReturnValue;

	}; GetOwningPlayerController_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerCameraManager.GetFOVAngle
inline float APlayerCameraManager::GetFOVAngle() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.GetFOVAngle");

	struct GetFOVAngle_Params {
		
		float ReturnValue;

	}; GetFOVAngle_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerCameraManager.GetCameraRotation
inline struct FRotator APlayerCameraManager::GetCameraRotation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.GetCameraRotation");

	struct GetCameraRotation_Params {
		
		struct FRotator ReturnValue;

	}; GetCameraRotation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerCameraManager.GetCameraLocation
inline struct FVector APlayerCameraManager::GetCameraLocation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.GetCameraLocation");

	struct GetCameraLocation_Params {
		
		struct FVector ReturnValue;

	}; GetCameraLocation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerCameraManager.FindCameraModifierByClass
inline struct UCameraModifier APlayerCameraManager::FindCameraModifierByClass(struct UClass* ModifierClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.FindCameraModifierByClass");

	struct FindCameraModifierByClass_Params {
		struct UClass* ModifierClass;
		struct UCameraModifier ReturnValue;

	}; FindCameraModifierByClass_Params Params;

	Params.ModifierClass = ModifierClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerCameraManager.ClearCameraLensEffects
inline void APlayerCameraManager::ClearCameraLensEffects() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.ClearCameraLensEffects");

	struct ClearCameraLensEffects_Params {
		
	}; ClearCameraLensEffects_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.BlueprintUpdateCamera
inline bool APlayerCameraManager::BlueprintUpdateCamera(struct UActor CameraTarget, struct FVector& NewCameraLocation, struct FRotator& NewCameraRotation, float& NewCameraFOV) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.BlueprintUpdateCamera");

	struct BlueprintUpdateCamera_Params {
		struct UActor CameraTarget;
		struct FVector& NewCameraLocation;
		struct FRotator& NewCameraRotation;
		float& NewCameraFOV;
		bool ReturnValue;

	}; BlueprintUpdateCamera_Params Params;

	Params.CameraTarget = CameraTarget;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewCameraLocation = Params.NewCameraLocation;
	NewCameraRotation = Params.NewCameraRotation;
	NewCameraFOV = Params.NewCameraFOV;


	return params.ReturnValue;
}

// Function Engine.PlayerCameraManager.AddNewCameraModifier
inline struct UCameraModifier APlayerCameraManager::AddNewCameraModifier(struct UClass* ModifierClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.AddNewCameraModifier");

	struct AddNewCameraModifier_Params {
		struct UClass* ModifierClass;
		struct UCameraModifier ReturnValue;

	}; AddNewCameraModifier_Params Params;

	Params.ModifierClass = ModifierClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerCameraManager.AddCameraLensEffect
inline struct AEmitterCameraLensEffectBase APlayerCameraManager::AddCameraLensEffect(struct UClass* LensEffectEmitterClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.AddCameraLensEffect");

	struct AddCameraLensEffect_Params {
		struct UClass* LensEffectEmitterClass;
		struct AEmitterCameraLensEffectBase ReturnValue;

	}; AddCameraLensEffect_Params Params;

	Params.LensEffectEmitterClass = LensEffectEmitterClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerInput.SetMouseSensitivity
inline void UPlayerInput::SetMouseSensitivity(float Sensitivity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.SetMouseSensitivity");

	struct SetMouseSensitivity_Params {
		float Sensitivity;
	}; SetMouseSensitivity_Params Params;

	Params.Sensitivity = Sensitivity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerInput.SetBind
inline void UPlayerInput::SetBind(struct FName BindName, struct FString Command) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.SetBind");

	struct SetBind_Params {
		struct FName BindName;
		struct FString Command;
	}; SetBind_Params Params;

	Params.BindName = BindName;
	Params.Command = Command;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerInput.InvertAxisKey
inline void UPlayerInput::InvertAxisKey(struct FKey AxisKey) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.InvertAxisKey");

	struct InvertAxisKey_Params {
		struct FKey AxisKey;
	}; InvertAxisKey_Params Params;

	Params.AxisKey = AxisKey;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerInput.InvertAxis
inline void UPlayerInput::InvertAxis(struct FName AxisName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.InvertAxis");

	struct InvertAxis_Params {
		struct FName AxisName;
	}; InvertAxis_Params Params;

	Params.AxisName = AxisName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerInput.ClearSmoothing
inline void UPlayerInput::ClearSmoothing() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.ClearSmoothing");

	struct ClearSmoothing_Params {
		
	}; ClearSmoothing_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerState.ReceiveOverrideWith
inline void APlayerState::ReceiveOverrideWith(struct APlayerState OldPlayerState) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerState.ReceiveOverrideWith");

	struct ReceiveOverrideWith_Params {
		struct APlayerState OldPlayerState;
	}; ReceiveOverrideWith_Params Params;

	Params.OldPlayerState = OldPlayerState;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerState.ReceiveCopyProperties
inline void APlayerState::ReceiveCopyProperties(struct APlayerState NewPlayerState) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerState.ReceiveCopyProperties");

	struct ReceiveCopyProperties_Params {
		struct APlayerState NewPlayerState;
	}; ReceiveCopyProperties_Params Params;

	Params.NewPlayerState = NewPlayerState;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerState.OnRep_UniqueId
inline void APlayerState::OnRep_UniqueId() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerState.OnRep_UniqueId");

	struct OnRep_UniqueId_Params {
		
	}; OnRep_UniqueId_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerState.OnRep_Score
inline void APlayerState::OnRep_Score() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerState.OnRep_Score");

	struct OnRep_Score_Params {
		
	}; OnRep_Score_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerState.OnRep_PlayerName
inline void APlayerState::OnRep_PlayerName() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerState.OnRep_PlayerName");

	struct OnRep_PlayerName_Params {
		
	}; OnRep_PlayerName_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerState.OnRep_PlayerId
inline void APlayerState::OnRep_PlayerId() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerState.OnRep_PlayerId");

	struct OnRep_PlayerId_Params {
		
	}; OnRep_PlayerId_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerState.OnRep_bIsInactive
inline void APlayerState::OnRep_bIsInactive() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerState.OnRep_bIsInactive");

	struct OnRep_bIsInactive_Params {
		
	}; OnRep_bIsInactive_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerState.GetPlayerName
inline struct FString APlayerState::GetPlayerName() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerState.GetPlayerName");

	struct GetPlayerName_Params {
		
		struct FString ReturnValue;

	}; GetPlayerName_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PointLight.SetRadius
inline void APointLight::SetRadius(float NewRadius) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLight.SetRadius");

	struct SetRadius_Params {
		float NewRadius;
	}; SetRadius_Params Params;

	Params.NewRadius = NewRadius;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PointLight.SetLightFalloffExponent
inline void APointLight::SetLightFalloffExponent(float NewLightFalloffExponent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLight.SetLightFalloffExponent");

	struct SetLightFalloffExponent_Params {
		float NewLightFalloffExponent;
	}; SetLightFalloffExponent_Params Params;

	Params.NewLightFalloffExponent = NewLightFalloffExponent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PointLightComponent.SetSourceRadius
inline void UPointLightComponent::SetSourceRadius(float bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLightComponent.SetSourceRadius");

	struct SetSourceRadius_Params {
		float bNewValue;
	}; SetSourceRadius_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PointLightComponent.SetSourceLength
inline void UPointLightComponent::SetSourceLength(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLightComponent.SetSourceLength");

	struct SetSourceLength_Params {
		float NewValue;
	}; SetSourceLength_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PointLightComponent.SetSoftSourceRadius
inline void UPointLightComponent::SetSoftSourceRadius(float bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLightComponent.SetSoftSourceRadius");

	struct SetSoftSourceRadius_Params {
		float bNewValue;
	}; SetSoftSourceRadius_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PointLightComponent.SetLightFalloffExponent
inline void UPointLightComponent::SetLightFalloffExponent(float NewLightFalloffExponent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLightComponent.SetLightFalloffExponent");

	struct SetLightFalloffExponent_Params {
		float NewLightFalloffExponent;
	}; SetLightFalloffExponent_Params Params;

	Params.NewLightFalloffExponent = NewLightFalloffExponent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PostProcessComponent.AddOrUpdateBlendable
inline void UPostProcessComponent::AddOrUpdateBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PostProcessComponent.AddOrUpdateBlendable");

	struct AddOrUpdateBlendable_Params {
		struct TScriptInterface<IBlendableInterface> InBlendableObject;
		float InWeight;
	}; AddOrUpdateBlendable_Params Params;

	Params.InBlendableObject = InBlendableObject;
	Params.InWeight = InWeight;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PostProcessVolume.AddOrUpdateBlendable
inline void APostProcessVolume::AddOrUpdateBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PostProcessVolume.AddOrUpdateBlendable");

	struct AddOrUpdateBlendable_Params {
		struct TScriptInterface<IBlendableInterface> InBlendableObject;
		float InWeight;
	}; AddOrUpdateBlendable_Params Params;

	Params.InBlendableObject = InBlendableObject;
	Params.InWeight = InWeight;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ProjectileMovementComponent.StopSimulating
inline void UProjectileMovementComponent::StopSimulating(struct FHitResult& HitResult) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ProjectileMovementComponent.StopSimulating");

	struct StopSimulating_Params {
		struct FHitResult& HitResult;
	}; StopSimulating_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	HitResult = Params.HitResult;

}

// Function Engine.ProjectileMovementComponent.SetVelocityInLocalSpace
inline void UProjectileMovementComponent::SetVelocityInLocalSpace(struct FVector NewVelocity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ProjectileMovementComponent.SetVelocityInLocalSpace");

	struct SetVelocityInLocalSpace_Params {
		struct FVector NewVelocity;
	}; SetVelocityInLocalSpace_Params Params;

	Params.NewVelocity = NewVelocity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ProjectileMovementComponent.SetInterpolatedComponent
inline void UProjectileMovementComponent::SetInterpolatedComponent(struct USceneComponent Component) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ProjectileMovementComponent.SetInterpolatedComponent");

	struct SetInterpolatedComponent_Params {
		struct USceneComponent Component;
	}; SetInterpolatedComponent_Params Params;

	Params.Component = Component;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ProjectileMovementComponent.ResetInterpolation
inline void UProjectileMovementComponent::ResetInterpolation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ProjectileMovementComponent.ResetInterpolation");

	struct ResetInterpolation_Params {
		
	}; ResetInterpolation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// DelegateFunction Engine.ProjectileMovementComponent.OnProjectileStopDelegate__DelegateSignature
inline void UProjectileMovementComponent::OnProjectileStopDelegate__DelegateSignature(struct FHitResult& ImpactResult) {
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.ProjectileMovementComponent.OnProjectileStopDelegate__DelegateSignature");

	struct OnProjectileStopDelegate__DelegateSignature_Params {
		struct FHitResult& ImpactResult;
	}; OnProjectileStopDelegate__DelegateSignature_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	ImpactResult = Params.ImpactResult;

}

// DelegateFunction Engine.ProjectileMovementComponent.OnProjectileBounceDelegate__DelegateSignature
inline void UProjectileMovementComponent::OnProjectileBounceDelegate__DelegateSignature(struct FHitResult& ImpactResult, struct FVector& ImpactVelocity) {
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.ProjectileMovementComponent.OnProjectileBounceDelegate__DelegateSignature");

	struct OnProjectileBounceDelegate__DelegateSignature_Params {
		struct FHitResult& ImpactResult;
		struct FVector& ImpactVelocity;
	}; OnProjectileBounceDelegate__DelegateSignature_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	ImpactResult = Params.ImpactResult;
	ImpactVelocity = Params.ImpactVelocity;

}

// Function Engine.ProjectileMovementComponent.MoveInterpolationTarget
inline void UProjectileMovementComponent::MoveInterpolationTarget(struct FVector& NewLocation, struct FRotator& NewRotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ProjectileMovementComponent.MoveInterpolationTarget");

	struct MoveInterpolationTarget_Params {
		struct FVector& NewLocation;
		struct FRotator& NewRotation;
	}; MoveInterpolationTarget_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewLocation = Params.NewLocation;
	NewRotation = Params.NewRotation;

}

// Function Engine.ProjectileMovementComponent.LimitVelocity
inline struct FVector UProjectileMovementComponent::LimitVelocity(struct FVector NewVelocity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ProjectileMovementComponent.LimitVelocity");

	struct LimitVelocity_Params {
		struct FVector NewVelocity;
		struct FVector ReturnValue;

	}; LimitVelocity_Params Params;

	Params.NewVelocity = NewVelocity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.ProjectileMovementComponent.IsVelocityUnderSimulationThreshold
inline bool UProjectileMovementComponent::IsVelocityUnderSimulationThreshold() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ProjectileMovementComponent.IsVelocityUnderSimulationThreshold");

	struct IsVelocityUnderSimulationThreshold_Params {
		
		bool ReturnValue;

	}; IsVelocityUnderSimulationThreshold_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.ProjectileMovementComponent.IsInterpolationComplete
inline bool UProjectileMovementComponent::IsInterpolationComplete() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ProjectileMovementComponent.IsInterpolationComplete");

	struct IsInterpolationComplete_Params {
		
		bool ReturnValue;

	}; IsInterpolationComplete_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.RadialForceActor.ToggleForce
inline void ARadialForceActor::ToggleForce() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialForceActor.ToggleForce");

	struct ToggleForce_Params {
		
	}; ToggleForce_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.RadialForceActor.FireImpulse
inline void ARadialForceActor::FireImpulse() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialForceActor.FireImpulse");

	struct FireImpulse_Params {
		
	}; FireImpulse_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.RadialForceActor.EnableForce
inline void ARadialForceActor::EnableForce() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialForceActor.EnableForce");

	struct EnableForce_Params {
		
	}; EnableForce_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.RadialForceActor.DisableForce
inline void ARadialForceActor::DisableForce() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialForceActor.DisableForce");

	struct DisableForce_Params {
		
	}; DisableForce_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.RadialForceComponent.RemoveObjectTypeToAffect
inline void URadialForceComponent::RemoveObjectTypeToAffect(enum class EObjectTypeQuery ObjectType) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialForceComponent.RemoveObjectTypeToAffect");

	struct RemoveObjectTypeToAffect_Params {
		enum class EObjectTypeQuery ObjectType;
	}; RemoveObjectTypeToAffect_Params Params;

	Params.ObjectType = ObjectType;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.RadialForceComponent.FireImpulse
inline void URadialForceComponent::FireImpulse() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialForceComponent.FireImpulse");

	struct FireImpulse_Params {
		
	}; FireImpulse_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.RadialForceComponent.AddObjectTypeToAffect
inline void URadialForceComponent::AddObjectTypeToAffect(enum class EObjectTypeQuery ObjectType) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialForceComponent.AddObjectTypeToAffect");

	struct AddObjectTypeToAffect_Params {
		enum class EObjectTypeQuery ObjectType;
	}; AddObjectTypeToAffect_Params Params;

	Params.ObjectType = ObjectType;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.RectLightComponent.SetSourceWidth
inline void URectLightComponent::SetSourceWidth(float bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RectLightComponent.SetSourceWidth");

	struct SetSourceWidth_Params {
		float bNewValue;
	}; SetSourceWidth_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.RectLightComponent.SetSourceTexture
inline void URectLightComponent::SetSourceTexture(struct UTexture bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RectLightComponent.SetSourceTexture");

	struct SetSourceTexture_Params {
		struct UTexture bNewValue;
	}; SetSourceTexture_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.RectLightComponent.SetSourceHeight
inline void URectLightComponent::SetSourceHeight(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RectLightComponent.SetSourceHeight");

	struct SetSourceHeight_Params {
		float NewValue;
	}; SetSourceHeight_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.RectLightComponent.SetBarnDoorLength
inline void URectLightComponent::SetBarnDoorLength(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RectLightComponent.SetBarnDoorLength");

	struct SetBarnDoorLength_Params {
		float NewValue;
	}; SetBarnDoorLength_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.RectLightComponent.SetBarnDoorAngle
inline void URectLightComponent::SetBarnDoorAngle(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RectLightComponent.SetBarnDoorAngle");

	struct SetBarnDoorAngle_Params {
		float NewValue;
	}; SetBarnDoorAngle_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.RuntimeVirtualTexture.GetTileSize
inline int32_t URuntimeVirtualTexture::GetTileSize() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RuntimeVirtualTexture.GetTileSize");

	struct GetTileSize_Params {
		
		int32_t ReturnValue;

	}; GetTileSize_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.RuntimeVirtualTexture.GetTileCount
inline int32_t URuntimeVirtualTexture::GetTileCount() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RuntimeVirtualTexture.GetTileCount");

	struct GetTileCount_Params {
		
		int32_t ReturnValue;

	}; GetTileCount_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.RuntimeVirtualTexture.GetTileBorderSize
inline int32_t URuntimeVirtualTexture::GetTileBorderSize() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RuntimeVirtualTexture.GetTileBorderSize");

	struct GetTileBorderSize_Params {
		
		int32_t ReturnValue;

	}; GetTileBorderSize_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.RuntimeVirtualTexture.GetSize
inline int32_t URuntimeVirtualTexture::GetSize() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RuntimeVirtualTexture.GetSize");

	struct GetSize_Params {
		
		int32_t ReturnValue;

	}; GetSize_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.RuntimeVirtualTextureComponent.GetVirtualTextureTransform
inline struct FTransform URuntimeVirtualTextureComponent::GetVirtualTextureTransform() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RuntimeVirtualTextureComponent.GetVirtualTextureTransform");

	struct GetVirtualTextureTransform_Params {
		
		struct FTransform ReturnValue;

	}; GetVirtualTextureTransform_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneCapture2D.OnInterpToggle
inline void ASceneCapture2D::OnInterpToggle(bool bEnable) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCapture2D.OnInterpToggle");

	struct OnInterpToggle_Params {
		bool bEnable;
	}; OnInterpToggle_Params Params;

	Params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneCaptureComponent2D.CaptureScene
inline void USceneCaptureComponent2D::CaptureScene() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent2D.CaptureScene");

	struct CaptureScene_Params {
		
	}; CaptureScene_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneCaptureComponent2D.AddOrUpdateBlendable
inline void USceneCaptureComponent2D::AddOrUpdateBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent2D.AddOrUpdateBlendable");

	struct AddOrUpdateBlendable_Params {
		struct TScriptInterface<IBlendableInterface> InBlendableObject;
		float InWeight;
	}; AddOrUpdateBlendable_Params Params;

	Params.InBlendableObject = InBlendableObject;
	Params.InWeight = InWeight;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneCaptureComponentCube.CaptureScene
inline void USceneCaptureComponentCube::CaptureScene() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponentCube.CaptureScene");

	struct CaptureScene_Params {
		
	}; CaptureScene_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneCaptureCube.OnInterpToggle
inline void ASceneCaptureCube::OnInterpToggle(bool bEnable) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureCube.OnInterpToggle");

	struct OnInterpToggle_Params {
		bool bEnable;
	}; OnInterpToggle_Params Params;

	Params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshActor.OnRep_ReplicatedPhysAsset
inline void ASkeletalMeshActor::OnRep_ReplicatedPhysAsset() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnRep_ReplicatedPhysAsset");

	struct OnRep_ReplicatedPhysAsset_Params {
		
	}; OnRep_ReplicatedPhysAsset_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshActor.OnRep_ReplicatedMesh
inline void ASkeletalMeshActor::OnRep_ReplicatedMesh() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnRep_ReplicatedMesh");

	struct OnRep_ReplicatedMesh_Params {
		
	}; OnRep_ReplicatedMesh_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial1
inline void ASkeletalMeshActor::OnRep_ReplicatedMaterial1() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial1");

	struct OnRep_ReplicatedMaterial1_Params {
		
	}; OnRep_ReplicatedMaterial1_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial0
inline void ASkeletalMeshActor::OnRep_ReplicatedMaterial0() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial0");

	struct OnRep_ReplicatedMaterial0_Params {
		
	}; OnRep_ReplicatedMaterial0_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshSocket.InitializeSocketFromLocation
inline void USkeletalMeshSocket::InitializeSocketFromLocation(struct USkeletalMeshComponent SkelComp, struct FVector WorldLocation, struct FVector WorldNormal) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshSocket.InitializeSocketFromLocation");

	struct InitializeSocketFromLocation_Params {
		struct USkeletalMeshComponent SkelComp;
		struct FVector WorldLocation;
		struct FVector WorldNormal;
	}; InitializeSocketFromLocation_Params Params;

	Params.SkelComp = SkelComp;
	Params.WorldLocation = WorldLocation;
	Params.WorldNormal = WorldNormal;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshSocket.GetSocketLocation
inline struct FVector USkeletalMeshSocket::GetSocketLocation(struct USkeletalMeshComponent SkelComp) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshSocket.GetSocketLocation");

	struct GetSocketLocation_Params {
		struct USkeletalMeshComponent SkelComp;
		struct FVector ReturnValue;

	}; GetSocketLocation_Params Params;

	Params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkyAtmosphereComponent.SetSkyLuminanceFactor
inline void USkyAtmosphereComponent::SetSkyLuminanceFactor(struct FLinearColor NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyAtmosphereComponent.SetSkyLuminanceFactor");

	struct SetSkyLuminanceFactor_Params {
		struct FLinearColor NewValue;
	}; SetSkyLuminanceFactor_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyAtmosphereComponent.SetRayleighScatteringScale
inline void USkyAtmosphereComponent::SetRayleighScatteringScale(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyAtmosphereComponent.SetRayleighScatteringScale");

	struct SetRayleighScatteringScale_Params {
		float NewValue;
	}; SetRayleighScatteringScale_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyAtmosphereComponent.SetRayleighScattering
inline void USkyAtmosphereComponent::SetRayleighScattering(struct FLinearColor NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyAtmosphereComponent.SetRayleighScattering");

	struct SetRayleighScattering_Params {
		struct FLinearColor NewValue;
	}; SetRayleighScattering_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyAtmosphereComponent.SetRayleighExponentialDistribution
inline void USkyAtmosphereComponent::SetRayleighExponentialDistribution(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyAtmosphereComponent.SetRayleighExponentialDistribution");

	struct SetRayleighExponentialDistribution_Params {
		float NewValue;
	}; SetRayleighExponentialDistribution_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyAtmosphereComponent.SetOtherAbsorptionScale
inline void USkyAtmosphereComponent::SetOtherAbsorptionScale(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyAtmosphereComponent.SetOtherAbsorptionScale");

	struct SetOtherAbsorptionScale_Params {
		float NewValue;
	}; SetOtherAbsorptionScale_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyAtmosphereComponent.SetOtherAbsorption
inline void USkyAtmosphereComponent::SetOtherAbsorption(struct FLinearColor NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyAtmosphereComponent.SetOtherAbsorption");

	struct SetOtherAbsorption_Params {
		struct FLinearColor NewValue;
	}; SetOtherAbsorption_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyAtmosphereComponent.SetMieScatteringScale
inline void USkyAtmosphereComponent::SetMieScatteringScale(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyAtmosphereComponent.SetMieScatteringScale");

	struct SetMieScatteringScale_Params {
		float NewValue;
	}; SetMieScatteringScale_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyAtmosphereComponent.SetMieScattering
inline void USkyAtmosphereComponent::SetMieScattering(struct FLinearColor NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyAtmosphereComponent.SetMieScattering");

	struct SetMieScattering_Params {
		struct FLinearColor NewValue;
	}; SetMieScattering_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyAtmosphereComponent.SetMieExponentialDistribution
inline void USkyAtmosphereComponent::SetMieExponentialDistribution(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyAtmosphereComponent.SetMieExponentialDistribution");

	struct SetMieExponentialDistribution_Params {
		float NewValue;
	}; SetMieExponentialDistribution_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyAtmosphereComponent.SetMieAnisotropy
inline void USkyAtmosphereComponent::SetMieAnisotropy(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyAtmosphereComponent.SetMieAnisotropy");

	struct SetMieAnisotropy_Params {
		float NewValue;
	}; SetMieAnisotropy_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyAtmosphereComponent.SetMieAbsorptionScale
inline void USkyAtmosphereComponent::SetMieAbsorptionScale(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyAtmosphereComponent.SetMieAbsorptionScale");

	struct SetMieAbsorptionScale_Params {
		float NewValue;
	}; SetMieAbsorptionScale_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyAtmosphereComponent.SetMieAbsorption
inline void USkyAtmosphereComponent::SetMieAbsorption(struct FLinearColor NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyAtmosphereComponent.SetMieAbsorption");

	struct SetMieAbsorption_Params {
		struct FLinearColor NewValue;
	}; SetMieAbsorption_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyAtmosphereComponent.SetHeightFogContribution
inline void USkyAtmosphereComponent::SetHeightFogContribution(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyAtmosphereComponent.SetHeightFogContribution");

	struct SetHeightFogContribution_Params {
		float NewValue;
	}; SetHeightFogContribution_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyAtmosphereComponent.SetAerialPespectiveViewDistanceScale
inline void USkyAtmosphereComponent::SetAerialPespectiveViewDistanceScale(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyAtmosphereComponent.SetAerialPespectiveViewDistanceScale");

	struct SetAerialPespectiveViewDistanceScale_Params {
		float NewValue;
	}; SetAerialPespectiveViewDistanceScale_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyAtmosphereComponent.OverrideAtmosphereLightDirection
inline void USkyAtmosphereComponent::OverrideAtmosphereLightDirection(int32_t AtmosphereLightIndex, struct FVector& LightDirection) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyAtmosphereComponent.OverrideAtmosphereLightDirection");

	struct OverrideAtmosphereLightDirection_Params {
		int32_t AtmosphereLightIndex;
		struct FVector& LightDirection;
	}; OverrideAtmosphereLightDirection_Params Params;

	Params.AtmosphereLightIndex = AtmosphereLightIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	LightDirection = Params.LightDirection;

}

// Function Engine.SkyLightComponent.SetVolumetricScatteringIntensity
inline void USkyLightComponent::SetVolumetricScatteringIntensity(float NewIntensity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetVolumetricScatteringIntensity");

	struct SetVolumetricScatteringIntensity_Params {
		float NewIntensity;
	}; SetVolumetricScatteringIntensity_Params Params;

	Params.NewIntensity = NewIntensity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyLightComponent.SetOcclusionTint
inline void USkyLightComponent::SetOcclusionTint(struct FColor& InTint) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetOcclusionTint");

	struct SetOcclusionTint_Params {
		struct FColor& InTint;
	}; SetOcclusionTint_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InTint = Params.InTint;

}

// Function Engine.SkyLightComponent.SetOcclusionExponent
inline void USkyLightComponent::SetOcclusionExponent(float InOcclusionExponent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetOcclusionExponent");

	struct SetOcclusionExponent_Params {
		float InOcclusionExponent;
	}; SetOcclusionExponent_Params Params;

	Params.InOcclusionExponent = InOcclusionExponent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyLightComponent.SetOcclusionContrast
inline void USkyLightComponent::SetOcclusionContrast(float InOcclusionContrast) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetOcclusionContrast");

	struct SetOcclusionContrast_Params {
		float InOcclusionContrast;
	}; SetOcclusionContrast_Params Params;

	Params.InOcclusionContrast = InOcclusionContrast;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyLightComponent.SetMinOcclusion
inline void USkyLightComponent::SetMinOcclusion(float InMinOcclusion) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetMinOcclusion");

	struct SetMinOcclusion_Params {
		float InMinOcclusion;
	}; SetMinOcclusion_Params Params;

	Params.InMinOcclusion = InMinOcclusion;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyLightComponent.SetLowerHemisphereColor
inline void USkyLightComponent::SetLowerHemisphereColor(struct FLinearColor& InLowerHemisphereColor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetLowerHemisphereColor");

	struct SetLowerHemisphereColor_Params {
		struct FLinearColor& InLowerHemisphereColor;
	}; SetLowerHemisphereColor_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InLowerHemisphereColor = Params.InLowerHemisphereColor;

}

// Function Engine.SkyLightComponent.SetLightColor
inline void USkyLightComponent::SetLightColor(struct FLinearColor NewLightColor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetLightColor");

	struct SetLightColor_Params {
		struct FLinearColor NewLightColor;
	}; SetLightColor_Params Params;

	Params.NewLightColor = NewLightColor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyLightComponent.SetIntensity
inline void USkyLightComponent::SetIntensity(float NewIntensity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetIntensity");

	struct SetIntensity_Params {
		float NewIntensity;
	}; SetIntensity_Params Params;

	Params.NewIntensity = NewIntensity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyLightComponent.SetIndirectLightingIntensity
inline void USkyLightComponent::SetIndirectLightingIntensity(float NewIntensity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetIndirectLightingIntensity");

	struct SetIndirectLightingIntensity_Params {
		float NewIntensity;
	}; SetIndirectLightingIntensity_Params Params;

	Params.NewIntensity = NewIntensity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyLightComponent.SetCubemapBlend
inline void USkyLightComponent::SetCubemapBlend(struct UTextureCube SourceCubemap, struct UTextureCube DestinationCubemap, float InBlendFraction) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetCubemapBlend");

	struct SetCubemapBlend_Params {
		struct UTextureCube SourceCubemap;
		struct UTextureCube DestinationCubemap;
		float InBlendFraction;
	}; SetCubemapBlend_Params Params;

	Params.SourceCubemap = SourceCubemap;
	Params.DestinationCubemap = DestinationCubemap;
	Params.InBlendFraction = InBlendFraction;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyLightComponent.SetCubemap
inline void USkyLightComponent::SetCubemap(struct UTextureCube NewCubemap) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetCubemap");

	struct SetCubemap_Params {
		struct UTextureCube NewCubemap;
	}; SetCubemap_Params Params;

	Params.NewCubemap = NewCubemap;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyLightComponent.RecaptureSky
inline void USkyLightComponent::RecaptureSky() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.RecaptureSky");

	struct RecaptureSky_Params {
		
	}; RecaptureSky_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SoundSubmix.StopRecordingOutput
inline void USoundSubmix::StopRecordingOutput(struct Object WorldContextObject, enum class EAudioRecordingExportType ExportType, struct FString Name, struct FString Path, struct USoundWave ExistingSoundWaveToOverwrite) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SoundSubmix.StopRecordingOutput");

	struct StopRecordingOutput_Params {
		struct Object WorldContextObject;
		enum class EAudioRecordingExportType ExportType;
		struct FString Name;
		struct FString Path;
		struct USoundWave ExistingSoundWaveToOverwrite;
	}; StopRecordingOutput_Params Params;

	Params.WorldContextObject = WorldContextObject;
	Params.ExportType = ExportType;
	Params.Name = Name;
	Params.Path = Path;
	Params.ExistingSoundWaveToOverwrite = ExistingSoundWaveToOverwrite;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SoundSubmix.StopEnvelopeFollowing
inline void USoundSubmix::StopEnvelopeFollowing(struct Object WorldContextObject) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SoundSubmix.StopEnvelopeFollowing");

	struct StopEnvelopeFollowing_Params {
		struct Object WorldContextObject;
	}; StopEnvelopeFollowing_Params Params;

	Params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SoundSubmix.StartRecordingOutput
inline void USoundSubmix::StartRecordingOutput(struct Object WorldContextObject, float ExpectedDuration) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SoundSubmix.StartRecordingOutput");

	struct StartRecordingOutput_Params {
		struct Object WorldContextObject;
		float ExpectedDuration;
	}; StartRecordingOutput_Params Params;

	Params.WorldContextObject = WorldContextObject;
	Params.ExpectedDuration = ExpectedDuration;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SoundSubmix.StartEnvelopeFollowing
inline void USoundSubmix::StartEnvelopeFollowing(struct Object WorldContextObject) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SoundSubmix.StartEnvelopeFollowing");

	struct StartEnvelopeFollowing_Params {
		struct Object WorldContextObject;
	}; StartEnvelopeFollowing_Params Params;

	Params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SoundSubmix.SetSubmixOutputVolume
inline void USoundSubmix::SetSubmixOutputVolume(struct Object WorldContextObject, float InOutputVolume) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SoundSubmix.SetSubmixOutputVolume");

	struct SetSubmixOutputVolume_Params {
		struct Object WorldContextObject;
		float InOutputVolume;
	}; SetSubmixOutputVolume_Params Params;

	Params.WorldContextObject = WorldContextObject;
	Params.InOutputVolume = InOutputVolume;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SoundSubmix.AddEnvelopeFollowerDelegate
inline void USoundSubmix::AddEnvelopeFollowerDelegate(struct Object WorldContextObject, struct FDelegate& OnSubmixEnvelopeBP) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SoundSubmix.AddEnvelopeFollowerDelegate");

	struct AddEnvelopeFollowerDelegate_Params {
		struct Object WorldContextObject;
		struct FDelegate& OnSubmixEnvelopeBP;
	}; AddEnvelopeFollowerDelegate_Params Params;

	Params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OnSubmixEnvelopeBP = Params.OnSubmixEnvelopeBP;

}

// Function Engine.SplineMeshComponent.UpdateMesh
inline void USplineMeshComponent::UpdateMesh() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.UpdateMesh");

	struct UpdateMesh_Params {
		
	}; UpdateMesh_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineMeshComponent.SetStartTangent
inline void USplineMeshComponent::SetStartTangent(struct FVector StartTangent, bool bUpdateMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetStartTangent");

	struct SetStartTangent_Params {
		struct FVector StartTangent;
		bool bUpdateMesh;
	}; SetStartTangent_Params Params;

	Params.StartTangent = StartTangent;
	Params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineMeshComponent.SetStartScale
inline void USplineMeshComponent::SetStartScale(struct FVector2D StartScale, bool bUpdateMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetStartScale");

	struct SetStartScale_Params {
		struct FVector2D StartScale;
		bool bUpdateMesh;
	}; SetStartScale_Params Params;

	Params.StartScale = StartScale;
	Params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineMeshComponent.SetStartRoll
inline void USplineMeshComponent::SetStartRoll(float StartRoll, bool bUpdateMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetStartRoll");

	struct SetStartRoll_Params {
		float StartRoll;
		bool bUpdateMesh;
	}; SetStartRoll_Params Params;

	Params.StartRoll = StartRoll;
	Params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineMeshComponent.SetStartPosition
inline void USplineMeshComponent::SetStartPosition(struct FVector StartPos, bool bUpdateMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetStartPosition");

	struct SetStartPosition_Params {
		struct FVector StartPos;
		bool bUpdateMesh;
	}; SetStartPosition_Params Params;

	Params.StartPos = StartPos;
	Params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineMeshComponent.SetStartOffset
inline void USplineMeshComponent::SetStartOffset(struct FVector2D StartOffset, bool bUpdateMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetStartOffset");

	struct SetStartOffset_Params {
		struct FVector2D StartOffset;
		bool bUpdateMesh;
	}; SetStartOffset_Params Params;

	Params.StartOffset = StartOffset;
	Params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineMeshComponent.SetStartAndEnd
inline void USplineMeshComponent::SetStartAndEnd(struct FVector StartPos, struct FVector StartTangent, struct FVector EndPos, struct FVector EndTangent, bool bUpdateMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetStartAndEnd");

	struct SetStartAndEnd_Params {
		struct FVector StartPos;
		struct FVector StartTangent;
		struct FVector EndPos;
		struct FVector EndTangent;
		bool bUpdateMesh;
	}; SetStartAndEnd_Params Params;

	Params.StartPos = StartPos;
	Params.StartTangent = StartTangent;
	Params.EndPos = EndPos;
	Params.EndTangent = EndTangent;
	Params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineMeshComponent.SetSplineUpDir
inline void USplineMeshComponent::SetSplineUpDir(struct FVector& InSplineUpDir, bool bUpdateMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetSplineUpDir");

	struct SetSplineUpDir_Params {
		struct FVector& InSplineUpDir;
		bool bUpdateMesh;
	}; SetSplineUpDir_Params Params;

	Params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InSplineUpDir = Params.InSplineUpDir;

}

// Function Engine.SplineMeshComponent.SetForwardAxis
inline void USplineMeshComponent::SetForwardAxis(enum class ESplineMeshAxis InForwardAxis, bool bUpdateMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetForwardAxis");

	struct SetForwardAxis_Params {
		enum class ESplineMeshAxis InForwardAxis;
		bool bUpdateMesh;
	}; SetForwardAxis_Params Params;

	Params.InForwardAxis = InForwardAxis;
	Params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineMeshComponent.SetEndTangent
inline void USplineMeshComponent::SetEndTangent(struct FVector EndTangent, bool bUpdateMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetEndTangent");

	struct SetEndTangent_Params {
		struct FVector EndTangent;
		bool bUpdateMesh;
	}; SetEndTangent_Params Params;

	Params.EndTangent = EndTangent;
	Params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineMeshComponent.SetEndScale
inline void USplineMeshComponent::SetEndScale(struct FVector2D EndScale, bool bUpdateMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetEndScale");

	struct SetEndScale_Params {
		struct FVector2D EndScale;
		bool bUpdateMesh;
	}; SetEndScale_Params Params;

	Params.EndScale = EndScale;
	Params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineMeshComponent.SetEndRoll
inline void USplineMeshComponent::SetEndRoll(float EndRoll, bool bUpdateMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetEndRoll");

	struct SetEndRoll_Params {
		float EndRoll;
		bool bUpdateMesh;
	}; SetEndRoll_Params Params;

	Params.EndRoll = EndRoll;
	Params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineMeshComponent.SetEndPosition
inline void USplineMeshComponent::SetEndPosition(struct FVector EndPos, bool bUpdateMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetEndPosition");

	struct SetEndPosition_Params {
		struct FVector EndPos;
		bool bUpdateMesh;
	}; SetEndPosition_Params Params;

	Params.EndPos = EndPos;
	Params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineMeshComponent.SetEndOffset
inline void USplineMeshComponent::SetEndOffset(struct FVector2D EndOffset, bool bUpdateMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetEndOffset");

	struct SetEndOffset_Params {
		struct FVector2D EndOffset;
		bool bUpdateMesh;
	}; SetEndOffset_Params Params;

	Params.EndOffset = EndOffset;
	Params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineMeshComponent.SetBoundaryMin
inline void USplineMeshComponent::SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetBoundaryMin");

	struct SetBoundaryMin_Params {
		float InBoundaryMin;
		bool bUpdateMesh;
	}; SetBoundaryMin_Params Params;

	Params.InBoundaryMin = InBoundaryMin;
	Params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineMeshComponent.SetBoundaryMax
inline void USplineMeshComponent::SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetBoundaryMax");

	struct SetBoundaryMax_Params {
		float InBoundaryMax;
		bool bUpdateMesh;
	}; SetBoundaryMax_Params Params;

	Params.InBoundaryMax = InBoundaryMax;
	Params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineMeshComponent.GetStartTangent
inline struct FVector USplineMeshComponent::GetStartTangent() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetStartTangent");

	struct GetStartTangent_Params {
		
		struct FVector ReturnValue;

	}; GetStartTangent_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineMeshComponent.GetStartScale
inline struct FVector2D USplineMeshComponent::GetStartScale() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetStartScale");

	struct GetStartScale_Params {
		
		struct FVector2D ReturnValue;

	}; GetStartScale_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineMeshComponent.GetStartRoll
inline float USplineMeshComponent::GetStartRoll() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetStartRoll");

	struct GetStartRoll_Params {
		
		float ReturnValue;

	}; GetStartRoll_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineMeshComponent.GetStartPosition
inline struct FVector USplineMeshComponent::GetStartPosition() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetStartPosition");

	struct GetStartPosition_Params {
		
		struct FVector ReturnValue;

	}; GetStartPosition_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineMeshComponent.GetStartOffset
inline struct FVector2D USplineMeshComponent::GetStartOffset() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetStartOffset");

	struct GetStartOffset_Params {
		
		struct FVector2D ReturnValue;

	}; GetStartOffset_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineMeshComponent.GetSplineUpDir
inline struct FVector USplineMeshComponent::GetSplineUpDir() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetSplineUpDir");

	struct GetSplineUpDir_Params {
		
		struct FVector ReturnValue;

	}; GetSplineUpDir_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineMeshComponent.GetForwardAxis
inline enum class ESplineMeshAxis USplineMeshComponent::GetForwardAxis() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetForwardAxis");

	struct GetForwardAxis_Params {
		
		enum class ESplineMeshAxis ReturnValue;

	}; GetForwardAxis_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineMeshComponent.GetEndTangent
inline struct FVector USplineMeshComponent::GetEndTangent() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetEndTangent");

	struct GetEndTangent_Params {
		
		struct FVector ReturnValue;

	}; GetEndTangent_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineMeshComponent.GetEndScale
inline struct FVector2D USplineMeshComponent::GetEndScale() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetEndScale");

	struct GetEndScale_Params {
		
		struct FVector2D ReturnValue;

	}; GetEndScale_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineMeshComponent.GetEndRoll
inline float USplineMeshComponent::GetEndRoll() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetEndRoll");

	struct GetEndRoll_Params {
		
		float ReturnValue;

	}; GetEndRoll_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineMeshComponent.GetEndPosition
inline struct FVector USplineMeshComponent::GetEndPosition() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetEndPosition");

	struct GetEndPosition_Params {
		
		struct FVector ReturnValue;

	}; GetEndPosition_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineMeshComponent.GetEndOffset
inline struct FVector2D USplineMeshComponent::GetEndOffset() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetEndOffset");

	struct GetEndOffset_Params {
		
		struct FVector2D ReturnValue;

	}; GetEndOffset_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineMeshComponent.GetBoundaryMin
inline float USplineMeshComponent::GetBoundaryMin() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetBoundaryMin");

	struct GetBoundaryMin_Params {
		
		float ReturnValue;

	}; GetBoundaryMin_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineMeshComponent.GetBoundaryMax
inline float USplineMeshComponent::GetBoundaryMax() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetBoundaryMax");

	struct GetBoundaryMax_Params {
		
		float ReturnValue;

	}; GetBoundaryMax_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SpotLightComponent.SetOuterConeAngle
inline void USpotLightComponent::SetOuterConeAngle(float NewOuterConeAngle) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpotLightComponent.SetOuterConeAngle");

	struct SetOuterConeAngle_Params {
		float NewOuterConeAngle;
	}; SetOuterConeAngle_Params Params;

	Params.NewOuterConeAngle = NewOuterConeAngle;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SpotLightComponent.SetInnerConeAngle
inline void USpotLightComponent::SetInnerConeAngle(float NewInnerConeAngle) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpotLightComponent.SetInnerConeAngle");

	struct SetInnerConeAngle_Params {
		float NewInnerConeAngle;
	}; SetInnerConeAngle_Params Params;

	Params.NewInnerConeAngle = NewInnerConeAngle;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.StaticMesh.RemoveSocket
inline void UStaticMesh::RemoveSocket(struct UStaticMeshSocket Socket) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.RemoveSocket");

	struct RemoveSocket_Params {
		struct UStaticMeshSocket Socket;
	}; RemoveSocket_Params Params;

	Params.Socket = Socket;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.StaticMesh.GetNumSections
inline int32_t UStaticMesh::GetNumSections(int32_t InLOD) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.GetNumSections");

	struct GetNumSections_Params {
		int32_t InLOD;
		int32_t ReturnValue;

	}; GetNumSections_Params Params;

	Params.InLOD = InLOD;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StaticMesh.GetNumLODs
inline int32_t UStaticMesh::GetNumLODs() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.GetNumLODs");

	struct GetNumLODs_Params {
		
		int32_t ReturnValue;

	}; GetNumLODs_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StaticMesh.GetMinimumLODForPlatforms
inline void UStaticMesh::GetMinimumLODForPlatforms(struct TMap<struct FName, int32_t>& PlatformMinimumLODs) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.GetMinimumLODForPlatforms");

	struct GetMinimumLODForPlatforms_Params {
		struct TMap<struct FName;
		int32_t>& PlatformMinimumLODs;
	}; GetMinimumLODForPlatforms_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	PlatformMinimumLODs = Params.PlatformMinimumLODs;

}

// Function Engine.StaticMesh.GetMinimumLODForPlatform
inline int32_t UStaticMesh::GetMinimumLODForPlatform(struct FName& PlatformName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.GetMinimumLODForPlatform");

	struct GetMinimumLODForPlatform_Params {
		struct FName& PlatformName;
		int32_t ReturnValue;

	}; GetMinimumLODForPlatform_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	PlatformName = Params.PlatformName;


	return params.ReturnValue;
}

// Function Engine.StaticMesh.GetMaterialIndex
inline int32_t UStaticMesh::GetMaterialIndex(struct FName MaterialSlotName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.GetMaterialIndex");

	struct GetMaterialIndex_Params {
		struct FName MaterialSlotName;
		int32_t ReturnValue;

	}; GetMaterialIndex_Params Params;

	Params.MaterialSlotName = MaterialSlotName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StaticMesh.GetMaterial
inline struct UMaterialInterface UStaticMesh::GetMaterial(int32_t MaterialIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.GetMaterial");

	struct GetMaterial_Params {
		int32_t MaterialIndex;
		struct UMaterialInterface ReturnValue;

	}; GetMaterial_Params Params;

	Params.MaterialIndex = MaterialIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StaticMesh.GetBounds
inline struct FBoxSphereBounds UStaticMesh::GetBounds() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.GetBounds");

	struct GetBounds_Params {
		
		struct FBoxSphereBounds ReturnValue;

	}; GetBounds_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StaticMesh.GetBoundingBox
inline struct FBox UStaticMesh::GetBoundingBox() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.GetBoundingBox");

	struct GetBoundingBox_Params {
		
		struct FBox ReturnValue;

	}; GetBoundingBox_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StaticMesh.FindSocket
inline struct UStaticMeshSocket UStaticMesh::FindSocket(struct FName InSocketName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.FindSocket");

	struct FindSocket_Params {
		struct FName InSocketName;
		struct UStaticMeshSocket ReturnValue;

	}; FindSocket_Params Params;

	Params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StaticMesh.CreateStaticMeshDescription
inline struct UStaticMeshDescription UStaticMesh::CreateStaticMeshDescription(struct Object Outer) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.CreateStaticMeshDescription");

	struct CreateStaticMeshDescription_Params {
		struct Object Outer;
		struct UStaticMeshDescription ReturnValue;

	}; CreateStaticMeshDescription_Params Params;

	Params.Outer = Outer;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StaticMesh.BuildFromStaticMeshDescriptions
inline void UStaticMesh::BuildFromStaticMeshDescriptions(struct TArray<struct UStaticMeshDescription>& StaticMeshDescriptions, bool bBuildSimpleCollision) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.BuildFromStaticMeshDescriptions");

	struct BuildFromStaticMeshDescriptions_Params {
		struct TArray<struct UStaticMeshDescription>& StaticMeshDescriptions;
		bool bBuildSimpleCollision;
	}; BuildFromStaticMeshDescriptions_Params Params;

	Params.bBuildSimpleCollision = bBuildSimpleCollision;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	StaticMeshDescriptions = Params.StaticMeshDescriptions;

}

// Function Engine.StaticMesh.AddSocket
inline void UStaticMesh::AddSocket(struct UStaticMeshSocket Socket) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.AddSocket");

	struct AddSocket_Params {
		struct UStaticMeshSocket Socket;
	}; AddSocket_Params Params;

	Params.Socket = Socket;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.StaticMesh.AddMaterial
inline struct FName UStaticMesh::AddMaterial(struct UMaterialInterface Material) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.AddMaterial");

	struct AddMaterial_Params {
		struct UMaterialInterface Material;
		struct FName ReturnValue;

	}; AddMaterial_Params Params;

	Params.Material = Material;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StereoLayerComponent.SetUVRect
inline void UStereoLayerComponent::SetUVRect(struct FBox2D InUVRect) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerComponent.SetUVRect");

	struct SetUVRect_Params {
		struct FBox2D InUVRect;
	}; SetUVRect_Params Params;

	Params.InUVRect = InUVRect;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.StereoLayerComponent.SetTexture
inline void UStereoLayerComponent::SetTexture(struct UTexture InTexture) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerComponent.SetTexture");

	struct SetTexture_Params {
		struct UTexture InTexture;
	}; SetTexture_Params Params;

	Params.InTexture = InTexture;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.StereoLayerComponent.SetQuadSize
inline void UStereoLayerComponent::SetQuadSize(struct FVector2D InQuadSize) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerComponent.SetQuadSize");

	struct SetQuadSize_Params {
		struct FVector2D InQuadSize;
	}; SetQuadSize_Params Params;

	Params.InQuadSize = InQuadSize;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.StereoLayerComponent.SetPriority
inline void UStereoLayerComponent::SetPriority(int32_t InPriority) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerComponent.SetPriority");

	struct SetPriority_Params {
		int32_t InPriority;
	}; SetPriority_Params Params;

	Params.InPriority = InPriority;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.StereoLayerComponent.SetLeftTexture
inline void UStereoLayerComponent::SetLeftTexture(struct UTexture InTexture) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerComponent.SetLeftTexture");

	struct SetLeftTexture_Params {
		struct UTexture InTexture;
	}; SetLeftTexture_Params Params;

	Params.InTexture = InTexture;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.StereoLayerComponent.SetEquirectProps
inline void UStereoLayerComponent::SetEquirectProps(struct FEquirectProps InScaleBiases) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerComponent.SetEquirectProps");

	struct SetEquirectProps_Params {
		struct FEquirectProps InScaleBiases;
	}; SetEquirectProps_Params Params;

	Params.InScaleBiases = InScaleBiases;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.StereoLayerComponent.MarkTextureForUpdate
inline void UStereoLayerComponent::MarkTextureForUpdate() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerComponent.MarkTextureForUpdate");

	struct MarkTextureForUpdate_Params {
		
	}; MarkTextureForUpdate_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.StereoLayerComponent.GetUVRect
inline struct FBox2D UStereoLayerComponent::GetUVRect() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerComponent.GetUVRect");

	struct GetUVRect_Params {
		
		struct FBox2D ReturnValue;

	}; GetUVRect_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StereoLayerComponent.GetTexture
inline struct UTexture UStereoLayerComponent::GetTexture() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerComponent.GetTexture");

	struct GetTexture_Params {
		
		struct UTexture ReturnValue;

	}; GetTexture_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StereoLayerComponent.GetQuadSize
inline struct FVector2D UStereoLayerComponent::GetQuadSize() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerComponent.GetQuadSize");

	struct GetQuadSize_Params {
		
		struct FVector2D ReturnValue;

	}; GetQuadSize_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StereoLayerComponent.GetPriority
inline int32_t UStereoLayerComponent::GetPriority() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerComponent.GetPriority");

	struct GetPriority_Params {
		
		int32_t ReturnValue;

	}; GetPriority_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StereoLayerComponent.GetLeftTexture
inline struct UTexture UStereoLayerComponent::GetLeftTexture() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerComponent.GetLeftTexture");

	struct GetLeftTexture_Params {
		
		struct UTexture ReturnValue;

	}; GetLeftTexture_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StereoLayerShapeCylinder.SetRadius
inline void UStereoLayerShapeCylinder::SetRadius(float InRadius) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerShapeCylinder.SetRadius");

	struct SetRadius_Params {
		float InRadius;
	}; SetRadius_Params Params;

	Params.InRadius = InRadius;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.StereoLayerShapeCylinder.SetOverlayArc
inline void UStereoLayerShapeCylinder::SetOverlayArc(float InOverlayArc) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerShapeCylinder.SetOverlayArc");

	struct SetOverlayArc_Params {
		float InOverlayArc;
	}; SetOverlayArc_Params Params;

	Params.InOverlayArc = InOverlayArc;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.StereoLayerShapeCylinder.SetHeight
inline void UStereoLayerShapeCylinder::SetHeight(int32_t InHeight) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerShapeCylinder.SetHeight");

	struct SetHeight_Params {
		int32_t InHeight;
	}; SetHeight_Params Params;

	Params.InHeight = InHeight;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.StereoLayerShapeEquirect.SetEquirectProps
inline void UStereoLayerShapeEquirect::SetEquirectProps(struct FEquirectProps InScaleBiases) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerShapeEquirect.SetEquirectProps");

	struct SetEquirectProps_Params {
		struct FEquirectProps InScaleBiases;
	}; SetEquirectProps_Params Params;

	Params.InScaleBiases = InScaleBiases;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimecodeProvider.GetTimecode
inline struct FTimecode UTimecodeProvider::GetTimecode() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimecodeProvider.GetTimecode");

	struct GetTimecode_Params {
		
		struct FTimecode ReturnValue;

	}; GetTimecode_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.TimecodeProvider.GetSynchronizationState
inline enum class ETimecodeProviderSynchronizationState UTimecodeProvider::GetSynchronizationState() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimecodeProvider.GetSynchronizationState");

	struct GetSynchronizationState_Params {
		
		enum class ETimecodeProviderSynchronizationState ReturnValue;

	}; GetSynchronizationState_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.TimecodeProvider.GetQualifiedFrameTime
inline struct FQualifiedFrameTime UTimecodeProvider::GetQualifiedFrameTime() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimecodeProvider.GetQualifiedFrameTime");

	struct GetQualifiedFrameTime_Params {
		
		struct FQualifiedFrameTime ReturnValue;

	}; GetQualifiedFrameTime_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.TimecodeProvider.GetFrameRate
inline struct FFrameRate UTimecodeProvider::GetFrameRate() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimecodeProvider.GetFrameRate");

	struct GetFrameRate_Params {
		
		struct FFrameRate ReturnValue;

	}; GetFrameRate_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.TimecodeProvider.GetDelayedTimecode
inline struct FTimecode UTimecodeProvider::GetDelayedTimecode() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimecodeProvider.GetDelayedTimecode");

	struct GetDelayedTimecode_Params {
		
		struct FTimecode ReturnValue;

	}; GetDelayedTimecode_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.TimecodeProvider.GetDelayedQualifiedFrameTime
inline struct FQualifiedFrameTime UTimecodeProvider::GetDelayedQualifiedFrameTime() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimecodeProvider.GetDelayedQualifiedFrameTime");

	struct GetDelayedQualifiedFrameTime_Params {
		
		struct FQualifiedFrameTime ReturnValue;

	}; GetDelayedQualifiedFrameTime_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.TextRenderComponent.SetYScale
inline void UTextRenderComponent::SetYScale(float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetYScale");

	struct SetYScale_Params {
		float Value;
	}; SetYScale_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TextRenderComponent.SetXScale
inline void UTextRenderComponent::SetXScale(float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetXScale");

	struct SetXScale_Params {
		float Value;
	}; SetXScale_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TextRenderComponent.SetWorldSize
inline void UTextRenderComponent::SetWorldSize(float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetWorldSize");

	struct SetWorldSize_Params {
		float Value;
	}; SetWorldSize_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TextRenderComponent.SetVertSpacingAdjust
inline void UTextRenderComponent::SetVertSpacingAdjust(float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetVertSpacingAdjust");

	struct SetVertSpacingAdjust_Params {
		float Value;
	}; SetVertSpacingAdjust_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TextRenderComponent.SetVerticalAlignment
inline void UTextRenderComponent::SetVerticalAlignment(enum class EVerticalTextAligment Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetVerticalAlignment");

	struct SetVerticalAlignment_Params {
		enum class EVerticalTextAligment Value;
	}; SetVerticalAlignment_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TextRenderComponent.SetTextRenderColor
inline void UTextRenderComponent::SetTextRenderColor(struct FColor Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetTextRenderColor");

	struct SetTextRenderColor_Params {
		struct FColor Value;
	}; SetTextRenderColor_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TextRenderComponent.SetTextMaterial
inline void UTextRenderComponent::SetTextMaterial(struct UMaterialInterface Material) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetTextMaterial");

	struct SetTextMaterial_Params {
		struct UMaterialInterface Material;
	}; SetTextMaterial_Params Params;

	Params.Material = Material;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TextRenderComponent.SetText
inline void UTextRenderComponent::SetText(struct FString Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetText");

	struct SetText_Params {
		struct FString Value;
	}; SetText_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TextRenderComponent.SetHorizSpacingAdjust
inline void UTextRenderComponent::SetHorizSpacingAdjust(float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetHorizSpacingAdjust");

	struct SetHorizSpacingAdjust_Params {
		float Value;
	}; SetHorizSpacingAdjust_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TextRenderComponent.SetHorizontalAlignment
inline void UTextRenderComponent::SetHorizontalAlignment(enum class EHorizTextAligment Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetHorizontalAlignment");

	struct SetHorizontalAlignment_Params {
		enum class EHorizTextAligment Value;
	}; SetHorizontalAlignment_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TextRenderComponent.SetFont
inline void UTextRenderComponent::SetFont(struct UFont Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetFont");

	struct SetFont_Params {
		struct UFont Value;
	}; SetFont_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TextRenderComponent.K2_SetText
inline void UTextRenderComponent::K2_SetText(struct FText& Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.K2_SetText");

	struct K2_SetText_Params {
		struct FText& Value;
	}; K2_SetText_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Value = Params.Value;

}

// Function Engine.TextRenderComponent.GetTextWorldSize
inline struct FVector UTextRenderComponent::GetTextWorldSize() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.GetTextWorldSize");

	struct GetTextWorldSize_Params {
		
		struct FVector ReturnValue;

	}; GetTextWorldSize_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.TextRenderComponent.GetTextLocalSize
inline struct FVector UTextRenderComponent::GetTextLocalSize() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.GetTextLocalSize");

	struct GetTextLocalSize_Params {
		
		struct FVector ReturnValue;

	}; GetTextLocalSize_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.TimelineComponent.Stop
inline void UTimelineComponent::Stop() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.Stop");

	struct Stop_Params {
		
	}; Stop_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimelineComponent.SetVectorCurve
inline void UTimelineComponent::SetVectorCurve(struct UCurveVector NewVectorCurve, struct FName VectorTrackName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetVectorCurve");

	struct SetVectorCurve_Params {
		struct UCurveVector NewVectorCurve;
		struct FName VectorTrackName;
	}; SetVectorCurve_Params Params;

	Params.NewVectorCurve = NewVectorCurve;
	Params.VectorTrackName = VectorTrackName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimelineComponent.SetTimelineLengthMode
inline void UTimelineComponent::SetTimelineLengthMode(enum class ETimelineLengthMode NewLengthMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetTimelineLengthMode");

	struct SetTimelineLengthMode_Params {
		enum class ETimelineLengthMode NewLengthMode;
	}; SetTimelineLengthMode_Params Params;

	Params.NewLengthMode = NewLengthMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimelineComponent.SetTimelineLength
inline void UTimelineComponent::SetTimelineLength(float NewLength) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetTimelineLength");

	struct SetTimelineLength_Params {
		float NewLength;
	}; SetTimelineLength_Params Params;

	Params.NewLength = NewLength;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimelineComponent.SetPlayRate
inline void UTimelineComponent::SetPlayRate(float NewRate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetPlayRate");

	struct SetPlayRate_Params {
		float NewRate;
	}; SetPlayRate_Params Params;

	Params.NewRate = NewRate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimelineComponent.SetPlaybackPosition
inline void UTimelineComponent::SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetPlaybackPosition");

	struct SetPlaybackPosition_Params {
		float NewPosition;
		bool bFireEvents;
		bool bFireUpdate;
	}; SetPlaybackPosition_Params Params;

	Params.NewPosition = NewPosition;
	Params.bFireEvents = bFireEvents;
	Params.bFireUpdate = bFireUpdate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimelineComponent.SetNewTime
inline void UTimelineComponent::SetNewTime(float NewTime) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetNewTime");

	struct SetNewTime_Params {
		float NewTime;
	}; SetNewTime_Params Params;

	Params.NewTime = NewTime;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimelineComponent.SetLooping
inline void UTimelineComponent::SetLooping(bool bNewLooping) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetLooping");

	struct SetLooping_Params {
		bool bNewLooping;
	}; SetLooping_Params Params;

	Params.bNewLooping = bNewLooping;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimelineComponent.SetLinearColorCurve
inline void UTimelineComponent::SetLinearColorCurve(struct UCurveLinearColor NewLinearColorCurve, struct FName LinearColorTrackName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetLinearColorCurve");

	struct SetLinearColorCurve_Params {
		struct UCurveLinearColor NewLinearColorCurve;
		struct FName LinearColorTrackName;
	}; SetLinearColorCurve_Params Params;

	Params.NewLinearColorCurve = NewLinearColorCurve;
	Params.LinearColorTrackName = LinearColorTrackName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimelineComponent.SetIgnoreTimeDilation
inline void UTimelineComponent::SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetIgnoreTimeDilation");

	struct SetIgnoreTimeDilation_Params {
		bool bNewIgnoreTimeDilation;
	}; SetIgnoreTimeDilation_Params Params;

	Params.bNewIgnoreTimeDilation = bNewIgnoreTimeDilation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimelineComponent.SetFloatCurve
inline void UTimelineComponent::SetFloatCurve(struct UCurveFloat NewFloatCurve, struct FName FloatTrackName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetFloatCurve");

	struct SetFloatCurve_Params {
		struct UCurveFloat NewFloatCurve;
		struct FName FloatTrackName;
	}; SetFloatCurve_Params Params;

	Params.NewFloatCurve = NewFloatCurve;
	Params.FloatTrackName = FloatTrackName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimelineComponent.ReverseFromEnd
inline void UTimelineComponent::ReverseFromEnd() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.ReverseFromEnd");

	struct ReverseFromEnd_Params {
		
	}; ReverseFromEnd_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimelineComponent.Reverse
inline void UTimelineComponent::Reverse() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.Reverse");

	struct Reverse_Params {
		
	}; Reverse_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimelineComponent.PlayFromStart
inline void UTimelineComponent::PlayFromStart() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.PlayFromStart");

	struct PlayFromStart_Params {
		
	}; PlayFromStart_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimelineComponent.Play
inline void UTimelineComponent::Play() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.Play");

	struct Play_Params {
		
	}; Play_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimelineComponent.OnRep_Timeline
inline void UTimelineComponent::OnRep_Timeline() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.OnRep_Timeline");

	struct OnRep_Timeline_Params {
		
	}; OnRep_Timeline_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimelineComponent.IsReversing
inline bool UTimelineComponent::IsReversing() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.IsReversing");

	struct IsReversing_Params {
		
		bool ReturnValue;

	}; IsReversing_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.TimelineComponent.IsPlaying
inline bool UTimelineComponent::IsPlaying() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.IsPlaying");

	struct IsPlaying_Params {
		
		bool ReturnValue;

	}; IsPlaying_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.TimelineComponent.IsLooping
inline bool UTimelineComponent::IsLooping() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.IsLooping");

	struct IsLooping_Params {
		
		bool ReturnValue;

	}; IsLooping_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.TimelineComponent.GetTimelineLength
inline float UTimelineComponent::GetTimelineLength() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.GetTimelineLength");

	struct GetTimelineLength_Params {
		
		float ReturnValue;

	}; GetTimelineLength_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.TimelineComponent.GetPlayRate
inline float UTimelineComponent::GetPlayRate() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.GetPlayRate");

	struct GetPlayRate_Params {
		
		float ReturnValue;

	}; GetPlayRate_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.TimelineComponent.GetPlaybackPosition
inline float UTimelineComponent::GetPlaybackPosition() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.GetPlaybackPosition");

	struct GetPlaybackPosition_Params {
		
		float ReturnValue;

	}; GetPlaybackPosition_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.TimelineComponent.GetIgnoreTimeDilation
inline bool UTimelineComponent::GetIgnoreTimeDilation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.GetIgnoreTimeDilation");

	struct GetIgnoreTimeDilation_Params {
		
		bool ReturnValue;

	}; GetIgnoreTimeDilation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.VectorFieldComponent.SetIntensity
inline void UVectorFieldComponent::SetIntensity(float NewIntensity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VectorFieldComponent.SetIntensity");

	struct SetIntensity_Params {
		float NewIntensity;
	}; SetIntensity_Params Params;

	Params.NewIntensity = NewIntensity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.VOIPTalker.RegisterWithPlayerState
inline void UVOIPTalker::RegisterWithPlayerState(struct APlayerState OwningState) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VOIPTalker.RegisterWithPlayerState");

	struct RegisterWithPlayerState_Params {
		struct APlayerState OwningState;
	}; RegisterWithPlayerState_Params Params;

	Params.OwningState = OwningState;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.VOIPTalker.GetVoiceLevel
inline float UVOIPTalker::GetVoiceLevel() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VOIPTalker.GetVoiceLevel");

	struct GetVoiceLevel_Params {
		
		float ReturnValue;

	}; GetVoiceLevel_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.VOIPTalker.CreateTalkerForPlayer
inline struct UVOIPTalker UVOIPTalker::CreateTalkerForPlayer(struct APlayerState OwningState) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VOIPTalker.CreateTalkerForPlayer");

	struct CreateTalkerForPlayer_Params {
		struct APlayerState OwningState;
		struct UVOIPTalker ReturnValue;

	}; CreateTalkerForPlayer_Params Params;

	Params.OwningState = OwningState;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.VOIPTalker.BPOnTalkingEnd
inline void UVOIPTalker::BPOnTalkingEnd() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VOIPTalker.BPOnTalkingEnd");

	struct BPOnTalkingEnd_Params {
		
	}; BPOnTalkingEnd_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.VOIPTalker.BPOnTalkingBegin
inline void UVOIPTalker::BPOnTalkingBegin(struct UAudioComponent AudioComponent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VOIPTalker.BPOnTalkingBegin");

	struct BPOnTalkingBegin_Params {
		struct UAudioComponent AudioComponent;
	}; BPOnTalkingBegin_Params Params;

	Params.AudioComponent = AudioComponent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.WindDirectionalSourceComponent.SetWindType
inline void UWindDirectionalSourceComponent::SetWindType(enum class EWindSourceType InNewType) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WindDirectionalSourceComponent.SetWindType");

	struct SetWindType_Params {
		enum class EWindSourceType InNewType;
	}; SetWindType_Params Params;

	Params.InNewType = InNewType;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.WindDirectionalSourceComponent.SetStrength
inline void UWindDirectionalSourceComponent::SetStrength(float InNewStrength) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WindDirectionalSourceComponent.SetStrength");

	struct SetStrength_Params {
		float InNewStrength;
	}; SetStrength_Params Params;

	Params.InNewStrength = InNewStrength;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.WindDirectionalSourceComponent.SetSpeed
inline void UWindDirectionalSourceComponent::SetSpeed(float InNewSpeed) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WindDirectionalSourceComponent.SetSpeed");

	struct SetSpeed_Params {
		float InNewSpeed;
	}; SetSpeed_Params Params;

	Params.InNewSpeed = InNewSpeed;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.WindDirectionalSourceComponent.SetRadius
inline void UWindDirectionalSourceComponent::SetRadius(float InNewRadius) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WindDirectionalSourceComponent.SetRadius");

	struct SetRadius_Params {
		float InNewRadius;
	}; SetRadius_Params Params;

	Params.InNewRadius = InNewRadius;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.WindDirectionalSourceComponent.SetMinimumGustAmount
inline void UWindDirectionalSourceComponent::SetMinimumGustAmount(float InNewMinGust) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WindDirectionalSourceComponent.SetMinimumGustAmount");

	struct SetMinimumGustAmount_Params {
		float InNewMinGust;
	}; SetMinimumGustAmount_Params Params;

	Params.InNewMinGust = InNewMinGust;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.WindDirectionalSourceComponent.SetMaximumGustAmount
inline void UWindDirectionalSourceComponent::SetMaximumGustAmount(float InNewMaxGust) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WindDirectionalSourceComponent.SetMaximumGustAmount");

	struct SetMaximumGustAmount_Params {
		float InNewMaxGust;
	}; SetMaximumGustAmount_Params Params;

	Params.InNewMaxGust = InNewMaxGust;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.WorldSettings.OnRep_WorldGravityZ
inline void AWorldSettings::OnRep_WorldGravityZ() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldSettings.OnRep_WorldGravityZ");

	struct OnRep_WorldGravityZ_Params {
		
	}; OnRep_WorldGravityZ_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

